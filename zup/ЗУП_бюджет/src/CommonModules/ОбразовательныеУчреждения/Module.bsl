
#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы) Экспорт 
	
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.РаспределениеНагрузки")); 
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РаспределениеНагрузки", "ДатаИзменения", "КадровыйУчет", "Организация");
	
КонецПроцедуры

Процедура ИсключитьНачисленияПедагогическихДолжностейИзПроверкиШтатногоРасписания(ДанныеОЗанятыхПозициях) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВОбразовательномУчреждении") Тогда 
		Возврат;
	КонецЕсли;
	
	СписокПозиций = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОЗанятыхПозициях, "ПозицияШтатногоРасписания", Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПозиций", СписокПозиций);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтатноеРасписание.Ссылка
	               |ИЗ
	               |	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейПедагогическихРаботников КАК СвойстваДолжностейПедагогическихРаботников
	               |		ПО ШтатноеРасписание.Должность = СвойстваДолжностейПедагогическихРаботников.Должность
	               |			И (ШтатноеРасписание.Ссылка В (&СписокПозиций))
	               |			И (СвойстваДолжностейПедагогическихРаботников.ЯвляетсяПедагогическойДолжностью)";
				   
	ПедагогическиеПозиции = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПедагогическиеПозиции.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ДанныеПозиции Из ДанныеОЗанятыхПозициях Цикл
		Если ПедагогическиеПозиции[ДанныеПозиции.ПозицияШтатногоРасписания] <> Неопределено Тогда
			ДанныеПозиции.ДанныеОНачислениях = Новый Массив;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПоказателиОбразовательныхУчреждений(ПараметрыПланаВидовРасчета) Экспорт 
	
	РаботаВОбразовательномУчреждении = Константы.РаботаВОбразовательномУчреждении.Получить();
	ПараметрыПоказателей = ПараметрыПланаВидовРасчета.ПараметрыПоказателей;
	СозданныеЭлементы    = ПараметрыПланаВидовРасчета.СсылкиПоказателиРасчетаЗарплаты;
	
	Если ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы И РаботаВОбразовательномУчреждении Тогда 
		
		ОписаниеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "Педнагрузка";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Педнагрузка'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Педнагрузка'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 0;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		Справочники.ПоказателиРасчетаЗарплаты.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
		ОписаниеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "НормаПеднагрузки";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Норма педнагрузки'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Норма педнагр.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 0;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		Справочники.ПоказателиРасчетаЗарплаты.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
		ОписаниеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "ОкладПреподавателя";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад преподавателя'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Ставка'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = ПараметрыПоказателей.ОкладТарифТочность;
		ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		Справочники.ПоказателиРасчетаЗарплаты.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
		ОписаниеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "КлассноеРуководство";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Классное руководство'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Классн. рук.'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = ПараметрыПоказателей.ОкладТарифТочность;
		ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		Справочники.ПоказателиРасчетаЗарплаты.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
		ОписаниеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "ПроверкаТетрадей";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент за тетради'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% тетради'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 0;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		Справочники.ПоказателиРасчетаЗарплаты.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияОбразовательныхУчреждений(ПараметрыПланаВидовРасчета, СвойстваНачислений, КоллекторНачислений) Экспорт 
	
	РаботаВОбразовательномУчреждении = Константы.РаботаВОбразовательномУчреждении.Получить();
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 		= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код						= НСтр("ru = 'ОКЛПР'");
	Описание.Наименование				= НСтр("ru = 'Оплата преподавателей по окладу'");
	Описание.КраткоеНаименование 		= НСтр("ru = 'Оклад преп.'");
	Описание.ФормулаРасчета 			= "ОкладПреподавателя * Педнагрузка / НормаПеднагрузки * ВремяВДнях / НормаДней";
	Описание.ВидВремени 				= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	ЗапрашиваемыеПоказатели				= Новый Массив;;
	ЗапрашиваемыеПоказатели.Добавить("ОкладПреподавателя");
	ЗапрашиваемыеПоказатели.Добавить("Педнагрузка");
	ЗапрашиваемыеПоказатели.Добавить("НормаПеднагрузки");
	Описание.ЗапрашиваемыеПоказатели 	= ЗапрашиваемыеПоказатели;
	Описание.СсылкаНаОбъект 			= ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаПреподавателейПоОкладу;
	Описание.КлючевыеСвойства 			= "Ссылка";
	Если ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы И РаботаВОбразовательномУчреждении Тогда
		ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаПреподавателейПоОкладу = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчета.Начисления.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'КЛРУК'");
	Описание.Наименование			= НСтр("ru = 'Доплата за классное руководство'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Доплата классн. рук.'");
	Описание.ФормулаРасчета 		= "КлассноеРуководство * ВремяВДнях / НормаДней";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("КлассноеРуководство");
	Описание.СсылкаНаОбъект 		= ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаКлассноеРуководство;
	Описание.КлючевыеСвойства 		= "Ссылка";
	Если ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы И РаботаВОбразовательномУчреждении Тогда
		ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаКлассноеРуководство = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчета.Начисления.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРТЕТ'");
	Описание.Наименование			= НСтр("ru = 'Доплата за проверку тетрадей'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Доплата пров. тетр.'");
	Описание.ФормулаРасчета 		= "РасчетнаяБаза * ПроверкаТетрадей / 100";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроверкаТетрадей");
	Описание.ОтборБазовых 			= Неопределено;
	Описание.СсылкаНаОбъект 		= ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаПроверкуТетрадей;
	Описание.КлючевыеСвойства 		= "Ссылка";
	Если ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы И РаботаВОбразовательномУчреждении Тогда
		ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаПроверкуТетрадей = Описание.СсылкаНаОбъект;
		НачислениеОбъект = КоллекторНачислений[Описание.СсылкаНаОбъект];
		Если НачислениеОбъект <> Неопределено И НачислениеОбъект.ДополнительныеСвойства.Свойство("ОтборБазовых") Тогда 
			НачислениеОбъект.ДополнительныеСвойства.ОтборБазовых = Неопределено;
			Если НачислениеОбъект.БазовыеВидыРасчета.Найти(ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаПреподавателейПоОкладу, "ВидРасчета") = Неопределено Тогда 
				НачислениеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаПреподавателейПоОкладу;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчета.Начисления.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачисленияРаспределенияНагрузки(ПараметрыПланаВидовРасчета) Экспорт 
	
	РаботаВОбразовательномУчреждении = Константы.РаботаВОбразовательномУчреждении.Получить();
	
	Если ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы И РаботаВОбразовательномУчреждении Тогда
		
		ОплатаПреподавателейПоОкладу = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаПреподавателейПоОкладу;
		Если ЗначениеЗаполнено(ОплатаПреподавателейПоОкладу) Тогда 
			НаборЗаписей = РегистрыСведений.НачисленияРаспределенияНагрузки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Начисление.Установить(ОплатаПреподавателейПоОкладу);
			НаборЗаписей.Добавить().Начисление = ОплатаПреподавателейПоОкладу;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ДоплатаЗаКлассноеРуководство = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаКлассноеРуководство;
		Если ЗначениеЗаполнено(ДоплатаЗаКлассноеРуководство) Тогда 
			НаборЗаписей = РегистрыСведений.НачисленияРаспределенияНагрузки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Начисление.Установить(ДоплатаЗаКлассноеРуководство);
			НаборЗаписей.Добавить().Начисление = ДоплатаЗаКлассноеРуководство;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ДоплатаЗаПроверкуТетрадей = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаПроверкуТетрадей;
		Если ЗначениеЗаполнено(ДоплатаЗаПроверкуТетрадей) Тогда 
			НаборЗаписей = РегистрыСведений.НачисленияРаспределенияНагрузки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Начисление.Установить(ДоплатаЗаПроверкуТетрадей);
			НаборЗаписей.Добавить().Начисление = ДоплатаЗаПроверкуТетрадей;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьФормуЭлементаСправочникаДолжности(Форма, ИмяГруппы = "ГруппаПедагогическаяДолжность") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВОбразовательномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СвойстваДолжностейПедагогическихРаботников", 
		Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.СвойстваДолжностейПедагогическихРаботников"), , , Истина));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Элементы = Форма.Элементы;
	ГруппаФормы = Элементы.Найти(ИмяГруппы); 
	
	Если Элементы.Найти("ЯвляетсяПедагогическойДолжностью") = Неопределено Тогда
		ПолеПедагогическаяДолжность = Элементы.Добавить("ЯвляетсяПедагогическойДолжностью", Тип("ПолеФормы"), ГруппаФормы);
		ПолеПедагогическаяДолжность.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеПедагогическаяДолжность.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ПолеПедагогическаяДолжность.ПутьКДанным = "СвойстваДолжностейПедагогическихРаботников.ЯвляетсяПедагогическойДолжностью";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжности(Форма) Экспорт	
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВОбразовательномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СвойстваДолжностейПедагогическихРаботников) Тогда
		Возврат;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.СвойстваДолжностейПедагогическихРаботников.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Должность = Форма.Объект.Ссылка;
	МенеджерЗаписи.Прочитать();
	
	ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СвойстваДолжностейПедагогическихРаботников);
	
КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеДолжности(Форма, Ссылка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВОбразовательномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СвойстваДолжностейПедагогическихРаботников) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СвойстваДолжностейПедагогическихРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Должность.Установить(Ссылка);
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Форма.СвойстваДолжностейПедагогическихРаботников);
	Запись.Должность = Ссылка;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.УстановитьДополнительноеСвойствоПропуститьОбновлениеЗависимыхСтажей(НаборЗаписей.ДополнительныеСвойства);
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получение настроек начислений для редактирования настроек особенностей предприятия.
Функция НачисленияРаспределенияНагрузки() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление,
	|	ВЫБОР
	|		КОГДА НачисленияРаспределенияНагрузки.Начисление ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Выбрано
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачисленияРаспределенияНагрузки КАК НачисленияРаспределенияНагрузки
	|		ПО Начисления.Ссылка = НачисленияРаспределенияНагрузки.Начисление
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.РеквизитДопУпорядочивания";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции 

// Сохранение настроек из формы редактирования настроек особенностей предприятия
Процедура ЗаписатьНастройкиОбразовательногоУчреждения(Настройки) Экспорт
	
	Константы.РаботаВОбразовательномУчреждении.Установить(Настройки.РаботаВОбразовательномУчреждении);
	
	НаборЗаписей = РегистрыСведений.НачисленияРаспределенияНагрузки.СоздатьНаборЗаписей();
	Для каждого СтрокаТЗ Из Настройки.НачисленияПреподавателей Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

Функция НастройкиПрограммыБюджетногоУчреждения(НастройкиПрограммы) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКонстант = "РаботаВОбразовательномУчреждении";
	Настройка = Константы.СоздатьНабор(СтрокаКонстант);
	Настройка.Прочитать();
	ЗаполнитьЗначенияСвойств(НастройкиПрограммы, Настройка, СтрокаКонстант);

КонецФункции

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.РаботаВОбразовательномУчреждении.Установить(Параметры.ПараметрыПрограммы.РаботаВОбразовательномУчреждении);

КонецПроцедуры

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.РаспределениеНагрузки);
	
КонецПроцедуры

Процедура ДополнитьВидамиСтажаДолжностей(Должность, ВидыСтажаДолжностей) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РаботаВОбразовательномУчреждении") Тогда
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(Должность) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			Запрос.УстановитьПараметр("Должность", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должность, "Должность"));
		Иначе
			Запрос.УстановитьПараметр("Должность", Должность);
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СвойстваДолжностейПедагогическихРаботников.ЯвляетсяПедагогическойДолжностью КАК ЯвляетсяПедагогическойДолжностью
			|ИЗ
			|	РегистрСведений.СвойстваДолжностейПедагогическихРаботников КАК СвойстваДолжностейПедагогическихРаботников
			|ГДЕ
			|	СвойстваДолжностейПедагогическихРаботников.Должность = &Должность
			|	И СвойстваДолжностейПедагогическихРаботников.ЯвляетсяПедагогическойДолжностью";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСтажаДолжностей, ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДолжностиСАвтоматическимУчетомПрерыванияСтажей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвойстваДолжностейПедагогическихРаботников.Должность КАК Должность
		|ИЗ
		|	РегистрСведений.СвойстваДолжностейПедагогическихРаботников КАК СвойстваДолжностейПедагогическихРаботников
		|ГДЕ
		|	СвойстваДолжностейПедагогическихРаботников.ЯвляетсяПедагогическойДолжностью";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Должность");
	
КонецФункции

Функция ВидыСтажейПоСвойствамДолжностиФормы(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВОбразовательномУчреждении") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ВидыСтажейПоСвойствамДолжностей(Форма.СвойстваДолжностейПедагогическихРаботников);
	
КонецФункции

Функция ВидыСтажейПоСвойствамДолжностей(СвойствамДолжностей) Экспорт
	
	Если СвойствамДолжностей.ЯвляетсяПедагогическойДолжностью Тогда
		ВидыСтажаДолжностей = ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста();
	Иначе
		ВидыСтажаДолжностей = Новый Массив;
	КонецЕсли;
	
	Возврат ВидыСтажаДолжностей;
	
КонецФункции

Функция ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста() Экспорт
	
	КатегорииСтажа = Новый Массив;
	КатегорииСтажа.Добавить(Перечисления.КатегорииСтажа.Педагогический);
	КатегорииСтажа.Добавить(Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический);
	
	Возврат Справочники.ВидыСтажа.ВидыСтажаПоКатегориям(КатегорииСтажа);
	
КонецФункции

#КонецОбласти
