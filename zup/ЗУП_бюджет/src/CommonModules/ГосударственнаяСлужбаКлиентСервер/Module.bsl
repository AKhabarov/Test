#Область СлужебныйПрограммныйИнтерфейс

Функция ТипыМногофункциональныхДокументов() Экспорт 
	
	МногофункциональныеДокументы = Новый Соответствие;
	
	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "НачисленияУтверждены";
	ОписаниеДокумента.ВторойОтветственный = Неопределено;
	ОписаниеДокумента.ВидУчета = "ПлановыеНачисления";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не утвержден.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПрисвоениеВоинскогоСпециальногоЗвания"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПрисвоениеВоинскогоСпециальногоЗванияСписком"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПрисвоениеКлассногоЧинаРанга"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПрисвоениеКлассногоЧинаРангаСписком"), ОписаниеДокумента);
	
	Возврат МногофункциональныеДокументы;
	
КонецФункции

#Область РедактированиеСведенийФизическогоЛицаОГосслужащем

// Дополняет описание формы ключевыми реквизитами и дополнительными данными
//
//
// Параметры:
//  ОписаниеФормы - структура - см. СотрудникиКлиентСервер.ОбщееОписаниеДополнительнойФормы()
//	ИмяОткрываемойФормы - Строка - полный путь к открываемой форме
//  СтандартнаяОбработка - Булево - признак стандартной обработки, переданный из элемента управления.
//
Процедура ДополнитьОписаниеДополнительнойФормыСотрудника(ОписаниеФормы, ИмяОткрываемойФормы, СтандартнаяОбработка) Экспорт
	
	Если ИмяОткрываемойФормы = "ОбщаяФорма.РедактированиеСведенийОГосударственномСлужащем" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеФормы.КлючевыеРеквизиты.Вставить("ФизическоеЛицоСсылка");
		ОписаниеФормы.КлючевыеРеквизиты.Вставить("Заголовок", "ФизическоеЛицо.Наименование");
		
		ОписаниеФормы.ДополнительныеДанные.Вставить("СведенияОГосударственномСлужащем");
		ОписаниеФормы.ДополнительныеДанные.Вставить("СведенияОГосударственномСлужащемЗаписьПрочитана");
		
	ИначеЕсли ИмяОткрываемойФормы = "ЖурналДокументов.КадровыеДокументыВоеннослужащих.ФормаСписка" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеФормы.КлючевыеРеквизиты.Вставить("СотрудникСсылка");
		ОписаниеФормы.КлючевыеРеквизиты.Вставить("Заголовок", "Сотрудник.Наименование");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПланыВидовРасчета

// Инициализирует дополнительные элементы и события формы начисления
//
//
// Параметры:
//  Элемент - ЭлементУправления
//	Форма
//
Процедура НачислениеФормаЯвляетсяДенежнымСодержаниемПриИзменении(Элемент, Форма) Экспорт
	
	УстановитьСвойстваЭлементовСвойстваНачисленийГосударственныхСлужащих(Форма);
	
КонецПроцедуры

// Инициализирует дополнительные элементы и события формы начисления
//
//
// Параметры:
//  Элемент - ЭлементУправления
//	Форма
//
Процедура НачислениеФормаЯвляетсяДенежнымДовольствиемПриИзменении(Элемент, Форма) Экспорт
	
	УстановитьСвойстваЭлементовСвойстваНачисленийГосударственныхСлужащих(Форма);
	
КонецПроцедуры

// Обрабатывает событие "ПриИзменении" подключаемых реквизитов Гос.службы формы начислений.
//
// Параметры:
//  Элемент - ЭлементУправления
//	Форма
//
Процедура НачислениеФормаСвойствоНачисленияПриИзменении(Элемент, Форма) Экспорт

	ЗаполнитьЗначенияСвойств(Форма.СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение, Форма.СвойстваНачисленийГосударственныхСлужащих,,"ЯвляетсяДенежнымСодержанием,ЯвляетсяДенежнымДовольствием,ОтношениеКДенежномуДовольствию");
	
КонецПроцедуры

#КонецОбласти

#Область Должности

// Устанавливает отбор в форме справочника должностей по принадлежности к государственной слкжбе.
//
// Параметры:
//	Форма
//  Список - ДинамическийСписок - Список, в котором требуется установить отбор.
//
Процедура УстановитьЭлементыОтбораФормыСпискаСправочникаДолжности(Форма, Список) Экспорт 
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ЯвляетсяДолжностьюГосударственнойСлужбы");
	
	Если НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьГосударственнуюСлужбу") 
		И НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат;	
	КонецЕсли;
	
	Если Форма.ИспользоватьОтборДолжностейГосударственнойСлужбы Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЯвляетсяДолжностьюГосударственнойСлужбы",  Форма.ЯвляетсяДолжностьюГосударственнойСлужбы);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор в форме справочника штатного расписания по принадлежности позиций к государственной слкжбе.
//
// Параметры:
//	Форма
//  Список - ДинамическийСписок - Список, в котором требуется установить отбор.
//
Процедура УстановитьЭлементыОтбораФормыСпискаСправочникаШтатноеРасписание(Форма, Список) Экспорт 
	
	УстановитьЭлементыОтбораФормыСпискаСправочникаДолжности(Форма, Список);
	
КонецПроцедуры

// Обрабатывает событие "ПриИзменении" подключаемых реквизитов Гос.службы формы должностей.
//
// Параметры:
//  Элемент - ЭлементУправления
//	Форма
//
Процедура ДолжностьФормаСвойстваДолжностейГосударственнойСлужбыПриИзменении(Элемент, Форма) Экспорт

	ВидДолжностиГосударственнойСлужбы = Форма.СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы;
	КатегорияДолжностиГосударственнойСлужбы = Форма.СвойстваДолжностейГосударственнойСлужбы.КатегорияДолжностиГосударственнойСлужбы;
	ГруппаДолжностиГосударственнойСлужбы = Форма.СвойстваДолжностейГосударственнойСлужбы.ГруппаДолжностиГосударственнойСлужбы;
	ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность = Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность;
	ДолжностьПрокурора = Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора;
	ДолжностьСудьи = Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи;
	
	Если Элемент.Имя = "ВидДолжностиГосударственнойСлужбы" Тогда
		
		ДолжностьГосслужбы = ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ДолжностьГосударственнойГражданскойСлужбы")
			Или ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ДолжностьМуниципальнойСлужбы");
			
		Форма.Элементы.КатегорияДолжностиГосударственнойСлужбы.АвтоОтметкаНезаполненного = ДолжностьГосслужбы;
		Форма.Элементы.КатегорияДолжностиГосударственнойСлужбы.ОтметкаНезаполненного = ДолжностьГосслужбы И Не ЗначениеЗаполнено(КатегорияДолжностиГосударственнойСлужбы);
		Форма.Элементы.КатегорияДолжностиГосударственнойСлужбы.Доступность = ДолжностьГосслужбы;
		
		Форма.Элементы.ГруппаДолжностиГосударственнойСлужбы.АвтоОтметкаНезаполненного = ДолжностьГосслужбы;
		Форма.Элементы.ГруппаДолжностиГосударственнойСлужбы.ОтметкаНезаполненного = ДолжностьГосслужбы И Не ЗначениеЗаполнено(ГруппаДолжностиГосударственнойСлужбы);
		Форма.Элементы.ГруппаДолжностиГосударственнойСлужбы.Доступность = ДолжностьГосслужбы;
	
		Форма.Элементы.ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность.Доступность = ДолжностьГосслужбы;
		
		Если Не ДолжностьГосслужбы Тогда
			Форма.СвойстваДолжностейГосударственнойСлужбы.КатегорияДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ПустаяСсылка");
			Форма.СвойстваДолжностейГосударственнойСлужбы.ГруппаДолжностиГосударственнойСлужбы    = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ПустаяСсылка");
			Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность = Ложь;
		КонецЕсли;
		
		ДолжностьГосударственнойГражданскойСлужбы = ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ДолжностьГосударственнойГражданскойСлужбы");
		ГосударственнаяДолжность = ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность");
			
		Форма.Элементы.ДолжностьПрокурора.Доступность = ДолжностьГосударственнойГражданскойСлужбы ИЛИ ГосударственнаяДолжность;
		Форма.Элементы.ДолжностьСудьи.Доступность = ГосударственнаяДолжность;
		
		Если НЕ (ДолжностьГосударственнойГражданскойСлужбы ИЛИ ГосударственнаяДолжность) Тогда
			Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора = Ложь;
		КонецЕсли;
		
		Если Не ГосударственнаяДолжность Тогда
			Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи = Ложь;
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма,"СвойстваДолжностейГосударственнойСлужбы.ИсчислениеСтраховогоСтажаПФРГосударственнойДолжности",Неопределено);
		КонецЕсли;
		
		Форма.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов = СтатистикаПерсоналаРасширенныйВызовСервера.ПолучитьСтрокуОтчетностиРасходовИЧисленностиПоВидуДолжности(ВидДолжностиГосударственнойСлужбы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ИсчислениеСтраховогоСтажаПФРГосударственнойДолжности", "Доступность", 
			ГосударственнаяДолжность);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции         

Функция ПредставлениеЗаданногоСотрудникуКлассногоЧина(Форма) Экспорт
	
	КлассныйЧинВоинскоеЗвание = "";
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьУчетКлассныхЧинов")
		И (Форма.ТекущийВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего")
			Или Форма.ТекущийВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровССотрудниками.КонтрактГосслужащего")) Тогда
		
		КлассныйЧинВоинскоеЗвание = НСтр("ru='Классный чин, ранг'");
		Если ЗначениеЗаполнено(Форма.КлассныйЧинРанг) Тогда
			КлассныйЧинВоинскоеЗвание = КлассныйЧинВоинскоеЗвание + ": "+ Форма.КлассныйЧинРанг;
		Иначе
			КлассныйЧинВоинскоеЗвание = КлассныйЧинВоинскоеЗвание + " " + НСтр("ru='не задан'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КлассныйЧинВоинскоеЗвание;
		
КонецФункции

Функция ПредставлениеЗаданногоСотрудникуВоинскогоЗвания(Форма) Экспорт
	
	КлассныйЧинВоинскоеЗвание = "";
		
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетДенежногоДовольствияВоеннослужащих") Тогда
		КлассныйЧинВоинскоеЗвание = НСтр("ru='Воинское звание'");
	Иначе
		КлассныйЧинВоинскоеЗвание = НСтр("ru='Специальное звание'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ВоинскоеСпециальноеЗвание) Тогда
		КлассныйЧинВоинскоеЗвание = КлассныйЧинВоинскоеЗвание + ": "+ Форма.ВоинскоеСпециальноеЗвание;
	Иначе
		КлассныйЧинВоинскоеЗвание = КлассныйЧинВоинскоеЗвание + " " + НСтр("ru='не задано'");
	КонецЕсли;
		
	Возврат КлассныйЧинВоинскоеЗвание;
		
КонецФункции

Процедура УстановитьДоступностьВидаИндексацииГосударственныхСлужащих(Форма) Экспорт
	Форма.Элементы.ВидИндексацииГосударственныхСлужащих.Доступность = Форма.ИндексацияГосударственныхСлужащих; 
	Форма.Элементы.ИндексацияВоеннослужащих.Доступность 			= Форма.ИндексацияГосударственныхСлужащих; 
КонецПроцедуры

#Область ПланыВидовРасчета

Процедура УстановитьСвойстваЭлементовСвойстваНачисленийГосударственныхСлужащих(Форма) Экспорт

	// денежное содержание
	ЯвляетсяДенежнымСодержанием = Форма.СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием;
	ОтношениеКДенежномуСодержанию = Форма.СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию;
	УчетПриРасчетеОтпуска = Форма.СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеОтпуска;
	УчетПриРасчетеСохраняемогоДенежногоСодержания = Форма.СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеСохраняемогоДенежногоСодержания;
	УчетВКомпенсацииПриУвольнении = Форма.СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении;
	
	Форма.Элементы.ОтношениеКДенежномуСодержанию.Доступность 				 = ЯвляетсяДенежнымСодержанием;
	Форма.Элементы.УчетПриРасчетеОтпуска.Доступность 						 = ЯвляетсяДенежнымСодержанием;
	Форма.Элементы.УчетПриРасчетеСохраняемогоДенежногоСодержания.Доступность = ЯвляетсяДенежнымСодержанием;
	Форма.Элементы.УчетВКомпенсацииПриУвольнении.Доступность 				 = ЯвляетсяДенежнымСодержанием;
	
	СтрокаСвойств = "ОтношениеКДенежномуСодержанию,УчетПриРасчетеОтпуска,УчетПриРасчетеСохраняемогоДенежногоСодержания,УчетВКомпенсацииПриУвольнении";
	Если ЯвляетсяДенежнымСодержанием Тогда
		ЗаполнитьЗначенияСвойств(Форма.СвойстваНачисленийГосударственныхСлужащих, Форма.СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение,СтрокаСвойств);
	Иначе
		ЗаполнитьЗначенияСвойств(Форма.СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение, Форма.СвойстваНачисленийГосударственныхСлужащих,СтрокаСвойств);
		Форма.СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию = ПредопределенноеЗначение("Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПустаяСсылка");
		Форма.СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеОтпуска = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка");
		Форма.СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеСохраняемогоДенежногоСодержания = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка");
		Форма.СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка");
	КонецЕсли;
	
	Форма.Элементы.ОтношениеКДенежномуСодержанию.АвтоОтметкаНезаполненного = ЯвляетсяДенежнымСодержанием;
	Форма.Элементы.УчетПриРасчетеОтпуска.АвтоОтметкаНезаполненного = ЯвляетсяДенежнымСодержанием;
	Форма.Элементы.УчетПриРасчетеСохраняемогоДенежногоСодержания.АвтоОтметкаНезаполненного = ЯвляетсяДенежнымСодержанием;
	Форма.Элементы.УчетВКомпенсацииПриУвольнении.АвтоОтметкаНезаполненного = ЯвляетсяДенежнымСодержанием;
	
	Форма.Элементы.ОтношениеКДенежномуСодержанию.ОтметкаНезаполненного = ЯвляетсяДенежнымСодержанием И Не ЗначениеЗаполнено(ОтношениеКДенежномуСодержанию);
	Форма.Элементы.УчетПриРасчетеОтпуска.ОтметкаНезаполненного = ЯвляетсяДенежнымСодержанием И Не ЗначениеЗаполнено(УчетПриРасчетеОтпуска);
	Форма.Элементы.УчетПриРасчетеСохраняемогоДенежногоСодержания.ОтметкаНезаполненного = ЯвляетсяДенежнымСодержанием И Не ЗначениеЗаполнено(УчетПриРасчетеСохраняемогоДенежногоСодержания);
	Форма.Элементы.УчетВКомпенсацииПриУвольнении.ОтметкаНезаполненного = ЯвляетсяДенежнымСодержанием И Не ЗначениеЗаполнено(УчетВКомпенсацииПриУвольнении);
	
	// денежное довольствие
	ЯвляетсяДенежнымДовольствием 						= Форма.СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием;
	ОтношениеКДенежномуДовольствию 						= Форма.СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию;
	ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим = Форма.СвойстваНачисленийГосударственныхСлужащих.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим;
	Форма.Элементы.ОтношениеКДенежномуДовольствию.Доступность 				 		= ЯвляетсяДенежнымДовольствием;
	Форма.Элементы.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.Доступность 	 = ЯвляетсяДенежнымДовольствием;
	
	СтрокаСвойств = "ОтношениеКДенежномуДовольствию";
	Если ЯвляетсяДенежнымДовольствием Тогда
		ЗаполнитьЗначенияСвойств(Форма.СвойстваНачисленийГосударственныхСлужащих, Форма.СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение,СтрокаСвойств);
	Иначе
		ЗаполнитьЗначенияСвойств(Форма.СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение, Форма.СвойстваНачисленийГосударственныхСлужащих,СтрокаСвойств);
		Форма.СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию 						= ПредопределенноеЗначение("Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ПустаяСсылка");
		Форма.СвойстваНачисленийГосударственныхСлужащих.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим = ПредопределенноеЗначение("Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ПустаяСсылка");
	КонецЕсли;
	
	Форма.Элементы.ОтношениеКДенежномуДовольствию.АвтоОтметкаНезаполненного = ЯвляетсяДенежнымДовольствием;
	Форма.Элементы.ОтношениеКДенежномуДовольствию.ОтметкаНезаполненного = ЯвляетсяДенежнымДовольствием И Не ЗначениеЗаполнено(ОтношениеКДенежномуДовольствию);
	
	Форма.Элементы.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.АвтоОтметкаНезаполненного = ЯвляетсяДенежнымДовольствием;
	Форма.Элементы.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ОтметкаНезаполненного = ЯвляетсяДенежнымДовольствием И Не ЗначениеЗаполнено(ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим);

КонецПроцедуры

#КонецОбласти

#Область Должности

Процедура УстановитьСвойстваЭлементовСвойстваДолжностейГосударственнойСлужбы(Форма) Экспорт

	ВидДолжностиГосударственнойСлужбы = Форма.СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы;
	КатегорияДолжностиГосударственнойСлужбы = Форма.СвойстваДолжностейГосударственнойСлужбы.КатегорияДолжностиГосударственнойСлужбы;
	ГруппаДолжностиГосударственнойСлужбы = Форма.СвойстваДолжностейГосударственнойСлужбы.ГруппаДолжностиГосударственнойСлужбы;
	ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность = Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность;
	ДолжностьПрокурора = Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора;
	ДолжностьСудьи = Форма.СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ИсчислениеСтраховогоСтажаПФРГосударственнойДолжности", "Доступность", 
			ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность"));
	
	ДолжностьГосслужбы = ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ДолжностьГосударственнойГражданскойСлужбы")
		Или ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ДолжностьМуниципальнойСлужбы");
		
	Форма.Элементы.ВидДолжностиГосударственнойСлужбы.АвтоОтметкаНезаполненного = Истина;
	Форма.Элементы.ВидДолжностиГосударственнойСлужбы.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ВидДолжностиГосударственнойСлужбы);	
			
	Форма.Элементы.КатегорияДолжностиГосударственнойСлужбы.АвтоОтметкаНезаполненного = ДолжностьГосслужбы;
	Форма.Элементы.КатегорияДолжностиГосударственнойСлужбы.ОтметкаНезаполненного = ДолжностьГосслужбы И Не ЗначениеЗаполнено(КатегорияДолжностиГосударственнойСлужбы);
	Форма.Элементы.КатегорияДолжностиГосударственнойСлужбы.Доступность = ДолжностьГосслужбы;
	
	Форма.Элементы.ГруппаДолжностиГосударственнойСлужбы.АвтоОтметкаНезаполненного = ДолжностьГосслужбы;
	Форма.Элементы.ГруппаДолжностиГосударственнойСлужбы.ОтметкаНезаполненного = ДолжностьГосслужбы И Не ЗначениеЗаполнено(ГруппаДолжностиГосударственнойСлужбы);
	Форма.Элементы.ГруппаДолжностиГосударственнойСлужбы.Доступность = ДолжностьГосслужбы;
	
	Форма.Элементы.ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность.Доступность = ДолжностьГосслужбы;
	
	ДолжностьГосударственнойГражданскойСлужбы = ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ДолжностьГосударственнойГражданскойСлужбы");
	ГосударственнаяДолжность = ВидДолжностиГосударственнойСлужбы = ПредопределенноеЗначение("Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность");
		
	Форма.Элементы.ДолжностьПрокурора.Доступность = ДолжностьГосударственнойГражданскойСлужбы ИЛИ ГосударственнаяДолжность;
	Форма.Элементы.ДолжностьСудьи.Доступность = ГосударственнаяДолжность;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти



