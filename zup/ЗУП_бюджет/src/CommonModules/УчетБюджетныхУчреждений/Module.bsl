
#Область СлужебныйПрограммныйИнтерфейс

// Определяет имя документа, которым выполняется отражение зарплаты в бухгалтерском учете.
//
Процедура ЗаполнитьИмяДокументаОтраженияВБухучете(ИмяДокументаОтраженияВБухучете) Экспорт
	ИмяДокументаОтраженияВБухучете = Метаданные.Документы.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений.ПолноеИмя();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.36";
	Обработчик.Процедура = "УчетБюджетныхУчреждений.УстановитьНастройкиУчетБюджетныхУчреждений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.36";
	Обработчик.Процедура = "УчетБюджетныхУчреждений.УстановитьНастройкиИспользоватьСтатьиФинансированияИРасходов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.36";
	Обработчик.Процедура = "УчетБюджетныхУчреждений.ПервоначальноеЗаполнениеОбъектовАналитикиБюджетногоУчета";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.106";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("117d3329-ab49-4626-8812-e85c44a5f0f5");
	Обработчик.Процедура = "УчетБюджетныхУчреждений.ЗаполнитьПодключаемыеХарактеристики";
	Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик'");
	
КонецПроцедуры

// Устанавливает значение параметра вывода сообщения в унифицированных формах
// бюджетного учета.
//
// Параметры:
//  ВыводитьСообщение  - Булево - признак вывода сообщения.
//
Процедура УстановитьПараметрВыводитьСообщениеВУнифицированныхФормах(ВыводитьСообщение) Экспорт

    Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
        Возврат;
    КонецЕсли;

    ВыводитьСообщение = Истина;

КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработкаФорма0504425(ТабличныйДокумент, ОбъектыПечати, ДанныеДокументов, ИдентификаторШаблона) Экспорт

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет." + ИдентификаторШаблона);
		
	ОбластьШапка 					= Макет.ПолучитьОбласть("Шапка");
	ОбластьРасчетСреднегоЗаработка 	= Макет.ПолучитьОбласть("РасчетСреднегоЗаработка");
	ОбластьПодвалПервогоЛиста 		= Макет.ПолучитьОбласть("ПодвалПервогоЛиста");
	ОбластьИсточникиФинансирования 	= Макет.ПолучитьОбласть("ИсточникиФинансирования");
	ОбластьПодвал 					= Макет.ПолучитьОбласть("Подвал");
	
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
			
		ТаблицыНачисленийУдержаний = НачисленияУдержанияДокумента(ДанныеДокумента.РеквизитыДокумента.Ссылка, ДанныеДокумента.РеквизитыДокумента.Начисление, ДанныеДокумента.РеквизитыДокумента.УчитыватьДвиженияДругихРегистраторов);
		НачисленияПоДокументу 	= ТаблицыНачисленийУдержаний.Начисления;
		НДФЛПоДокументу 		= ТаблицыНачисленийУдержаний.НДФЛ;
		УдержанияПоДокументу 	= ТаблицыНачисленийУдержаний.Удержания;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда 
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВывестиШапку0504425(ТабличныйДокумент, ОбластьШапка, ДанныеДокумента.РеквизитыДокумента, ДанныеДокумента.КадровыеДанныеСотрудника);
		
		ВывестиРасчетСреднегоЗаработка0504425(ТабличныйДокумент, ОбластьРасчетСреднегоЗаработка, ДанныеДокумента.ДанныеРасчетаСреднего, ДанныеДокумента.ПараметрыРасчета.НачалоРасчетногоПериода);
		
		ВывестиПодвалПервогоЛиста0504425(ТабличныйДокумент, ОбластьПодвалПервогоЛиста, ДанныеДокумента.РеквизитыДокумента);
		
		Отбор = Новый Структура("Сотрудник", ДанныеДокумента.РеквизитыДокумента.Сотрудник);
		СтрокиНачисленияПоСотруднику = НачисленияПоДокументу.НайтиСтроки(Отбор);
		Если СтрокиНачисленияПоСотруднику.Количество() > 0 Тогда
			НачисленияПоСотруднику = НачисленияПоДокументу.Скопировать(СтрокиНачисленияПоСотруднику);
		Иначе	
			НачисленияПоСотруднику = НачисленияПоДокументу.СкопироватьКолонки();
		КонецЕсли;

		ВывестиИсточникиФинансирования0504425(ТабличныйДокумент, ОбластьИсточникиФинансирования, ДанныеДокумента.ДанныеРасчетаСреднего, НачисленияПоСотруднику);
		
		Отбор = Новый Структура("ФизическоеЛицо", ДанныеДокумента.КадровыеДанныеСотрудника.ФизическоеЛицо);
		
		СтрокиНДФЛПоСотруднику = НДФЛПоДокументу.НайтиСтроки(Отбор);
		Если СтрокиНДФЛПоСотруднику.Количество() > 0 Тогда
			НДФЛПоСотруднику = НДФЛПоДокументу.Скопировать(СтрокиНДФЛПоСотруднику);
		Иначе	
			НДФЛПоСотруднику = НДФЛПоДокументу.СкопироватьКолонки();
		КонецЕсли;
		
		НДФЛПоСотруднику.Сортировать("Результат Убыв");
		
		СтрокиУдержанийПоСотруднику = УдержанияПоДокументу.НайтиСтроки(Отбор);
		Если СтрокиУдержанийПоСотруднику.Количество() > 0 Тогда
			УдержанияПоСотруднику = УдержанияПоДокументу.Скопировать(СтрокиУдержанийПоСотруднику);
		Иначе	
			УдержанияПоСотруднику = УдержанияПоДокументу.СкопироватьКолонки();
		КонецЕсли;
		
		УдержанияПоСотруднику.Сортировать("Результат Убыв");
		
		ВывестиПодвал0504425(ТабличныйДокумент, ОбластьПодвал, ДанныеДокумента.РеквизитыДокумента, НачисленияПоСотруднику, УдержанияПоСотруднику, НДФЛПоСотруднику);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.РеквизитыДокумента.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет из результатов заполнения строки, которые не относятся к выбранному источнику финансового обеспечения
//	Параметры
//		РезультатЗаполнения - Структура, таблицы значений с именами ТЧ документа
//		ПараметрыДляЗаполнения - структура, описание см. ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляЗаполненияТаблицДокумента.
//
Процедура ОтобратьРезультатыЗаполненияТаблицДокумента(РезультатЗаполнения, ПараметрыДляЗаполнения) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетВРазрезеИФО")
		Или Не ЗначениеЗаполнено(ПараметрыДляЗаполнения.ИсточникФинансовогоОбеспечения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИФО", ПараметрыДляЗаполнения.ИсточникФинансовогоОбеспечения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиФинансирования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений КАК СвойстваСтатейФинансирования
	|		ПО (СтатьиФинансирования.Ссылка = СвойстваСтатейФинансирования.СтатьяФинансирования
	|				И СвойстваСтатейФинансирования.ИсточникФинансовогоОбеспечения = &ИФО)";
	СтатьиФинансирования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого КлючИЗначение Из РезультатЗаполнения Цикл
		
		Таблица = КлючИЗначение.Значение;
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТЗ Из Таблица Цикл
			Если СтатьиФинансирования.Найти(СтрокаТЗ.СтатьяФинансирования) = Неопределено Тогда
				СтрокиКУдалению.Добавить(СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
			Таблица.Удалить(СтрокаТЗ);
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры


#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеСтатьиБюджетноеФинансирование()
	
	Возврат Новый Структура("Код, Наименование", НСтр("ru = 'БФ'"), НСтр("ru = 'Бюджетное финансирование'"));
	
КонецФункции

Функция ОписаниеСтатьиВнебюджетноеФинансирование() Экспорт

	Возврат Новый Структура("Код, Наименование", НСтр("ru = 'ВБФ'"), НСтр("ru = 'Внебюджетное финансирование'"));

КонецФункции

Функция СоздатьСтатьюФинансированияПоОписанию(ОписаниеСтатьи, КФО)

	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСтатьиФинансирования = Справочники.СтатьиФинансированияЗарплата;
	СтатьяФинансирования = СправочникСтатьиФинансирования.НайтиПоНаименованию(ОписаниеСтатьи.Наименование, Истина);
	Если СтатьяФинансирования.Пустая() Тогда
		
		НовыйЭлемент = СправочникСтатьиФинансирования.СоздатьЭлемент();
		НовыйЭлемент.Наименование = ОписаниеСтатьи.Наименование;
		НовыйЭлемент.Код = ОписаниеСтатьи.Код;
		НовыйЭлемент.Записать();
		СтатьяФинансирования = НовыйЭлемент.Ссылка;
		
		МенеджерЗаписи = РегистрыСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КФО = КФО;
		МенеджерЗаписи.СтатьяФинансирования = СтатьяФинансирования;
		МенеджерЗаписи.Записать();
		
	Иначе
		
		СтатьяФинансированияОбъект = СтатьяФинансирования.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(СтатьяФинансированияОбъект.Код) Тогда
			СтатьяФинансированияОбъект.Код = ОписаниеСтатьи.Код;
			СтатьяФинансированияОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтатьяФинансирования;

КонецФункции

Функция НаименованиеОсновногоСпособаОтражения()

	Возврат НСтр("ru = '401.20 Расходы текущего финансового года'");

КонецФункции

Функция СоздатьСпособОтраженияПоНаименованию(НаименованиеСпособаОтражения)

	УстановитьПривилегированныйРежим(Истина);
	
	СправочникиСпособыОтраженияЗарплатыВБухУчете = Справочники.СпособыОтраженияЗарплатыВБухУчете;
	СпособОтражения = СправочникиСпособыОтраженияЗарплатыВБухУчете.НайтиПоНаименованию(НаименованиеСпособаОтражения, Истина);
	Если СпособОтражения.Пустая() Тогда
		
		НовыйЭлемент = СправочникиСпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
		НовыйЭлемент.Наименование = НаименованиеСпособаОтражения;
		НовыйЭлемент.Записать();
		СпособОтражения = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СпособОтражения;

КонецФункции

Функция БухучетОрганизацииПоУмолчанию() Экспорт

	ОписаниеСтатьи = ОписаниеСтатьиБюджетноеФинансирование();
	СтатьяФинансирования = Справочники.СтатьиФинансированияЗарплата.НайтиПоНаименованию(ОписаниеСтатьи.Наименование, Истина);
	Если СтатьяФинансирования.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БухучетЗарплатыОрганизаций.СтатьяФинансирования
		|ИЗ
		|	РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплатыОрганизаций
		|ГДЕ
		|	БухучетЗарплатыОрганизаций.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)";
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			СтатьяФинансирования = СоздатьСтатьюФинансированияПоОписанию(ОписаниеСтатьи, Перечисления.КФО.Бюджет);
		Иначе
			Выборка = Результат.Выбрать();
			СтатьяФинансирования = Выборка.СтатьяФинансирования;
		КонецЕсли;	
		
	КонецЕсли;	
	
	НаименованиеСпособаОтражения = НаименованиеОсновногоСпособаОтражения();
	СпособОтражения = Справочники.СпособыОтраженияЗарплатыВБухУчете.НайтиПоНаименованию(НаименованиеСпособаОтражения, Истина);
	Если СпособОтражения.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БухучетЗарплатыОрганизаций.СпособОтраженияЗарплатыВБухучете
		|ИЗ
		|	РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплатыОрганизаций
		|ГДЕ
		|	БухучетЗарплатыОрганизаций.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)";
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			СпособОтражения = СоздатьСпособОтраженияПоНаименованию(НаименованиеСпособаОтражения);
		Иначе
			Выборка = Результат.Выбрать();
			СпособОтражения = Выборка.СпособОтраженияЗарплатыВБухучете;
		КонецЕсли;	
		
	КонецЕсли;
	
	Настройки = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
	Настройки.СтатьяФинансирования = СтатьяФинансирования;
	Настройки.СпособОтраженияЗарплатыВБухучете = СпособОтражения;
	Настройки.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД;
	Настройки.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц();
	
	Возврат Настройки;

КонецФункции 

Процедура ДобавитьПоказателиБюджетныхУчреждений(ТаблицаПоказателей) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьВоеннуюСлужбу", 
		"Рассчитывается денежное довольствие", "Особенности государственного учреждения", "Военная служба", "Ложь", 2, 1, 1);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДобавитьПоказателиВоеннойСлужбы(ТаблицаПоказателей);
	КонецЕсли;
				
	Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьГосударственнуюСлужбу", 
			"Рассчитывается денежное содержание государственных служащих", "Особенности государственного учреждения", "Государственная служба", "Ложь", 2, 2, 1);	
			
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда	
	
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы", 
		"Для лиц замещающих должности государственной гражданской службы
		|отпуска, командировки, компенсации отпусков и т.д. оплачиваются",
		"Особенности государственного учреждения",
		"Государственная служба",
		"Ложь", 2, 2, 2);	
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьРасчетДенежногоСодержанияСудей", 
		"Рассчитывается денежное содержание (вознаграждение) судей",
		"Особенности государственного учреждения",
		"Государственная служба",
		"Ложь", 2, 2, 3);
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьСохраняемоеДенежноеСодержаниеСудей", 
		"Для лиц замещающих должности судей
		|отпуска, командировки, компенсации отпусков и т.д. оплачиваются",
		"Особенности государственного учреждения",
		"Государственная служба",
		"Ложь", 2, 2, 4);	
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьГосударственныеМуниципальныеДолжности", 
		"Рассчитывается денежное содержание (вознаграждение) лиц замещающих государственные должности",
		"Особенности государственного учреждения",
		"Государственная служба",
		"Ложь", 2, 2, 5);
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы", 
		"Для лиц замещающих государственные должности
		|отпуска, командировки, компенсации отпусков и т.д. оплачиваются",
		"Особенности государственного учреждения",
		"Государственная служба",
		"Ложь", 2, 2, 6);		
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьРасчетДенежногоСодержанияПрокуроров", 
		"Использовать расчет денежного содержания прокуроров, следователей",
		"Особенности государственного учреждения", "Государственная служба", "Ложь", 2, 2, 7);
			
	КонецЕсли;		
		
	Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьМуниципальнуюСлужбу", 
		"Рассчитывается денежное содержание муниципальных служащих", "Особенности государственного учреждения", "Муниципальная служба", "Ложь", 2, 3, 1);	
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда		
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"Константы",
		"ИспользоватьУчетКлассныхЧинов",
		"Ведется учет классных чинов муниципальных служащих",
		"Особенности государственного учреждения",
		"Муниципальная служба", "Ложь", 2, 3, 2);
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"Константы",
		"НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим", 
		"Муниципальным служащим, имеющим классный чин, выплачивается",
		"Особенности государственного учреждения",
		"Муниципальная служба", "Ложь", 2, 3, 3);
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы", 
		"Для лиц замещающих должности муниципальной службы
		|отпуска, командировки, компенсации отпусков и т.д. оплачиваются",
		"Особенности государственного учреждения",
		"Муниципальная служба",
		"Ложь", 2, 3, 4);
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьГосударственныеМуниципальныеДолжности", 
		"Рассчитывается денежное содержание (вознаграждение) лиц замещающих муниципальные должности",
		"Особенности государственного учреждения",
		"Муниципальная служба",
		"Ложь", 2, 3, 5);
		
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей,
		"РегистрСведений.НастройкиГосударственнойСлужбы",
		"ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы", 
		"Для лиц замещающих муниципальные должности
		|отпуска, командировки, компенсации отпусков и т.д. оплачиваются",
		"Особенности государственного учреждения",
		"Муниципальная служба",
		"Ложь", 2, 3, 6);
		
	КонецЕсли;		
	
	Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "РаботаВМедицинскомУчреждении", 
		"Рассчитывается зарплата в медицинском учреждении", "Особенности государственного учреждения", "Работа в медицинском учреждении", "Ложь", 2, 4, 1);	
		
	Если ПолучитьФункциональнуюОпцию("РаботаВМедицинскомУчреждении") Тогда			
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА", 
			"Использовать тарификационную отчетность учреждений ФМБА", "Особенности государственного учреждения", "Работа в медицинском учреждении", "Ложь", 2, 4, 2);	
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников", 
			"Использовать выгрузку в федеральный регистр медицинских работников", "Особенности государственного учреждения", "Работа в медицинском учреждении", "Ложь", 2, 4, 3);	
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьДоступКНаркотическимСредствам", 
			"Использовать доступ к наркотическим средствам", "Особенности государственного учреждения", "Работа в медицинском учреждении", "Ложь", 2, 4, 4);	
	КонецЕсли;
		
	Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "РаботаВОбразовательномУчреждении", 
		"Рассчитывается зарплата в образовательном учреждении высшего и среднего профессионального образования", "Особенности государственного учреждения", "Работа в образовательном учреждении", "Ложь", 2, 5, 1);	

КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Переопределение методов Общего модуля ОбновлениеКонфигурацииПереопределяемый.

// Определяет короткое имя (идентификатор) конфигурации.
//
// Параметры:
//	КраткоеИмя - Строка- короткое имя конфигурации.
//
Процедура ПриОпределенииКраткогоИмениКонфигурации(КраткоеИмя) Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		КраткоеИмя = "StateHRMBase";
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		КраткоеИмя = "StateHRMCorp";
	Иначе
		КраткоеИмя = "StateHRM";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение методов Общего модуля РегламентированнаяОтчетностьПереопределяемый.

// Функция возвращает идентификатор конфигурации.
// Длина идентификатора не должна превышать 8 символов.
//
// Пример:
//  Возврат "БПКОРП";
//
Функция ИДКонфигурации() Экспорт
	
	Возврат "ЗГУ";
	
КонецФункции

#Область РедактированиеСвойствСтатьиФинансирования

Процедура ДополнитьФормуСтатьиФинансирования(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СвойстваСтатейФинансированияУчетБюджетныхУчреждений", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.СвойстваСтатейФинансированияУчетБюджетныхУчреждений"),,,Истина));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Если Форма.Элементы.Найти("ГруппаБюджетныйУчет") = Неопределено Тогда
		
		ГруппаФормы = Форма.Элементы.Вставить("ГруппаБюджетныйУчет", Тип("ГруппаФормы"));
		ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаФормы.ОтображатьЗаголовок = Ложь;
		ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		ПолеВвода = Форма.Элементы.Вставить("КФО", Тип("ПолеФормы"), ГруппаФормы);
		ПолеВвода.ПутьКДанным = "СвойстваСтатейФинансированияУчетБюджетныхУчреждений.КФО";
		ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
		ПолеВвода.Заголовок = "КФО";
		ПолеВвода.Подсказка = НСтр("ru = 'Код финансового обеспечения'");
		ПолеВвода.Ширина = 4;
		ПолеВвода.РастягиватьПоГоризонтали = Ложь;
		ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
		
		ПолеВвода = Форма.Элементы.Вставить("ИсточникФинансовогоОбеспечения", Тип("ПолеФормы"), ГруппаФормы);
		ПолеВвода.ПутьКДанным = "СвойстваСтатейФинансированияУчетБюджетныхУчреждений.ИсточникФинансовогоОбеспечения";
		ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
		ПолеВвода.Заголовок = "ИФО";
		ПолеВвода.Подсказка = НСтр("ru = 'Источник финансового обеспечения'");
		ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеСтатьиФинансирования(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СтатьяФинансирования = Форма.Объект.Ссылка;
	МенеджерЗаписи.Прочитать();
	
	ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СвойстваСтатейФинансированияУчетБюджетныхУчреждений);

КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеСтатьиФинансирования(Форма, Ссылка) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Форма.СвойстваСтатейФинансированияУчетБюджетныхУчреждений);
	МенеджерЗаписи.СтатьяФинансирования = Ссылка;
	МенеджерЗаписи.Записать();

КонецПроцедуры

#КонецОбласти

#Область НастройкаРасчетаЗарплаты

Процедура ДополнитьФормуНастройкаРасчетаЗарплаты(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НастройкиБюджетныхУчреждений", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.НастройкиБюджетныхУчреждений"),,,Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НастройкиБюджетныхУчрежденийПрежняя", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.НастройкиБюджетныхУчреждений"),,,Ложь));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);  
	
	Если Форма.Элементы.Найти("ИспользоватьУчетВРазрезеИФО") = Неопределено Тогда
		
		ГруппаФормы = Форма.Элементы.ГруппаИспользованиеИФО;
		
		ПолеВвода = Форма.Элементы.Вставить("ИспользоватьУчетВРазрезеИФО", Тип("ПолеФормы"), ГруппаФормы);
		ПолеВвода.ПутьКДанным = "НастройкиБюджетныхУчреждений.ИспользоватьУчетВРазрезеИФО";
		ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеВвода.Заголовок = НСтр("ru = 'Использовать учет в разрезе ИФО (источников финансового обеспечения)'");
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ИспользоватьУчетВРазрезеИФОПриИзменении");
		Форма.Элементы.Переместить(ПолеВвода, ГруппаФормы, Форма.Элементы.ИспользоватьИФООписание);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНастройкиНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПараметрыНастроек.НастройкиБюджетныхУчреждений Тогда
		Настройки = РегистрыСведений.НастройкиБюджетныхУчреждений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиБюджетныхУчреждений);
		Настройки.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ЗначенияСохраняемыхРеквизитовФормыНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("НастройкиБюджетныхУчреждений", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиБюджетныхУчреждений, Метаданные.РегистрыСведений.НастройкиБюджетныхУчреждений));

КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ДополнитьФормуНачальнаяНастройкаПрограммы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НастройкиБюджетныхУчреждений", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.НастройкиБюджетныхУчреждений"),,,Истина));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);  
	
	Если Форма.Элементы.Найти("ИспользоватьУчетВРазрезеИФО") = Неопределено Тогда
		
		ГруппаФормы = Форма.Элементы.ГруппаИспользованиеИФО;
		
		ПолеВвода = Форма.Элементы.Вставить("ИспользоватьУчетВРазрезеИФО", Тип("ПолеФормы"), ГруппаФормы);
		ПолеВвода.ПутьКДанным = "НастройкиБюджетныхУчреждений.ИспользоватьУчетВРазрезеИФО";
		ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеВвода.Заголовок = НСтр("ru = 'Использовать учет в разрезе ИФО (источников финансового обеспечения)'");
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ПолеВвода.ШрифтЗаголовка = Новый Шрифт(Форма.Элементы.ИспользуетсяВнебюджетнаяДеятельность.ШрифтЗаголовка);
		
	КонецЕсли;

КонецПроцедуры

// Заполняет структуру значениями реквизитов формы, которые необходимо сохранить.
// Параметры:
//		СохраняемыеРеквизиты - структура.
//
Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВБюджетномУчреждении Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("НастройкиБюджетныхУчреждений", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиБюджетныхУчреждений, Метаданные.РегистрыСведений.НастройкиБюджетныхУчреждений));

КонецПроцедуры
		
Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("НастройкиБюджетныхУчреждений") Тогда
		ЗаполнитьЗначенияСвойств(Форма["НастройкиБюджетныхУчреждений"], СохраненныеНастройки["НастройкиБюджетныхУчреждений"]);
	КонецЕсли;

КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиБюджетныхУчреждений.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиБюджетныхУчреждений);
	ЗаполнитьЗначенияСвойств(Форма.НастройкиБюджетныхУчреждений, НастройкиСтруктура);

КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиБюджетныхУчреждений.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиБюджетныхУчреждений);
	НастройкиПрограммы.Вставить("НастройкиБюджетныхУчреждений", НастройкиСтруктура);

КонецПроцедуры

Процедура ВывестиНастройкиПрограммы(НастройкиПрограммы, ТабДокумент) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("MXL_НачальнаяНастройкаПрограммыБюджетноеУчреждение");
	Область = Макет.ПолучитьОбласть("УчетПоСтатьямФинансирования");
	
	НастройкиБюджетныхУчреждений = НастройкиПрограммы.НастройкиБюджетныхУчреждений;
	ЗаполнитьЗначенияСвойств(Область.Параметры, НастройкиБюджетныхУчреждений);
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Область) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабДокумент.Вывести(Область);

КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиБюджетныхУчреждений.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиБюджетныхУчреждений);
	Настройки.Записать();
	
	Если Параметры.ПараметрыПрограммы.ИспользуетсяВнебюджетнаяДеятельность Тогда
		ОписаниеСтатьи = ОписаниеСтатьиВнебюджетноеФинансирование();
		СоздатьСтатьюФинансированияПоОписанию(ОписаниеСтатьи, Перечисления.КФО.Внебюджет);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНастройкиОсобенностейБюджетногоУчреждения(Параметры, АдресХранилища) Экспорт
	
	Константы.ИспользоватьГосударственнуюСлужбу.Установить(Параметры.ИспользоватьГосударственнуюСлужбу);
	Константы.ИспользоватьМуниципальнуюСлужбу.Установить(Параметры.ИспользоватьМуниципальнуюСлужбу);
	Константы.ИспользоватьУчетКлассныхЧинов.Установить(Параметры.ИспользоватьУчетКлассныхЧинов);
	Константы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим.Установить(Параметры.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
		Модуль.ЗаполнитьПараметрыПланВидовРасчетаСохраненнымиЗначениями(Параметры.ПараметрыПланВидовРасчета);
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.СформироватьПланВидовРасчетаПоНастройкам(Параметры.ПараметрыПланВидовРасчета);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
		Модуль.НачальнаяНастройкаПрограммыСохранитьНастройки(Параметры.ПараметрыПланВидовРасчета);
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("НачальнаяНастройкаПрограммыЗК", "НачальнаяСтраница", Параметры.ТекущаяСтраницаИмя);
	
	УчетРабочегоВремениРасширенный.СоздатьГрафикРаботыПятидневка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура ПервоначальноеЗаполнениеОбъектовАналитикиБюджетногоУчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиРасходов.Код,
	|	СтатьиРасходов.Ссылка
	|ИЗ
	|	Справочник.СтатьиРасходовЗарплата КАК СтатьиРасходов";
	Результат = Запрос.Выполнить();
	
	СуществующиеСтатьи = Новый Структура;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СуществующиеСтатьи.Вставить("Статья"+Выборка.Код, Выборка.Ссылка);
	КонецЦикла;
	
	// Поля классификатора
	// Code
	// ParentCode
	// Name
	Классификатор = ПолучитьОбщийМакет("СтатьиРасходовБюджетныйУчет").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Классификатор).Данные;
	
	Родитель = Неопределено;
	
	Для каждого СтрокаТаблицы Из КлассификаторТаблица Цикл
		
		КодСтатьи = СтрокаТаблицы.Code;
		Если Не СуществующиеСтатьи.Свойство("Статья"+КодСтатьи) Тогда
			
			НовыйЭлемент = Справочники.СтатьиРасходовЗарплата.СоздатьЭлемент();
			
			КодРодителя = СтрокаТаблицы.ParentCode;
			Если КодРодителя <> "0" Тогда
				СуществующиеСтатьи.Свойство("Статья"+КодРодителя,Родитель);
				НовыйЭлемент.Родитель = Родитель;
			КонецЕсли;
			
			НовыйЭлемент.Код = КодСтатьи;
			НовыйЭлемент.Наименование = СтрокаТаблицы.Name;
			НовыйЭлемент.Записать();
			
			СуществующиеСтатьи.Вставить("Статья"+КодСтатьи, НовыйЭлемент.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеСтатьи = ОписаниеСтатьиБюджетноеФинансирование();
	СоздатьСтатьюФинансированияПоОписанию(ОписаниеСтатьи, Перечисления.КФО.Бюджет);
	
	НаименованиеСпособаОтражения = НаименованиеОсновногоСпособаОтражения();
	СоздатьСпособОтраженияПоНаименованию(НаименованиеСпособаОтражения);

КонецПроцедуры

Процедура УстановитьНастройкиИспользоватьСтатьиФинансированияИРасходов() Экспорт

	ИспользоватьСтатьиФинансирования = Константы.ИспользоватьСтатьиФинансированияЗарплата.Получить();
	Если Не ИспользоватьСтатьиФинансирования Тогда
		Константы.ИспользоватьСтатьиФинансированияЗарплата.Установить(Истина);
	КонецЕсли;
	
	ИспользоватьСтатьиРасходов = Константы.ИспользоватьСтатьиРасходовЗарплата.Получить();
	Если Не ИспользоватьСтатьиРасходов Тогда
		Константы.ИспользоватьСтатьиРасходовЗарплата.Установить(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьНастройкиУчетБюджетныхУчреждений() Экспорт
	
	РаботаВБюджетномУчреждении = Константы.РаботаВБюджетномУчреждении.Получить();
	Если Не РаботаВБюджетномУчреждении Тогда
		Константы.РаботаВБюджетномУчреждении.Установить(Истина);
	КонецЕсли;
	
	РаботаВХозрасчетнойОрганизации = Константы.РаботаВХозрасчетнойОрганизации.Получить();
	Если РаботаВХозрасчетнойОрганизации Тогда
		Константы.РаботаВХозрасчетнойОрганизации.Установить(Ложь);
	КонецЕсли;

КонецПроцедуры

Функция ТекстЗапросаДанныеДокументаОбработкаДокументовОтражениеЗарплатыВБухучете(Знач ТекстЗапроса) Экспорт

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#НачисленнаяЗарплатаИВзносы", "Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений.НачисленнаяЗарплатаИВзносы");
	Возврат ТекстЗапроса;

КонецФункции

Процедура ОбновитьВидОперацииУдержаниеПоПрочимОперациямСРаботниками()Экспорт

	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений.УдержаннаяЗарплата КАК ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата
	|ГДЕ
	|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержаннаяЗарплата.Ссылка КАК Ссылка,
	|	УдержаннаяЗарплата.НомерСтроки КАК НомерСтроки,
	|	УдержаннаяЗарплата.ФизическоеЛицо,
	|	УдержаннаяЗарплата.Подразделение,
	|	ВЫБОР
	|		КОГДА УдержаннаяЗарплата.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками)
	|		ИНАЧЕ УдержаннаяЗарплата.ВидОперации
	|	КОНЕЦ КАК ВидОперации,
	|	УдержаннаяЗарплата.СтатьяФинансирования,
	|	УдержаннаяЗарплата.СтатьяРасходов,
	|	УдержаннаяЗарплата.Сумма,
	|	УдержаннаяЗарплата.Контрагент
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений.УдержаннаяЗарплата КАК УдержаннаяЗарплата
	|ГДЕ
	|	УдержаннаяЗарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТДокументы.Ссылка
	|			ИЗ
	|				ВТДокументы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ссылка = Выборка.Ссылка;
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ДокументОбъект.УдержаннаяЗарплата.Очистить();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.УдержаннаяЗарплата.Добавить(), Выборка);
		КонецЦикла;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПодключаемыеХарактеристики(ПараметрыОбновления = Неопределено) Экспорт
	
	ИсточникиХарактеристик = Новый Массив;
	ИсточникиХарактеристик.Добавить("СвойстваДолжностейМедицинскихРаботников");
	ИсточникиХарактеристик.Добавить("СвойстваДолжностейПедагогическихРаботников");
	ПодключаемыеХарактеристикиЗарплатаКадры.ОбновитьНаборыПодключаемыхХарактеристик(Ложь, ИсточникиХарактеристик, ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область КонтекстноеДополнениеСхемКомпоновки

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоляКадровыхДанныхСотрудников = Неопределено;
	Если Не ДополнительныеПоля.Свойство("_", ДополнительныеПоляКадровыхДанныхСотрудников) Тогда
		ДополнительныеПоляКадровыхДанныхСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
	КонецЕсли;
	
	СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "КФО";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "СвойстваСтатейФинансирования.КФО";
	СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='КФО'");
	СтрокаДополнительногоПоля.ПутьПоляСКД = "СтатьяФинансирования.КФО";
	
	ОписаниеСоединения = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
	ОписаниеСоединения.Источник = "РегистрСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений";
	ОписаниеСоединения.Псевдоним = "СвойстваСтатейФинансирования";
	ОписаниеСоединения.Условие = "Данные.СтатьяФинансирования = СвойстваСтатейФинансирования.СтатьяФинансирования";
	ОписаниеСоединения.ПсевдонимИсточникаСвязи = "Данные";
	
	СтрокаДополнительногоПоля.Соединения.Добавить(ОписаниеСоединения);
	
	СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "ИсточникФинансовогоОбеспечения";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "СвойстваСтатейФинансирования.ИсточникФинансовогоОбеспечения";
	СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='ИФО'");
	СтрокаДополнительногоПоля.ПутьПоляСКД = "СтатьяФинансирования.ИсточникФинансовогоОбеспечения";
	
	СтрокаДополнительногоПоля.Соединения.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписаниеСоединения));
	
	ДополнительныеПоля.Вставить("_", ДополнительныеПоляКадровыхДанныхСотрудников);
	
КонецПроцедуры

Процедура ДополнитьАнализЗадолженностиПоЗарплате(Объект) Экспорт
	НаборДанных = Объект.СхемаКомпоновкиДанных.НаборыДанных[0];
	
	Если СтрНайти(НаборДанных.Запрос, "СвойстваСтатейФинансированияУчетБюджетныхУчреждений") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Прибавить левое соединение
	ФрагментЗапросаДляПоиска = "ВТСотрудникиМесяцыОстатков КАК СотрудникиМесяцы";
	ФрагментЗапросаДляЗамены = "ВТСотрудникиМесяцыОстатков КАК СотрудникиМесяцы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений КАК СвойстваСтатейФинансирования
	|	ПО (СвойстваСтатейФинансирования.СтатьяФинансирования = СотрудникиМесяцы.СтатьяФинансирования)";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	// Прибавить поля запроса
	ФрагментЗапросаДляПоиска = "СотрудникиМесяцы.СтатьяРасходов КАК СтатьяРасходов";
	ФрагментЗапросаДляЗамены = "СотрудникиМесяцы.СтатьяРасходов КАК СтатьяРасходов,
	|	СвойстваСтатейФинансирования.КФО КАК КФО,
	|	СвойстваСтатейФинансирования.ИсточникФинансовогоОбеспечения КАК ИсточникФинансовогоОбеспечения";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	// Описать выбираемые поля
	ФрагментЗапросаДляПоиска = ",
	|	СтатьяРасходов.*}";
	ФрагментЗапросаДляЗамены = ",
	|	СтатьяРасходов.*,
	|	КФО.*,
	|	ИсточникФинансовогоОбеспечения.*}";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	// Описать поля отборов
	ФрагментЗапросаДляПоиска = "СотрудникиМесяцы.СтатьяРасходов.*}";
	ФрагментЗапросаДляЗамены = "СотрудникиМесяцы.СтатьяРасходов.*,
	|	КФО.*,
	|	ИсточникФинансовогоОбеспечения.*}";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	ДобавитьПоляИсточникФинансовогоОбеспеченияИКФО(НаборДанных);
	
КонецПроцедуры

Процедура ДополнитьШтатноеРасписание(Объект) Экспорт
	НаборДанных = Объект.СхемаКомпоновкиДанных.НаборыДанных[0];
	
	Если СтрНайти(НаборДанных.Запрос, "СвойстваСтатейФинансированияУчетБюджетныхУчреждений") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Прибавить левое соединение
	ФрагментЗапросаДляПоиска = "ВТШтатноеРасписаниеСводное КАК ШтатноеРасписание";
	ФрагментЗапросаДляЗамены = "ВТШтатноеРасписаниеСводное КАК ШтатноеРасписание
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений КАК СвойстваСтатейФинансирования
	|	ПО (СвойстваСтатейФинансирования.СтатьяФинансирования = ШтатноеРасписание.СтатьяФинансирования)";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	// Прибавить поля запроса
	ФрагментЗапросаДляПоиска = "ЕСТЬNULL(ШтатноеРасписание.ФОТПоПозицииМакс, 0) * ЕСТЬNULL(ТекущаяКадроваяРасстановка.КоличествоСтавок, 0) КАК ИспользованныйФОТМакс";
	ФрагментЗапросаДляЗамены = "ЕСТЬNULL(ШтатноеРасписание.ФОТПоПозицииМакс, 0) * ЕСТЬNULL(ТекущаяКадроваяРасстановка.КоличествоСтавок, 0) КАК ИспользованныйФОТМакс,
	|	СвойстваСтатейФинансирования.КФО КАК КФО,
	|	СвойстваСтатейФинансирования.ИсточникФинансовогоОбеспечения КАК ИсточникФинансовогоОбеспечения";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	ДобавитьПоляИсточникФинансовогоОбеспеченияИКФО(НаборДанных);
	
КонецПроцедуры

Процедура ДополнитьШтатноеРасписаниеНачисления(Объект) Экспорт
	НаборДанных = Объект.СхемаКомпоновкиДанных.НаборыДанных[0];
	
	Если СтрНайти(НаборДанных.Запрос, "СвойстваСтатейФинансированияУчетБюджетныхУчреждений") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Прибавить левое соединение
	ФрагментЗапросаДляПоиска = "ПредставленияШтатноеРасписание КАК ШтатноеРасписание";
	ФрагментЗапросаДляЗамены = "ПредставленияШтатноеРасписание КАК ШтатноеРасписание
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений КАК СвойстваСтатейФинансирования
	|	ПО (СвойстваСтатейФинансирования.СтатьяФинансирования = ШтатноеРасписание.СтатьяФинансирования)";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	// Прибавить поля запроса
	ФрагментЗапросаДляПоиска = "ШтатноеРасписание.Показатель КАК Показатель";
	ФрагментЗапросаДляЗамены = "ШтатноеРасписание.Показатель КАК Показатель,
	|	СвойстваСтатейФинансирования.КФО КАК КФО,
	|	СвойстваСтатейФинансирования.ИсточникФинансовогоОбеспечения КАК ИсточникФинансовогоОбеспечения";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	// Описать выбираемые поля
	ФрагментЗапросаДляПоиска = ",
	|	Показатель.*}";
	ФрагментЗапросаДляЗамены = ",
	|	Показатель.*,
	|	КФО.*,
	|	ИсточникФинансовогоОбеспечения.*}";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	// Описать поля отборов
	ФрагментЗапросаДляПоиска = "ШтатноеРасписание.Показатель.*}";
	ФрагментЗапросаДляЗамены = "ШтатноеРасписание.Показатель.*,
	|	КФО.*,
	|	ИсточникФинансовогоОбеспечения.*}";
	ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
	
	ДобавитьПоляИсточникФинансовогоОбеспеченияИКФО(НаборДанных);
	
КонецПроцедуры

Процедура ДобавитьПоляИсточникФинансовогоОбеспеченияИКФО(НаборДанных)
	
	Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.Поле = "КФО";
	Поле.Заголовок = "КФО";
	Поле.ПутьКДанным = "СтатьяФинансирования.КФО";
	
	Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.Поле = "ИсточникФинансовогоОбеспечения";
	Поле.Заголовок = "ИФО";
	Поле.ПутьКДанным = "СтатьяФинансирования.ИсточникФинансовогоОбеспечения";
	
КонецПроцедуры

Процедура ЗаменитьФрагментЗапроса(НаборДанных, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены)
	Если СтрНайти(НаборДанных.Запрос, ФрагментЗапросаДляПоиска) = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный текст запроса'");
	КонецЕсли;
	НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, ФрагментЗапросаДляПоиска, ФрагментЗапросаДляЗамены);
КонецПроцедуры

#КонецОбласти	

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КарточкаСправка0504417);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДанныеДляОтраженияВБухучетеБюджетныхУчреждений);
	
КонецПроцедуры

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений);
	
КонецПроцедуры

#КонецОбласти	

#Область Форма0504425

Процедура ВывестиШапку0504425(ТабличныйДокумент, ОбластьШапка, РеквизитыДокумента, КадровыеДанныеСотрудника)
	
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, РеквизитыДокумента);
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, КадровыеДанныеСотрудника);
	ОбластьШапка.Параметры.Дата = Формат(РеквизитыДокумента.ДатаДокумента, "ДЛФ=ДД");
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Ссылка)
		И ТипЗнч(РеквизитыДокумента.Ссылка) <> Тип("ДокументСсылка.Отпуск") Тогда
		
		ОснованиеДокумента = ОбластьШапка.Параметры.Основание;
		
		Если ТипЗнч(РеквизитыДокумента.Ссылка) = Тип("ДокументСсылка.Увольнение")
			Или ТипЗнч(РеквизитыДокумента.Ссылка) = Тип("ДокументСсылка.УвольнениеСписком") Тогда
			
			Основание = НСтр("ru='Приказ об увольнении'");
			
		Иначе
			Основание = НСтр("ru='Приказ'");
		КонецЕсли;
		
		Основание = Основание
			+ " №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.НомерДокумента, Истина, Истина)
			+ " " + НСтр("ru='от'") + " " + Формат(РеквизитыДокумента.ДатаДокумента, "ДЛФ=D");
		
		Если ЗначениеЗаполнено(ОснованиеДокумента) Тогда
			Основание = Основание + ", " + ОснованиеДокумента;
		КонецЕсли;
		
		ОбластьШапка.Параметры.Основание = Основание;
		
	КонецЕсли;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьШапка.Параметры.Подразделение) Тогда
		ОбластьШапка.Параметры.Подразделение = ОбластьШапка.Параметры.Подразделение.ПолноеНаименование();
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);

КонецПроцедуры

Процедура ВывестиРасчетСреднегоЗаработка0504425(ТабличныйДокумент, ОбластьРасчетСреднегоЗаработка, ДанныеРасчетаСреднегоЗаработка, Знач ТекущийМесяц)
	
	Заработок = Новый Соответствие;
	Для Каждого Элемент Из ДанныеРасчетаСреднегоЗаработка["Заработок"] Цикл
		Если Заработок.Получить(Элемент["Месяц"]) = Неопределено Тогда
			Заработок.Вставить(Элемент["Месяц"], Элемент["Учтено"]);
		Иначе 
			Заработок.Вставить(Элемент["Месяц"], Заработок.Получить(Элемент["Месяц"]) + Элемент["Учтено"]);
		КонецЕсли;			
	КонецЦикла;
	
	ОтработанноеВремя = Новый Соответствие;
	Для Каждого Элемент Из ДанныеРасчетаСреднегоЗаработка["ОтработанноеВремя"] Цикл
		Если ОтработанноеВремя.Получить(Элемент["Месяц"]) = Неопределено Тогда
			ОтработанноеВремя.Вставить(Элемент["Месяц"], Элемент["Учтено"]);
		Иначе 
			ОтработанноеВремя.Вставить(Элемент["Месяц"], ОтработанноеВремя.Получить(Элемент["Месяц"]) + Элемент["Учтено"]);
		КонецЕсли;			
	КонецЦикла;
	
	Для НомерКолонки = 1 По 12 Цикл 
		
		ОбластьРасчетСреднегоЗаработка.Параметры["Год" 		+ НомерКолонки] = ТекущийМесяц;
		ОбластьРасчетСреднегоЗаработка.Параметры["Месяцы" 	+ НомерКолонки] = ТекущийМесяц;
		
		ДнейРасчетногоПериода = 0;
		Сумма = 0;
		
		ЗаработокЗаМесяц = Заработок.Получить(ТекущийМесяц);
		Если ЗаработокЗаМесяц <> Неопределено Тогда 
			Сумма = ЗаработокЗаМесяц;
		КонецЕсли;
		
		ОтработаноЗаМесяц = ОтработанноеВремя.Получить(ТекущийМесяц);
		Если ОтработаноЗаМесяц <> Неопределено Тогда 
			ДнейРасчетногоПериода = ОтработаноЗаМесяц;
		КонецЕсли;
		
		ОбластьРасчетСреднегоЗаработка.Параметры["Дни" + НомерКолонки] = ДнейРасчетногоПериода;
		ОбластьРасчетСреднегоЗаработка.Параметры["Сумма" + НомерКолонки] = Сумма;
		
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		
	КонецЦикла;
	
	ОбластьРасчетСреднегоЗаработка.Параметры.ВсегоЗаработка 			= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["Заработок"], "Учтено");
	ОбластьРасчетСреднегоЗаработка.Параметры.ВсегоДнейРасчетногоПериода = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["ОтработанноеВремя"], "Учтено");
	
	ТабличныйДокумент.Вывести(ОбластьРасчетСреднегоЗаработка);
	
КонецПроцедуры

Процедура ВывестиПодвалПервогоЛиста0504425(ТабличныйДокумент, ОбластьПодвалПервогоЛиста, РеквизитыДокумента)
	
	ОбластьПодвалПервогоЛиста.Параметры.Заполнить(РеквизитыДокумента);
	ТабличныйДокумент.Вывести(ОбластьПодвалПервогоЛиста);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

Процедура ВывестиИсточникиФинансирования0504425(ТабличныйДокумент, ОбластьИсточникиФинансирования, ДанныеРасчетаСреднего, НачисленияПоСотруднику)
	
	КоличествоМесяцев = 12;

	ВсегоЗаработка 				= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего["Заработок"], "Учтено");
	ВсегоДнейРасчетногоПериода 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего["ОтработанноеВремя"], "Учтено");

	СтатьиФинансирования = НачисленияПоСотруднику.Скопировать();
	СтатьиФинансирования.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Для Каждого Элемент Из ДанныеРасчетаСреднего["Заработок"] Цикл
		НоваяСтрокаСтатейФинансирования = СтатьиФинансирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСтатейФинансирования, Элемент);
		НоваяСтрокаСтатейФинансирования.Сумма = Элемент.Учтено;
	КонецЦикла;
	
	СтатьиФинансирования.Свернуть("СтатьяФинансирования", "Сумма, ДнейТекущийМесяц, ДнейБудущийМесяц, ДнейВсего, 
															|Результат, РезультатТекущийМесяц, РезультатБудущийМесяц,
															|ОтпускРезультат, ОтпускРезультатТекущийМесяц, ОтпускРезультатБудущийМесяц,
															|ЗарплатаРезультат");
	СтатьиФинансирования.Сортировать("Сумма Убыв");
	
	КоличествоСтатейФинансирования = СтатьиФинансирования.Количество();
	
	Если КоличествоСтатейФинансирования > 3 Тогда
		Для Сч = 1 По 2 Цикл
			ОбластьИсточникиФинансирования.Параметры["ИмяИсточникаФинансирования" + Сч] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьиФинансирования[Сч-1].СтатьяФинансирования, "Наименование");
			ОбластьИсточникиФинансирования.Параметры["ИтогоСумма" + Сч] = СтатьиФинансирования[Сч-1].Сумма;
			ОбластьИсточникиФинансирования.Параметры["ИтогоДни" + Сч] = ВсегоДнейРасчетногоПериода;
			ОбластьИсточникиФинансирования.Параметры["СреднийДневной" + Сч] = СтатьиФинансирования[Сч-1].Сумма / ?(ВсегоДнейРасчетногоПериода = 0, 1, ВсегоДнейРасчетногоПериода);
			ОбластьИсточникиФинансирования.Параметры["СреднийЗаМесяц" + Сч] = СтатьиФинансирования[Сч-1].Сумма / КоличествоМесяцев;
			ОбластьИсточникиФинансирования.Параметры["ВсегоНачисленоОтпуск" + Сч] = СтатьиФинансирования[Сч-1].ОтпускРезультат;
			ОбластьИсточникиФинансирования.Параметры["ВсегоНачислено" + Сч] = СтатьиФинансирования[Сч-1].Результат;
			ОбластьИсточникиФинансирования.Параметры["ДнейТекущийМесяц" + Сч] = СтатьиФинансирования[Сч-1].ДнейТекущийМесяц;
			ОбластьИсточникиФинансирования.Параметры["ДнейБудущийМесяц" + Сч] = СтатьиФинансирования[Сч-1].ДнейБудущийМесяц;
			ОбластьИсточникиФинансирования.Параметры["ДнейВсего" + Сч] = СтатьиФинансирования[Сч-1].ДнейВсего;
			ОбластьИсточникиФинансирования.Параметры["НачисленоОтпускТек" + Сч] = СтатьиФинансирования[Сч-1].ОтпускРезультатТекущийМесяц;
			ОбластьИсточникиФинансирования.Параметры["НачисленоОтпускБуд" + Сч] = СтатьиФинансирования[Сч-1].ОтпускРезультатБудущийМесяц;
			ОбластьИсточникиФинансирования.Параметры["НачисленоЗарплаты" + Сч] = СтатьиФинансирования[Сч-1].ЗарплатаРезультат;
		КонецЦикла;
		Сумма = 0;
		Результат = 0;
		ОтпускРезультат = 0;
		ЗарплатаРезультат = 0;
		ОтпускРезультатТекущийМесяц = 0;
		ОтпускРезультатБудущийМесяц = 0;
		ДнейТекущийМесяц = 0;
		ДнейБудущийМесяц = 0;
		ДнейВсего = 0;
		Для Сч = 3 По КоличествоСтатейФинансирования Цикл
			Сумма = Сумма + СтатьиФинансирования[Сч-1].Сумма;
			Результат = Результат + СтатьиФинансирования[Сч-1].Результат;
			ОтпускРезультат = ОтпускРезультат + СтатьиФинансирования[Сч-1].ОтпускРезультат;
			ЗарплатаРезультат = ЗарплатаРезультат + СтатьиФинансирования[Сч-1].ЗарплатаРезультат;
			ОтпускРезультатТекущийМесяц = ОтпускРезультатТекущийМесяц + СтатьиФинансирования[Сч-1].ОтпускРезультатТекущийМесяц;
			ОтпускРезультатБудущийМесяц = ОтпускРезультатБудущийМесяц + СтатьиФинансирования[Сч-1].ОтпускРезультатБудущийМесяц;
			ДнейТекущийМесяц = ДнейТекущийМесяц + СтатьиФинансирования[Сч-1].ДнейТекущийМесяц;
			ДнейБудущийМесяц = ДнейБудущийМесяц + СтатьиФинансирования[Сч-1].ДнейБудущийМесяц;
			ДнейВсего = ДнейВсего + СтатьиФинансирования[Сч-1].ДнейВсего;
		КонецЦикла;
		ОбластьИсточникиФинансирования.Параметры["ИмяИсточникаФинансирования3"] = "Прочие";
		ОбластьИсточникиФинансирования.Параметры["ИтогоСумма3"] = Сумма;
		ОбластьИсточникиФинансирования.Параметры["ИтогоДни3"] = ВсегоДнейРасчетногоПериода;
		ОбластьИсточникиФинансирования.Параметры["СреднийДневной3"] = Сумма / ?(ВсегоДнейРасчетногоПериода = 0, 1, ВсегоДнейРасчетногоПериода);
		ОбластьИсточникиФинансирования.Параметры["СреднийЗаМесяц3"] = Сумма / КоличествоМесяцев;
		ОбластьИсточникиФинансирования.Параметры["ВсегоНачисленоОтпуск3"] = ОтпускРезультат;
		ОбластьИсточникиФинансирования.Параметры["ВсегоНачислено3"] = Результат;
		ОбластьИсточникиФинансирования.Параметры["ДнейТекущийМесяц3"] = ДнейТекущийМесяц;
		ОбластьИсточникиФинансирования.Параметры["ДнейБудущийМесяц3"] = ДнейБудущийМесяц;
		ОбластьИсточникиФинансирования.Параметры["ДнейВсего3"] = ДнейВсего;
		ОбластьИсточникиФинансирования.Параметры["НачисленоОтпускТек3"] = ОтпускРезультатТекущийМесяц;
		ОбластьИсточникиФинансирования.Параметры["НачисленоОтпускБуд3"] = ОтпускРезультатБудущийМесяц;
		ОбластьИсточникиФинансирования.Параметры["НачисленоЗарплаты3"] = ЗарплатаРезультат;
	Иначе
		Для Сч = 1 По КоличествоСтатейФинансирования Цикл 
			ОбластьИсточникиФинансирования.Параметры["ИмяИсточникаФинансирования" + Сч] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьиФинансирования[Сч-1].СтатьяФинансирования, "Наименование");
			ОбластьИсточникиФинансирования.Параметры["ИтогоСумма" + Сч] = СтатьиФинансирования[Сч-1].Сумма;
			ОбластьИсточникиФинансирования.Параметры["ИтогоДни" + Сч] = ВсегоДнейРасчетногоПериода;
			ОбластьИсточникиФинансирования.Параметры["СреднийДневной" + Сч] = СтатьиФинансирования[Сч-1].Сумма / ?(ВсегоДнейРасчетногоПериода = 0, 1, ВсегоДнейРасчетногоПериода);
			ОбластьИсточникиФинансирования.Параметры["СреднийЗаМесяц" + Сч] = СтатьиФинансирования[Сч-1].Сумма / КоличествоМесяцев;
			ОбластьИсточникиФинансирования.Параметры["ВсегоНачисленоОтпуск" + Сч] = СтатьиФинансирования[Сч-1].ОтпускРезультат;
			ОбластьИсточникиФинансирования.Параметры["ВсегоНачислено" + Сч] = СтатьиФинансирования[Сч-1].Результат;
			ОбластьИсточникиФинансирования.Параметры["ДнейТекущийМесяц" + Сч] = СтатьиФинансирования[Сч-1].ДнейТекущийМесяц;
			ОбластьИсточникиФинансирования.Параметры["ДнейБудущийМесяц" + Сч] = СтатьиФинансирования[Сч-1].ДнейБудущийМесяц;
			ОбластьИсточникиФинансирования.Параметры["ДнейВсего" + Сч] = СтатьиФинансирования[Сч-1].ДнейВсего;
			ОбластьИсточникиФинансирования.Параметры["НачисленоОтпускТек" + Сч] = СтатьиФинансирования[Сч-1].ОтпускРезультатТекущийМесяц;
			ОбластьИсточникиФинансирования.Параметры["НачисленоОтпускБуд" + Сч] = СтатьиФинансирования[Сч-1].ОтпускРезультатБудущийМесяц;
			ОбластьИсточникиФинансирования.Параметры["НачисленоЗарплаты" + Сч] = СтатьиФинансирования[Сч-1].ЗарплатаРезультат;
		КонецЦикла;	
	КонецЕсли;	
	
	ВсегоНачислено 			= СтатьиФинансирования.Итог("Результат");
	ВсегоНачисленоОтпуск	= СтатьиФинансирования.Итог("ОтпускРезультат");
	ВсегоНачисленоОтпускТек = СтатьиФинансирования.Итог("ОтпускРезультатТекущийМесяц");
	ВсегоНачисленоОтпускБуд = СтатьиФинансирования.Итог("ОтпускРезультатБудущийМесяц");
	ВсегоНачисленоЗарплаты	= СтатьиФинансирования.Итог("ЗарплатаРезультат");
	
	ОбластьИсточникиФинансирования.Параметры.ВсегоСумма 				= ВсегоЗаработка;
	ОбластьИсточникиФинансирования.Параметры.ВсегоСреднийЗаМесяц 		= ВсегоЗаработка / КоличествоМесяцев;
	ОбластьИсточникиФинансирования.Параметры.ВсегоДневной 				= ВсегоЗаработка / ?(ВсегоДнейРасчетногоПериода = 0, 1, ВсегоДнейРасчетногоПериода);
	ОбластьИсточникиФинансирования.Параметры.ВсегоНачисленоОтпускТек 	= ВсегоНачисленоОтпускТек;
	ОбластьИсточникиФинансирования.Параметры.ВсегоНачисленоОтпускБуд 	= ВсегоНачисленоОтпускБуд;
	ОбластьИсточникиФинансирования.Параметры.ВсегоНачисленоОтпуск 		= ВсегоНачисленоОтпуск;
	ОбластьИсточникиФинансирования.Параметры.ВсегоНачислено 			= ВсегоНачислено;
	ОбластьИсточникиФинансирования.Параметры.НачисленоЗарплаты 			= ВсегоНачисленоЗарплаты;
	
	ТабличныйДокумент.Вывести(ОбластьИсточникиФинансирования);
	
КонецПроцедуры

Процедура ВывестиПодвал0504425(ТабличныйДокумент, ОбластьПодвал, РеквизитыДокумента, НачисленияПоСотруднику, УдержанияПоСотруднику, НДФЛПоСотруднику)
	
	КоличествоСтрокНДФЛ = НДФЛПоСотруднику.Количество();
	
	ОбластьПодвал.Параметры.Заполнить(РеквизитыДокумента);
	
	Если КоличествоСтрокНДФЛ > 3 Тогда
		Для Сч = 1 По 2 Цикл
			ОбластьПодвал.Параметры["ИмяИсточникаФинансирования" + Сч] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НДФЛПоСотруднику[Сч-1].СтатьяФинансирования, "Наименование");
			ОбластьПодвал.Параметры["ИтогоНДФЛ" + Сч] = НДФЛПоСотруднику[Сч-1].Результат;
		КонецЦикла;
		Результат = 0;
		Для Сч = 3 По КоличествоСтрокНДФЛ Цикл
			Результат = Результат + НДФЛПоСотруднику[Сч-1].Результат;
		КонецЦикла;
		ОбластьПодвал.Параметры["ИмяИсточникаФинансирования3"] = "Прочие";
		ОбластьПодвал.Параметры["ИтогоНДФЛ3"] = Результат;
	Иначе
		Для Сч = 1 По КоличествоСтрокНДФЛ Цикл 
			ОбластьПодвал.Параметры["ИмяИсточникаФинансирования" + Сч] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НДФЛПоСотруднику[Сч-1].СтатьяФинансирования, "Наименование");
			ОбластьПодвал.Параметры["ИтогоНДФЛ" + Сч] = НДФЛПоСотруднику[Сч-1].Результат;
		КонецЦикла;	
	КонецЕсли;
	
	КоличествоСтрокУдержаний = УдержанияПоСотруднику.Количество();
	
	Если КоличествоСтрокУдержаний > 4 Тогда
		Для Сч = 1 По 3 Цикл
			ОбластьПодвал.Параметры["ИмяУдержания" + Сч] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдержанияПоСотруднику[Сч-1].Удержание, "Наименование");
			ОбластьПодвал.Параметры["Удержано" + Сч] = УдержанияПоСотруднику[Сч-1].Результат;
		КонецЦикла;	
		Результат = 0;
		Для Сч = 4 По КоличествоСтрокУдержаний Цикл
			Результат = Результат + УдержанияПоСотруднику[Сч-1].Результат;
		КонецЦикла;
		ОбластьПодвал.Параметры["ИмяУдержания4"] = "Прочие";
		ОбластьПодвал.Параметры["Удержано4"] = Результат;
	Иначе 
		Для Сч = 1 По КоличествоСтрокУдержаний Цикл 
			ОбластьПодвал.Параметры["ИмяУдержания" + Сч] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдержанияПоСотруднику[Сч-1].Удержание, "Наименование");
			ОбластьПодвал.Параметры["Удержано" + Сч] = УдержанияПоСотруднику[Сч-1].Результат;
		КонецЦикла;	
	КонецЕсли;
	
	ИтогоВыплачено = ДанныеОВыплатахФормы0504425(РеквизитыДокумента);
	
	ВсегоНачислено = НачисленияПоСотруднику.Итог("Результат");
	ВсегоУдержано = НДФЛПоСотруднику.Итог("Результат") + УдержанияПоСотруднику.Итог("Результат") + ИтогоВыплачено;
	
	КВыплате = ВсегоНачислено - ВсегоУдержано;
	КВыплатеРуб = Цел(КВыплате);
	КВыплатеКоп = Окр((КВыплате - КВыплатеРуб) * 100);
	
	ОбластьПодвал.Параметры.ИтогоВыплачено = ИтогоВыплачено;
	ОбластьПодвал.Параметры.ВсегоУдержано = ВсегоУдержано;
	
	ОбластьПодвал.Параметры.КВыплатеРуб = КВыплатеРуб;
	ОбластьПодвал.Параметры.КВыплатеКоп = КВыплатеКоп;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Функция ДанныеОВыплатахФормы0504425(РеквизитыДокумента)
	
	Если РеквизитыДокумента.РассчитатьЗарплату <> Истина Тогда 
		Возврат 0;
	КонецЕсли;
	
	ПериодДатаНачала = РеквизитыДокумента.НачалоПериодаРасчетаЗарплаты;
	ПериодДатаОкончания = Макс(ПериодДатаНачала, Мин(РеквизитыДокумента.ДатаНачалаОтсутствия - 1, КонецМесяца(РеквизитыДокумента.НачалоПериодаРасчетаЗарплаты)));
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ОтчетАнализНачисленийИУдержаний = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетАнализНачисленийИУдержаний.ИнициализироватьОтчет();
	
	НастройкиКомпоновщика = ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки;
	НастройкиКомпоновщика.Структура.Очистить();
	НастройкиКомпоновщика.Выбор.Элементы.Очистить();
	НастройкиКомпоновщика.Отбор.Элементы.Очистить();
	НастройкиКомпоновщика.Порядок.Элементы.Очистить();
	
	// Установка параметров
	ПараметрПериод = ПолучитьПараметр(ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек, "Период");
	ПараметрПериод.Значение.ДатаНачала = ПериодДатаНачала;
	ПараметрПериод.Значение.ДатаОкончания = ПериодДатаОкончания;
	
	// Добавление выбранных полей
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "Сотрудник");
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "Сумма");
	
	// Добавление группировок 1-го уровня - Сотрудник.
	ГруппировкаУровня1 = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = ГруппировкаУровня1.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Сотрудник");
	ПолеГруппировки = ГруппировкаУровня1.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
	ПолеГруппировки.Использование = Истина;
	АвтоПоле = ГруппировкаУровня1.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
		НастройкиКомпоновщика.Отбор, "МесяцНачисления", ВидСравненияКомпоновкиДанных.Равно, РеквизитыДокумента.НачалоПериодаРасчетаЗарплаты);
	ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
		НастройкиКомпоновщика.Отбор, "Группа", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено);
	ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
		НастройкиКомпоновщика.Отбор, "ВидРасчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
	ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
		НастройкиКомпоновщика.Отбор, "Сотрудник", ВидСравненияКомпоновкиДанных.Равно, РеквизитыДокумента.Сотрудник);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных,
		ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НаборыВнешнихДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Выплачено = 0;
	Для Каждого ДанныеОВыплатах Из ДанныеОтчета.Строки Цикл 
		Если ДанныеОВыплатах.Сотрудник = РеквизитыДокумента.Сотрудник Тогда 
			Выплачено = Выплачено + ДанныеОВыплатах.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Выплачено;
	
КонецФункции

Функция ПолучитьПараметр(КомпоновщикНастроекКД, ИмяПараметра) Экспорт
	ПараметрКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	Возврат КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
КонецФункции

Процедура ДобавитьВыбранноеПолеВКомпоновщик(ВыбранныеПоляКомпоновщика, ЗаголовокПоля)
    НовоеПоле = ВыбранныеПоляКомпоновщика.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    НовоеПоле.Использование = Истина;
    НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЗаголовокПоля);
КонецПроцедуры

Функция НачисленияУдержанияДокумента(Ссылка, Начисление, УчитыватьДвиженияДругихРегистраторов)
	
	НачисленияУдержания = Новый Структура;
	
	ИмяДокумента = Ссылка.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
	Запрос.УстановитьПараметр("Начисление", Начисление);
	Запрос.УстановитьПараметр("ПустойОтпуск", ПредопределенноеЗначение("Справочник.ВидыОтпусков.ПустаяСсылка"));
	Запрос.УстановитьПараметр("УчитыватьДвиженияДругихРегистраторов", УчитыватьДвиженияДругихРегистраторов);
	
	// Отпуск
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
		|	&Начисление КАК Начисление,
		|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Начисления.ОплаченоДней КАК ОплаченоДней,
		|	Начисления.ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	Документ.#ИмяДокумента#.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеРезультатовНачислений.ИдентификаторСтроки,
		|	РаспределениеРезультатовНачислений.СтатьяФинансирования,
		|	СУММА(РаспределениеРезультатовНачислений.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТРаспределениеРезультатовНачислений
		|ИЗ
		|	Документ.#ИмяДокумента#.РаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
		|ГДЕ
		|	РаспределениеРезультатовНачислений.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеРезультатовНачислений.ИдентификаторСтроки,
		|	РаспределениеРезультатовНачислений.СтатьяФинансирования";
	
	ЗаменитьИменаТаблицДокументов(Запрос.Текст, ИмяДокумента);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Месяц КАК Месяц,
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТСотрудникиМесяцы
		|ИЗ
		|	ВТНачисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Месяц КАК Месяц,
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ЕСТЬNULL(РаспределениеРезультатовНачислений.СтатьяФинансирования, ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)) КАК СтатьяФинансирования,
		|	СУММА(ЕСТЬNULL(РаспределениеРезультатовНачислений.Результат, 0)) КАК Результат,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.Начисление = &Начисление
		|					ИЛИ Начисления.Начисление.ВидОтпуска <> &ПустойОтпуск
		|				ТОГДА ЕСТЬNULL(РаспределениеРезультатовНачислений.Результат, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтпускРезультат,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.Начисление <> &Начисление
		|					И Начисления.Начисление.ВидОтпуска = &ПустойОтпуск
		|				ТОГДА ЕСТЬNULL(РаспределениеРезультатовНачислений.Результат, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗарплатаРезультат
		|ПОМЕСТИТЬ ВТНачисленияРезультатПредварительно
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
		|		ПО Начисления.ИдентификаторСтрокиВидаРасчета = РаспределениеРезультатовНачислений.ИдентификаторСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Сотрудник,
		|	Начисления.Месяц,
		|	Начисления.ПериодРегистрации,
		|	ЕСТЬNULL(РаспределениеРезультатовНачислений.СтатьяФинансирования, ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиМесяцы.Сотрудник,
		|	СотрудникиМесяцы.Месяц,
		|	НачисленияУдержанияПоСотрудникам.Период,
		|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма),
		|	СУММА(ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).ВидОтпуска <> &ПустойОтпуск
		|				ТОГДА ЕСТЬNULL(НачисленияУдержанияПоСотрудникам.Сумма, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).ВидОтпуска = &ПустойОтпуск
		|				ТОГДА ЕСТЬNULL(НачисленияУдержанияПоСотрудникам.Сумма, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|ИЗ
		|	ВТСотрудникиМесяцы КАК СотрудникиМесяцы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ПО СотрудникиМесяцы.Сотрудник = НачисленияУдержанияПоСотрудникам.Сотрудник
		|			И СотрудникиМесяцы.ПериодРегистрации = НачисленияУдержанияПоСотрудникам.Период
		|			И (СотрудникиМесяцы.Месяц = НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.ДатаНачала, МЕСЯЦ))
		|			И (НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Регистратор <> &Ссылка
		|	И &УчитыватьДвиженияДругихРегистраторов
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиМесяцы.Сотрудник,
		|	СотрудникиМесяцы.Месяц,
		|	НачисленияУдержанияПоСотрудникам.Период,
		|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияРезультат.Сотрудник КАК Сотрудник,
		|	НачисленияРезультат.Месяц КАК Месяц,
		|	НачисленияРезультат.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияРезультат.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СУММА(НачисленияРезультат.Результат) КАК Результат,
		|	СУММА(НачисленияРезультат.ОтпускРезультат) КАК ОтпускРезультат,
		|	СУММА(НачисленияРезультат.ЗарплатаРезультат) КАК ЗарплатаРезультат
		|ПОМЕСТИТЬ ВТНачисленияРезультат
		|ИЗ
		|	ВТНачисленияРезультатПредварительно КАК НачисленияРезультат
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияРезультат.Сотрудник,
		|	НачисленияРезультат.Месяц,
		|	НачисленияРезультат.ПериодРегистрации,
		|	НачисленияРезультат.СтатьяФинансирования";
	
	ЗаменитьИменаТаблицДокументов(Запрос.Текст, ИмяДокумента);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	СУММА(Начисления.ОплаченоДней) КАК ОплаченоДней
		|ПОМЕСТИТЬ ВТДниТекущийМесяц
		|ИЗ
		|	ВТНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|	И Начисления.Месяц <= Начисления.ПериодРегистрации
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	СУММА(Начисления.ОплаченоДней) КАК ОплаченоДней
		|ПОМЕСТИТЬ ВТДниБудущийМесяц
		|ИЗ
		|	ВТНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|	И Начисления.Месяц > Начисления.ПериодРегистрации
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛ.ФизическоеЛицо,
		|	НДФЛ.ИдентификаторСтрокиНДФЛ
		|ПОМЕСТИТЬ ВТ_НДФЛ
		|ИЗ
		|	Документ.#ИмяДокумента#.НДФЛ КАК НДФЛ
		|ГДЕ
		|	НДФЛ.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДФЛ.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(НДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	Документ.#ИмяДокумента#.НДФЛ КАК НДФЛ
		|ГДЕ
		|	НДФЛ.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеРезультатовНДФЛ.ИдентификаторСтроки,
		|	РаспределениеРезультатовНДФЛ.СтатьяФинансирования,
		|	СУММА(РаспределениеРезультатовНДФЛ.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТРаспределениеРезультатовНДФЛПредварительно
		|ИЗ
		|	Документ.#ИмяДокумента#.РаспределениеРезультатовУдержаний КАК РаспределениеРезультатовНДФЛ
		|ГДЕ
		|	РаспределениеРезультатовНДФЛ.Ссылка = &Ссылка
		|	И РаспределениеРезультатовНДФЛ.ВидУдержания = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеРезультатовНДФЛ.ИдентификаторСтроки,
		|	РаспределениеРезультатовНДФЛ.СтатьяФинансирования
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма)
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ПО ФизическиеЛицаПериоды.ФизическоеЛицо = НачисленияУдержанияПоСотрудникам.ФизическоеЛицо
		|			И ФизическиеЛицаПериоды.Месяц = НачисленияУдержанияПоСотрудникам.Период
		|			И (НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано))
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Регистратор <> &Ссылка
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|	И &УчитыватьДвиженияДругихРегистраторов
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования";
	
	ЗаменитьИменаТаблицДокументов(Запрос.Текст, ИмяДокумента);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияРезультат.Сотрудник,
		|	НачисленияРезультат.СтатьяФинансирования,
		|	СУММА(НачисленияРезультат.Результат) КАК Результат,
		|	СУММА(ЕСТЬNULL(ТекущийМесяц.Результат, 0)) КАК РезультатТекущийМесяц,
		|	СУММА(ЕСТЬNULL(БудущийМесяц.Результат, 0)) КАК РезультатБудущийМесяц,
		|	СУММА(НачисленияРезультат.ОтпускРезультат) КАК ОтпускРезультат,
		|	СУММА(ЕСТЬNULL(ТекущийМесяц.ОтпускРезультат, 0)) КАК ОтпускРезультатТекущийМесяц,
		|	СУММА(ЕСТЬNULL(БудущийМесяц.ОтпускРезультат, 0)) КАК ОтпускРезультатБудущийМесяц,
		|	СУММА(НачисленияРезультат.ЗарплатаРезультат) КАК ЗарплатаРезультат,
		|	ЕСТЬNULL(ДниТекущийМесяц.ОплаченоДней, 0) КАК ДнейТекущийМесяц,
		|	ЕСТЬNULL(ДниБудущийМесяц.ОплаченоДней, 0) КАК ДнейБудущийМесяц,
		|	ЕСТЬNULL(ДниБудущийМесяц.ОплаченоДней, 0) + ЕСТЬNULL(ДниТекущийМесяц.ОплаченоДней, 0) КАК ДнейВсего
		|ИЗ
		|	ВТНачисленияРезультат КАК НачисленияРезультат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияРезультат КАК ТекущийМесяц
		|		ПО НачисленияРезультат.Сотрудник = ТекущийМесяц.Сотрудник
		|			И НачисленияРезультат.Месяц = ТекущийМесяц.Месяц
		|			И НачисленияРезультат.СтатьяФинансирования = ТекущийМесяц.СтатьяФинансирования
		|			И (ТекущийМесяц.Месяц <= ТекущийМесяц.ПериодРегистрации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияРезультат КАК БудущийМесяц
		|		ПО НачисленияРезультат.Сотрудник = БудущийМесяц.Сотрудник
		|			И НачисленияРезультат.Месяц = БудущийМесяц.Месяц
		|			И НачисленияРезультат.СтатьяФинансирования = БудущийМесяц.СтатьяФинансирования
		|			И (БудущийМесяц.Месяц > БудущийМесяц.ПериодРегистрации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниТекущийМесяц КАК ДниТекущийМесяц
		|		ПО НачисленияРезультат.Сотрудник = ДниТекущийМесяц.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниБудущийМесяц КАК ДниБудущийМесяц
		|		ПО НачисленияРезультат.Сотрудник = ДниБудущийМесяц.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияРезультат.Сотрудник,
		|	НачисленияРезультат.СтатьяФинансирования,
		|	ЕСТЬNULL(ДниБудущийМесяц.ОплаченоДней, 0),
		|	ЕСТЬNULL(ДниТекущийМесяц.ОплаченоДней, 0),
		|	ЕСТЬNULL(ДниБудущийМесяц.ОплаченоДней, 0) + ЕСТЬNULL(ДниТекущийМесяц.ОплаченоДней, 0)";
	
	ЗаменитьИменаТаблицДокументов(Запрос.Текст, ИмяДокумента);
	НачисленияУдержания.Вставить("Начисления", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(РаспределениеРезультатовНДФЛ.СтатьяФинансирования, ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)) КАК СтатьяФинансирования,
		|	СУММА(ЕСТЬNULL(РаспределениеРезультатовНДФЛ.Результат, 0)) КАК Результат
		|ИЗ
		|	ВТ_НДФЛ КАК НДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеРезультатовНДФЛПредварительно КАК РаспределениеРезультатовНДФЛ
		|		ПО НДФЛ.ИдентификаторСтрокиНДФЛ = РаспределениеРезультатовНДФЛ.ИдентификаторСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛ.ФизическоеЛицо,
		|	ЕСТЬNULL(РаспределениеРезультатовНДФЛ.СтатьяФинансирования, ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка))";
	
	ЗаменитьИменаТаблицДокументов(Запрос.Текст, ИмяДокумента);
	НачисленияУдержания.Вставить("НДФЛ", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Удержание,
		|	СУММА(Удержания.Результат) КАК Результат
		|ИЗ
		|	Документ.#ИмяДокумента#.Удержания КАК Удержания
		|ГДЕ
		|	Удержания.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Удержание";
	
	ЗаменитьИменаТаблицДокументов(Запрос.Текст, ИмяДокумента);
	НачисленияУдержания.Вставить("Удержания", Запрос.Выполнить().Выгрузить());
	
	Если ИмяДокумента = "Увольнение" Тогда 
		НачисленияУдержания.Начисления.ЗаполнитьЗначения(0, "РезультатТекущийМесяц, РезультатБудущийМесяц, ДнейТекущийМесяц, ДнейБудущийМесяц, ДнейВсего");
	КонецЕсли;
	
	Возврат НачисленияУдержания;
	
КонецФункции

Процедура ЗаменитьИменаТаблицДокументов(ТекстЗапроса, ИмяДокумента)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента#", ИмяДокумента);
	
	Если ИмяДокумента <> "ПростойСотрудников" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Начисление КАК Начисление", "Начисления.Начисление КАК Начисление");
	КонецЕсли;
	
	Если ИмяДокумента <> "Отпуск" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"Начисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)",
			"Начисления.Начисление = &Начисление");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЗапросПоПредставлению(ИмяПредставления, ПараметрыЗапроса) Экспорт
	
	Запрос = Неопределено;
	Если ВРег(ИмяПредставления) = ВРег("СвойстваСтатейФинансирования") Тогда
		
		Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СвойстваСтатейФинансированияУчетБюджетныхУчреждений.СтатьяФинансирования КАК СтатьяФинансирования,
				|	ВЫБОР
				|		КОГДА СвойстваСтатейФинансированияУчетБюджетныхУчреждений.КФО = ЗНАЧЕНИЕ(Перечисление.КФО.Внебюджет)
				|			ТОГДА 2
				|		КОГДА СвойстваСтатейФинансированияУчетБюджетныхУчреждений.КФО = ЗНАЧЕНИЕ(Перечисление.КФО.СредстваОМС)
				|			ТОГДА 3
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК НомерКолонки
				|ПОМЕСТИТЬ Представления_СвойстваСтатейФинансирования
				|ИЗ
				|	РегистрСведений.СвойстваСтатейФинансированияУчетБюджетныхУчреждений КАК СвойстваСтатейФинансированияУчетБюджетныхУчреждений";
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти
