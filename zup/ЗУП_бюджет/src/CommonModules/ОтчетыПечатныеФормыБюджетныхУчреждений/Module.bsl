
#Область СлужебныеПроцедурыИФункции

#Область ФункцииФормированиеОтчетаКнигаУчетаДепонентов0504048

// Процедура формирования книги учета депонентов.
//
Процедура ПриКомпоновкеОтчетаКнигаУчетаДепонентов(Объект, ДокументРезультат, СтандартнаяОбработка, КлючВарианта) Экспорт
	
	Если КлючВарианта = "Форма0504048" Тогда
		
		Попытка
			
			СтандартнаяОбработка = Ложь;
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма0504048";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.НачатьАвтогруппировкуСтрок();
			ДокументРезультат.Очистить();
			
			НастройкиОтчета = Объект.КомпоновщикНастроек.ПолучитьНастройки();
			НастройкиОтчета.Выбор.Элементы.Очистить();
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
			
			Если ЗначениеПараметраПериод <> Неопределено И ЗначениеПараметраПериод.Значение <> '00010101' Тогда
				НачалоПериода = ЗначениеПараметраПериод.Значение.ДатаНачала;
				КонецПериода  = ЗначениеПараметраПериод.Значение.ДатаОкончания;
			Иначе
				НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
				КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
			КонецЕсли;
			
			Если НачалоПериода = '00010101' Тогда
				НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
			КонецЕсли;
			
			Если КонецПериода = '00010101' Тогда
				КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
			КонецЕсли;
			
			Данные = Новый ДеревоЗначений;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Объект.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			// Создадим и инициализируем процессор компоновки.
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Данные);
			
			// Обозначим начало вывода
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
			ВывестиМакетыСГруппировкамиКнигаДепонентовПоФорме0504048(Объект.КомпоновщикНастроек, ДокументРезультат, Данные, НачалоПериода, КонецПериода, СоответствиеПользовательскихПолей);
			
			ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'В настройку отчета внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМакетыСГруппировкамиКнигаДепонентовПоФорме0504048(КомпоновщикНастроек, ДокументРезультат, Данные, НачалоПериода, КонецПериода, СоответствиеПользовательскихПолей)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_0504048");
	
	Для Каждого ДанныеШапкиОтчета Из Данные.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Шапка	= Макет.ПолучитьОбласть("Шапка");

		Шапка.Параметры.Заполнить(ДанныеШапкиОтчета);
		Шапка.Параметры.Начало		= НачалоПериода;
		Шапка.Параметры.Окончание	= КонецПериода;
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Шапка.Параметры.ПодразделениеОрганизации) Тогда
			Шапка.Параметры.ПодразделениеОрганизации = Шапка.Параметры.ПодразделениеОрганизации.ПолноеНаименование();
		КонецЕсли; 
		
		ДокументРезультат.Вывести(Шапка);
		ИтогоПоступлений = 0;
		
		Для Каждого ДанныеСтрокиОтчета Из ДанныеШапкиОтчета.Строки Цикл
			
			Строка	= Макет.ПолучитьОбласть("Строка");
			Строка.Параметры.Заполнить(ДанныеСтрокиОтчета);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Строка, ДанныеСтрокиОтчета, СоответствиеПользовательскихПолей);
			
			НомераПлатежныхДокументов = "";
			Для Каждого СтрокаСНомером Из ДанныеСтрокиОтчета.Строки Цикл
				НомераПлатежныхДокументов = ?(ПустаяСтрока(НомераПлатежныхДокументов), "", НомераПлатежныхДокументов + "; ") + СтрокаСНомером.НомерПлатежногоДокумента;
			КонецЦикла;
			
			Строка.Параметры.НомерПлатежногоДокумента = НомераПлатежныхДокументов;
			
			Поступления = ДанныеСтрокиОтчета[СоответствиеПользовательскихПолей.Получить("СуммаПост")];
			Строка.Параметры.СуммаОстатка = Поступления - ДанныеСтрокиОтчета["СуммаВыплаты"];
			
			Если Поступления <> Неопределено Тогда
				ИтогоПоступлений = ИтогоПоступлений + Поступления;
			КонецЕсли; 
			
			ДокументРезультат.Вывести(Строка);
			
		КонецЦикла;
		
		Подвал	= Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(ДанныеШапкиОтчета);
		
		Подвал.Параметры.ИтогоПоступлений = ИтогоПоступлений;
		Подвал.Параметры.ОстатокНаКонец = ИтогоПоступлений - ДанныеШапкиОтчета.СуммаВыплаты;
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Подвал, ДанныеШапкиОтчета, СоответствиеПользовательскихПолей);
		
		Подвал.Параметры.Заполнить(ПараметрыОтветственныхЛиц(КомпоновщикНастроек, ДанныеШапкиОтчета.Организация, КонецПериода));
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыОтветственныхЛиц(КомпоновщикНастроек, Организация, ДатаОтчета)
	
	ПараметрыЗаполнения = Новый Структура;
	
	Руководитель = Неопределено;
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрРуководитель = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Исполнитель"));
	Если ПараметрРуководитель <> Неопределено И ПараметрРуководитель.Использование Тогда
		Руководитель = ПараметрРуководитель.Значение;
	КонецЕсли; 
	
	Если Руководитель = Неопределено Тогда
		
		ОтветственныеЛица = Новый Структура("Организация,Руководитель", Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ОтветственныеЛица, ДатаОтчета);
		
		Руководитель = ОтветственныеЛица.Руководитель;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Руководитель) Тогда
		
		ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Руководитель));
		ПараметрыЗаполнения.Вставить("РуководительРасшифровкаПодписи", ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИОФизЛиц[Руководитель]));
		
	КонецЕсли; 
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ФункцииФормированиеОтчетаТабельУчетаРабочегоВремени0504421

// Процедура формирования отчета Табель учета рабочего времени (0504421).
//
Процедура ПриКомпоновкеОтчетаУнифицированнаяФормаТ13(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта, НастройкиОтчета) Экспорт
	
	Если КлючВарианта = "Форма0504421" Или КлючВарианта = "Форма0504421с2015" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма0504421";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ПараметрРассчитыватьПлановоеВремя = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РассчитыватьПлановоеВремя"));
		ПараметрРассчитыватьПлановоеВремя.Использование = Истина;
		ПараметрРассчитыватьПлановоеВремя.Значение = Истина;
		
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
		
		Если ПараметрПериод <> Неопределено Тогда
			НачалоПериода = ПараметрПериод.Значение.ДатаНачала;
			КонецПериода = ПараметрПериод.Значение.ДатаОкончания;
		Иначе
			НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
			КонецПериода = КонецМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		ПараметрОтветственный = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ответственный"));		
		
		ПараметрДатаОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));
		Если ПараметрДатаОтчета = Неопределено Тогда
			ДатаОтчета = ТекущаяДатаСеанса();
		Иначе
			Если ЗначениеЗаполнено(ПараметрДатаОтчета.Значение) Тогда
				Если ТипЗнч(ПараметрДатаОтчета.Значение) = Тип("СтандартнаяДатаНачала") Тогда			
					ДатаОтчета = ПараметрДатаОтчета.Значение.Дата;
				Иначе
					ДатаОтчета = ПараметрДатаОтчета.Значение;
				КонецЕсли;	
			Иначе
				ДатаОтчета = ТекущаяДатаСеанса();
			КонецЕсли;	
		КонецЕсли;
		
		ПараметрВыводитьПодразделения = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьВРазрезеПодразделений"));
		
		Если ПараметрВыводитьПодразделения <> Неопределено Тогда
			ПараметрВыводитьПодразделения.Использование = Истина;
		Иначе		
			ПараметрВыводитьПодразделения = НастройкиОтчета.ПараметрыДанных.Элементы.Добавить();
			ПараметрВыводитьПодразделения.Значение = Ложь;
		КонецЕсли;
		
		ВыводитьЯвки = Ложь;
		ПараметрВыводитьЯвки = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЯвки"));
		
		Если ПараметрВыводитьЯвки <> Неопределено И ПараметрВыводитьЯвки.Использование = Истина Тогда
			ВыводитьЯвки = ПараметрВыводитьЯвки.Значение;
		КонецЕсли;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Объект.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыПолученияДанныхУчетаВремени();
		ПараметрыПолученияДанных.ДатаНачала = "ДатаНачала";
		ПараметрыПолученияДанных.ДатаОкончания = "ДатаОкончания";
	
		УчетРабочегоВремениРасширенный.ПолученияДанныхУчетаВремениПослеКомпоновкиМакета(МакетКомпоновки.НаборыДанных.ДанныеОВремени, ПараметрыПолученияДанных);			
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ДанныеОВремени = Новый ДеревоЗначений;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОВремени);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ДополнительныеДанныеДляПечати = Документы.ТабельУчетаРабочегоВремени.ДополнительныеДанныеДляПечати();
		Объект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДополнительныеДанныеДляПечати"
			, ДополнительныеДанныеДляПечати);

		ВывестиМакетФормы0504421(ДокументРезультат,
			ДанныеОВремени,
			НачалоПериода,
			КонецПериода,
			ДатаОтчета,
			ПараметрВыводитьПодразделения.Значение,
			ВыводитьЯвки,
			КлючВарианта,
			ДополнительныеДанныеДляПечати);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтоимостьЧасаДня(ДанныеОВремени)
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ИсходныеДанные.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	
	ПоказателиСтоимости = Новый Массив;
	ПоказателиСтоимости.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	ПоказателиСтоимости.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
	
	ИдентификаторСтроки = 1;
	Для Каждого ДанныеПоОрганизации Из ДанныеОВремени.Строки Цикл
		Для Каждого ДанныеПоСотруднику Из ДанныеПоОрганизации.Строки Цикл
			Для Каждого Показатель Из ПоказателиСтоимости Цикл
				НоваяСтрока = ИсходныеДанные.Добавить();
				НоваяСтрока.Сотрудник = ДанныеПоСотруднику.Сотрудник;
				НоваяСтрока.ДатаНачала = ДанныеПоСотруднику.Месяц;
				НоваяСтрока.Показатель = Показатель;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала,
		|	ИсходныеДанные.Показатель,
		|	ИсходныеДанные.ВремяВЧасах
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные";
	Запрос.Выполнить();
	
	ЗначенияПоказателейПоИдентификатору = Обработки.МенеджерРасчетаЗарплаты.СтоимостьЧасаДня(МенеджерВременныхТаблиц, "ВТИсходныеДанные");
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	ЗначенияПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ЗначенияПоказателей.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ЗначенияПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ЗначенияПоказателей.Колонки.Добавить("Значение", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала,
		|	ИсходныеДанные.Показатель
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияПоИдентификатору = ЗначенияПоказателейПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если ЗначенияПоИдентификатору = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаПоказателя Из ЗначенияПоИдентификатору Цикл
			НоваяСтрока = ЗначенияПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Показатель = СтрокаПоказателя.Показатель;
			НоваяСтрока.Значение = СтрокаПоказателя.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗначенияПоказателей;
	
КонецФункции

Процедура ВывестиМакетФормы0504421(ДокументРезультат,
	ДанныеОВремени,
	ДатаНачала,
	ДатаОкончания,
	ДатаОтчета,
	ВыводитьПодразделения,
	ВыводитьЯвки,
	КлючВарианта = "Форма0504421с2015",
	ДополнительныеДанныеДляПечати = "") Экспорт
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб = Ложь;
	
	СписокВидовОплаты = СписокВидовОплаты(ДанныеОВремени);
	
	Если КлючВарианта = "Форма0504421с2015" Тогда
	
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_0504421с2015");
		
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка|Время");
		ОбластьВремяШапка 		= Макет.ПолучитьОбласть("ВремяШапка|Время");
		ОбластьВремяСтрока		= Макет.ПолучитьОбласть("ВремяСтрока|Время");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал|Время");
	
	Иначе
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.Форма0504421");
	
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка|Время");
		ОбластьВремяШапка 		= Макет.ПолучитьОбласть("ВремяШапка|Время");
		ОбластьНачисленияШапка  = Макет.ПолучитьОбласть("НачисленияШапка|Начисления");
		ОбластьВремяСтрока		= Макет.ПолучитьОбласть("ВремяСтрока|Время");
		ОбластьНачисленияСтрока = Макет.ПолучитьОбласть("НачисленияСтрока|Начисления");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал|Время");
		
		СтоимостьЧасаДня = СтоимостьЧасаДня(ДанныеОВремени);
		ДанныеОНачислениях = ДанныеОНачисленияхСотрудников(ДатаНачала, ДатаОкончания, ВыводитьПодразделения, СписокВидовОплаты);
	
	КонецЕсли;
	
	КоличествоСтрокПоОрганизациям = ДанныеОВремени.Строки.Количество();
	
	Для Каждого ДанныеПоОрганизации Из ДанныеОВремени.Строки Цикл
		
		ТекущийЛист = Новый ТабличныйДокумент;
		
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		ТекущийЛист.АвтоМасштаб = ДокументРезультат.АвтоМасштаб;
		
		ВывестиШапкуФормы0504421(ДокументРезультат,
			ОбластьШапка,
			ДанныеПоОрганизации,
			ДатаНачала,
			ДатаОкончания,
			ДатаОтчета,
			ТекущийЛист,
			КлючВарианта,
			ДополнительныеДанныеДляПечати);
		
		Если КлючВарианта = "Форма0504421с2015" Тогда
			
			ДокументРезультат.Вывести(ОбластьВремяШапка);
		
		Иначе
			
			Если КоличествоСтрокПоОрганизациям > 1 Тогда 
				СписокВидовОплаты = СписокВидовОплатыПоОрганизации(ДанныеПоОрганизации);
			КонецЕсли;	
			
			ВидыОплатыКолонки = ТаблицаКолонокВидовОплаты(СписокВидовОплаты); 
			Для Каждого ТекСтрока Из ВидыОплатыКолонки Цикл 
				ОбластьНачисленияШапка.Параметры[ТекСтрока.Параметр] = ТекСтрока.Заголовок;
			КонецЦикла;	
			
			ОбластьВремяШапка.Параметры.НомерСтраницы = 2;
			ОбластьНачисленияШапка.Параметры.НомерСтраницы = 3;
			
			ДокументРезультат.Вывести(ОбластьВремяШапка);
			ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
			ДокументРезультат.Присоединить(ОбластьНачисленияШапка);
		
		КонецЕсли;
		
		ТекущийЛист.Вывести(ОбластьВремяШапка);
		
		НомерСтраницы = 4;
		
		ОбластиМакета = Новый Структура;
		
		Если КлючВарианта = "Форма0504421с2015" Тогда
			
			ОбластиМакета.Вставить("ОбластьВремяСтрока", ОбластьВремяСтрока);
			ОбластиМакета.Вставить("ОбластьВремяШапка", ОбластьВремяШапка);
			ОбластиМакета.Вставить("ОбластьНачисленияШапка", ОбластьНачисленияШапка);
			
		Иначе
			
			ОбластиМакета.Вставить("ОбластьВремяСтрока", ОбластьВремяСтрока);
			ОбластиМакета.Вставить("ОбластьНачисленияСтрока", ОбластьНачисленияСтрока);
			ОбластиМакета.Вставить("ОбластьВремяШапка", ОбластьВремяШапка);
			ОбластиМакета.Вставить("ОбластьНачисленияШапка", ОбластьНачисленияШапка);
			
		КонецЕсли; 		
		
		Для Каждого ДанныеПоСотруднику Из ДанныеПоОрганизации.Строки Цикл
			 ВывестиДанныеПоСотрудникуФорма0504421(ДокументРезультат, ОбластиМакета, ДанныеПоСотруднику,
			 	ДанныеОНачислениях, СтоимостьЧасаДня, ВидыОплатыКолонки, ВыводитьЯвки,
				НомерСтраницы, ТекущийЛист, КлючВарианта);		
		КонецЦикла;	
		
		Если ТипЗнч(ДанныеПоОрганизации.ПараметрыДанныхОтветственный) = 
			Тип("СправочникСсылка.Пользователи") Тогда
			ИсполнительНижнегоУровня = ДанныеПоОрганизации.ПараметрыДанныхОтветственный.ФизическоеЛицо;
		ИначеЕсли ТипЗнч(ДанныеПоОрганизации.ПараметрыДанныхОтветственный) = 
			Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ИсполнительНижнегоУровня = ДанныеПоОрганизации.ПараметрыДанныхОтветственный;
		КонецЕсли;
		
		ВывестиПодвалФормы0504421(ДокументРезультат, 
			ОбластьПодвал,
			ДанныеПоОрганизации.Организация,
			ДатаОтчета, 
			ИсполнительНижнегоУровня, 
			ТекущийЛист, 
			КлючВарианта,
			ДополнительныеДанныеДляПечати); 
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВывестиШапкуФормы0504421(ДокументРезультат,
			ОбластьШапка, 
			ДанныеШапки, 
			ДатаНачала, 
			ДатаОкончания, 
			ДатаОтчета,
			ТекущийЛист,
			КлючВарианта,
			ДополнительныеДанныеДляПечати)	
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьШапка.Параметры.Заполнить(ДанныеШапки);
	ОбластьШапка.Параметры.ДатаЗаполнения = ДатаОтчета;
	ДополнительныеДанныеДляЗаполнения = Новый Структура;
	
	Если ДополнительныеДанныеДляПечати <> Неопределено Тогда
		ДополнительныеДанныеДляЗаполнения.Вставить("Номер", 
			ДополнительныеДанныеДляПечати.НомерДокумента);
		ДополнительныеДанныеДляЗаполнения.Вставить("НомерКорректировки",
			Строка(ДополнительныеДанныеДляПечати.НомерКорректировки));
		Если ДополнительныеДанныеДляПечати.НомерКорректировки = 0 Тогда
			ВидТабеля = НСтр("ru='первичный'");
		Иначе
			ВидТабеля = НСтр("ru='корректирующий'");
		КонецЕсли;	
		ДополнительныеДанныеДляЗаполнения.Вставить("ВидТабеля", ВидТабеля);
	КонецЕсли;
	ДополнительныеДанныеДляЗаполнения.Вставить("ЗаПериод", СтрШаблон(
		НСтр("ru='за период с 1 по %1'"),
		Формат(ДатаОкончания, "ДЛФ=DD")));
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,
		ДополнительныеДанныеДляЗаполнения); 	
		
	Если ЗначениеЗаполнено(ДанныеШапки.ОрганизацияНаименованиеПолное) Тогда 	
		ОбластьШапка.Параметры.ОрганизацияНаименование = ДанныеШапки.ОрганизацияНаименованиеПолное;
	КонецЕсли;
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ДанныеШапки.Подразделение) Тогда
		ОбластьШапка.Параметры.ПодразделениеНаименование = ДанныеШапки.Подразделение.ПолноеНаименование();
	КонецЕсли; 
	
	ДокументРезультат.Вывести(ОбластьШапка);
	ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
	
	Если КлючВарианта = "Форма0504421с2015" Тогда
		ТекущийЛист.Вывести(ОбластьШапка);
	Иначе
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВывестиПодвалФормы0504421(ДокументРезультат,
		ОбластьПодвал,
		Организация,
		ДатаОтчета,
		Ответственный,
		ТекущийЛист,
		КлючВарианта = "Форма0504421с2015",
		ДополнительныеДанныеДляПечати = "")
	
	МассивФизЛиц = Новый Массив;
	Если ЗначениеЗаполнено(Ответственный) Тогда
		МассивФизЛиц.Добавить(Ответственный);
		ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, МассивФизЛиц);
	КонецЕсли;
	
	ДолжностьОтветственного	= "";
	ФИООтветственногоСтрокой = "";
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(МассивФизЛиц, Истина, Организация, ДатаОтчета);
		ФИООтветственного = ФИОФизЛиц[Ответственный];
		ФИООтветственногоСтрокой = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИООтветственного);
		Если ОсновныеСотрудникиФизическихЛиц.Количество() > 0  Тогда
			СписокСотрудников = Новый Массив;
			СписокСотрудников.Добавить(ОсновныеСотрудникиФизическихЛиц[0].Сотрудник);	
			
			КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, "Должность", ДатаОтчета);
			
			Если КадровыеДанные.Количество() > 0 Тогда
				ДолжностьОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КадровыеДанные[0].Должность, "Наименование");	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;		
	
	Если КлючВарианта = "Форма0504421с2015" Тогда

		Если ДополнительныеДанныеДляПечати <> Неопределено Тогда
			ОбластьПодвал.Параметры.ОтветственныйИсполнительРасшифровкаПодписи = 
				ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ДополнительныеДанныеДляПечати.ОтветственныйИсполнитель);
			ОбластьПодвал.Параметры.ДолжностьОтветственногоИсполнителя = 
				ДополнительныеДанныеДляПечати.ДолжностьОтветственногоИсполнителя;			
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ИсполнительРасшифровкаПодписи = ФИООтветственногоСтрокой;
		ОбластьПодвал.Параметры.ДолжностьИсполнителя = ДолжностьОтветственного;
	Иначе
		ОбластьПодвал.Параметры.ФИООтветственного = ФИООтветственногоСтрокой;
		ОбластьПодвал.Параметры.ДолжностьОтветственного = ДолжностьОтветственного;
	КонецЕсли;
	
	ПроверяемыеОбласти = Новый Массив;
	ПроверяемыеОбласти.Добавить(ОбластьПодвал);
	
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ПроверяемыеОбласти) Тогда
		
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТекущийЛист = Новый ТабличныйДокумент;
		
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		ТекущийЛист.АвтоМасштаб = ДокументРезультат.АвтоМасштаб;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьПодвал);
	ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
	
	ТекущийЛист.Вывести(ОбластьПодвал);
	
КонецПроцедуры	

Процедура ВывестиДанныеПоСотрудникуФорма0504421(ДокументРезультат, ОбластиМакета, ДанныеПоСотруднику,
	ДанныеОНачислениях, СтоимостьЧасаДня, ВидыОплатыКолонки, ВыводитьЯвки,
	НомерСтраницы, ТекущийЛист, КлючВарианта = "Форма0504421с2015")

	Если КлючВарианта = "Форма0504421с2015" Тогда
	
		ОбластьВремяСтрока 		= ОбластиМакета.ОбластьВремяСтрока;
		ОбластьВремяШапка 		= ОбластиМакета.ОбластьВремяШапка;
	
	Иначе
	
		ОбластьВремяСтрока 		= ОбластиМакета.ОбластьВремяСтрока;
		ОбластьНачисленияСтрока = ОбластиМакета.ОбластьНачисленияСтрока;
		ОбластьВремяШапка 		= ОбластиМакета.ОбластьВремяШапка;
		ОбластьНачисленияШапка 	= ОбластиМакета.ОбластьНачисленияШапка;
	
	КонецЕсли;
	
	КоличествоПараметров = ОбластьВремяСтрока.Параметры.Количество();
	
	Для ИндексПараметра = 0 По КоличествоПараметров - 1 Цикл  
		ОбластьВремяСтрока.Параметры.Установить(ИндексПараметра, Неопределено);
	КонецЦикла;	
	
	Если КлючВарианта = "Форма0504421с2015" Тогда
	
	Иначе
		
		КоличествоПараметров = ОбластьНачисленияСтрока.Параметры.Количество();
		
		Для ИндексПараметра = 0 По КоличествоПараметров - 1 Цикл  
			ОбластьНачисленияСтрока.Параметры.Установить(ИндексПараметра, Неопределено);
		КонецЦикла;	
		
		КоличествоПараметров = ОбластьНачисленияШапка.Параметры.Количество();
		
		Для ИндексПараметра = 0 По КоличествоПараметров - 1 Цикл  
			ОбластьНачисленияШапка.Параметры.Установить(ИндексПараметра, Неопределено);
		КонецЦикла;	
		
	КонецЕсли;
	
	ВидВремениВыходной = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
	ВидВремениНочныеЧасы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	
	ДниНеявокЗаМесяц = 0;
	ЧасыНеявокЗаМесяц = 0;
	
	Фамилия = ДанныеПоСотруднику.Фамилия;
	Имя = ДанныеПоСотруднику.Имя;
	Отчество = ДанныеПоСотруднику.Отчество;
	
	Если КлючВарианта = "Форма0504421с2015" Тогда
		
		ФИО = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(Фамилия, Имя, Отчество, "", "");
		ОбластьВремяСтрока.Параметры.ТабельныйНомер = ДанныеПоСотруднику.СотрудникКод;
		
	Иначе
		
		СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество", Фамилия,Имя,Отчество);
		ФИО = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
		ОбластьНачисленияСтрока.Параметры.ТабельныйНомер = ДанныеПоСотруднику.СотрудникКод;
		
	КонецЕсли;
	
	ОбластьВремяСтрока.Параметры.НомерПП = ДанныеПоСотруднику.СистемныеПоляНомерПоПорядкуВГруппировке;
	ОбластьВремяСтрока.Параметры.Сотрудник = ФИО;
	
	ОбластьВремяСтрока.Параметры.Должность = ДанныеПоСотруднику.ДолжностьКонецМесяцаНаименование;	
	
	ТаблицаОтклонений = Новый ТаблицаЗначений;
	ТаблицаОтклонений.Колонки.Добавить("ПредставлениеВидаВремени");
	ТаблицаОтклонений.Колонки.Добавить("Часы");
	
	ТаблицаПереработок = Новый ТаблицаЗначений;
	ТаблицаПереработок.Колонки.Добавить("ВидУчетаВремени");
	ТаблицаПереработок.Колонки.Добавить("Часы");
	
	БуквенныйКодИмяРеквизита = УчетРабочегоВремениРасширенный.БуквенныйКодБюджетныйИмяРеквизита(ДанныеПоСотруднику.Месяц);
	
	ДниПерваяПоловина = 0;
	ЧасыПерваяПоловина = 0;
	ДниЗаМесяц = 0;
	ЧасыЗаМесяц = 0;
	
	Для Каждого ДанныеОВремениНаДату Из ДанныеПоСотруднику.Строки Цикл 
		
		ПредставлениеВидовВремени = "";
		ЧасыПоВидамВремениСтрока = "";
		НочныеЧасыСтрока = "";
		
		ТаблицаОтклонений.Очистить();
		
		// Устанавливаем флаг учета дня в итогах месяца
		УчестьДанныеЭтогоДняВИтогахЗаМесяц = Истина;
		
		Для Каждого ДетальныеЗаписиЗаДень Из ДанныеОВремениНаДату.Строки Цикл
			
			Если Не (ВыводитьЯвки Или ДетальныеЗаписиЗаДень.Отклонение) Тогда 
				Продолжить;
			КонецЕсли;	
			
			БуквенныйКод = ДетальныеЗаписиЗаДень["ВидУчетаВремени" + БуквенныйКодИмяРеквизита];
			
			Если ДетальныеЗаписиЗаДень.ВидУчетаВремени = ВидВремениНочныеЧасы Тогда 
				
				НочныеЧасыСтрока = БуквенныйКод + Формат(ДетальныеЗаписиЗаДень.Часы, "ЧГ=");
				
			Иначе 
				
				НоваяСтрока = ТаблицаОтклонений.Добавить();
				НоваяСтрока.ПредставлениеВидаВремени = БуквенныйКод;
				НоваяСтрока.Часы = ДетальныеЗаписиЗаДень.Часы;
				
			КонецЕсли;
			
			Если Не ДетальныеЗаписиЗаДень.ВидУчетаВремениРабочееВремя 
				И ДетальныеЗаписиЗаДень.ВидУчетаВремени <> ВидВремениВыходной
				И ДетальныеЗаписиЗаДень.ВидУчетаВремениОсновноеВремя <> Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка() Тогда
				
				ДниНеявокЗаМесяц = ДниНеявокЗаМесяц + 1;
				ЧасыНеявокЗаМесяц = ЧасыНеявокЗаМесяц + ДетальныеЗаписиЗаДень.Часы;
				
			ИначеЕсли ЭтоПереработка(ДетальныеЗаписиЗаДень, ВидВремениВыходной) 
				Или (ВыводитьЯвки И ДетальныеЗаписиЗаДень.ВидУчетаВремениРабочееВремя) Тогда
				
				НоваяСтрока = ТаблицаПереработок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальныеЗаписиЗаДень);
				
				Если День(ДетальныеЗаписиЗаДень.Дата) <= 15 Тогда
					
					// Учитываем день в итогах месяца
					Если УчестьДанныеЭтогоДняВИтогахЗаМесяц Тогда
					
						ДниПерваяПоловина = ДниПерваяПоловина + 1;
					
					КонецЕсли;
					
					ЧасыПерваяПоловина = ЧасыПерваяПоловина + ДетальныеЗаписиЗаДень.Часы;
					
				КонецЕсли;
				
				// Учитываем день в итогах месяца
				Если УчестьДанныеЭтогоДняВИтогахЗаМесяц Тогда
					
					ДниЗаМесяц = ДниЗаМесяц + 1;
					
				КонецЕсли;
				
				ЧасыЗаМесяц = ЧасыЗаМесяц + ДетальныеЗаписиЗаДень.Часы;
				
				// Сбрасываем флаг учета дня в итогах месяца
				Если ДанныеОВремениНаДату.Строки.Количество() >= 2 Тогда
				
					УчестьДанныеЭтогоДняВИтогахЗаМесяц = Ложь;	
				
				КонецЕсли;
				
			КонецЕсли;				
			
		КонецЦикла;
		
		ТаблицаОтклонений.Свернуть("ПредставлениеВидаВремени", "Часы");
		
		Если ТаблицаОтклонений.Количество() = 1 Тогда 
			ПредставлениеВидовВремени = ПредставлениеВидовВремени + ТаблицаОтклонений[0].ПредставлениеВидаВремени;
		ИначеЕсли ТаблицаОтклонений.Количество() > 1 Тогда 
			Для Каждого ТекСтрока Из ТаблицаОтклонений Цикл 
				ПредставлениеВидовВремени = ПредставлениеВидовВремени + ТекСтрока.ПредставлениеВидаВремени + Формат(ТекСтрока.Часы, "ЧГ=");
			КонецЦикла;
		КонецЕсли;
		
		НомерДня = День(ДетальныеЗаписиЗаДень.Дата);
		
		ОбластьВремяСтрока.Параметры["Символ" + НомерДня] = ПредставлениеВидовВремени + НочныеЧасыСтрока;
		ОбластьВремяСтрока.Параметры["ДополнительноеЗначение" + НомерДня] = Формат(ТаблицаОтклонений.Итог("Часы"), "ЧГ=");
		
	КонецЦикла;
	
	Если КлючВарианта = "Форма0504421с2015" Тогда
		
		ОбластьВремяСтрока.Параметры.ДниПерваяПоловина = ДниПерваяПоловина;
		ОбластьВремяСтрока.Параметры.ЧасыПерваяПоловина = ЧасыПерваяПоловина;
		ОбластьВремяСтрока.Параметры.ДниЗаМесяц = ДниЗаМесяц;
		ОбластьВремяСтрока.Параметры.ЧасыЗаМесяц = ЧасыЗаМесяц;
	
	Иначе
	
		ОбластьНачисленияСтрока.Параметры.ДниЗаМесяц = ДниНеявокЗаМесяц;
		ОбластьНачисленияСтрока.Параметры.ЧасыЗаМесяц = ЧасыНеявокЗаМесяц;
	
	КонецЕсли;
	
	ТаблицаПереработок.Свернуть("ВидУчетаВремени", "Часы");
	
	Для Каждого ТекСтрока Из ТаблицаПереработок Цикл 
		
		Если КлючВарианта = "Форма0504421с2015" Тогда
		
		Иначе
			
			ДанныеКолонки = ВидыОплатыКолонки.Найти(ТекСтрока.ВидУчетаВремени, "ВидУчетаВремени");
			Если ДанныеКолонки <> Неопределено Тогда 
				НомерКолонки = Прав(ДанныеКолонки.Параметр, 1);
			ИначеЕсли ВидыОплатыКолонки.Количество() = 5 Тогда 
				НомерКолонки = "5";
			Иначе 
				Продолжить;
			КонецЕсли;
			
			ОбластьНачисленияСтрока.Параметры["Часы" + НомерКолонки] = ТекСтрока.Часы;
		
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("МесяцНачисления", ДанныеПоСотруднику.Месяц);
		Отбор.Вставить("Организация", ДанныеПоСотруднику.Организация);
		Отбор.Вставить("Сотрудник", ДанныеПоСотруднику.Сотрудник);
		Отбор.Вставить("ВидРасчетаОбозначениеВТабелеУчетаРабочегоВремени", ТекСтрока.ВидУчетаВремени);
		Отбор.Вставить("Подразделение", ДанныеПоСотруднику.Подразделение);
		
		Если КлючВарианта = "Форма0504421с2015" Тогда
		
		Иначе
			
			СтрокиНачислений = ДанныеОНачислениях.НайтиСтроки(Отбор);
			Если СтрокиНачислений.Количество() > 0 Тогда 
				ОбластьНачисленияСтрока.Параметры["Сумма" + НомерКолонки] = СтрокиНачислений[0].Сумма;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказательСтоимостьЧаса = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник", ДанныеПоСотруднику.Сотрудник);
	Отбор.Вставить("ДатаНачала", ДанныеПоСотруднику.Месяц);
	
	Если КлючВарианта = "Форма0504421с2015" Тогда
	
	Иначе
		
		НайденныеСтроки = СтоимостьЧасаДня.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Показатель = ПоказательСтоимостьЧаса Тогда 
				ОбластьНачисленияСтрока.Параметры.СтоимостьЧаса = Формат(НайденнаяСтрока.Значение, "ЧЦ=15; ЧДЦ=2");
			Иначе 
				ОбластьНачисленияСтрока.Параметры.СтоимостьДня = Формат(НайденнаяСтрока.Значение, "ЧЦ=15; ЧДЦ=2");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ОбластьВремяСтрока) Тогда
		
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТекущийЛист = Новый ТабличныйДокумент;
		
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		ТекущийЛист.АвтоМасштаб = ДокументРезультат.АвтоМасштаб;
		
		Если КлючВарианта = "Форма0504421с2015" Тогда
		
		Иначе
			
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьВремяШапка.Параметры.НомерСтраницы = НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьНачисленияШапка.Параметры.НомерСтраницы = НомерСтраницы;
			Для Каждого ТекСтрока Из ВидыОплатыКолонки Цикл 
				ОбластьНачисленияШапка.Параметры[ТекСтрока.Параметр] = ТекСтрока.Заголовок;
			КонецЦикла;	
		
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьВремяШапка);
		ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
		
		Если КлючВарианта = "Форма0504421с2015" Тогда
		
		Иначе
		
			ДокументРезультат.Присоединить(ОбластьНачисленияШапка);
			
		КонецЕсли;
		
		ТекущийЛист.Вывести(ОбластьВремяШапка);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьВремяСтрока);
	ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
	Если КлючВарианта = "Форма0504421с2015" Тогда
	
	Иначе
	
		ДокументРезультат.Присоединить(ОбластьНачисленияСтрока);
	
	КонецЕсли;
	
	ТекущийЛист.Вывести(ОбластьВремяСтрока);
	
КонецПроцедуры

Функция СписокВидовОплаты(ДанныеОВремени)

	ВидВремениВыходной = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
	
	ВидыОплаты = Новый СписокЗначений;
	УникальныеВидыОплаты = Новый Соответствие;
	
	Для Каждого ДанныеПоОрганизации Из ДанныеОВремени.Строки Цикл
		Для Каждого ДанныеПоСотруднику Из ДанныеПоОрганизации.Строки Цикл
			Для Каждого ДанныеОВремениНаДату Из ДанныеПоСотруднику.Строки Цикл 
				Для Каждого ДетальныеЗаписиЗаДень Из ДанныеОВремениНаДату.Строки Цикл
					Если ЭтоПереработка(ДетальныеЗаписиЗаДень, ВидВремениВыходной)Тогда
						Если УникальныеВидыОплаты[ДетальныеЗаписиЗаДень.ВидУчетаВремени] = Неопределено Тогда
							ВидыОплаты.Добавить(ДетальныеЗаписиЗаДень.ВидУчетаВремени, ДетальныеЗаписиЗаДень.ВидУчетаВремениНаименование);
							УникальныеВидыОплаты.Вставить(ДетальныеЗаписиЗаДень.ВидУчетаВремени, Истина);
						КонецЕсли;
					КонецЕсли;				
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВидыОплаты;
	
КонецФункции	

Функция СписокВидовОплатыПоОрганизации(ДанныеПоОрганизации)
	
	ВидВремениВыходной = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
	
	СписокВидовОплаты = Новый СписокЗначений;
	УникальныеВидыОплаты = Новый Соответствие;
	
	Для Каждого ДанныеПоСотруднику Из ДанныеПоОрганизации.Строки Цикл
		Для Каждого ДанныеОВремениНаДату Из ДанныеПоСотруднику.Строки Цикл 
			Для Каждого ДетальныеЗаписиЗаДень Из ДанныеОВремениНаДату.Строки Цикл
				
				Если ЭтоПереработка(ДетальныеЗаписиЗаДень, ВидВремениВыходной)Тогда 
					
					Если УникальныеВидыОплаты[ДетальныеЗаписиЗаДень.ВидУчетаВремени] = Неопределено Тогда
						СписокВидовОплаты.Добавить(ДетальныеЗаписиЗаДень.ВидУчетаВремени, ДетальныеЗаписиЗаДень.ВидУчетаВремениНаименование);
						УникальныеВидыОплаты.Вставить(ДетальныеЗаписиЗаДень.ВидУчетаВремени, Истина);
					КонецЕсли;
					
				КонецЕсли;				
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат СписокВидовОплаты;
	
КонецФункции

Функция ЭтоПереработка(ДетальныеЗаписиЗаДень, ВидВремениВыходной)

	Если ДетальныеЗаписиЗаДень.Отклонение
		И ДетальныеЗаписиЗаДень.ВидУчетаВремениРабочееВремя 
		И ДетальныеЗаписиЗаДень.ВидУчетаВремени <> ВидВремениВыходной
		И ДетальныеЗаписиЗаДень.ВидУчетаВремениОсновноеВремя <> Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка() Тогда
		
		Возврат Истина;
		
	КонецЕсли;				
	
	Возврат Ложь;
	
КонецФункции

Функция ТаблицаКолонокВидовОплаты(СписокВидовОплаты)
	
	ВидыОплатыКолонки = Новый ТаблицаЗначений;
	ВидыОплатыКолонки.Колонки.Добавить("Параметр");
	ВидыОплатыКолонки.Колонки.Добавить("Заголовок");
	ВидыОплатыКолонки.Колонки.Добавить("ВидУчетаВремени");
	
	СписокВидовОплаты.СортироватьПоПредставлению();
	
	КоличествоВидовОплаты = СписокВидовОплаты.Количество();
	
	Если КоличествоВидовОплаты > 5 Тогда 
		Для Сч = 1 По 4 Цикл
			НоваяСтрока = ВидыОплатыКолонки.Добавить();
			НоваяСтрока.Параметр = "ВидОплаты" + Сч;
			НоваяСтрока.Заголовок = СписокВидовОплаты[Сч-1].Представление;
			НоваяСтрока.ВидУчетаВремени = СписокВидовОплаты[Сч-1].Значение;
		КонецЦикла;
		НоваяСтрока = ВидыОплатыКолонки.Добавить();
		НоваяСтрока.Параметр = "ВидОплаты5";
		НоваяСтрока.Заголовок = "Прочие";
		НоваяСтрока.ВидУчетаВремени = Неопределено;
	Иначе 
		Для Сч = 1 По КоличествоВидовОплаты Цикл
			НоваяСтрока = ВидыОплатыКолонки.Добавить();
			НоваяСтрока.Параметр = "ВидОплаты" + Сч;
			НоваяСтрока.Заголовок = СписокВидовОплаты[Сч-1].Представление;
			НоваяСтрока.ВидУчетаВремени = СписокВидовОплаты[Сч-1].Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидыОплатыКолонки;
	
КонецФункции

Функция ДанныеОНачисленияхСотрудников(НачалоПериода, КонецПериода, ВыводитьПодразделения, ВидыОплаты)
	
	СКД = Отчеты.АнализНачисленийИУдержаний.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиОтчета = СКД.НастройкиПоУмолчанию;
	
	НастройкиОтчета.Структура.Очистить();
	НастройкиОтчета.Отбор.Элементы.Очистить();
	НастройкиОтчета.Выбор.Элементы.Очистить();

	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ПараметрПериод <> Неопределено Тогда
		ПараметрПериод.Значение.ДатаНачала = НачалоПериода;
		ПараметрПериод.Значение.ДатаОкончания = КонецПериода;
		ПараметрПериод.Использование = Истина;
	КонецЕсли;
	
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "МесяцНачисления");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "Организация");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "Сотрудник");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "Подразделение");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени");
	ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиОтчета, "Сумма");
	
	Группировка = ДобавитьГруппировкуСтруктурыКомпоновкиДанных(НастройкиОтчета.Структура); 
	ВыбранныеПоляГруппировки = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ВидыОплаты;
	ЭлементОтбора.Использование = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СКД));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НаборыВнешнихДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, НаборыВнешнихДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений =  Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если Не ВыводитьПодразделения Тогда 
		ТаблицаЗначений.ЗаполнитьЗначения(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), "Подразделение");
	КонецЕсли;
	
	ТаблицаЗначений.Свернуть("МесяцНачисления, Организация, Сотрудник, Подразделение, ВидРасчетаОбозначениеВТабелеУчетаРабочегоВремени", "Сумма");
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ДобавитьГруппировкуСтруктурыКомпоновкиДанных(Родитель, ПоляГруппировки = "", ВыбранныеПоля = "")
	ИменаПолейГруппировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляГруппировки);
	ИменаВыбранныхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранныеПоля); 
	
	Группировка = Родитель.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Использование = Истина;
	
	Для Каждого ИмяПоля Из ИменаПолейГруппировки Цикл
		ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных")); 
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(ИмяПоля));
		ПолеГруппировки.ТипГруппировки  = ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ИменаВыбранныхПолей Цикл
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группировка.Выбор, СокрЛП(ИмяПоля));	
	КонецЦикла;
	
	Порядок = Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Возврат Группировка;
КонецФункции

#КонецОбласти

#КонецОбласти
