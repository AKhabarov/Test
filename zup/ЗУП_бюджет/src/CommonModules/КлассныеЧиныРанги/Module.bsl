
#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьПредставлениеКлассногоЧинаРанга(РеквизитФормы, Сотрудник) Экспорт

	ВедетсяУчетКлассныхЧинов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетКлассныхЧинов");
	Если Не ВедетсяУчетКлассныхЧинов Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОКлассномЧинеРанге = СведенияОКлассномЧинеРангеСотрудника(Сотрудник);
	ТекстЗаголовка = КлассныеЧиныРангиКлиентСервер.ПредставлениеКлассногоЧинаРанга(СведенияОКлассномЧинеРанге.КлассныйЧинРанг, СведенияОКлассномЧинеРанге.ДатаПрисвоения);
	
	РеквизитФормы = ТекстЗаголовка;

КонецПроцедуры

// Заполняет наборы записей регистра КлассныеЧиныРангиФизическихЛиц.
// Параметры:
//		Движения - коллекция движений регистратора.
//		КлассныеЧиныРангиФизическихЛиц - таблица значений с колонками
//			ДатаСобытия
//			ФизическоеЛицо
//			КлассныйЧинРанг
//			ДействуетДо
//
Процедура СформироватьДвиженияКлассныхЧиновРанговФизическихЛиц(Движения, КлассныеЧиныРангиФизическихЛиц) Экспорт

	Если Не ЗначениеЗаполнено(КлассныеЧиныРангиФизическихЛиц) Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Движения.КлассныеЧиныРангиФизическихЛиц.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаПрисвоения,ФизическоеЛицо";
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из КлассныеЧиныРангиФизическихЛиц Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.ФизическоеЛицо = СтрокаДвижений.ФизическоеЛицо;
		НоваяСтрока.Период = СтрокаДвижений.ДатаПрисвоения;
	КонецЦикла;
	
	ИзмеренияДаты.Свернуть("ФизическоеЛицо, Период");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КлассныеЧиныРангиФизическихЛиц",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(КлассныеЧиныРангиФизическихЛиц.Период, ДЕНЬ) КАК ДатаПрисвоения,
	|	КлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо,
	|	КлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг КАК ТекущееЗначение
	|ИЗ
	|	ВТКлассныеЧиныРангиФизическихЛицСрезПоследних КАК КлассныеЧиныРангиФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();

	КлассныеЧиныРангиФизическихЛиц.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("СправочникСсылка.КлассныеЧиныРанги"));
	СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строка = КлассныеЧиныРангиФизическихЛиц.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
	КонецЦикла;
		
	Для Каждого Строка Из КлассныеЧиныРангиФизическихЛиц Цикл
		
		Если Строка.КлассныйЧинРанг = Строка.ТекущееЗначение Тогда
			Продолжить;
		КонецЕсли; 
		
		Движения.КлассныеЧиныРангиФизическихЛиц.Записывать = Истина;
		
		НоваяСтрока = Движения.КлассныеЧиныРангиФизическихЛиц.Добавить();
		НоваяСтрока.Период = Строка.ДатаПрисвоения;
		НоваяСтрока.ФизическоеЛицо = Строка.ФизическоеЛицо;
		НоваяСтрока.КлассныйЧинРанг = Строка.КлассныйЧинРанг;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияОкладовНадбавокПоКласснымЧинамРангам(Движения, ОкладыНадбавкиПоКласснымЧинамРангам) Экспорт 
	
	Для Каждого СтрокаДвижений Из ОкладыНадбавкиПоКласснымЧинамРангам Цикл
		Движения.ОкладыНадбавкиПоКласснымЧинамРангам.Записывать = Истина;
		ЗаполнитьЗначенияСвойств(Движения.ОкладыНадбавкиПоКласснымЧинамРангам.Добавить(), СтрокаДвижений);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначенияДействующихОкладовНадбавокПоКласснымЧинамРангам(ИзмеренияДаты, ИсключаемыйРегистратор = Неопределено) Экспорт 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ОкладыНадбавкиПоКласснымЧинамРангам",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОкладыНадбавкиПоКласснымЧинамРангам.Период,
	               |	ОкладыНадбавкиПоКласснымЧинамРангам.ПериодЗаписи,
	               |	ОкладыНадбавкиПоКласснымЧинамРангам.КлассныйЧинРанг,
	               |	ОкладыНадбавкиПоКласснымЧинамРангам.Размер
	               |ИЗ
	               |	ВТОкладыНадбавкиПоКласснымЧинамРангамСрезПоследних КАК ОкладыНадбавкиПоКласснымЧинамРангам";
	
	ЗначенияДействующихОкладовНадбавок = Запрос.Выполнить().Выгрузить();
	ЗначенияДействующихОкладовНадбавок.Индексы.Добавить("Период, КлассныйЧинРанг");
	
	Возврат ЗначенияДействующихОкладовНадбавок;
	
КонецФункции

Функция ЗначениеОкладаНадбавкиПоКлассномуЧинуРангу(КлассныйЧинРанг, ДатаСобытия, ИсключаемыйРегистратор = Неопределено) Экспорт 
	
	ИзмеренияДаты = ИсходныеДанныеДляОпределенияОкладовНадбавокПоКласснымЧинамРангам();
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.КлассныйЧинРанг = КлассныйЧинРанг;
	НоваяСтрока.Период = ДатаСобытия;
	
	ЗначенияДействующихОкладовНадбавок = ЗначенияДействующихОкладовНадбавокПоКласснымЧинамРангам(ИзмеренияДаты, ИсключаемыйРегистратор);
	
	Отбор = Новый Структура("Период, КлассныйЧинРанг", ДатаСобытия, КлассныйЧинРанг);
	ДанныеОкладаНадбавки = ЗначенияДействующихОкладовНадбавок.НайтиСтроки(Отбор);
	
	ЗначениеОкладаНадбавки = ?(ДанныеОкладаНадбавки.Количество() > 0, ДанныеОкладаНадбавки[0].Размер, Неопределено);
	
	Возврат ЗначениеОкладаНадбавки;
	
КонецФункции

Функция ИсходныеДанныеДляОпределенияОкладовНадбавокПоКласснымЧинамРангам() Экспорт 
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("КлассныйЧинРанг", Новый ОписаниеТипов("СправочникСсылка.КлассныеЧиныРанги"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Возврат ИзмеренияДаты;
	
КонецФункции

Функция ПоказательОкладНадбавкаЗаКлассныйЧин() Экспорт 
	
	НачислятьОкладЗаКлассныйЧин = ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		Или ПолучитьФункциональнуюОпцию("НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим");
		
	Показатель = ?(НачислятьОкладЗаКлассныйЧин,
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладЗаКлассныйЧин"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиКОкладуЗаКлассныйЧин"));
		
	Возврат Показатель;	
		
КонецФункции

Функция СведенияОКлассномЧинеРангеСотрудника(Сотрудник, ДатаСобытия = '00010101') Экспорт 
	
	СведенияОКлассномЧинеРанге = Новый Структура("КлассныйЧинРанг, ДатаПрисвоения");
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлассныеЧиныСрезПоследних.Период КАК Период,
		|	КлассныеЧиныСрезПоследних.КлассныйЧинРанг КАК КлассныйЧинРанг
		|ИЗ
		|	РегистрСведений.КлассныеЧиныРангиФизическихЛиц.СрезПоследних(
		|			&ДатаСобытия,
		|			ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					ФизическиеЛица.ФизическоеЛицо
		|				ИЗ
		|					ВТФизическиеЛица КАК ФизическиеЛица)) КАК КлассныеЧиныСрезПоследних";
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СведенияОКлассномЧинеРанге.КлассныйЧинРанг = Выборка.КлассныйЧинРанг;
			СведенияОКлассномЧинеРанге.ДатаПрисвоения = Выборка.Период;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияОКлассномЧинеРанге;
	
КонецФункции

Функция ПриемНаРаботуСведенияОКлассныхЧинахРангах(ДокументСсылка) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриемНаРаботу.ДатаПрисвоения,
	               |	ПриемНаРаботу.ФизическоеЛицо,
	               |	ПриемНаРаботу.КлассныйЧинРанг
	               |ИЗ
	               |	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	               |ГДЕ
	               |	ПриемНаРаботу.ДатаПрисвоения <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ПриемНаРаботу.КлассныйЧинРанг <> ЗНАЧЕНИЕ(Справочник.КлассныеЧиныРанги.ПустаяСсылка)
	               |	И ПриемНаРаботу.Ссылка = &Ссылка";
				   
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗЛИЧНЫЕ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
	КонецЕсли;
				   
	СведенияОКлассныхЧинахРангах = Запрос.Выполнить().Выгрузить();
	
	Возврат СведенияОКлассныхЧинахРангах;			   
	
КонецФункции

Функция КадровыйПереводСведенияОКлассныхЧинахРангах(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыйПеревод.ДатаПрисвоения,
	               |	КадровыйПеревод.ФизическоеЛицо,
	               |	КадровыйПеревод.КлассныйЧинРанг
	               |ИЗ
	               |	Документ.КадровыйПеревод КАК КадровыйПеревод
	               |ГДЕ
	               |	КадровыйПеревод.ДатаПрисвоения <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И КадровыйПеревод.КлассныйЧинРанг <> ЗНАЧЕНИЕ(Справочник.КлассныеЧиныРанги.ПустаяСсылка)
	               |	И КадровыйПеревод.СменаВидаДоговора
	               |	И КадровыйПеревод.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ТрудовойДоговор)
	               |	И КадровыйПеревод.Ссылка = &Ссылка";
				   
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗЛИЧНЫЕ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком.Сотрудники");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадровыйПеревод.ВидДоговора", "КадровыйПеревод.Ссылка.ВидДоговора");
	КонецЕсли;
				   
	СведенияОКлассныхЧинахРангах = Запрос.Выполнить().Выгрузить();
	
	Возврат СведенияОКлассныхЧинахРангах;			   
	
КонецФункции

Функция НачальнаяШтатнаяРасстановкаСведенияОКлассныхЧинахРангах(ДокументСсылка) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачальнаяШтатнаяРасстановка.ДатаПрисвоения,
	               |	НачальнаяШтатнаяРасстановка.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	НачальнаяШтатнаяРасстановка.КлассныйЧинРанг
	               |ИЗ
	               |	Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановка
	               |ГДЕ
	               |	НачальнаяШтатнаяРасстановка.ДатаПрисвоения <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И НачальнаяШтатнаяРасстановка.КлассныйЧинРанг <> ЗНАЧЕНИЕ(Справочник.КлассныеЧиныРанги.ПустаяСсылка)
	               |	И НачальнаяШтатнаяРасстановка.Ссылка.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ТрудовойДоговор)
	               |	И НачальнаяШтатнаяРасстановка.Ссылка = &Ссылка";
				   
	СведенияОКлассныхЧинахРангах = Запрос.Выполнить().Выгрузить();
	
	Возврат СведенияОКлассныхЧинахРангах;			   
	
КонецФункции

Функция ВосстановлениеВДолжностиСведенияОКлассныхЧинахРангах(ДокументСсылка) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВосстановлениеВДолжности.ДатаПрисвоения,
	               |	ВосстановлениеВДолжности.ФизическоеЛицо,
	               |	ВосстановлениеВДолжности.КлассныйЧинРанг
	               |ИЗ
	               |	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
	               |ГДЕ
	               |	ВосстановлениеВДолжности.ДатаПрисвоения <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ВосстановлениеВДолжности.КлассныйЧинРанг <> ЗНАЧЕНИЕ(Справочник.КлассныеЧиныРанги.ПустаяСсылка)
	               |	И ВосстановлениеВДолжности.Ссылка = &Ссылка";
				   
	СведенияОКлассныхЧинахРангах = Запрос.Выполнить().Выгрузить();
	
	Возврат СведенияОКлассныхЧинахРангах;			   
	
КонецФункции

Процедура УстановитьВидимостьКлассногоЧинаРангаВКадровомПереводе(Форма) Экспорт 
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКлассныйЧин", "Видимость",
		Объект.СменаВидаДоговора И Объект.ВидДоговора <> Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор);
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеОкладаНадбавкиЗаКлассныйЧинРанг(Форма, КоллекцияСтрокНачислений, ОписаниеТаблицы, РежимРаботы, КлассныйЧинРанг, ДатаСобытия) Экспорт 
	
	Показатель = ПоказательОкладНадбавкаЗаКлассныйЧин();
	ЗначениеПоказателя = ЗначениеОкладаНадбавкиПоКлассномуЧинуРангу(КлассныйЧинРанг, ДатаСобытия);
			
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы, , РежимРаботы);
	
	Для Каждого СтрокаНачислений Из КоллекцияСтрокНачислений Цикл
		
		Действие = Неопределено;
		СтрокаНачислений.Свойство("Действие", Действие);
		
		Если Действие <> Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Для СчетчикПоказателей = 1 По КоличествоПоказателей Цикл
				Если Не ЗначениеЗаполнено(СтрокаНачислений["Показатель" + СчетчикПоказателей]) Тогда
					Прервать;
				КонецЕсли; 
				Если СтрокаНачислений["Показатель" + СчетчикПоказателей] = Показатель Тогда
					СтрокаНачислений["Значение" + СчетчикПоказателей] = ЗначениеПоказателя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ПрисвоениеКлассногоЧинаРанга);
	СписокОбъектов.Добавить(Документы.ПрисвоениеКлассногоЧинаРангаСписком);
	СписокОбъектов.Добавить(Документы.УтверждениеОкладовНадбавокЗаКлассныеЧины);
	
КонецПроцедуры

#КонецОбласти

