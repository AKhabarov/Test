
#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.27";
	Обработчик.Процедура = "ГосударственнаяСлужба.УстановитьНастройкиНеИспользоватьГосударственнуюМуниципальнуюСлужбу";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхДоговоровМуниципальныхСлужащих) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.18.34";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхДоговоровМуниципальныхСлужащих.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхКонтрактовГосслужащих) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.18.34";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхКонтрактовГосслужащих.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольненияСГосударственнойСлужбы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.18.34";
		Обработчик.Процедура = "Справочники.ОснованияУвольненияСГосударственнойСлужбы.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольненияСМуниципальнойСлужбы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.18.34";
		Обработчик.Процедура = "Справочники.ОснованияУвольненияСМуниципальнойСлужбы.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.30";
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьДополнительныеСвойстваНачисленийГосслужащихРасчетСохраняемогоДенежногоСодержания";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.30";
	Обработчик.Процедура = "ГосударственнаяСлужба.УстановитьНастройкуИспользоватьРасчетСохраняемогоДенежногоСодержания";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.132";
	Обработчик.Процедура = "ГосударственнаяСлужба.УстановитьНастройкуИспользоватьУчетКлассныхЧинов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.72";
	Обработчик.Процедура = "Справочники.ВидыВыплатБывшимСотрудникам.СоздатьВидыВыплатБывшимСотрудникамПоНастройкам";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхДоговоровМуниципальныхСлужащих) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.24.24";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхДоговоровМуниципальныхСлужащих.ОбновитьНаименованияИзКлассификатора";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхКонтрактовГосслужащих) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.24.24";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхКонтрактовГосслужащих.ОбновитьНаименованияИзКлассификатора";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольненияСГосударственнойСлужбы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.24.24";
		Обработчик.Процедура = "Справочники.ОснованияУвольненияСГосударственнойСлужбы.ОбновитьНаименованияИзКлассификатора";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольненияСМуниципальнойСлужбы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.24.24";
		Обработчик.Процедура = "Справочники.ОснованияУвольненияСМуниципальнойСлужбы.ОбновитьНаименованияИзКлассификатора";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.25";
	Обработчик.Процедура = "ГосударственнаяСлужба.УстановитьИспользованиеПараметровНаборовСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.76";
	Обработчик.Процедура = "ГосударственнаяСлужба.УточнитьСвойстваОкладаЗаКлассныйЧинВоинскоеСпециальноеЗвание";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.76";
	Обработчик.Процедура = "ГосударственнаяСлужба.СоздатьДокументыУтвержденияОкладовНадбавокЗаКлассныйЧинРанг";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.76";
	Обработчик.Процедура = "ГосударственнаяСлужба.СоздатьДокументыУтвержденияОкладовПоВоинскимСпециальнымЗваниям";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.76";
	Обработчик.Процедура = "ГосударственнаяСлужба.СоздатьДокументыПрисвоенияКлассногоЧинаРанга";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.76";
	Обработчик.Процедура = "ГосударственнаяСлужба.СоздатьДокументыПрисвоенияВоинскогоСпециальногоЗвания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.26";
	Обработчик.Процедура = "ГосударственнаяСлужба.УточнитьДопустимостьНулевогоЗначенияОкладаЗаКлассныйЧинВоинскоеСпециальноеЗвание";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.49";
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьПозицииВКадровыхПриказах";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольненияСГосударственнойСлужбы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.27";
		Обработчик.Процедура = "Справочники.ОснованияУвольненияСМуниципальнойСлужбы.ОбновитьНаименованияИзКлассификатора";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.43";
	Обработчик.Процедура = "ГосударственнаяСлужба.ОбновитьЗависимыеНастройкиГосударственнаяСлужба";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.106";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("117d3329-ab49-4626-8812-e85c44a5f0f4");
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьПодключаемыеХарактеристики";
	Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.107";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("94dc9be0-e15d-478e-a36f-8bcb4ab53567");
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьДополнительныеСвойстваНачисленийРКиСН";
	Обработчик.Комментарий = НСтр("ru = 'Обновление дополнительных свойств начислений РК и СН'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.107";
	Обработчик.Процедура = "ГосударственнаяСлужба.УстановитьНастройкиГосударственнойСлужбы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.107";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc564269-7d8a-4abe-add9-75b582bd9b86");
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьСоставСохраняемогоДенежногоСодержания";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра ""Состав месячного денежного содержания (довольствия)"".'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.107";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e818fb97-54be-46b6-b359-7be0d03e1812");
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьДополнительныеСвойстваДолжностейГосслужащих";
	Обработчик.Комментарий = НСтр("ru = 'Обновление свойств должностей в регистре ""Свойства должностей государственной службы"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.107";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1c56a869-ce70-4af1-9cb2-786f02a6543f");
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьРегистрСтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра ""Строки отчетности расходов и численности работников государственных органов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.125";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("117d3329-ab49-4626-8812-e85c44a5f0e4");
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьПодключаемыеХарактеристики";
	Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.133";
	Обработчик.Процедура = "ГосударственнаяСлужба.СоздатьПоказательИНачислениеСДД";
	Обработчик.Комментарий = НСтр("ru = 'Создание новых начислений денежного довольствия.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.133";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cefb89aa-a6a1-408b-aaec-258e463cf5a4");
	Обработчик.Процедура = "ГосударственнаяСлужба.СпособыВыплатыЗарплатыДобавитьВыплатыВоеннослужащим";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способов выплаты зарплаты ""Отпуска по беременности и родам военнослужащих"", ""Отпуска по уходу за ребенком военнослужащих"", ""Исключения из списков части"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.6";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7e480d76-b061-48b2-9db9-36ad65351853");
	Обработчик.Процедура = "ГосударственнаяСлужба.СпособыВыплатыЗарплатыДобавитьОтпускВоеннослужащего";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способов выплаты зарплаты ""Отпуск военнослужащего"".'");
			
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольненияСГосударственнойСлужбы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.3.11";
		Обработчик.Процедура = "Справочники.ОснованияУвольненияСГосударственнойСлужбы.ОбновитьСправочникИзКлассификатора";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.18";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5f9e1a4a-1eb9-48da-b513-15d4d437a607");
	Обработчик.Процедура = "ГосударственнаяСлужба.НастроитьУчетСудей";
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек учета судей.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.21";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("febf67dc-540e-4546-a2d7-09635b0b16a2");
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьПодключаемыеХарактеристики";
	Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.74";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4eb71353-802c-4b83-aae6-93f5c552a3df");
	Обработчик.Процедура = "ГосударственнаяСлужба.ИзменитьФормулыНачисленийСохраняемогоДенежногоСодержания";
	Обработчик.Комментарий = НСтр("ru = 'Изменение формул начислений, расчитываемых от сохраняемого денежного содержания.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.89";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("aae7024c-fb6b-483d-a556-f505f999a768");
	Обработчик.Процедура = "ГосударственнаяСлужба.ЗаполнитьПризнакиИзмененияТерриторийВКадровыхПереводах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.2";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "ГосударственнаяСлужба.СоздатьНачислениеОплатаДнейУходаЗаДетьмиИнвалидамиГосслужащих";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("68ebc952-5aa8-4efc-b946-aec353360f7f");
	Обработчик.Комментарий = НСтр("ru='Создает начисление ""Оплата дней ухода за детьми-инвалидами (сохр. ден. содержание)""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "ГосударственнаяСлужба.УстановитьПараметрыНабораСвойствВоинскиеСпециальныеЗвания";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5f127eec-e30d-45bc-b9d4-a3810f199532");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "ГосударственнаяСлужба.УстановитьПараметрыНабораСвойствКлассныеЧиныРанги";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("92f5f2b0-ed45-4741-bc2a-d0a965028071");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.6";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9012adfd-b698-40ad-a8c3-3eaa0db08cd2");
	Обработчик.Процедура = "ГосударственнаяСлужба.СоздатьПоказательИНачислениеСверхурочныхВоеннослужащих";
	Обработчик.Комментарий = НСтр("ru = 'Создание новых начислений денежного довольствия.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.6";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("539c7076-2797-40fb-af04-4d35915b8914");
	Обработчик.Процедура = "ГосударственнаяСлужба.СпособыВыплатыЗарплатыДобавитьОплатуСверхурочныхВоеннослужащим";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способов выплаты зарплаты ""Оплата сверхурочных часов военнослужащим"".'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.84";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("df1bbf1c-5655-4121-80be-97c6fb32791e");
	Обработчик.Процедура = "ГосударственнаяСлужба.УточнитьСвойстваПоказателяДенежногоСодержания";
	Обработчик.Комментарий = НСтр("ru = 'Настройка показателя ""Сохраняемое денежное содержание"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.84";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("baccdeff-a859-489e-9f9d-d1bd50043592");
	Обработчик.Процедура = "ГосударственнаяСлужба.УточнитьСвойстваНачисленийДенежноеСодержаниеНаПериодКомандировки";
	Обработчик.Комментарий = НСтр("ru = 'Настройка начислений ""Денежное содержание на период командировки"".'");
	
	
КонецПроцедуры

Процедура УстановитьНастройкиНеИспользоватьГосударственнуюМуниципальнуюСлужбу() Экспорт
	
	НеИспользоватьГосударственнуюМуниципальнуюСлужбу = Константы.НеИспользоватьГосударственнуюМуниципальнуюСлужбу.Получить();
	ИспользоватьГосударственнуюМуниципальнуюСлужбу   = Константы.ИспользоватьГосударственнуюСлужбу.Получить()
		Или Константы.ИспользоватьМуниципальнуюСлужбу.Получить()
		Или Константы.ИспользоватьВоеннуюСлужбу.Получить();
	
	Если НеИспользоватьГосударственнуюМуниципальнуюСлужбу = ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
		Константы.НеИспользоватьГосударственнуюМуниципальнуюСлужбу.Установить(Не ИспользоватьГосударственнуюМуниципальнуюСлужбу);
	КонецЕсли;
	
	Если НЕ Константы.ИспользоватьМуниципальнуюСлужбу.Получить() Тогда
		
		Если Константы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим.Получить() Тогда
			Константы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим.Установить(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьИспользованиеПараметровНаборовСвойств();
	
КонецПроцедуры

Процедура УстановитьНастройкуИспользоватьРасчетСохраняемогоДенежногоСодержания() Экспорт
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбу  = Константы.ИспользоватьГосударственнуюСлужбу.Получить();
	
	Если ИспользоватьГосударственнуюМуниципальнуюСлужбу И Не Константы.ИспользоватьРасчетСохраняемогоДенежногоСодержания.Получить() Тогда
		Константы.ИспользоватьРасчетСохраняемогоДенежногоСодержания.Установить(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьНастройкуИспользоватьУчетКлассныхЧинов() Экспорт

	Если Константы.ИспользоватьГосударственнуюСлужбу.Получить() Или Константы.ИспользоватьМуниципальнуюСлужбу.Получить() И Константы.УдалитьВестиУчетКлассныхЧиновМуниципальныхСлужащих.Получить() Тогда
		Константы.ИспользоватьУчетКлассныхЧинов.Установить(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДополнительныеСвойстваНачисленийГосслужащихРасчетСохраняемогоДенежногоСодержания() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление,
	|	СвойстваНачислений.ОтношениеКДенежномуСодержанию,
	|	ИСТИНА КАК ЯвляетсяДенежнымСодержанием,
	|	ВЫБОР
	|		КОГДА СвойстваНачислений.УчетПриРасчетеОтпуска = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПремияЗаОсобоВажныеИСложныеЗадания)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.МатериальнаяПомощь)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям)
	|					КОГДА СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ЕдиновременнаяВыплатаКОтпуску)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПрочиеВыплаты)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется)
	|				КОНЕЦ
	|		ИНАЧЕ СвойстваНачислений.УчетПриРасчетеОтпуска
	|	КОНЕЦ КАК УчетПриРасчетеОтпуска,
	|	ВЫБОР
	|		КОГДА СвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПремияЗаОсобоВажныеИСложныеЗадания)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.МатериальнаяПомощь)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается)
	|					КОГДА СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ЕдиновременнаяВыплатаКОтпуску)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПрочиеВыплаты)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется)
	|				КОНЕЦ
	|		ИНАЧЕ СвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания
	|	КОНЕЦ КАК УчетПриРасчетеСохраняемогоДенежногоСодержания,
	|	ВЫБОР
	|		КОГДА СвойстваНачислений.ЯвляетсяДенежнымСодержанием ЕСТЬ NULL 
	|				ИЛИ СвойстваНачислений.УчетВКомпенсацииПриУвольнении = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПремияЗаОсобоВажныеИСложныеЗадания)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.МатериальнаяПомощь)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям)
	|					КОГДА СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ЕдиновременнаяВыплатаКОтпуску)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПрочиеВыплаты)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям)
	|					КОГДА СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаВыслугуЛет)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаОсобыеУсловияСлужбы)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаСекретность)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ЕжемесячноеДенежноеПоощрение)
	|							ИЛИ СвойстваНачислений.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПрочиеЕжемесячныеВыплаты)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется)
	|				КОНЕЦ
	|		ИНАЧЕ СвойстваНачислений.УчетВКомпенсацииПриУвольнении
	|	КОНЕЦ КАК УчетВКомпенсацииПриУвольнении
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачислений
	|		ПО Начисления.Ссылка = СвойстваНачислений.Начисление
	|ГДЕ
	|	СвойстваНачислений.ЯвляетсяДенежнымСодержанием";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.СвойстваНачисленийГосударственныхСлужащих.СоздатьНаборЗаписей();
		Набор.Отбор.Начисление.Установить(Выборка.Начисление);
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		
	КонецЦикла;
	
	ЗаполнитьДополнительныеСвойстваНачислений(Истина);

КонецПроцедуры

Процедура ИспользоватьГосударственнуюМуниципальнуюСлужбуПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНастройкиНеИспользоватьГосударственнуюМуниципальнуюСлужбу();
	
КонецПроцедуры

// Функция формирует значение для отбора начислений по значению свойства ЯвляетсяДенежнымСодержанием.
//
Функция ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Форма.Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьИспользованиеПараметровНаборовСвойств() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьВоеннуюСлужбу.Получить();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЗачислениеВСпискиЧасти", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЗачислениеВСпискиЧастиСписком", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_КадровыйПереводВоеннослужащего", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_КадровыйПереводВоеннослужащегоСписком", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИсключениеИзСписковЧасти", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИсключениеИзСписковЧастиСписком", ПараметрыНабора);
	
КонецПроцедуры

Процедура УточнитьСвойстваОкладаЗаКлассныйЧинВоинскоеСпециальноеЗвание() Экспорт 
	
	СписокПоказателей = Новый Массив;
	
	ОкладЗаКлассныйЧин = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладЗаКлассныйЧин");
	Если ОкладЗаКлассныйЧин <> Неопределено Тогда 
		СписокПоказателей.Добавить(ОкладЗаКлассныйЧин);
	КонецЕсли;
	
	ПроцентНадбавкиКОкладуЗаКлассныйЧин = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиКОкладуЗаКлассныйЧин");
	Если ПроцентНадбавкиКОкладуЗаКлассныйЧин <> Неопределено Тогда 
		СписокПоказателей.Добавить(ПроцентНадбавкиКОкладуЗаКлассныйЧин);
	КонецЕсли;
	
	ОкладПоВоинскомуЗванию = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоВоинскомуЗванию");
	Если ОкладПоВоинскомуЗванию <> Неопределено Тогда 
		СписокПоказателей.Добавить(ОкладПоВоинскомуЗванию);
	КонецЕсли;
	
	ОкладПоСпециальномуЗванию = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоСпециальномуЗванию");
	Если ОкладПоСпециальномуЗванию <> Неопределено Тогда 
		СписокПоказателей.Добавить(ОкладПоСпециальномуЗванию);
	КонецЕсли;
	
	Если СписокПоказателей.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ИзмененныеНачисления = Новый Соответствие;
	ПакетВидовРасчета = Новый Массив;
	
	ЗначениеРассчитываетсяАвтоматически = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокПоказателей, "ЗначениеРассчитываетсяАвтоматически");
	
	Если ОкладЗаКлассныйЧин <> Неопределено И ЗначениеРассчитываетсяАвтоматически[ОкладЗаКлассныйЧин] Тогда
		
		ПоказательОбъект = ОкладЗаКлассныйЧин.ПолучитьОбъект();
		ПоказательОбъект.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ПоказательОбъект.Записать();
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Показатель", ОкладЗаКлассныйЧин);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
		               |		ПО НачисленияПоказатели.Ссылка = СвойстваНачисленийГосударственныхСлужащих.Начисление
		               |			И (СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ОкладЗаКлассныйЧин))
		               |			И (НачисленияПоказатели.Показатель = &Показатель)";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НайденныеСтроки = НачислениеОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ОкладЗаКлассныйЧин));
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
			КонецЦикла;
			ИзмененныеНачисления.Вставить(Выборка.Ссылка, Истина);
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроцентНадбавкиКОкладуЗаКлассныйЧин <> Неопределено И ЗначениеРассчитываетсяАвтоматически[ПроцентНадбавкиКОкладуЗаКлассныйЧин] Тогда
		
		ПоказательОбъект = ПроцентНадбавкиКОкладуЗаКлассныйЧин.ПолучитьОбъект();
		ПоказательОбъект.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ПоказательОбъект.Записать();
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Показатель", ПроцентНадбавкиКОкладуЗаКлассныйЧин);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		               |ГДЕ
		               |	НачисленияПоказатели.Показатель = &Показатель";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НайденныеСтроки = НачислениеОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ПроцентНадбавкиКОкладуЗаКлассныйЧин));
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
			КонецЦикла;
			ИзмененныеНачисления.Вставить(Выборка.Ссылка, Истина);
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОкладПоВоинскомуЗванию <> Неопределено И ЗначениеРассчитываетсяАвтоматически[ОкладПоВоинскомуЗванию] Тогда
		
		ПоказательОбъект = ОкладПоВоинскомуЗванию.ПолучитьОбъект();
		ПоказательОбъект.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ПоказательОбъект.Записать();
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Показатель", ОкладПоВоинскомуЗванию);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
		               |		ПО НачисленияПоказатели.Ссылка = СвойстваНачисленийГосударственныхСлужащих.Начисление
		               |			И (СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскомуЗванию))
		               |			И (НачисленияПоказатели.Показатель = &Показатель)";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НайденныеСтроки = НачислениеОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ОкладПоВоинскомуЗванию));
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
			КонецЦикла;
			ИзмененныеНачисления.Вставить(Выборка.Ссылка, Истина);
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОкладПоСпециальномуЗванию <> Неопределено И ЗначениеРассчитываетсяАвтоматически[ОкладПоСпециальномуЗванию] Тогда
		
		ПоказательОбъект = ОкладПоСпециальномуЗванию.ПолучитьОбъект();
		ПоказательОбъект.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ПоказательОбъект.Записать();
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Показатель", ОкладПоСпециальномуЗванию);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
		               |		ПО НачисленияПоказатели.Ссылка = СвойстваНачисленийГосударственныхСлужащих.Начисление
		               |			И (СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоСпециальномуЗванию))
		               |			И (НачисленияПоказатели.Показатель = &Показатель)";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НайденныеСтроки = НачислениеОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ОкладПоСпециальномуЗванию));
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
			КонецЦикла;
			ИзмененныеНачисления.Вставить(Выборка.Ссылка, Истина);
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета);
	
	Если ИзмененныеНачисления.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СписокНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ИзмененныеНачисления, "Ключ");
	
	ИспользоватьВоеннуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу");
		
	ОкладПоВоинскомуСпециальномуЗванию = ВоинскиеСпециальныеЗвания.ПоказательОкладПоВоинскомуСпециальномуЗванию();	
	ОкладНадбавкаЗаКлассныйЧин = КлассныеЧиныРанги.ПоказательОкладНадбавкаЗаКлассныйЧин();	
		
	// Возврат из отпуска по уходу за ребенком
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка.ДатаВозврата КАК Период,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка.Сотрудник КАК ФизическоеЛицо,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
	               |ГДЕ
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Начисление В(&СписокНачислений)
	               |	И ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Действие <> &Отменить
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК РабочееМесто,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ВозвратИзОтпускаПоУходуЗаРебенком"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.РабочееМесто.Имя = "Сотрудник";
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Зачисление в списки части
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладПоВоинскомуСпециальномуЗванию);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗачислениеВСпискиЧастиНачисления.Ссылка.ДатаЗачисления КАК Период,
	               |	ЗачислениеВСпискиЧастиНачисления.Ссылка.Сотрудник КАК Сотрудник,
	               |	ЗачислениеВСпискиЧастиНачисления.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ЗачислениеВСпискиЧастиНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	               |	ЗачислениеВСпискиЧастиНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ЗачислениеВСпискиЧасти.Начисления КАК ЗачислениеВСпискиЧастиНачисления
	               |ГДЕ
	               |	ЗачислениеВСпискиЧастиНачисления.Начисление В(&СписокНачислений)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗачислениеВСпискиЧасти"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладПоВоинскомуСпециальномуЗванию);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Изменение мест работы
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзменениеМестРаботыНачисления.Ссылка.ДатаНачала КАК Период,
	               |	ИзменениеМестРаботыСотрудники.Сотрудник КАК Сотрудник,
	               |	ИзменениеМестРаботыСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВЫБОР
	               |		КОГДА ИзменениеМестРаботыНачисления.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(ИзменениеМестРаботыНачисления.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	ИзменениеМестРаботыНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ИзменениеМестРаботы.Начисления КАК ИзменениеМестРаботыНачисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеМестРаботы.Сотрудники КАК ИзменениеМестРаботыСотрудники
	               |		ПО ИзменениеМестРаботыНачисления.Ссылка = ИзменениеМестРаботыСотрудники.Ссылка
	               |			И ИзменениеМестРаботыНачисления.ИдентификаторСтрокиСотрудника = ИзменениеМестРаботыСотрудники.ИдентификаторСтрокиСотрудника
	               |ГДЕ
	               |	ИзменениеМестРаботыНачисления.Начисление В(&СписокНачислений)
	               |	И ИзменениеМестРаботыНачисления.Действие <> &Отменить
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ИзменениеМестРаботы"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("Сотрудник, Показатель", Выборка.Сотрудник, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
				КонецЦикла;
			Иначе 
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Показатели.Добавить(), Выборка);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Изменение оплаты труда
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзменениеОплатыТрудаНачисления.Ссылка.ДатаИзменения КАК Период,
	               |	ИзменениеОплатыТрудаНачисления.Ссылка.Сотрудник КАК Сотрудник,
	               |	ИзменениеОплатыТрудаНачисления.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ИзменениеОплатыТрудаНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	               |	ИзменениеОплатыТрудаНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ИзменениеОплатыТруда.Начисления КАК ИзменениеОплатыТрудаНачисления
	               |ГДЕ
	               |	ИзменениеОплатыТрудаНачисления.Начисление В(&СписокНачислений)
	               |	И ИзменениеОплатыТрудаНачисления.Действие <> &Отменить
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ИзменениеОплатыТруда"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Изменение плановых начислений
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзменениеПлановыхНачисленийСотрудники.ДатаИзменения КАК Период,
	               |	ИзменениеПлановыхНачисленийСотрудники.Сотрудник КАК Сотрудник,
	               |	ИзменениеПлановыхНачисленийСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВЫБОР
	               |		КОГДА ИзменениеПлановыхНачисленийСотрудники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(ИзменениеПлановыхНачисленийСотрудники.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	ИзменениеПлановыхНачисленийНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ИзменениеПлановыхНачислений.НачисленияСотрудников КАК ИзменениеПлановыхНачисленийНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПлановыхНачислений.Сотрудники КАК ИзменениеПлановыхНачисленийСотрудники
	               |		ПО ИзменениеПлановыхНачисленийНачисления.Ссылка = ИзменениеПлановыхНачисленийСотрудники.Ссылка
	               |			И ИзменениеПлановыхНачисленийНачисления.ИдентификаторСтрокиСотрудника = ИзменениеПлановыхНачисленийСотрудники.ИдентификаторСтрокиСотрудника
	               |			И (ИзменениеПлановыхНачисленийНачисления.Начисление В (&СписокНачислений))
	               |			И (ИзменениеПлановыхНачисленийНачисления.Действие <> &Отменить)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ИзменениеПлановыхНачислений"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("Сотрудник, Показатель", Выборка.Сотрудник, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.ПоказателиСотрудников.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
				КонецЦикла;
			Иначе 
				ЗаполнитьЗначенияСвойств(ДокументОбъект.ПоказателиСотрудников.Добавить(), Выборка);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Изменение условий оплаты отпуска по уходу за ребенком
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.Ссылка.ДатаИзменения КАК Период,
	               |	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	               |	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.Ссылка.Сотрудник КАК ФизическоеЛицо,
	               |	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
				   |	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Начисления КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления
	               |ГДЕ
	               |	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.Начисление В(&СписокНачислений)
	               |	И ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.Действие <> &Отменить
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК РабочееМесто,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.РабочееМесто.Имя = "Сотрудник";
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Кадровый перевод
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыйПереводНачисления.Ссылка.ДатаНачала КАК Период,
	               |	КадровыйПереводНачисления.Ссылка.Сотрудник КАК Сотрудник,
	               |	КадровыйПереводНачисления.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадровыйПереводНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ВЫБОР
	               |		КОГДА КадровыйПереводНачисления.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(КадровыйПереводНачисления.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	КадровыйПереводНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.КадровыйПеревод.Начисления КАК КадровыйПереводНачисления
	               |ГДЕ
	               |	КадровыйПереводНачисления.Начисление В(&СписокНачислений)
	               |	И КадровыйПереводНачисления.Действие <> &Отменить
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.КадровыйПеревод"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Кадровый перевод военнослужащего
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладПоВоинскомуСпециальномуЗванию);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыйПереводВоеннослужащегоНачисления.Ссылка.ДатаПеревода КАК Период,
	               |	КадровыйПереводВоеннослужащегоНачисления.Ссылка.Сотрудник КАК Сотрудник,
	               |	КадровыйПереводВоеннослужащегоНачисления.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадровыйПереводВоеннослужащегоНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	               |	КадровыйПереводВоеннослужащегоНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.КадровыйПереводВоеннослужащего.Начисления КАК КадровыйПереводВоеннослужащегоНачисления
	               |ГДЕ
	               |	КадровыйПереводВоеннослужащегоНачисления.Начисление В(&СписокНачислений)
	               |	И КадровыйПереводВоеннослужащегоНачисления.Действие <> &Отменить
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.КадровыйПереводВоеннослужащего"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладПоВоинскомуСпециальномуЗванию);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Кадровый перевод списком
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыйПереводСпискомСотрудники.ДатаНачала КАК Период,
	               |	КадровыйПереводСпискомСотрудники.Сотрудник КАК Сотрудник,
	               |	КадровыйПереводСпискомСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадровыйПереводСпискомНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ВЫБОР
	               |		КОГДА КадровыйПереводСпискомСотрудники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(КадровыйПереводСпискомСотрудники.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	КадровыйПереводСпискомНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.КадровыйПереводСписком.Начисления КАК КадровыйПереводСпискомНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
	               |		ПО КадровыйПереводСпискомНачисления.Ссылка = КадровыйПереводСпискомСотрудники.Ссылка
	               |			И КадровыйПереводСпискомНачисления.ИдентификаторСтрокиСотрудника = КадровыйПереводСпискомСотрудники.ИдентификаторСтрокиСотрудника
	               |			И (КадровыйПереводСпискомНачисления.Начисление В (&СписокНачислений))
	               |			И (КадровыйПереводСпискомНачисления.Действие <> &Отменить)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.КадровыйПереводСписком"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Назначение планового начисления
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НазначениеПлановогоНачисленияСотрудники.ДатаНазначения КАК Период,
	               |	НазначениеПлановогоНачисленияСотрудники.Сотрудник КАК Сотрудник,
	               |	НазначениеПлановогоНачисленияСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВЫБОР
	               |		КОГДА НазначениеПлановогоНачисленияСотрудники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(НазначениеПлановогоНачисленияСотрудники.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	НазначениеПлановогоНачисленияСотрудники.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.НазначениеПлановогоНачисления.Сотрудники КАК НазначениеПлановогоНачисленияСотрудники
	               |ГДЕ
	               |	НазначениеПлановогоНачисленияСотрудники.Ссылка.Начисление В(&СписокНачислений)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.НазначениеПлановогоНачисления"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("Сотрудник, Показатель", Выборка.Сотрудник, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.ПоказателиСотрудников.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
				КонецЦикла;
			Иначе 
				ЗаполнитьЗначенияСвойств(ДокументОбъект.ПоказателиСотрудников.Добавить(), Выборка);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Назначение подработки
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НазначениеПодработкиНачисления.Ссылка.ДатаНачала КАК Период,
	               |	НазначениеПодработкиНачисления.Ссылка.СовмещающийСотрудник КАК Сотрудник,
	               |	НазначениеПодработкиНачисления.Ссылка.СовмещающийСотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	НазначениеПодработкиНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ВЫБОР
	               |		КОГДА НазначениеПодработкиНачисления.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(НазначениеПодработкиНачисления.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	НазначениеПодработкиНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.НазначениеПодработки.Начисления КАК НазначениеПодработкиНачисления
	               |ГДЕ
	               |	НазначениеПодработкиНачисления.Начисление В(&СписокНачислений)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.НазначениеПодработки"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Начальная штатная расстановка (классный чин)
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачальнаяШтатнаяРасстановкаНачисления.Ссылка.Месяц КАК Период,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник КАК Сотрудник,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	НачальнаяШтатнаяРасстановкаНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ВЫБОР
	               |		КОГДА НачальнаяШтатнаяРасстановкаНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(НачальнаяШтатнаяРасстановкаНачисления.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	НачальнаяШтатнаяРасстановкаНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.НачальнаяШтатнаяРасстановка.Начисления КАК НачальнаяШтатнаяРасстановкаНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники
	               |		ПО НачальнаяШтатнаяРасстановкаНачисления.Ссылка = НачальнаяШтатнаяРасстановкаСотрудники.Ссылка
	               |			И НачальнаяШтатнаяРасстановкаНачисления.Сотрудник = НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник
	               |			И (НачальнаяШтатнаяРасстановкаНачисления.Начисление В (&СписокНачислений))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.НачальнаяШтатнаяРасстановка"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Начальная штатная расстановка (воинское звание)
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладПоВоинскомуСпециальномуЗванию);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачальнаяШтатнаяРасстановкаНачисления.Ссылка.Месяц КАК Период,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник КАК Сотрудник,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	НачальнаяШтатнаяРасстановкаНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ВЫБОР
	               |		КОГДА НачальнаяШтатнаяРасстановкаНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(НачальнаяШтатнаяРасстановкаНачисления.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	НачальнаяШтатнаяРасстановкаНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.НачальнаяШтатнаяРасстановка.Начисления КАК НачальнаяШтатнаяРасстановкаНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники
	               |		ПО НачальнаяШтатнаяРасстановкаНачисления.Ссылка = НачальнаяШтатнаяРасстановкаСотрудники.Ссылка
	               |			И НачальнаяШтатнаяРасстановкаНачисления.Сотрудник = НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник
	               |			И (НачальнаяШтатнаяРасстановкаНачисления.Начисление В (&СписокНачислений))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.НачальнаяШтатнаяРасстановка"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладПоВоинскомуСпециальномуЗванию);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Отпуск по уходу за ребенком
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтпускПоУходуЗаРебенкомНачисления.Ссылка.ДатаНачала КАК Период,
	               |	ОтпускПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	               |	ОтпускПоУходуЗаРебенкомНачисления.Ссылка.Сотрудник КАК ФизическоеЛицо,
	               |	ОтпускПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	               |	ОтпускПоУходуЗаРебенкомНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ОтпускПоУходуЗаРебенком.Начисления КАК ОтпускПоУходуЗаРебенкомНачисления
	               |ГДЕ
	               |	ОтпускПоУходуЗаРебенкомНачисления.Начисление В(&СписокНачислений)
	               |	И ОтпускПоУходуЗаРебенкомНачисления.Действие <> &Отменить
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК РабочееМесто,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ОтпускПоУходуЗаРебенком"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.РабочееМесто.Имя = "Сотрудник";
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Прием на работу
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриемНаРаботуНачисления.Ссылка.ДатаПриема КАК Период,
	               |	ПриемНаРаботуНачисления.Ссылка.Сотрудник КАК Сотрудник,
	               |	ПриемНаРаботуНачисления.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПриемНаРаботуНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	               |	ПриемНаРаботуНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ПриемНаРаботу.Начисления КАК ПриемНаРаботуНачисления
	               |ГДЕ
	               |	ПриемНаРаботуНачисления.Начисление В(&СписокНачислений)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПриемНаРаботу"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Прием на работу списком
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриемНаРаботуСпискомСотрудники.ДатаПриема КАК Период,
	               |	ПриемНаРаботуСпискомСотрудники.Сотрудник КАК Сотрудник,
	               |	ПриемНаРаботуСпискомСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПриемНаРаботуСпискомНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	               |	ПриемНаРаботуСпискомНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.ПриемНаРаботуСписком.Начисления КАК ПриемНаРаботуСпискомНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
	               |		ПО ПриемНаРаботуСпискомНачисления.Ссылка = ПриемНаРаботуСпискомСотрудники.Ссылка
	               |			И ПриемНаРаботуСпискомНачисления.ИдентификаторСтрокиСотрудника = ПриемНаРаботуСпискомСотрудники.ИдентификаторСтрокиСотрудника
	               |			И (ПриемНаРаботуСпискомНачисления.Начисление В (&СписокНачислений))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПриемНаРаботуСписком"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Распределение нагрузки
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаспределениеНагрузкиНачисления.Ссылка.ДатаИзменения КАК Период,
	               |	РаспределениеНагрузкиНачисления.Сотрудник КАК Сотрудник,
	               |	РаспределениеНагрузкиНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	РаспределениеНагрузкиНачисления.Ссылка.ДатаОкончания КАК ДействуетДо,
	               |	РаспределениеНагрузкиНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.РаспределениеНагрузки.НачисленияСотрудников КАК РаспределениеНагрузкиНачисления
	               |ГДЕ
	               |	РаспределениеНагрузкиНачисления.Начисление В(&СписокНачислений)
	               |	И РаспределениеНагрузкиНачисления.Действие <> &Отменить
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РаспределениеНагрузки"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("Сотрудник, Показатель", Выборка.Сотрудник, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.ПоказателиСотрудников.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
				КонецЦикла;
			Иначе 
				ЗаполнитьЗначенияСвойств(ДокументОбъект.ПоказателиСотрудников.Добавить(), Выборка);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
	// Результаты аттестации сотрудников
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Показатель", ОкладНадбавкаЗаКлассныйЧин);
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	Запрос.УстановитьПараметр("Отменить", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РезультатыАттестацииСотрудниковРезультатыАттестации.ДатаАттестации КАК Период,
	               |	РезультатыАттестацииСотрудниковРезультатыАттестации.Сотрудник КАК Сотрудник,
	               |	РезультатыАттестацииСотрудниковРезультатыАттестации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	РезультатыАттестацииСотрудниковНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ВЫБОР
	               |		КОГДА РезультатыАттестацииСотрудниковРезультатыАттестации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(РезультатыАттестацииСотрудниковРезультатыАттестации.ДатаОкончания, ДЕНЬ, 1)
	               |	КОНЕЦ КАК ДействуетДо,
	               |	РезультатыАттестацииСотрудниковНачисления.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТИдентификаторыСтрокНачислений
	               |ИЗ
	               |	Документ.РезультатыАттестацииСотрудников.Начисления КАК РезультатыАттестацииСотрудниковНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезультатыАттестацииСотрудников.РезультатыАттестации КАК РезультатыАттестацииСотрудниковРезультатыАттестации
	               |		ПО РезультатыАттестацииСотрудниковНачисления.Ссылка = РезультатыАттестацииСотрудниковРезультатыАттестации.Ссылка
	               |			И РезультатыАттестацииСотрудниковНачисления.Сотрудник = РезультатыАттестацииСотрудниковРезультатыАттестации.Сотрудник
	               |			И (РезультатыАттестацииСотрудниковНачисления.Начисление В (&СписокНачислений))
	               |			И (РезультатыАттестацииСотрудниковНачисления.Действие <> &Отменить)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТОкладыНадбавки(Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокНачислений.Период КАК Период,
	               |	ИдентификаторыСтрокНачислений.Сотрудник КАК Сотрудник,
	               |	ИдентификаторыСтрокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	&Показатель КАК Показатель,
	               |	ОкладыНадбавки.Значение КАК Значение,
	               |	ИдентификаторыСтрокНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	               |	ИдентификаторыСтрокНачислений.Ссылка.Организация КАК Организация,
	               |	ИдентификаторыСтрокНачислений.ДействуетДо КАК ДействуетДо,
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РезультатыАттестацииСотрудников"));
	           
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура("ИдентификаторСтрокиВидаРасчета, Показатель", Выборка.ИдентификаторСтрокиВидаРасчета, ОкладНадбавкаЗаКлассныйЧин);
			НайденныеСтроки = ДокументОбъект.Показатели.НайтиСтроки(Отбор);
		    СтрокаПоказателя = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], ДокументОбъект.Показатели.Добавить());
		    ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.ДействуетДо) Тогда 
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НомерСтроки = СтрокаПоказателя.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТаблицаПоказателей.Колонки.Ссылка.Имя = "Регистратор";
	ТаблицаПоказателей.Индексы.Добавить("Регистратор,Период,Организация,Сотрудник,Показатель");
	
	СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, ТаблицаПоказателей);
	
КонецПроцедуры

Процедура СоздатьВТОкладыНадбавки(МенеджерВременныхТаблиц, ИспользоватьВоеннуюСлужбу)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ИспользоватьВоеннуюСлужбу Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФизическиеЛицаПериоды.Период КАК Период,
		               |	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	МАКСИМУМ(УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.Период) КАК ДатаПрисвоения
		               |ПОМЕСТИТЬ ВТВоинскиеСпециальныеЗванияМаксимальныеПериоды
		               |ИЗ
		               |	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьВоинскиеСпециальныеЗванияФизическихЛиц КАК УдалитьВоинскиеСпециальныеЗванияФизическихЛиц
		               |		ПО ФизическиеЛицаПериоды.ФизическоеЛицо = УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо
		               |			И ФизическиеЛицаПериоды.Период >= УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.Период
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ФизическиеЛицаПериоды.Период,
		               |	ФизическиеЛицаПериоды.ФизическоеЛицо
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВоинскиеСпециальныеЗванияМаксимальныеПериоды.Период КАК Период,
		               |	ВоинскиеСпециальныеЗванияМаксимальныеПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание
		               |ПОМЕСТИТЬ ВТВоинскиеСпециальныеЗвания
		               |ИЗ
		               |	ВТВоинскиеСпециальныеЗванияМаксимальныеПериоды КАК ВоинскиеСпециальныеЗванияМаксимальныеПериоды
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьВоинскиеСпециальныеЗванияФизическихЛиц КАК УдалитьВоинскиеСпециальныеЗванияФизическихЛиц
		               |		ПО ВоинскиеСпециальныеЗванияМаксимальныеПериоды.ДатаПрисвоения = УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.Период
		               |			И ВоинскиеСпециальныеЗванияМаксимальныеПериоды.ФизическоеЛицо = УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВоинскиеСпециальныеЗвания.Период КАК Период,
		               |	ВоинскиеСпециальныеЗвания.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание,
		               |	МАКСИМУМ(УдалитьОкладыПоВоинскимСпециальнымЗваниям.Период) КАК ДатаИзменения
		               |ПОМЕСТИТЬ ВТОкладыНадбавкиМаксимальныеПериоды
		               |ИЗ
		               |	ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОкладыПоВоинскимСпециальнымЗваниям КАК УдалитьОкладыПоВоинскимСпециальнымЗваниям
		               |		ПО ВоинскиеСпециальныеЗвания.ВоинскоеСпециальноеЗвание = УдалитьОкладыПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание
		               |			И ВоинскиеСпециальныеЗвания.Период >= УдалитьОкладыПоВоинскимСпециальнымЗваниям.Период
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВоинскиеСпециальныеЗвания.Период,
		               |	ВоинскиеСпециальныеЗвания.ВоинскоеСпециальноеЗвание
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВоинскиеСпециальныеЗвания.Период КАК Период,
		               |	ВоинскиеСпециальныеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	УдалитьОкладыПоВоинскимСпециальнымЗваниям.Размер КАК Значение
		               |ПОМЕСТИТЬ ВТОкладыНадбавки
		               |ИЗ
		               |	ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавкиМаксимальныеПериоды КАК ОкладыНадбавкиМаксимальныеПериоды
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОкладыПоВоинскимСпециальнымЗваниям КАК УдалитьОкладыПоВоинскимСпециальнымЗваниям
		               |			ПО ОкладыНадбавкиМаксимальныеПериоды.ДатаИзменения = УдалитьОкладыПоВоинскимСпециальнымЗваниям.Период
		               |				И ОкладыНадбавкиМаксимальныеПериоды.ВоинскоеСпециальноеЗвание = УдалитьОкладыПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание
		               |		ПО ВоинскиеСпециальныеЗвания.Период = ОкладыНадбавкиМаксимальныеПериоды.Период
		               |			И ВоинскиеСпециальныеЗвания.ВоинскоеСпециальноеЗвание = ОкладыНадбавкиМаксимальныеПериоды.ВоинскоеСпециальноеЗвание";
					   
	Иначе 
				   
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФизическиеЛицаПериоды.Период КАК Период,
		               |	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	МАКСИМУМ(УдалитьКлассныеЧиныРангиФизическихЛиц.Период) КАК ДатаПрисвоения
		               |ПОМЕСТИТЬ ВТКлассныеЧиныРангиМаксимальныеПериоды
		               |ИЗ
		               |	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьКлассныеЧиныРангиФизическихЛиц КАК УдалитьКлассныеЧиныРангиФизическихЛиц
		               |		ПО ФизическиеЛицаПериоды.ФизическоеЛицо = УдалитьКлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо
		               |			И ФизическиеЛицаПериоды.Период >= УдалитьКлассныеЧиныРангиФизическихЛиц.Период
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ФизическиеЛицаПериоды.Период,
		               |	ФизическиеЛицаПериоды.ФизическоеЛицо
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КлассныеЧиныРангиМаксимальныеПериоды.Период КАК Период,
		               |	КлассныеЧиныРангиМаксимальныеПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	УдалитьКлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг КАК КлассныйЧинРанг
		               |ПОМЕСТИТЬ ВТКлассныеЧиныРанги
		               |ИЗ
		               |	ВТКлассныеЧиныРангиМаксимальныеПериоды КАК КлассныеЧиныРангиМаксимальныеПериоды
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьКлассныеЧиныРангиФизическихЛиц КАК УдалитьКлассныеЧиныРангиФизическихЛиц
		               |		ПО КлассныеЧиныРангиМаксимальныеПериоды.ДатаПрисвоения = УдалитьКлассныеЧиныРангиФизическихЛиц.Период
		               |			И КлассныеЧиныРангиМаксимальныеПериоды.ФизическоеЛицо = УдалитьКлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КлассныеЧиныРанги.Период КАК Период,
		               |	КлассныеЧиныРанги.КлассныйЧинРанг КАК КлассныйЧинРанг,
		               |	МАКСИМУМ(УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Период) КАК ДатаИзменения
		               |ПОМЕСТИТЬ ВТОкладыНадбавкиМаксимальныеПериоды
		               |ИЗ
		               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОкладыНадбавкиПоКласснымЧинамРангам КАК УдалитьОкладыНадбавкиПоКласснымЧинамРангам
		               |		ПО КлассныеЧиныРанги.КлассныйЧинРанг = УдалитьОкладыНадбавкиПоКласснымЧинамРангам.КлассныйЧинРанг
		               |			И КлассныеЧиныРанги.Период >= УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Период
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	КлассныеЧиныРанги.Период,
		               |	КлассныеЧиныРанги.КлассныйЧинРанг
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КлассныеЧиныРанги.Период КАК Период,
		               |	КлассныеЧиныРанги.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Размер КАК Значение
		               |ПОМЕСТИТЬ ВТОкладыНадбавки
		               |ИЗ
		               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавкиМаксимальныеПериоды КАК ОкладыНадбавкиМаксимальныеПериоды
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОкладыНадбавкиПоКласснымЧинамРангам КАК УдалитьОкладыНадбавкиПоКласснымЧинамРангам
		               |			ПО ОкладыНадбавкиМаксимальныеПериоды.ДатаИзменения = УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Период
		               |				И ОкладыНадбавкиМаксимальныеПериоды.КлассныйЧинРанг = УдалитьОкладыНадбавкиПоКласснымЧинамРангам.КлассныйЧинРанг
		               |		ПО КлассныеЧиныРанги.Период = ОкладыНадбавкиМаксимальныеПериоды.Период
		               |			И КлассныеЧиныРанги.КлассныйЧинРанг = ОкладыНадбавкиМаксимальныеПериоды.КлассныйЧинРанг";
					   
	КонецЕсли;
				   
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьДвиженияЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников(МенеджерВременныхТаблиц, ТаблицаПоказателей)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИдентификаторыСтрокНачислений.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТРегистраторы
	               |ИЗ
	               |	ВТИдентификаторыСтрокНачислений КАК ИдентификаторыСтрокНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкладыНадбавки КАК ОкладыНадбавки
	               |		ПО ИдентификаторыСтрокНачислений.Период = ОкладыНадбавки.Период
	               |			И ИдентификаторыСтрокНачислений.ФизическоеЛицо = ОкладыНадбавки.ФизическоеЛицо
	               |			И (ИдентификаторыСтрокНачислений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ЗначенияПериодическихПоказателей.Период, ДЕНЬ) КАК Период,
	               |	ЗначенияПериодическихПоказателей.Регистратор КАК Регистратор,
	               |	ЗначенияПериодическихПоказателей.НомерСтроки,
	               |	ЗначенияПериодическихПоказателей.Активность,
	               |	ЗначенияПериодическихПоказателей.Сотрудник,
	               |	ЗначенияПериодическихПоказателей.Организация,
	               |	ЗначенияПериодическихПоказателей.ФизическоеЛицо,
	               |	ЗначенияПериодическихПоказателей.Показатель,
	               |	ЗначенияПериодическихПоказателей.ДокументОснование,
	               |	ЗначенияПериодическихПоказателей.Значение,
	               |	ЗначенияПериодическихПоказателей.ДействуетДо
	               |ИЗ
	               |	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	               |		ПО ЗначенияПериодическихПоказателей.Регистратор = Регистраторы.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Регистратор";
				   
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл 
				   
		НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл 
			
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Отбор = Новый Структура("Регистратор,Период,Организация,Сотрудник,Показатель");
			ЗаполнитьЗначенияСвойств(Отбор, Выборка);
			НайденныеСтроки = ТаблицаПоказателей.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока.Значение = НайденныеСтроки[0].Значение;
				ТаблицаПоказателей.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокиПоРегистратору = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Регистратор", Выборка.Регистратор));
		Для Каждого СтрокаСотрудника Из СтрокиПоРегистратору Цикл 
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаСотрудника);
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыУтвержденияОкладовНадбавокЗаКлассныйЧинРанг() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОкладыНадбавкиПоКласснымЧинамРангам.Регистратор
	               |ИЗ
	               |	РегистрСведений.ОкладыНадбавкиПоКласснымЧинамРангам КАК ОкладыНадбавкиПоКласснымЧинамРангам";
				   
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Период КАК Период,
	               |	УдалитьОкладыНадбавкиПоКласснымЧинамРангам.КлассныйЧинРанг,
	               |	УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Размер
	               |ИЗ
	               |	РегистрСведений.УдалитьОкладыНадбавкиПоКласснымЧинамРангам КАК УдалитьОкладыНадбавкиПоКласснымЧинамРангам
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл 
		
		ДокументОбъект = Документы.УтверждениеОкладовНадбавокЗаКлассныеЧины.СоздатьДокумент();
		ДокументОбъект.ДатаВступленияВСилу = Выборка.Период;
		ДокументОбъект.Дата = Выборка.Период;
		
		Пока Выборка.Следующий() Цикл 
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ОкладыНадбавки.Добавить(), Выборка);
		КонецЦикла;
		
		Для Каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыУтвержденияОкладовПоВоинскимСпециальнымЗваниям() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОкладыПоВоинскимСпециальнымЗваниям.Регистратор
	               |ИЗ
	               |	РегистрСведений.ОкладыПоВоинскимСпециальнымЗваниям КАК ОкладыПоВоинскимСпециальнымЗваниям";
				   
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьОкладыПоВоинскимСпециальнымЗваниям.Период КАК Период,
	               |	УдалитьОкладыПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание,
	               |	УдалитьОкладыПоВоинскимСпециальнымЗваниям.Размер
	               |ИЗ
	               |	РегистрСведений.УдалитьОкладыПоВоинскимСпециальнымЗваниям КАК УдалитьОкладыПоВоинскимСпециальнымЗваниям
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл 
		
		ДокументОбъект = Документы.УтверждениеОкладовЗаВоинскиеСпециальныеЗвания.СоздатьДокумент();
		ДокументОбъект.ДатаВступленияВСилу = Выборка.Период;
		ДокументОбъект.Дата = Выборка.Период;
		
		Пока Выборка.Следующий() Цикл 
			ЗаполнитьЗначенияСвойств(ДокументОбъект.Оклады.Добавить(), Выборка);
		КонецЦикла;
		
		Для Каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыПрисвоенияКлассногоЧинаРанга() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КлассныеЧиныРангиФизическихЛиц.Регистратор
	               |ИЗ
	               |	РегистрСведений.КлассныеЧиныРангиФизическихЛиц КАК КлассныеЧиныРангиФизическихЛиц";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.Период КАК ДатаПрисвоения,
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг КАК КлассныйЧинРанг
	               |ПОМЕСТИТЬ ВТКлассныеЧиныРанги
	               |ИЗ
	               |	РегистрСведений.УдалитьКлассныеЧиныРангиФизическихЛиц КАК УдалитьКлассныеЧиныРангиФизическихЛиц
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КлассныеЧиныРанги.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(КлассныеЧиныРанги.ДатаПрисвоения) КАК ДатаПрисвоения,
	               |	ПриемНаРаботу.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияПриПриеме
	               |ИЗ
	               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
	               |		ПО КлассныеЧиныРанги.ФизическоеЛицо = ПриемНаРаботу.ФизическоеЛицо
	               |			И КлассныеЧиныРанги.ДатаПрисвоения <= ПриемНаРаботу.ДатаПриема
	               |			И (ПриемНаРаботу.Проведен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КлассныеЧиныРанги.ФизическоеЛицо,
	               |	ПриемНаРаботу.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КлассныеЧиныРанги.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(КлассныеЧиныРанги.ДатаПрисвоения) КАК ДатаПрисвоения,
	               |	КадровыйПеревод.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияПриПереводе
	               |ИЗ
	               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
	               |		ПО КлассныеЧиныРанги.ФизическоеЛицо = КадровыйПеревод.ФизическоеЛицо
	               |			И КлассныеЧиныРанги.ДатаПрисвоения <= КадровыйПеревод.ДатаНачала
	               |			И (КадровыйПеревод.Проведен)
	               |			И (КадровыйПеревод.СменаВидаДоговора)
	               |			И (КадровыйПеревод.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ТрудовойДоговор))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КлассныеЧиныРанги.ФизическоеЛицо,
	               |	КадровыйПеревод.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияПриПриеме.Ссылка КАК Ссылка,
	               |	ДатыПрисвоенияПриПриеме.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ДатыПрисвоенияПриПриеме.ДатаПрисвоения КАК ДатаПрисвоения,
	               |	КлассныеЧиныРанги.КлассныйЧинРанг КАК КлассныйЧинРанг
	               |ИЗ
	               |	ВТДатыПрисвоенияПриПриеме КАК ДатыПрисвоенияПриПриеме
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ПО ДатыПрисвоенияПриПриеме.ФизическоеЛицо = КлассныеЧиныРанги.ФизическоеЛицо
	               |			И ДатыПрисвоенияПриПриеме.ДатаПрисвоения = КлассныеЧиныРанги.ДатаПрисвоения
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияПриПереводе.Ссылка,
	               |	ДатыПрисвоенияПриПереводе.ФизическоеЛицо,
	               |	ДатыПрисвоенияПриПереводе.ДатаПрисвоения,
	               |	КлассныеЧиныРанги.КлассныйЧинРанг
	               |ИЗ
	               |	ВТДатыПрисвоенияПриПереводе КАК ДатыПрисвоенияПриПереводе
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ПО ДатыПрисвоенияПриПереводе.ФизическоеЛицо = КлассныеЧиныРанги.ФизическоеЛицо
	               |			И ДатыПрисвоенияПриПереводе.ДатаПрисвоения = КлассныеЧиныРанги.ДатаПрисвоения";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ЗначениеЗаполнено(Выборка.ДатаПрисвоения) Или Не ЗначениеЗаполнено(Выборка.КлассныйЧинРанг) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка, "ДатаПрисвоения,КлассныйЧинРанг");
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
		КлассныеЧиныРангиФизическихЛиц = Новый ТаблицаЗначений;
		КлассныеЧиныРангиФизическихЛиц.Колонки.Добавить("ДатаПрисвоения", Новый ОписаниеТипов("Дата"));
		КлассныеЧиныРангиФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		КлассныеЧиныРангиФизическихЛиц.Колонки.Добавить("КлассныйЧинРанг", Новый ОписаниеТипов("СправочникСсылка.КлассныеЧиныРанги"));
		ЗаполнитьЗначенияСвойств(КлассныеЧиныРангиФизическихЛиц.Добавить(), Выборка);
		
		НаборЗаписей = РегистрыСведений.КлассныеЧиныРангиФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		
		Движения = Новый Структура("КлассныеЧиныРангиФизическихЛиц", НаборЗаписей);
		КлассныеЧиныРанги.СформироватьДвиженияКлассныхЧиновРанговФизическихЛиц(Движения, КлассныеЧиныРангиФизическихЛиц);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассныеЧиныРанги.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(КлассныеЧиныРанги.ДатаПрисвоения) КАК ДатаПрисвоения,
	               |	ПриемНаРаботуСпискомСотрудники.Сотрудник КАК Сотрудник,
	               |	ПриемНаРаботуСпискомСотрудники.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияПриПриемеСписком
	               |ИЗ
	               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
	               |		ПО КлассныеЧиныРанги.ФизическоеЛицо = ПриемНаРаботуСпискомСотрудники.ФизическоеЛицо
	               |			И КлассныеЧиныРанги.ДатаПрисвоения <= ПриемНаРаботуСпискомСотрудники.ДатаПриема
	               |			И (ПриемНаРаботуСпискомСотрудники.Ссылка.Проведен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КлассныеЧиныРанги.ФизическоеЛицо,
	               |	ПриемНаРаботуСпискомСотрудники.Сотрудник,
	               |	ПриемНаРаботуСпискомСотрудники.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КлассныеЧиныРанги.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(КлассныеЧиныРанги.ДатаПрисвоения) КАК ДатаПрисвоения,
	               |	КадровыйПереводСпискомСотрудники.Сотрудник КАК Сотрудник,
	               |	КадровыйПереводСпискомСотрудники.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияПриПереводеСписком
	               |ИЗ
	               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
	               |		ПО КлассныеЧиныРанги.ФизическоеЛицо = КадровыйПереводСпискомСотрудники.ФизическоеЛицо
	               |			И КлассныеЧиныРанги.ДатаПрисвоения <= КадровыйПереводСпискомСотрудники.ДатаНачала
	               |			И (КадровыйПереводСпискомСотрудники.Ссылка.Проведен)
	               |			И (КадровыйПереводСпискомСотрудники.СменаВидаДоговора)
	               |			И (КадровыйПереводСпискомСотрудники.Ссылка.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ТрудовойДоговор))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КлассныеЧиныРанги.ФизическоеЛицо,
	               |	КадровыйПереводСпискомСотрудники.Сотрудник,
	               |	КадровыйПереводСпискомСотрудники.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КлассныеЧиныРанги.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(КлассныеЧиныРанги.ДатаПрисвоения) КАК ДатаПрисвоения,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник КАК Сотрудник,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияПриНачальнойШтатнойРасстановке
	               |ИЗ
	               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники
	               |		ПО КлассныеЧиныРанги.ФизическоеЛицо = НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник.ФизическоеЛицо
	               |			И КлассныеЧиныРанги.ДатаПрисвоения <= НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Месяц
	               |			И (НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Проведен)
	               |			И (НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ТрудовойДоговор))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КлассныеЧиныРанги.ФизическоеЛицо,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияПриПриемеСписком.Ссылка КАК Ссылка,
	               |	ДатыПрисвоенияПриПриемеСписком.Сотрудник КАК Сотрудник,
	               |	ДатыПрисвоенияПриПриемеСписком.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ДатыПрисвоенияПриПриемеСписком.ДатаПрисвоения КАК ДатаПрисвоения,
	               |	КлассныеЧиныРанги.КлассныйЧинРанг КАК КлассныйЧинРанг
	               |ИЗ
	               |	ВТДатыПрисвоенияПриПриемеСписком КАК ДатыПрисвоенияПриПриемеСписком
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ПО ДатыПрисвоенияПриПриемеСписком.ФизическоеЛицо = КлассныеЧиныРанги.ФизическоеЛицо
	               |			И ДатыПрисвоенияПриПриемеСписком.ДатаПрисвоения = КлассныеЧиныРанги.ДатаПрисвоения
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияПриПереводеСписком.Ссылка,
	               |	ДатыПрисвоенияПриПереводеСписком.Сотрудник,
	               |	ДатыПрисвоенияПриПереводеСписком.ФизическоеЛицо,
	               |	ДатыПрисвоенияПриПереводеСписком.ДатаПрисвоения,
	               |	КлассныеЧиныРанги.КлассныйЧинРанг
	               |ИЗ
	               |	ВТДатыПрисвоенияПриПереводеСписком КАК ДатыПрисвоенияПриПереводеСписком
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ПО ДатыПрисвоенияПриПереводеСписком.ФизическоеЛицо = КлассныеЧиныРанги.ФизическоеЛицо
	               |			И ДатыПрисвоенияПриПереводеСписком.ДатаПрисвоения = КлассныеЧиныРанги.ДатаПрисвоения
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.Ссылка,
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.Сотрудник,
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.ФизическоеЛицо,
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.ДатаПрисвоения,
	               |	КлассныеЧиныРанги.КлассныйЧинРанг
	               |ИЗ
	               |	ВТДатыПрисвоенияПриНачальнойШтатнойРасстановке КАК ДатыПрисвоенияПриНачальнойШтатнойРасстановке
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ПО ДатыПрисвоенияПриНачальнойШтатнойРасстановке.ФизическоеЛицо = КлассныеЧиныРанги.ФизическоеЛицо
	               |			И ДатыПрисвоенияПриНачальнойШтатнойРасстановке.ДатаПрисвоения = КлассныеЧиныРанги.ДатаПрисвоения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		КлассныеЧиныРангиФизическихЛиц = Новый ТаблицаЗначений;
		КлассныеЧиныРангиФизическихЛиц.Колонки.Добавить("ДатаПрисвоения", Новый ОписаниеТипов("Дата"));
		КлассныеЧиныРангиФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		КлассныеЧиныРангиФизическихЛиц.Колонки.Добавить("КлассныйЧинРанг", Новый ОписаниеТипов("СправочникСсылка.КлассныеЧиныРанги"));
		
		Пока Выборка.Следующий() Цикл 
			
			Если Не ЗначениеЗаполнено(Выборка.ДатаПрисвоения) Или Не ЗначениеЗаполнено(Выборка.КлассныйЧинРанг) Тогда 
				Продолжить;
			КонецЕсли;
			
			ДанныеСотрудника = ДокументОбъект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			Если ДанныеСотрудника.Количество() > 0 Тогда 
				ЗаполнитьЗначенияСвойств(ДанныеСотрудника[0], Выборка, "ДатаПрисвоения,КлассныйЧинРанг");
			КонецЕсли;
		
			ЗаполнитьЗначенияСвойств(КлассныеЧиныРангиФизическихЛиц.Добавить(), Выборка);
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
		КлассныеЧиныРангиФизическихЛиц.Свернуть("ДатаПрисвоения,ФизическоеЛицо,КлассныйЧинРанг");
		
		НаборЗаписей = РегистрыСведений.КлассныеЧиныРангиФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		
		Движения = Новый Структура("КлассныеЧиныРангиФизическихЛиц", НаборЗаписей);
		КлассныеЧиныРанги.СформироватьДвиженияКлассныхЧиновРанговФизическихЛиц(Движения, КлассныеЧиныРангиФизическихЛиц);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(КлассныеЧиныРангиФизическихЛиц.Период) КАК Период,
	               |	КлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТКлассныеЧиныРангиМинимальныеПериоды
	               |ИЗ
	               |	РегистрСведений.КлассныеЧиныРангиФизическихЛиц КАК КлассныеЧиныРангиФизическихЛиц
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.Период КАК ДатаПрисвоения,
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг КАК КлассныйЧинРанг
	               |ПОМЕСТИТЬ ВТКлассныеЧиныРанги
	               |ИЗ
	               |	РегистрСведений.УдалитьКлассныеЧиныРангиФизическихЛиц КАК УдалитьКлассныеЧиныРангиФизическихЛиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРангиМинимальныеПериоды КАК КлассныеЧиныРангиМинимальныеПериоды
	               |		ПО УдалитьКлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо = КлассныеЧиныРангиМинимальныеПериоды.ФизическоеЛицо
	               |			И УдалитьКлассныеЧиныРангиФизическихЛиц.Период > КлассныеЧиныРангиМинимальныеПериоды.Период
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.Период,
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо,
	               |	УдалитьКлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг
	               |ИЗ
	               |	РегистрСведений.УдалитьКлассныеЧиныРангиФизическихЛиц КАК УдалитьКлассныеЧиныРангиФизическихЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассныеЧиныРангиФизическихЛиц КАК КлассныеЧиныРангиФизическихЛиц
	               |		ПО УдалитьКлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо = КлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо
	               |ГДЕ
	               |	КлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КлассныеЧиныРанги.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги";
				   
	Запрос.Выполнить();			   
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация,ДатаПриема,ВидЗанятости";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КлассныеЧиныРанги.ДатаПрисвоения КАК ДатаПрисвоения,
	               |	КлассныеЧиныРанги.КлассныйЧинРанг
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияКлассныхЧиновРангов
	               |ИЗ
	               |	ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияКлассныхЧиновРангов.ДатаПрисвоения,
	               |	ДатыПрисвоенияКлассныхЧиновРангов.КлассныйЧинРанг,
	               |	МАКСИМУМ(УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Период) КАК Период
	               |ПОМЕСТИТЬ ВТПериодыОкладовНадбавокПоКласснымЧинамРангам
	               |ИЗ
	               |	ВТДатыПрисвоенияКлассныхЧиновРангов КАК ДатыПрисвоенияКлассныхЧиновРангов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОкладыНадбавкиПоКласснымЧинамРангам КАК УдалитьОкладыНадбавкиПоКласснымЧинамРангам
	               |		ПО ДатыПрисвоенияКлассныхЧиновРангов.КлассныйЧинРанг = УдалитьОкладыНадбавкиПоКласснымЧинамРангам.КлассныйЧинРанг
	               |			И ДатыПрисвоенияКлассныхЧиновРангов.ДатаПрисвоения >= УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДатыПрисвоенияКлассныхЧиновРангов.ДатаПрисвоения,
	               |	ДатыПрисвоенияКлассныхЧиновРангов.КлассныйЧинРанг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыОкладовНадбавокПоКласснымЧинамРангам.ДатаПрисвоения,
	               |	ПериодыОкладовНадбавокПоКласснымЧинамРангам.КлассныйЧинРанг,
	               |	УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Размер
	               |ПОМЕСТИТЬ ВТОкладыНадбавкиПоКласснымЧинамРангам
	               |ИЗ
	               |	ВТПериодыОкладовНадбавокПоКласснымЧинамРангам КАК ПериодыОкладовНадбавокПоКласснымЧинамРангам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОкладыНадбавкиПоКласснымЧинамРангам КАК УдалитьОкладыНадбавкиПоКласснымЧинамРангам
	               |		ПО ПериодыОкладовНадбавокПоКласснымЧинамРангам.КлассныйЧинРанг = УдалитьОкладыНадбавкиПоКласснымЧинамРангам.КлассныйЧинРанг
	               |			И ПериодыОкладовНадбавокПоКласснымЧинамРангам.Период = УдалитьОкладыНадбавкиПоКласснымЧинамРангам.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СотрудникиОрганизации.ДатаПриема) КАК ДатаПриема,
	               |	КлассныеЧиныРанги.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КлассныеЧиныРанги.ДатаПрисвоения КАК ДатаПрисвоения
	               |ПОМЕСТИТЬ ВТДатыПриема
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ПО СотрудникиОрганизации.ФизическоеЛицо = КлассныеЧиныРанги.ФизическоеЛицо
	               |			И СотрудникиОрганизации.ДатаПриема <= КлассныеЧиныРанги.ДатаПрисвоения
	               |			И (СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КлассныеЧиныРанги.ФизическоеЛицо,
	               |	КлассныеЧиныРанги.ДатаПрисвоения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПриема.ДатаПрисвоения,
	               |	ДатыПриема.ФизическоеЛицо,
	               |	СотрудникиОрганизации.Сотрудник,
	               |	СотрудникиОрганизации.Организация
	               |ПОМЕСТИТЬ ВТСотрудники
	               |ИЗ
	               |	ВТДатыПриема КАК ДатыПриема
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ПО ДатыПриема.ДатаПриема = СотрудникиОрганизации.ДатаПриема
	               |			И ДатыПриема.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
	               |			И (СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.ДатаПрисвоения,
	               |	Сотрудники.Сотрудник,
	               |	Сотрудники.ФизическоеЛицо,
	               |	Сотрудники.Организация,
	               |	КлассныеЧиныРанги.КлассныйЧинРанг
	               |ПОМЕСТИТЬ ВТКлассныеЧиныРангиСотрудников
	               |ИЗ
	               |	ВТСотрудники КАК Сотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРанги КАК КлассныеЧиныРанги
	               |		ПО Сотрудники.ФизическоеЛицо = КлассныеЧиныРанги.ФизическоеЛицо
	               |			И Сотрудники.ДатаПрисвоения = КлассныеЧиныРанги.ДатаПрисвоения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КлассныеЧиныРангиСотрудников.ДатаПрисвоения,
	               |	КлассныеЧиныРангиСотрудников.Сотрудник,
	               |	КлассныеЧиныРангиСотрудников.ФизическоеЛицо,
	               |	КлассныеЧиныРангиСотрудников.Организация,
	               |	КлассныеЧиныРангиСотрудников.КлассныйЧинРанг,
	               |	ЕСТЬNULL(ОкладыНадбавкиПоКласснымЧинамРангам.Размер, 0) КАК Размер
	               |ПОМЕСТИТЬ ВТЗначенияОкладовНадбавокЗаКлассныйЧинРанг
	               |ИЗ
	               |	ВТКлассныеЧиныРангиСотрудников КАК КлассныеЧиныРангиСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладыНадбавкиПоКласснымЧинамРангам КАК ОкладыНадбавкиПоКласснымЧинамРангам
	               |		ПО КлассныеЧиныРангиСотрудников.ДатаПрисвоения = ОкладыНадбавкиПоКласснымЧинамРангам.ДатаПрисвоения
	               |			И КлассныеЧиныРангиСотрудников.КлассныйЧинРанг = ОкладыНадбавкиПоКласснымЧинамРангам.КлассныйЧинРанг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.ДатаПрисвоения,
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.Сотрудник,
	               |	МАКСИМУМ(ЗначенияСовокупныхТарифныхСтавокСотрудников.Период) КАК Период
	               |ПОМЕСТИТЬ ВТСовокупныеТарифныеСтавкиМаксимальныеПериоды
	               |ИЗ
	               |	ВТЗначенияОкладовНадбавокЗаКлассныйЧинРанг КАК ЗначенияОкладовНадбавокЗаКлассныйЧинРанг
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ПО ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |			И (КОНЕЦПЕРИОДА(ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.ДатаПрисвоения, ДЕНЬ) >= ЗначенияСовокупныхТарифныхСтавокСотрудников.Период)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.ДатаПрисвоения,
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.ДатаПрисвоения,
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.Сотрудник,
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.ФизическоеЛицо,
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.Организация,
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.КлассныйЧинРанг,
	               |	ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.Размер,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Значение КАК СовокупнаяТарифнаяСтавка,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки
	               |ИЗ
	               |	ВТЗначенияОкладовНадбавокЗаКлассныйЧинРанг КАК ЗначенияОкладовНадбавокЗаКлассныйЧинРанг
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСовокупныеТарифныеСтавкиМаксимальныеПериоды КАК СовокупныеТарифныеСтавкиМаксимальныеПериоды
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |			ПО СовокупныеТарифныеСтавкиМаксимальныеПериоды.Период = ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
	               |				И СовокупныеТарифныеСтавкиМаксимальныеПериоды.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |		ПО ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.ДатаПрисвоения = СовокупныеТарифныеСтавкиМаксимальныеПериоды.ДатаПрисвоения
	               |			И ЗначенияОкладовНадбавокЗаКлассныйЧинРанг.Сотрудник = СовокупныеТарифныеСтавкиМаксимальныеПериоды.Сотрудник";
	
	Показатель = КлассныеЧиныРанги.ПоказательОкладНадбавкаЗаКлассныйЧин();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Документы.ПрисвоениеКлассногоЧинаРанга.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		
		ДокументОбъект.Дата = Выборка.ДатаПрисвоения;
		ДокументОбъект.Показатель = Показатель;
		ДокументОбъект.ЗначениеПоказателя = Выборка.Размер;
		ДокументОбъект.НачисленияУтверждены = Истина;
		
		Для Каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыПрисвоенияВоинскогоСпециальногоЗвания() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВоинскиеСпециальныеЗванияФизическихЛиц.Регистратор
	               |ИЗ
	               |	РегистрСведений.ВоинскиеСпециальныеЗванияФизическихЛиц КАК ВоинскиеСпециальныеЗванияФизическихЛиц";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.Период КАК ДатаПрисвоения,
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание
	               |ПОМЕСТИТЬ ВТВоинскиеСпециальныеЗвания
	               |ИЗ
	               |	РегистрСведений.УдалитьВоинскиеСпециальныеЗванияФизическихЛиц КАК УдалитьВоинскиеСпециальныеЗванияФизическихЛиц
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВоинскиеСпециальныеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(ВоинскиеСпециальныеЗвания.ДатаПрисвоения) КАК ДатаПрисвоения,
	               |	ЗачислениеВСпискиЧасти.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияПриЗачислении
	               |ИЗ
	               |	ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗачислениеВСпискиЧасти КАК ЗачислениеВСпискиЧасти
	               |		ПО ВоинскиеСпециальныеЗвания.ФизическоеЛицо = ЗачислениеВСпискиЧасти.ФизическоеЛицо
	               |			И ВоинскиеСпециальныеЗвания.ДатаПрисвоения <= ЗачислениеВСпискиЧасти.ДатаЗачисления
	               |			И (ЗачислениеВСпискиЧасти.Проведен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВоинскиеСпециальныеЗвания.ФизическоеЛицо,
	               |	ЗачислениеВСпискиЧасти.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияПриЗачислении.Ссылка КАК Ссылка,
	               |	ДатыПрисвоенияПриЗачислении.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ДатыПрисвоенияПриЗачислении.ДатаПрисвоения КАК ДатаПрисвоения,
	               |	ВоинскиеСпециальныеЗвания.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание
	               |ИЗ
	               |	ВТДатыПрисвоенияПриЗачислении КАК ДатыПрисвоенияПриЗачислении
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
	               |		ПО ДатыПрисвоенияПриЗачислении.ФизическоеЛицо = ВоинскиеСпециальныеЗвания.ФизическоеЛицо
	               |			И ДатыПрисвоенияПриЗачислении.ДатаПрисвоения = ВоинскиеСпециальныеЗвания.ДатаПрисвоения";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ЗначениеЗаполнено(Выборка.ДатаПрисвоения) Или Не ЗначениеЗаполнено(Выборка.ВоинскоеСпециальноеЗвание) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка, "ДатаПрисвоения,ВоинскоеСпециальноеЗвание");
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
		ВоинскиеСпециальныеЗванияФизическихЛиц = Новый ТаблицаЗначений;
		ВоинскиеСпециальныеЗванияФизическихЛиц.Колонки.Добавить("ДатаПрисвоения", Новый ОписаниеТипов("Дата"));
		ВоинскиеСпециальныеЗванияФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ВоинскиеСпециальныеЗванияФизическихЛиц.Колонки.Добавить("ВоинскоеСпециальноеЗвание", Новый ОписаниеТипов("СправочникСсылка.ВоинскиеСпециальныеЗвания"));
		ЗаполнитьЗначенияСвойств(ВоинскиеСпециальныеЗванияФизическихЛиц.Добавить(), Выборка);
		
		НаборЗаписей = РегистрыСведений.ВоинскиеСпециальныеЗванияФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		
		Движения = Новый Структура("ВоинскиеСпециальныеЗванияФизическихЛиц", НаборЗаписей);
		ВоинскиеСпециальныеЗвания.СформироватьДвиженияВоинскихСпециальныхЗванийФизическихЛиц(Движения, ВоинскиеСпециальныеЗванияФизическихЛиц);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВоинскиеСпециальныеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(ВоинскиеСпециальныеЗвания.ДатаПрисвоения) КАК ДатаПрисвоения,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник КАК Сотрудник,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияПриНачальнойШтатнойРасстановке
	               |ИЗ
	               |	ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники
	               |		ПО ВоинскиеСпециальныеЗвания.ФизическоеЛицо = НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник.ФизическоеЛицо
	               |			И ВоинскиеСпециальныеЗвания.ДатаПрисвоения <= НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Месяц
	               |			И (НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Проведен)
	               |			И (НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ТрудовойДоговор))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВоинскиеСпециальныеЗвания.ФизическоеЛицо,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник,
	               |	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.Ссылка,
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.Сотрудник,
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.ФизическоеЛицо,
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.ДатаПрисвоения,
	               |	ВоинскиеСпециальныеЗвания.ВоинскоеСпециальноеЗвание
	               |ИЗ
	               |	ВТДатыПрисвоенияПриНачальнойШтатнойРасстановке КАК ДатыПрисвоенияПриНачальнойШтатнойРасстановке
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
	               |		ПО ДатыПрисвоенияПриНачальнойШтатнойРасстановке.ФизическоеЛицо = ВоинскиеСпециальныеЗвания.ФизическоеЛицо
	               |			И ДатыПрисвоенияПриНачальнойШтатнойРасстановке.ДатаПрисвоения = ВоинскиеСпециальныеЗвания.ДатаПрисвоения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатыПрисвоенияПриНачальнойШтатнойРасстановке.Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ВоинскиеСпециальныеЗванияФизическихЛиц = Новый ТаблицаЗначений;
		ВоинскиеСпециальныеЗванияФизическихЛиц.Колонки.Добавить("ДатаПрисвоения", Новый ОписаниеТипов("Дата"));
		ВоинскиеСпециальныеЗванияФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ВоинскиеСпециальныеЗванияФизическихЛиц.Колонки.Добавить("ВоинскоеСпециальноеЗвание", Новый ОписаниеТипов("СправочникСсылка.ВоинскиеСпециальныеЗвания"));
		
		Пока Выборка.Следующий() Цикл 
			
			Если Не ЗначениеЗаполнено(Выборка.ДатаПрисвоения) Или Не ЗначениеЗаполнено(Выборка.ВоинскоеСпециальноеЗвание) Тогда 
				Продолжить;
			КонецЕсли;
			
			ДанныеСотрудника = ДокументОбъект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			Если ДанныеСотрудника.Количество() > 0 Тогда 
				ЗаполнитьЗначенияСвойств(ДанныеСотрудника[0], Выборка, "ДатаПрисвоения,ВоинскоеСпециальноеЗвание");
			КонецЕсли;
		
			ЗаполнитьЗначенияСвойств(ВоинскиеСпециальныеЗванияФизическихЛиц.Добавить(), Выборка);
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
		ВоинскиеСпециальныеЗванияФизическихЛиц.Свернуть("ДатаПрисвоения,ФизическоеЛицо,ВоинскоеСпециальноеЗвание");
		
		НаборЗаписей = РегистрыСведений.ВоинскиеСпециальныеЗванияФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		
		Движения = Новый Структура("ВоинскиеСпециальныеЗванияФизическихЛиц", НаборЗаписей);
		ВоинскиеСпециальныеЗвания.СформироватьДвиженияВоинскихСпециальныхЗванийФизическихЛиц(Движения, ВоинскиеСпециальныеЗванияФизическихЛиц);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(ВоинскиеСпециальныеЗванияФизическихЛиц.Период) КАК Период,
	               |	ВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТВоинскиеСпециальныеЗванияМинимальныеПериоды
	               |ИЗ
	               |	РегистрСведений.ВоинскиеСпециальныеЗванияФизическихЛиц КАК ВоинскиеСпециальныеЗванияФизическихЛиц
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.Период КАК ДатаПрисвоения,
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание
	               |ПОМЕСТИТЬ ВТВоинскиеСпециальныеЗвания
	               |ИЗ
	               |	РегистрСведений.УдалитьВоинскиеСпециальныеЗванияФизическихЛиц КАК УдалитьВоинскиеСпециальныеЗванияФизическихЛиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВоинскиеСпециальныеЗванияМинимальныеПериоды КАК ВоинскиеСпециальныеЗванияМинимальныеПериоды
	               |		ПО УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо = ВоинскиеСпециальныеЗванияМинимальныеПериоды.ФизическоеЛицо
	               |			И УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.Период > ВоинскиеСпециальныеЗванияМинимальныеПериоды.Период
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.Период,
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо,
	               |	УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ВоинскоеСпециальноеЗвание
	               |ИЗ
	               |	РегистрСведений.УдалитьВоинскиеСпециальныеЗванияФизическихЛиц КАК УдалитьВоинскиеСпециальныеЗванияФизическихЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВоинскиеСпециальныеЗванияФизическихЛиц КАК ВоинскиеСпециальныеЗванияФизическихЛиц
	               |		ПО УдалитьВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо = ВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо
	               |ГДЕ
	               |	ВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВоинскиеСпециальныеЗвания.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания";
				   
	Запрос.Выполнить();			   
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация,ДатаПриема,ВидЗанятости";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВоинскиеСпециальныеЗвания.ДатаПрисвоения КАК ДатаПрисвоения,
	               |	ВоинскиеСпециальныеЗвания.ВоинскоеСпециальноеЗвание
	               |ПОМЕСТИТЬ ВТДатыПрисвоенияВоинскихСпециальныхЗваний
	               |ИЗ
	               |	ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПрисвоенияВоинскихСпециальныхЗваний.ДатаПрисвоения,
	               |	ДатыПрисвоенияВоинскихСпециальныхЗваний.ВоинскоеСпециальноеЗвание,
	               |	МАКСИМУМ(УдалитьОкладыПоВоинскимСпециальнымЗваниям.Период) КАК Период
	               |ПОМЕСТИТЬ ВТПериодыОкладовПоВоинскимСпециальнымЗваниям
	               |ИЗ
	               |	ВТДатыПрисвоенияВоинскихСпециальныхЗваний КАК ДатыПрисвоенияВоинскихСпециальныхЗваний
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОкладыПоВоинскимСпециальнымЗваниям КАК УдалитьОкладыПоВоинскимСпециальнымЗваниям
	               |		ПО ДатыПрисвоенияВоинскихСпециальныхЗваний.ВоинскоеСпециальноеЗвание = УдалитьОкладыПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание
	               |			И ДатыПрисвоенияВоинскихСпециальныхЗваний.ДатаПрисвоения >= УдалитьОкладыПоВоинскимСпециальнымЗваниям.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДатыПрисвоенияВоинскихСпециальныхЗваний.ДатаПрисвоения,
	               |	ДатыПрисвоенияВоинскихСпециальныхЗваний.ВоинскоеСпециальноеЗвание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыОкладовПоВоинскимСпециальнымЗваниям.ДатаПрисвоения,
	               |	ПериодыОкладовПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание,
	               |	УдалитьОкладыПоВоинскимСпециальнымЗваниям.Размер
	               |ПОМЕСТИТЬ ВТОкладыПоВоинскимСпециальнымЗваниям
	               |ИЗ
	               |	ВТПериодыОкладовПоВоинскимСпециальнымЗваниям КАК ПериодыОкладовПоВоинскимСпециальнымЗваниям
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОкладыПоВоинскимСпециальнымЗваниям КАК УдалитьОкладыПоВоинскимСпециальнымЗваниям
	               |		ПО ПериодыОкладовПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание = УдалитьОкладыПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание
	               |			И ПериодыОкладовПоВоинскимСпециальнымЗваниям.Период = УдалитьОкладыПоВоинскимСпециальнымЗваниям.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СотрудникиОрганизации.ДатаПриема) КАК ДатаПриема,
	               |	ВоинскиеСпециальныеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВоинскиеСпециальныеЗвания.ДатаПрисвоения КАК ДатаПрисвоения
	               |ПОМЕСТИТЬ ВТДатыПриема
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
	               |		ПО СотрудникиОрганизации.ФизическоеЛицо = ВоинскиеСпециальныеЗвания.ФизическоеЛицо
	               |			И СотрудникиОрганизации.ДатаПриема <= ВоинскиеСпециальныеЗвания.ДатаПрисвоения
	               |			И (СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВоинскиеСпециальныеЗвания.ФизическоеЛицо,
	               |	ВоинскиеСпециальныеЗвания.ДатаПрисвоения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПриема.ДатаПрисвоения,
	               |	ДатыПриема.ФизическоеЛицо,
	               |	СотрудникиОрганизации.Сотрудник,
	               |	СотрудникиОрганизации.Организация
	               |ПОМЕСТИТЬ ВТСотрудники
	               |ИЗ
	               |	ВТДатыПриема КАК ДатыПриема
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ПО ДатыПриема.ДатаПриема = СотрудникиОрганизации.ДатаПриема
	               |			И ДатыПриема.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
	               |			И (СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.ДатаПрисвоения,
	               |	Сотрудники.Сотрудник,
	               |	Сотрудники.ФизическоеЛицо,
	               |	Сотрудники.Организация,
	               |	ВоинскиеСпециальныеЗвания.ВоинскоеСпециальноеЗвание
	               |ПОМЕСТИТЬ ВТВоинскиеСпециальныеЗванияСотрудников
	               |ИЗ
	               |	ВТСотрудники КАК Сотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВоинскиеСпециальныеЗвания КАК ВоинскиеСпециальныеЗвания
	               |		ПО Сотрудники.ФизическоеЛицо = ВоинскиеСпециальныеЗвания.ФизическоеЛицо
	               |			И Сотрудники.ДатаПрисвоения = ВоинскиеСпециальныеЗвания.ДатаПрисвоения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВоинскиеСпециальныеЗванияСотрудников.ДатаПрисвоения,
	               |	ВоинскиеСпециальныеЗванияСотрудников.Сотрудник,
	               |	ВоинскиеСпециальныеЗванияСотрудников.ФизическоеЛицо,
	               |	ВоинскиеСпециальныеЗванияСотрудников.Организация,
	               |	ВоинскиеСпециальныеЗванияСотрудников.ВоинскоеСпециальноеЗвание,
	               |	ЕСТЬNULL(ОкладыПоВоинскимСпециальнымЗваниям.Размер, 0) КАК Размер
	               |ПОМЕСТИТЬ ВТЗначенияОкладовПоВоинскимСпециальнымЗваниям
	               |ИЗ
	               |	ВТВоинскиеСпециальныеЗванияСотрудников КАК ВоинскиеСпециальныеЗванияСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладыПоВоинскимСпециальнымЗваниям КАК ОкладыПоВоинскимСпециальнымЗваниям
	               |		ПО ВоинскиеСпециальныеЗванияСотрудников.ДатаПрисвоения = ОкладыПоВоинскимСпециальнымЗваниям.ДатаПрисвоения
	               |			И ВоинскиеСпециальныеЗванияСотрудников.ВоинскоеСпециальноеЗвание = ОкладыПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.ДатаПрисвоения,
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.Сотрудник,
	               |	МАКСИМУМ(ЗначенияСовокупныхТарифныхСтавокСотрудников.Период) КАК Период
	               |ПОМЕСТИТЬ ВТСовокупныеТарифныеСтавкиМаксимальныеПериоды
	               |ИЗ
	               |	ВТЗначенияОкладовПоВоинскимСпециальнымЗваниям КАК ЗначенияОкладовПоВоинскимСпециальнымЗваниям
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ПО ЗначенияОкладовПоВоинскимСпециальнымЗваниям.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |			И (КОНЕЦПЕРИОДА(ЗначенияОкладовПоВоинскимСпециальнымЗваниям.ДатаПрисвоения, ДЕНЬ) >= ЗначенияСовокупныхТарифныхСтавокСотрудников.Период)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.ДатаПрисвоения,
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.ДатаПрисвоения,
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.Сотрудник,
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.ФизическоеЛицо,
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.Организация,
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание,
	               |	ЗначенияОкладовПоВоинскимСпециальнымЗваниям.Размер,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Значение КАК СовокупнаяТарифнаяСтавка,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки
	               |ИЗ
	               |	ВТЗначенияОкладовПоВоинскимСпециальнымЗваниям КАК ЗначенияОкладовПоВоинскимСпециальнымЗваниям
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСовокупныеТарифныеСтавкиМаксимальныеПериоды КАК СовокупныеТарифныеСтавкиМаксимальныеПериоды
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |			ПО СовокупныеТарифныеСтавкиМаксимальныеПериоды.Период = ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
	               |				И СовокупныеТарифныеСтавкиМаксимальныеПериоды.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |		ПО ЗначенияОкладовПоВоинскимСпециальнымЗваниям.ДатаПрисвоения = СовокупныеТарифныеСтавкиМаксимальныеПериоды.ДатаПрисвоения
	               |			И ЗначенияОкладовПоВоинскимСпециальнымЗваниям.Сотрудник = СовокупныеТарифныеСтавкиМаксимальныеПериоды.Сотрудник";
	
	Показатель = ВоинскиеСпециальныеЗвания.ПоказательОкладПоВоинскомуСпециальномуЗванию();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Документы.ПрисвоениеВоинскогоСпециальногоЗвания.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		
		ДокументОбъект.Дата = Выборка.ДатаПрисвоения;
		ДокументОбъект.Показатель = Показатель;
		ДокументОбъект.ЗначениеПоказателя = Выборка.Размер;
		ДокументОбъект.НачисленияУтверждены = Истина;
		
		Для Каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьДопустимостьНулевогоЗначенияОкладаЗаКлассныйЧинВоинскоеСпециальноеЗвание() Экспорт
	
	ИменаПоказателей = Новый Массив;
	ИменаПоказателей.Добавить("ОкладЗаКлассныйЧин");
	ИменаПоказателей.Добавить("ПроцентНадбавкиКОкладуЗаКлассныйЧин");
	ИменаПоказателей.Добавить("ОкладПоВоинскомуЗванию");
	ИменаПоказателей.Добавить("ОкладПоСпециальномуЗванию");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИменаПоказателей", ИменаПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных В(&ИменаПоказателей)
	               |	И НЕ ПоказателиРасчетаЗарплаты.ДопускаетсяНулевоеЗначение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.ДопускаетсяНулевоеЗначение = Истина;
		ПоказательОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗависимыеНастройкиГосударственнаяСлужба() Экспорт

	ИспользоватьГосударственныеСлужбы = Константы.ИспользоватьВоеннуюСлужбу.Получить() Или Константы.ИспользоватьГосударственнуюСлужбу.Получить() Или Константы.ИспользоватьМуниципальнуюСлужбу.Получить();
	
	Если Не ИспользоватьГосударственныеСлужбы Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		СтрокаНабора = НаборЗаписей.Добавить();
	Иначе
		СтрокаНабора = НаборЗаписей[0];
	КонецЕсли;
	
	ЗаписатьНастройки = Ложь;
	Если Не СтрокаНабора.ИспользоватьМатериальнуюПомощь Тогда
		СтрокаНабора.ИспользоватьМатериальнуюПомощь = Истина;
		ЗаписатьНастройки = Истина;
	КонецЕсли;
	Если Не СтрокаНабора.ИспользоватьМатериальнуюПомощьПриОтпуске Тогда
		СтрокаНабора.ИспользоватьМатериальнуюПомощьПриОтпуске = Истина;
		ЗаписатьНастройки = Истина;
	КонецЕсли;
	Если Не СтрокаНабора.ИспользоватьЕдиновременнуюВыплатуКОтпуску Тогда
		СтрокаНабора.ИспользоватьЕдиновременнуюВыплатуКОтпуску = Истина;
		ЗаписатьНастройки = Истина;
	КонецЕсли;
	Если Не СтрокаНабора.ИспользоватьИндексациюЗаработка Тогда
		СтрокаНабора.ИспользоватьИндексациюЗаработка = Истина;
		ЗаписатьНастройки = Истина;
	КонецЕсли;
	
	Если ЗаписатьНастройки Тогда
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();	
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьПоказательСреднемесячноеКоличествоДней(МенеджерВременныхТаблиц, ТаблицаПоказателей) Экспорт
	
	ПоказательДляГосслужащих = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих");
	ПоказательДляВоеннослужащих = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднемесячноеКоличествоДнейВС");
	
	МассивПоказателей = Новый Массив();
	МассивПоказателей.Добавить(ПоказательДляГосслужащих);
	МассивПоказателей.Добавить(ПоказательДляВоеннослужащих);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Показатели", МассивПоказателей);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Показатель,
		|	ДополнительныеПоказатели.ДатаНачала
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель В (&Показатели)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		НоваяСтрока.Показатель = Выборка.Показатель;
		Если Выборка.Показатель = ПоказательДляГосслужащих Тогда
			НоваяСтрока.Значение = РасчетДенежногоСодержания.КоличествоДнейВМесяцеДляОплатыОтпусков(Выборка.ДатаНачала);
		ИначеЕсли Выборка.Показатель = ПоказательДляВоеннослужащих Тогда
			НоваяСтрока.Значение = РасчетДенежногоДовольствия.СреднемесячноеКоличествоДнейДляВоеннослужащих(Выборка.ДатаНачала);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыОбщихМеханизмов

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	Типы.Добавить(Метаданные.Справочники.ОснованияЗаключенияСрочныхДоговоровМуниципальныхСлужащих);
	Типы.Добавить(Метаданные.Справочники.ОснованияЗаключенияСрочныхКонтрактовГосслужащих);
	Типы.Добавить(Метаданные.Справочники.ОснованияУвольненияСГосударственнойСлужбы);
	Типы.Добавить(Метаданные.Справочники.ОснованияУвольненияСМуниципальнойСлужбы);

КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	// Раздел КадровыйУчет
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗачислениеВСпискиЧасти",											"Дата",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗачислениеВСпискиЧастиСписком",									"Дата",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИсключениеИзСписковЧасти",										"Дата",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИсключениеИзСписковЧастиСписком",								"Дата",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КадровыйПереводВоеннослужащего",									"Дата",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КадровыйПереводВоеннослужащегоСписком",							"Дата",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего",				"Дата",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего",	"Дата",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускВоеннослужащего",											"ПериодРегистрации","КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОплатаСверхурочныхВоеннослужащим",								"ПериодРегистрации","КадровыйУчет", "Организация");
	
	// Раздел Зарплата
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УтверждениеОкладовЗаВоинскиеСпециальныеЗвания",					"ДатаВступленияВСилу",	"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УтверждениеОкладовНадбавокЗаКлассныеЧины",						"ДатаВступленияВСилу",	"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ОкладыНадбавкиПоКласснымЧинамРангам",						"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ОкладыПоВоинскимСпециальнымЗваниям",						"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускПоБеременностиИРодамВоеннослужащего",						"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего",				"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего",	"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускПоУходуЗаРебенкомВоеннослужащего",							"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускВоеннослужащего",											"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОплатаСверхурочныхВоеннослужащим",								"ПериодРегистрации",	"Зарплата", "Организация");
		
КонецПроцедуры

Функция НастройкиПрограммыБюджетногоУчреждения(НастройкиПрограммы) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКонстант = "НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим,ИспользоватьРасчетСохраняемогоДенежногоСодержания,ИспользоватьВоеннуюСлужбу";
	Настройка = Константы.СоздатьНабор(СтрокаКонстант);
	Настройка.Прочитать();
	ЗаполнитьЗначенияСвойств(НастройкиПрограммы, Настройка, СтрокаКонстант);
	
	НастройкиГосударственнойСлужбы = РегистрыСведений.НастройкиГосударственнойСлужбы.СоздатьМенеджерЗаписи();
	НастройкиГосударственнойСлужбы.Прочитать();
	Если НастройкиГосударственнойСлужбы.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПрограммы, НастройкиГосударственнойСлужбы);
	КонецЕсли;

КонецФункции

Процедура ДобавитьКомандыПечатиСохраняемогоДенежногоСодержания(КомандыПечати, ФункциональныеОпции = "") Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") 
		И Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРасчетаСохраняемогоДенежногоСодержания";
		КомандаПечати.Идентификатор = "ПФ_MXL_РасчетСохраняемогоДенежногоСодержания";
		КомандаПечати.Представление = НСтр("ru = 'Расчет сохраняемого денежного содержания'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ФункциональныеОпции = ФункциональныеОпции;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДоработатьТекстЗапросаДляПодробногоРасчетаНачислений(ТекстЗапроса, ИмяДокумента, ИмяТабличнойЧастиСотрудники = "") Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ТекстЗапросаПолей = "";
	МДМетаданные = Метаданные.Документы[ИмяДокумента];
	Если Не ПустаяСтрока(ИмяТабличнойЧастиСотрудники) Тогда
		МДМетаданные = МДМетаданные.ТабличныеЧасти.Найти(МДМетаданные);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("РасчетДенежногоСодержания", МДМетаданные) Тогда
		ТекстЗапросаПолей = "	Документ.РасчетДенежногоСодержания КАК РасчетДенежногоСодержания," + Символы.ПС;
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СохраняемоеДенежноеСодержание", МДМетаданные) Тогда
		ТекстЗапросаПолей = ТекстЗапросаПолей + "	Документ.СохраняемоеДенежноеСодержание КАК СохраняемоеДенежноеСодержание," + Символы.ПС;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекстЗапросаПолей) Тогда
		
		ПозицияВыбрать = СтрНайти(ВРег(ТекстЗапроса), Врег("ВЫБРАТЬ"));
		ТекстЗапроса = Лев(ТекстЗапроса, ПозицияВыбрать + СтрДлина("ВЫБРАТЬ")) + Символы.ПС
			+ ТекстЗапросаПолей + Сред(ТекстЗапроса, ПозицияВыбрать + СтрДлина("ВЫБРАТЬ") + 1);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета, КлючВарианта) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получение списков периодов работы, соответствующих варианту отчета
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
		НоваяСтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
		НоваяСтрокаТаблицыСотрудников.Сотрудник = СтрокаСотрудника.РабочееМестоСотрудник;
		НоваяСтрокаТаблицыСотрудников.ДатаОкончания = Макс(СтрокаСотрудника.ПараметрыДанныхПериод, СтрокаСотрудника.РабочееМестоДатаПриема);
	КонецЦикла;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "<>", "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.ВидДоговора,
		|	МИНИМУМ(КадроваяИсторияСотрудниковСледующиеСобытия.Период) КАК ПериодСледующий
		|ПОМЕСТИТЬ ВТКадроваяИсторияСоСледующимПериодом
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковСледующиеСобытия
		|		ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковСледующиеСобытия.Сотрудник
		|			И КадроваяИсторияСотрудников.Период < КадроваяИсторияСотрудниковСледующиеСобытия.Период
		|			И КадроваяИсторияСотрудников.ВидДоговора <> КадроваяИсторияСотрудниковСледующиеСобытия.ВидДоговора
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.ВидДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСоСледующимПериодом.Период,
		|	КадроваяИсторияСоСледующимПериодом.Сотрудник,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСоСледующимПериодом.ПериодСледующий ЕСТЬ NULL 
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(КадроваяИсторияСоСледующимПериодом.ПериодСледующий, ДЕНЬ, -1)
		|	КОНЕЦ КАК ДатаЗавершения,
		|	ЕСТЬNULL(КадроваяИсторияСоСледующимПериодом.ПериодСледующий, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодСледующий,
		|	КадроваяИсторияСотрудниковСледующиеСобытия.Регистратор.Номер КАК Номер,
		|	КадроваяИсторияСотрудниковСледующиеСобытия.Регистратор.Дата КАК Дата
		|ПОМЕСТИТЬ ВТПериодыКадровойИстории
		|ИЗ
		|	ВТКадроваяИсторияСоСледующимПериодом КАК КадроваяИсторияСоСледующимПериодом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковСледующиеСобытия
		|		ПО КадроваяИсторияСоСледующимПериодом.Сотрудник = КадроваяИсторияСотрудниковСледующиеСобытия.Сотрудник
		|			И КадроваяИсторияСоСледующимПериодом.ПериодСледующий = КадроваяИсторияСотрудниковСледующиеСобытия.Период";
	
	Если ЭтоВариантОтчетаТ2ГСМС(КлючВарианта) Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "
			|ГДЕ
			|	КадроваяИсторияСоСледующимПериодом.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.КонтрактГосслужащего), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего))";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "
			|ГДЕ
			|	КадроваяИсторияСоСледующимПериодом.ВидДоговора НЕ В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.КонтрактГосслужащего), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего))";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПериодыКадровойИстории.Период) КАК Период,
		|	ПериодыКадровойИстории.Сотрудник
		|ПОМЕСТИТЬ ВТМаксимальныеПериодыКадровойИстории
		|ИЗ
		|	ВТПериодыКадровойИстории КАК ПериодыКадровойИстории
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыКадровойИстории.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыКадровойИстории.Период,
		|	ПериодыКадровойИстории.Сотрудник,
		|	ПериодыКадровойИстории.ДатаЗавершения,
		|	ПериодыКадровойИстории.ПериодСледующий,
		|	ПериодыКадровойИстории.Номер,
		|	ПериодыКадровойИстории.Дата
		|ИЗ
		|	ВТПериодыКадровойИстории КАК ПериодыКадровойИстории
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныеПериодыКадровойИстории КАК МаксимальныеПериодыКадровойИстории
		|		ПО ПериодыКадровойИстории.Период = МаксимальныеПериодыКадровойИстории.Период
		|			И ПериодыКадровойИстории.Сотрудник = МаксимальныеПериодыКадровойИстории.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодыКадровойИстории.Сотрудник,
		|	ПериодыКадровойИстории.Период";
		
	ПериодыРаботыСотрудников = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ПериодыРаботыСотрудника = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			
			СтруктураПериода = Новый Структура("ДатаЗавершения,Номер,Дата");
			ЗаполнитьЗначенияСвойств(СтруктураПериода, Выборка);
			ПериодыРаботыСотрудника.Вставить(Выборка.Период, СтруктураПериода);
			
		КонецЦикла; 
		
		ПериодыРаботыСотрудников.Вставить(Выборка.Сотрудник, ПериодыРаботыСотрудника);
		
	КонецЦикла; 
			
	// Удаление сведений об аттестациях не соответствующих варианту отчета
	ДанныеАттестаций = ДополнительныеСведения.Получить("ДанныеАттестаций");
	Если ДанныеАттестаций <> Неопределено Тогда
		
		УдаляемыеСотрудники = Новый Массив;
		Для каждого ДанныеСотрудника Из ДанныеАттестаций Цикл
		
			ПериодыРаботыСотрудника = ПериодыРаботыСотрудников.Получить(ДанныеСотрудника.Ключ);
			Если ПериодыРаботыСотрудника = Неопределено Тогда
				УдаляемыеСотрудники.Добавить(ДанныеСотрудника.Ключ);
			Иначе
				
				СтрокиКУдалению = Новый Массив;
				Для каждого СтрокаДанных Из ДанныеСотрудника.Значение Цикл
					
					ПодходящаяСтрока = Ложь;
					Для каждого ОписаниеПериода Из ПериодыРаботыСотрудника Цикл
						
						Если ОписаниеПериода.Ключ <= СтрокаДанных.Период
							И (СтрокаДанных.Период < ОписаниеПериода.Значение.ДатаЗавершения ИЛИ Не ЗначениеЗаполнено(ОписаниеПериода.Значение.ДатаЗавершения)) Тогда
							
							ПодходящаяСтрока = Истина;
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если Не ПодходящаяСтрока Тогда
						СтрокиКУдалению.Добавить(СтрокаДанных);
					КонецЕсли; 
					
				КонецЦикла;
				
				Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					
					ИндексСтроки = ДанныеСотрудника.Значение.Найти(СтрокаКУдалению);
					Если ИндексСтроки <> Неопределено Тогда
						ДанныеСотрудника.Значение.Удалить(ИндексСтроки);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемыйСотрудник Из УдаляемыеСотрудники Цикл
			ДанныеАттестаций.Удалить(УдаляемыйСотрудник);
		КонецЦикла;
		
	КонецЕсли;
			
	// Получение сведений о классных чинах
	Если ЭтоВариантОтчетаТ2ГСМС(КлючВарианта)
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетКлассныхЧинов") Тогда
		
		Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("РабочееМестоСотрудник"));
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
			|	Сотрудники.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТИзмеренияДаты
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)";
			
		Запрос.Выполнить();
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			"КлассныеЧиныРангиФизическихЛиц",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТИзмеренияДаты",
				"ФизическоеЛицо"
			),
			,
			"ВТКлассныеЧиныРангиФизическихЛиц"
		);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	КлассныеЧиныРангиФизическихЛиц.Период КАК Период,
			|	КлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг КАК КлассныйЧинРанг
			|ПОМЕСТИТЬ ВТИзмеренияДатыДляОкладов
			|ИЗ
			|	ВТКлассныеЧиныРангиФизическихЛиц КАК КлассныеЧиныРангиФизическихЛиц";
			
		Запрос.Выполнить();
			
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ОкладыНадбавкиПоКласснымЧинамРангам",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТИзмеренияДатыДляОкладов",
				"КлассныйЧинРанг"
			),
			,
			"ВТОкладыНадбавкиПоКласснымЧинамРангам"
		);
			
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИзмеренияДаты.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КлассныеЧиныРангиФизическихЛиц.Период КАК ДатаПрисвоения,
			|	КлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг КАК КлассныйЧинРанг,
			|	ОкладыНадбавкиПоКласснымЧинамРангам.Размер,
			|	КлассныеЧиныРангиФизическихЛиц.Регистратор КАК ДокументОснование
			|ИЗ
			|	ВТИзмеренияДаты КАК ИзмеренияДаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРангиФизическихЛиц КАК КлассныеЧиныРангиФизическихЛиц
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладыНадбавкиПоКласснымЧинамРангам КАК ОкладыНадбавкиПоКласснымЧинамРангам
			|			ПО КлассныеЧиныРангиФизическихЛиц.Период = ОкладыНадбавкиПоКласснымЧинамРангам.Период
			|				И КлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг = ОкладыНадбавкиПоКласснымЧинамРангам.КлассныйЧинРанг
			|		ПО ИзмеренияДаты.ФизическоеЛицо = КлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо";
			
		ДанныеКлассныхЧинов = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			ДанныеСотрудника = Новый Массив;
			Пока Выборка.Следующий() Цикл
				
				ДанныеОЧинеРазряде = Новый Структура("ДатаПрисвоения,КлассныйЧинРанг,РазмерНадбавки,ДокументОснование");
				
				ДанныеОЧинеРазряде.Вставить("ДатаПрисвоения", Формат(Выборка.ДатаПрисвоения, "ДЛФ=D"));
				ДанныеОЧинеРазряде.Вставить("КлассныйЧинРанг", Выборка.КлассныйЧинРанг);
				ДанныеОЧинеРазряде.Вставить("РазмерНадбавки", Выборка.Размер);
				
				Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
					
					МетаданныеДокумента = Выборка.ДокументОснование.Метаданные();
					НомерДата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ДокументОснование, "Номер,Дата");
					
					ДокументОснование = МетаданныеДокумента.Синоним + " №" + НомерДата.Номер + " " + НСтр("ru='от'") + " " + Формат(НомерДата.Дата, "ДЛФ=D");
					
					ДанныеОЧинеРазряде.Вставить("ДокументОснование", ДокументОснование);
					
				КонецЕсли; 
				
				ДанныеСотрудника.Добавить(ДанныеОЧинеРазряде);
				
			КонецЦикла; 
			
			ДанныеКлассныхЧинов.Вставить(Выборка.ФизическоеЛицо, ДанныеСотрудника);
			
		КонецЦикла;
		
		ДополнительныеСведения.Вставить("ДанныеКлассныхЧинов", ДанныеКлассныхЧинов);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьДоступныеВидыДоговоровССотрудникамиПоНастройкам(ДоступныеВидыДоговоров, ГруппыДоговоров) Экспорт

	
	Если ГруппыДоговоров.Найти("Все") <> Неопределено Или ГруппыДоговоров.Найти("Военнослужащие") <> Неопределено Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
			ДоступныеВидыДоговоров.Добавить(Метаданные.Перечисления.ВидыДоговоровССотрудниками.ЗначенияПеречисления.КонтрактВоеннослужащего);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву") Тогда
			ДоступныеВидыДоговоров.Добавить(Метаданные.Перечисления.ВидыДоговоровССотрудниками.ЗначенияПеречисления.ВоеннослужащийПоПризыву);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяФункциональнойОпцииПоИмениДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ЯвляетсяПрокурором") Тогда
		Возврат "ИспользоватьРасчетДенежногоСодержанияПрокуроров";
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяСудьей") Тогда
		Возврат "ИспользоватьРасчетДенежногоСодержанияСудей";
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяВоеннослужащим") Тогда
		Возврат "ИспользоватьВоеннуюСлужбу";
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяВоеннослужащимПоПризыву") Тогда
		Возврат "ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ДобаитьВТСведенийПриказовОПриемеОбъединенияСЗачислениямиВСпискиЧасти(Запрос) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
		Запрос.Текст
		+ "
		|ОБЪЕДИНИТЬ ВСЕ
		|"
		+ "ВЫБРАТЬ
		  |	ЗачислениеВСпискиЧасти.Ссылка КАК Ссылка,
		  |	ЗачислениеВСпискиЧасти.Номер КАК Номер,
		  |	ЗачислениеВСпискиЧасти.Дата КАК Дата,
		  |	ЗачислениеВСпискиЧасти.Организация КАК Организация,
		  |	ЗачислениеВСпискиЧасти.Подразделение КАК Подразделение,
		  |	ЗачислениеВСпискиЧасти.Сотрудник КАК Сотрудник,
		  |	ЗачислениеВСпискиЧасти.ФизическоеЛицо КАК ФизическоеЛицо,
		  |	ЗачислениеВСпискиЧасти.Должность КАК Должность,
		  |	ЗачислениеВСпискиЧасти.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		  |	ЗачислениеВСпискиЧасти.ДатаЗачисления КАК ДатаЗачисления,
		  |	NULL КАК Поле1,
		  |	ЗачислениеВСпискиЧасти.ВидЗанятости КАК ВидЗанятости,
		  |	NULL КАК Поле2,
		  |	ЗачислениеВСпискиЧасти.ГрафикРаботы КАК ГрафикРаботы,
		  |	NULL КАК Поле3,
		  |	NULL КАК Поле4,
		  |	NULL КАК Поле5,
		  |	ЗачислениеВСпискиЧасти.Руководитель КАК Руководитель,
		  |	ЗачислениеВСпискиЧасти.ДолжностьРуководителя КАК ДолжностьРуководителя,
		  |	NULL КАК Поле6,
		  |	ЗачислениеВСпискиЧасти.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		  |	NULL КАК Поле7,
		  |	ЗачислениеВСпискиЧасти.СтатьяФинансирования КАК СтатьяФинансирования,
		  |	NULL КАК Поле8,
		  |	ЗачислениеВСпискиЧасти.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчетаСтоимостиЕдиницыВремени,
		  |	ЗачислениеВСпискиЧасти.СовокупнаяТарифнаяСтавка КАК СовокупнаяТарифнаяСтавка,
		  |	NULL КАК Поле9,
		  |	NULL КАК Поле10,
		  |	ЗачислениеВСпискиЧасти.ВидДоговора КАК ВидДоговора,
		  |	NULL КАК Поле11,
		  |	NULL КАК Поле12,
		  |	NULL КАК Поле13,
		  |	NULL КАК Поле14,
		  |	NULL КАК Поле15,
		  |	NULL КАК Поле16,
		  |	NULL КАК Поле17,
		  |	NULL КАК Поле18,
		  |	NULL КАК Поле19,
		  |	NULL КАК Поле20,
		  |	NULL КАК Поле21,
		  |	NULL КАК Поле22,
		  |	NULL КАК Поле23,
		  |	ЗачислениеВСпискиЧасти.Территория КАК Территория,
		  |	NULL КАК Поле24,
		  |	ЗачислениеВСпискиЧасти.Ответственный КАК Ответственный,
		  |	ЗачислениеВСпискиЧасти.Комментарий КАК Комментарий,
		  |	ЗачислениеВСпискиЧасти.Проведен КАК Проведен,
		  |	NULL КАК Поле25,
		  |	NULL КАК Поле26,
		  |	NULL КАК Поле27
		  |ИЗ
		  |	Документ.ЗачислениеВСпискиЧасти КАК ЗачислениеВСпискиЧасти
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		  |		ПО ЗачислениеВСпискиЧасти.Сотрудник = КадроваяИстория.Сотрудник
		  |			И ЗачислениеВСпискиЧасти.Ссылка = КадроваяИстория.Регистратор
		  |			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
		  |
		  |ОБЪЕДИНИТЬ ВСЕ
		  |
		  |ВЫБРАТЬ
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.Номер,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.Дата,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.Организация,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Подразделение,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Сотрудник,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.ФизическоеЛицо,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Должность,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.ДолжностьПоШтатномуРасписанию,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.ДатаЗачисления,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.ВидЗанятости,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.ГрафикРаботы,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.Руководитель,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.СпособОтраженияЗарплатыВБухучете,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.СтатьяФинансирования,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.СовокупнаяТарифнаяСтавка,
		  |	NULL,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.ВидДоговора,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Территория,
		  |	NULL,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.Ответственный,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.Комментарий,
		  |	ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка.Проведен,
		  |	NULL,
		  |	NULL,
		  |	NULL
		  |ИЗ
		  |	Документ.ЗачислениеВСпискиЧастиСписком.Сотрудники КАК ЗачислениеВСпискиЧастиСпискомСотрудники
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		  |		ПО ЗачислениеВСпискиЧастиСпискомСотрудники.Сотрудник = КадроваяИстория.Сотрудник
		  |			И ЗачислениеВСпискиЧастиСпискомСотрудники.Ссылка = КадроваяИстория.Регистратор
		  |			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))";
	
КонецПроцедуры

// Сведения о принадлежности должности к военнослужащим

Функция ДобавитьПолеСведенийОПринадлежностиДолжностиКВоеннослужащим(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПринадлежностиДолжностиКВоеннослужащим(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ВидДоговора");
		
		ПутьКДанным = ПутьКДаннымСведенийОПринадлежностиДолжностиКВоеннослужащим(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПринадлежностиДолжностиКВоеннослужащим(Знач ИмяПоля)
		
	Если (Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу")) ИЛИ
		 (ИмяПоля = ВРег("ЯвляетсяВоеннослужащимПоПризыву") И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву")) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("ЯвляетсяВоеннослужащим") ИЛИ
			ИмяПоля = ВРег("ЯвляетсяВоеннослужащимПоПризыву");
		
КонецФункции

Функция ПутьКДаннымСведенийОПринадлежностиДолжностиКВоеннослужащим(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяВоеннослужащим") Тогда
			
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА КадроваяИсторияСотрудников.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего)
			|			ТОГДА ИСТИНА
			|		КОГДА КадроваяИсторияСотрудников.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ВоеннослужащийПоПризыву)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяВоеннослужащимПоПризыву") Тогда
			
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА КадроваяИсторияСотрудников.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ВоеннослужащийПоПризыву)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Свойства должностей государственной службы

Функция ДобавитьПолеСвойствДолжностейГосударственнойСлужбы(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСвойстваДолжностейГосударственнойСлужбы(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "СвойстваДолжностейГосударственнойСлужбы");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Должность");
		
		ПутьКДанным = ПутьКДаннымСвойствДолжностейГосударственнойСлужбы(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСвойстваДолжностейГосударственнойСлужбы(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ЯвляетсяПрокурором") И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоСодержанияПрокуроров") И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоСодержанияСудей") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПоля = ВРег("ЯвляетсяСудьей") И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоСодержанияСудей") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ИмяПоля = ВРег("ЯвляетсяПрокурором") Или
		ИмяПоля = ВРег("ЯвляетсяСудьей") Или
		ИмяПоля = ВРег("ВидДолжностиГосударственнойСлужбы"));
	
КонецФункции

Функция ПутьКДаннымСвойствДолжностейГосударственнойСлужбы(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяПрокурором") Тогда
		ПутьКДанным = "	ЕСТЬNULL(СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурораСледователяСудьи, ЛОЖЬ)";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяСудьей") Тогда
		ПутьКДанным = "	ЕСТЬNULL(СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи, ЛОЖЬ)";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидДолжностиГосударственнойСлужбы") Тогда
		ПутьКДанным = "	СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстыЗапросовВТСвойстваДолжностейГосударственнойСлужбы(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	СвойстваДолжностейГосударственнойСлужбы = ИсточникиДанных.Получить("СвойстваДолжностейГосударственнойСлужбы");
	Если СвойстваДолжностейГосударственнойСлужбы = Истина Тогда
		
		ЧастиЗапроса = Новый Массив;
		ЧастиЗапроса.Добавить(Запрос.Текст);
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
			|	ПО (КадроваяИсторияСотрудников.Должность = СвойстваДолжностейГосударственнойСлужбы.Должность)}");
		
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

// Сведения должностей государственной службы.

Функция НеобходимыСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(Знач ИмяПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетКлассныхЧинов") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КлассныйЧинРангДолжности");
		
КонецФункции

Функция ПутьКДаннымСведенийОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("КлассныйЧинРангДолжности") Тогда
		ПутьКДанным = "	СведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы.КлассныйЧинРангДолжности";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетКлассныхЧинов") Тогда
		Возврат;
	КонецЕсли; 
	
	СписокПолей = ИсточникиДанных.Получить("КадроваяИсторияСотрудников");
	Если СписокПолей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимыСвойстваДолжностей = Ложь;
	Для каждого ИмяПоля Из СписокПолей Цикл
		Если НеобходимыСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля) Тогда
			НеобходимыСвойстваДолжностей = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если Не НеобходимыСвойстваДолжностей Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвойстваДолжностейГосударственнойСлужбы.Должность,
		|	КлассныеЧиныРанги.Ссылка КАК КлассныйЧинРанг
		|ПОМЕСТИТЬ ВТКлассныеЧиныРангиДолжностей
		|ИЗ
		|	РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассныеЧиныРанги КАК КлассныеЧиныРанги
		|		ПО СвойстваДолжностейГосударственнойСлужбы.ГруппаДолжностиГосударственнойСлужбы = КлассныеЧиныРанги.ГруппаДолжности
		|			И (НЕ КлассныеЧиныРанги.ВАрхиве)}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлассныеЧиныРангиДолжностей.Должность,
		|	МАКСИМУМ(КлассныеЧиныРангиДолжностей.КлассныйЧинРанг.ОчередностьВГруппе) КАК ОчередностьВГруппе
		|ПОМЕСТИТЬ ВТСтаршийКлассныйЧинРангДолжности
		|ИЗ
		|	ВТКлассныеЧиныРангиДолжностей КАК КлассныеЧиныРангиДолжностей
		|
		|СГРУППИРОВАТЬ ПО
		|	КлассныеЧиныРангиДолжностей.Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлассныеЧиныРангиДолжностей.Должность,
		|	КлассныеЧиныРангиДолжностей.КлассныйЧинРанг КАК КлассныйЧинРангДолжности
		|ПОМЕСТИТЬ ВТСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы
		|ИЗ
		|	ВТСтаршийКлассныйЧинРангДолжности КАК СтаршийКлассныйЧинРангДолжности
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассныеЧиныРангиДолжностей КАК КлассныеЧиныРангиДолжностей
		|		ПО СтаршийКлассныйЧинРангДолжности.Должность = КлассныеЧиныРангиДолжностей.Должность
		|			И СтаршийКлассныйЧинРангДолжности.ОчередностьВГруппе = КлассныеЧиныРангиДолжностей.КлассныйЧинРанг.ОчередностьВГруппе}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКлассныеЧиныРангиДолжностей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтаршийКлассныйЧинРангДолжности";
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы КАК СведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы
		|	ПО КадроваяИсторияСотрудников.Должность = СведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы.Должность}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы");
	
КонецПроцедуры

// Сведения о Воинском специальном звании.

Функция ДобавитьПолеСведенийОВоинскомСпециальномЗвании(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОВоинскихСпециальныхЗваниях(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОВоинскихСпециальныхЗваниях", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОВоинскихСпециальныхЗваниях(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОВоинскихСпециальныхЗваниях(Знач ИмяПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВоинскоеСпециальноеЗваниеПериодРегистрации")
		Или ИмяПоля = ВРег("ВоинскоеСпециальноеЗвание");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОВоинскихСпециальныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОВоинскихСпециальныхЗваниях(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ВоинскоеСпециальноеЗваниеПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ВоинскиеСпециальныеЗванияФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОВоинскихСпециальныхЗваниях(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ВоинскоеСпециальноеЗваниеПериодРегистрации") Тогда
		ПутьКДанным = "	ВоинскиеСпециальныеЗванияФизическихЛиц.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("ВоинскоеСпециальноеЗвание") Тогда
		ПутьКДанным = "	ВоинскиеСпециальныеЗванияФизическихЛиц.ВоинскоеСпециальноеЗвание";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОВоинскихСпециальныхЗваниях(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОВоинскихСпециальныхЗваниях = "ВТСведенияОВоинскихСпециальныхЗваниях") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ВоинскиеСпециальныеЗванияФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ВоинскиеСпециальныеЗванияФизическихЛиц", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОВоинскихСпециальныхЗваниях);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОВоинскихСпециальныхЗваниях(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОВоинскихСпециальныхЗваниях") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросВТ = ЗапросВТСведенияОВоинскихСпециальныхЗваниях(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОВоинскихСпециальныхЗваниях КАК ВоинскиеСпециальныеЗванияФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ВоинскиеСпециальныеЗванияФизическихЛиц.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОВоинскихСпециальныхЗваниях");
	
КонецПроцедуры

// Сведения о Классном чине, ранге.

Функция ДобавитьПолеСведенийОКлассномЧинеРанге(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОКлассныхЧинахРангах(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОКлассныхЧинахРангах", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОКлассныхЧинахРангах(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОКлассныхЧинахРангах(Знач ИмяПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетКлассныхЧинов") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КлассныйЧинРангПериодРегистрации")
		Или ИмяПоля = ВРег("КлассныйЧинРанг");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОКлассныхЧинахРангахФизическихЛиц(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОКлассныхЧинахРангах(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("КлассныйЧинРангПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.КлассныеЧиныРангиФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОКлассныхЧинахРангах(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("КлассныйЧинРангПериодРегистрации") Тогда
		ПутьКДанным = "	КлассныеЧиныРангиФизическихЛиц.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("КлассныйЧинРанг") Тогда
		ПутьКДанным = "	КлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОКлассныхЧинахРангахФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОКлассныхЧинахРангахФизическихЛиц = "ВТСведенияОКлассныхЧинахРангахФизическихЛиц") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("КлассныеЧиныРангиФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КлассныеЧиныРангиФизическихЛиц", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОКлассныхЧинахРангахФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОКлассныхЧинахРангах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОКлассныхЧинахРангах") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОКлассныхЧинахРангахФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОКлассныхЧинахРангахФизическихЛиц КАК КлассныеЧиныРангиФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = КлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КлассныеЧиныРангиФизическихЛиц.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОКлассныхЧинахРангахФизическихЛиц");
	
КонецПроцедуры

Процедура ДобавитьВКоллекциюПоляСведенийОГосударственныхИлиМуниципальныхСлужащих(КадровыеДанные, ИмяПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НеобходимыСведенияОГосударственныхСлужащих(ИмяПоля)
		Или НеобходимыСведенияРеестраГосслужащих(ИмяПоля)
		Или НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
		
		Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
			КадровыеДанные = ?(ПустаяСтрока(КадровыеДанные), "", КадровыеДанные + ",") + ИмяПоля;
		Иначе
			КадровыеДанные.Добавить(ИмяПоля);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сведения о государственном служащем.

Функция ДобавитьПолеСведенийОГосударственныхСлужащих(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОГосударственныхСлужащих(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГосударственныхСлужащих", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОГосударственныхСлужащих(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОГосударственныхСлужащих(Знач ИмяПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ЛичныйРеестровыйНомер")
		ИЛИ	ИмяПоля = ВРег("СпособПоступленияНаСлужбу");
		
КонецФункции

Функция ПутьКДаннымСведенийОГосударственныхСлужащих(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ЛичныйРеестровыйНомер") Тогда
		ПутьКДанным = "	СведенияОГосударственныхСлужащих.ЛичныйРеестровыйНомер";
	ИначеЕсли ИмяПоля = ВРег("СпособПоступленияНаСлужбу") Тогда
		ПутьКДанным = "	СведенияОГосударственныхСлужащих.СпособПоступленияНаСлужбу";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОГосударственныхСлужащих(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОГосударственныхСлужащих") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОГосударственномСлужащем.Госслужащий КАК ФизическоеЛицо,
		|	СведенияОГосударственномСлужащем.ЛичныйРеестровыйНомер,
		|	СведенияОГосударственномСлужащем.СпособПоступленияНаСлужбу
		|ПОМЕСТИТЬ ВТСведенияОГосударственныхСлужащих
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГосударственномСлужащем КАК СведенияОГосударственномСлужащем
		|		ПО ТаблицаОтборов.ФизическоеЛицо = СведенияОГосударственномСлужащем.Госслужащий}";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОГосударственныхСлужащих КАК СведенияОГосударственныхСлужащих
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОГосударственныхСлужащих.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОГосударственныхСлужащих");
	
КонецПроцедуры

// Сведение ВключаетсяВРеестрГосслужащих	

Функция ДобавитьПолеВключаетсяВРеестрГосслужащих(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияРеестраГосслужащих(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияРеестраГосслужащих", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийРеестраГосслужащих(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияРеестраГосслужащих(Знач ИмяПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВключаетсяВРеестрГосслужащих");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямРеестраГосслужащих(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияРеестраГосслужащих(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		УсловиеПоиска.ЛевоеЗначение = "ВидДоговора";
		УсловиеПоиска.ПравоеЗначение = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.КадроваяИсторияСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийРеестраГосслужащих(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ВключаетсяВРеестрГосслужащих") Тогда
		ПутьКДанным = "	СведенийРеестраГосслужащих.ВключаетсяВРеестрГосслужащих";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийРеестраГосслужащих(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияРеестраГосслужащих") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТестЗапросаИзмеренияДаты =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТИзмеренияДатыДляРеестраГосслужащих
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов";
	
	ТестЗапросаИзмеренияДаты = СтрЗаменить(ТестЗапросаИзмеренияДаты, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТестЗапросаИзмеренияДаты, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТИзмеренияДатыДляРеестраГосслужащих", "ФизическоеЛицо");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидДоговора", "=", Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего);
	
	ЗапросВТИмяРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"КадроваяИсторияСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистра);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудников.ФизическоеЛицо ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВключаетсяВРеестрГосслужащих
		|ПОМЕСТИТЬ ВТСведенияРеестраГосслужащих
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ТаблицаОтборов.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыДляРеестраГосслужащих
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадроваяИсторияСотрудников";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапроса, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТестЗапросаИзмеренияДаты);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(ЗапросВТИмяРегистра.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияРеестраГосслужащих КАК СведенийРеестраГосслужащих
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенийРеестраГосслужащих.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияРеестраГосслужащих");
	
КонецПроцедуры

Функция НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(Знач ИмяПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеВид")
		ИЛИ ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеПериодРегистрации")
		ИЛИ ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеРазмерМесяцев")
		ИЛИ ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеРазмерДней")
		ИЛИ ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеДней")
		ИЛИ	ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеМесяцев")
		ИЛИ	ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеЛет");
		
КонецФункции

Функция ПутьКДаннымСведенийОСтаже(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
		ИмяТаблицы = "ВыслугаЛетНаГосударственнойСлужбе";
	ИначеЕсли НеобходимыСведенияОСтажеЗаВыслугуЛетНаВоеннойСлужбе(ИмяПоля) Тогда
		ИмяТаблицы = "ВыслугаЛетНаВоеннойСлужбе";
	КонецЕсли;
	
	Если ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеВид")
		Или ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеВид") Тогда
		
		Возврат ИмяТаблицы + ".ВидСтажа";
		
	ИначеЕсли ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеПериодРегистрации")
		Или ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеПериодРегистрации") Тогда
		
		Возврат ИмяТаблицы + ".ПериодРегистрации";
		
	ИначеЕсли ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеРазмерМесяцев")
		Или ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеРазмерМесяцев") Тогда
		
		Возврат ИмяТаблицы + ".РазмерМесяцев";
		
	ИначеЕсли ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеРазмерДней")
		Или ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеРазмерДней") Тогда
		
		Возврат ИмяТаблицы + ".РазмерДней";
		
	ИначеЕсли ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеДней")
		Или ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеДней") Тогда
		
		Возврат ИмяТаблицы + ".Дней";
		
	ИначеЕсли ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеМесяцев")
		Или ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеМесяцев") Тогда
		
		Возврат ИмяТаблицы + ".Месяцев";
		
	ИначеЕсли ИмяПоля = ВРег("ВыслугаЛетНаГосударственнойСлужбеЛет")
		Или ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеЛет") Тогда
		
		Возврат ИмяТаблицы + ".Лет";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОписаниеСтажаДляОпределенияКритериевПоискаСотрудников(ИмяПоля) Экспорт
	
	Если НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
		Возврат Новый Структура("КатегорияСтажа,Идентификатор", Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе, "ВыслугаЛетНаГосударственнойСлужбе");
	ИначеЕсли НеобходимыСведенияОСтажеЗаВыслугуЛетНаВоеннойСлужбе(ИмяПоля) Тогда
		Возврат Новый Структура("КатегорияСтажа,Идентификатор", Перечисления.КатегорииСтажа.ВыслугаЛетНаВоеннойСлужбе, "ВыслугаЛетНаВоеннойСлужбе");
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьКомандыПечатиСохраняемогоДенежногоДовольствия(КомандыПечати, ФункциональныеОпции = "") Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		И ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") 
		И Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьФормВоинскойСлужбы";
		КомандаПечати.Идентификатор = "ПФ_MXL_РасчетСохраняемогоДенежногоДовольствия";
		КомандаПечати.Представление = НСтр("ru = 'Расчет сохраняемого денежного довольствия'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ФункциональныеОпции = ФункциональныеОпции;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДополнитьТаблицуДополнительныхПолейПредставленийОтчетовПоСотрудникам(ДополнительныеПоляПредставлений) Экспорт
	
	ИспользоватьВоеннуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу");
	ИспользоватьГосударственнуюМуниципальнуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу");
	
	Если ИспользоватьВоеннуюСлужбу
		Или ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
		
		ИспользоватьУчетКлассныхЧинов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетКлассныхЧинов");
		
		Если ИспользоватьУчетКлассныхЧинов
			И ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "КлассныйЧинРангПериодРегистрации";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Классный чин, ранг (период регистрации)'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.КлассныйЧинРангПериодРегистрации";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "КлассныйЧинРанг";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассныеЧиныРанги.ПустаяСсылка)";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Классный чин, ранг'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.КлассныйЧинРанг";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "КлассныйЧинРангДолжности";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассныеЧиныРанги.ПустаяСсылка)";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Классный чин, ранг (должности)'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.КлассныйЧинРангДолжности";
			
		КонецЕсли;
		
		Если ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВключаетсяВРеестрГосслужащих";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "Истина";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Включен в реестр госслужащих'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.ВключаетсяВРеестрГосслужащих";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ЛичныйРеестровыйНомер";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Личный реестровый номер'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.ЛичныйРеестровыйНомер";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "СпособПоступленияНаСлужбу";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "Значение(Перечисление.СпособыПоступленияНаСлужбу.ПустаяСсылка)";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Способ поступления на службу'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.СпособПоступленияНаСлужбу";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВыслугаЛетНаГосударственнойСлужбеДней";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Стаж на государственной службе (дней)'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.ВыслугаЛетНаГосударственнойСлужбеДней";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВыслугаЛетНаГосударственнойСлужбеМесяцев";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Стаж на государственной службе (месяцев)'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.ВыслугаЛетНаГосударственнойСлужбеМесяцев";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВыслугаЛетНаГосударственнойСлужбеЛет";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Стаж на государственной службе (лет)'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.ВыслугаЛетНаГосударственнойСлужбеЛет";
			
		КонецЕсли;
		
		Если ИспользоватьВоеннуюСлужбу Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВоинскоеСпециальноеЗвание";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ВоинскиеСпециальныеЗвания.ПустаяСсылка)";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Воинское, специальное звание'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.ВоинскоеСпециальноеЗвание";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВоинскоеСпециальноеЗваниеПериодРегистрации";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Дата присвоения воинского, специального звания'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.ВоинскоеСпециальноеЗваниеПериодРегистрации";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВыслугаЛетНаВоеннойСлужбеДней";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Стаж на военной службе (дней)'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.ВыслугаЛетНаВоеннойСлужбеДней";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВыслугаЛетНаВоеннойСлужбеМесяцев";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Стаж на военной службе (месяцев)'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.ВыслугаЛетНаВоеннойСлужбеМесяцев";
			
			СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = "ВыслугаЛетНаВоеннойСлужбеЛет";
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
			СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Стаж на военной службе (лет)'");
			СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.ВыслугаЛетНаВоеннойСлужбеЛет";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	ИспользоватьВоеннуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу");
	Если ИспользоватьВоеннуюСлужбу Тогда
		
		ДополнительныеПоляПредставлений = Неопределено;
		Если Не ДополнительныеПоля.Свойство("Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний", ДополнительныеПоляПредставлений) Тогда
			ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
		КонецЕсли;
		
		СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
		СтрокаДополнительногоПоля.ИмяПоля = "ВоинскоеСпециальноеЗвание";
		СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ВоинскиеСпециальныеЗвания.ПустаяСсылка)";
		СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Воинское, специальное звание'");
		СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.ВоинскоеСпециальноеЗвание";
		
	КонецЕсли;
	
КонецПроцедуры

// Сведения о стаже

Функция НеобходимыСведенияОСтажахФизическихЛиц(Знач ИмяПоля) Экспорт
	
	Возврат НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля)
		Или НеобходимыСведенияОСтажеЗаВыслугуЛетНаВоеннойСлужбе(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияОСтажеЗаВыслугуЛетНаВоеннойСлужбе(Знач ИмяПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеВид")
		ИЛИ ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеПериодРегистрации")
		ИЛИ ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеРазмерМесяцев")
		ИЛИ ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеРазмерДней")
		ИЛИ ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеДней")
		ИЛИ	ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеМесяцев")
		ИЛИ	ИмяПоля = ВРег("ВыслугаЛетНаВоеннойСлужбеЛет");
		
КонецФункции

#КонецОбласти


#Область ДокументПриемНаРаботу

Процедура ОбработкаЗаполненияДокументаПриемНаРаботу(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидДоговора") 
		И ЗначениеЗаполнено(ДанныеЗаполнения.ВидДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
		Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего;
	Иначе
		Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияДокументаПриемНаРаботу(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыеРеквизиты) = Тип("Массив") Тогда
		Если ПроверяемыеРеквизиты.Найти("ВидДоговора") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора) Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ведется учет государственных служащих: вид договора должен быть указан.'"), Объект, "ВидДоговора", ,Отказ);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ведется учет муниципальных служащих: вид договора должен быть указан.'"), Объект, "ВидДоговора", ,Отказ);
			КонецЕсли;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидДоговора");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандыПечатиДокументаПриемНаРаботу(КомандыПечати) Экспорт
	
	ДобавитьКомандуПечатиСлужебногоКонтракта(КомандыПечати);
	
КонецПроцедуры

Процедура УточнитьВидЗанятостиВПриказеОПриемеНаРаботуПоВидуДоговора(ПриказОПриемеНаРаботу) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПриказОПриемеНаРаботу.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего
		Или ПриказОПриемеНаРаботу.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего Тогда
		
		ПриказОПриемеНаРаботу.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область КадровыйПеревод

Процедура УстановитьВидДоговораВКадровомПереводе(Форма, ТекущийВидДоговора, СменаВидаДоговора) Экспорт
	
	Если НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьГосударственнуюСлужбу") 
		И НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьМуниципальнуюСлужбу") Тогда
		Форма.Объект.ВидДоговора = ТекущийВидДоговора;
		Возврат;
	КонецЕсли;
	
	Если НЕ СменаВидаДоговора Тогда
	  Форма.Объект.ВидДоговора = ТекущийВидДоговора;
	  Возврат;
	КонецЕсли;
	
	Если ТекущийВидДоговора <> Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор Тогда
		Форма.Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
	Иначе
		Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьГосударственнуюСлужбу") Тогда
			Форма.Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего;
		Иначе 
			Форма.Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область НачальнаяШтатнаяРасстановка

Процедура ОбработкаЗаполненияДокументаНачальнаяШтатнаяРасстановка(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидДоговора") 
		И ЗначениеЗаполнено(ДанныеЗаполнения.ВидДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
		Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего;	
	Иначе
		Объект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияДокументаНачальнаяШтатнаяРасстановка(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыеРеквизиты) = Тип("Массив") Тогда
		Если ПроверяемыеРеквизиты.Найти("ВидДоговора") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ведется учет государственных служащих: вид договора должен быть указан.'"), Объект, "ВидДоговора", ,Отказ);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидДоговора");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.КоличествоСтавок, Сотрудники.СпособРасчетаАванса");	
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащих") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ГрафикРаботы");
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ВыплатаБывшимСотрудникам

Процедура ОбработкаЗаполненияДокументаВыплатаБывшимСотрудникам(Объект, ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Увольнение.Организация,
	|	Увольнение.ДатаУвольнения,
	|	Увольнение.ФизическоеЛицо,
	|	Увольнение.Сотрудник,
	|	Увольнение.МесячноеДенежноеСодержание,
	|	ДОБАВИТЬКДАТЕ(Увольнение.ДатаУвольнения, ДЕНЬ, 1) КАК НачалоПериодаОплаты,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Увольнение.ДатаУвольнения, МЕСЯЦ, 2), ДЕНЬ) КАК ОкончаниеПериодаОплаты
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Результат = Запрос.Выполнить();
	
	ДанныеУвольнения =  Результат.Выбрать();
	ДанныеУвольнения.Следующий();

	Объект.Организация = ДанныеУвольнения.Организация;
	Объект.ВидВыплаты = Справочники.ВидыВыплатБывшимСотрудникам.СохраняемоеДенежноеСодержаниеНаПериодТрудоустройства;                                                 
	СуммаВыплаты = ДанныеУвольнения.МесячноеДенежноеСодержание * 2;                                                 
	
	Выплата = Объект.НачисленияУдержанияВзносы.Добавить();                    
	Выплата.ФизическоеЛицо = ДанныеУвольнения.ФизическоеЛицо;
	Выплата.Начислено = СуммаВыплаты;
	Выплата.КВыплате = СуммаВыплаты;
	
	СтрокаКомментария = НСтр("ru = 'Период оплаты с %1 по %2, сохраняемое денежное содержание на дату увольнения %3.'");
	
	Объект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаКомментария,
	Формат(ДанныеУвольнения.НачалоПериодаОплаты, "ДЛФ=D"),
	Формат(ДанныеУвольнения.ОкончаниеПериодаОплаты, "ДЛФ=D"),
	ДанныеУвольнения.МесячноеДенежноеСодержание);

КонецПроцедуры

#КонецОбласти


#Область СправочникСотрудники

Процедура ДобавитьКомандыПечатиСправочникуСотрудники(КомандыПечати) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Справочник.Сотрудники";
		КомандаПечати.Идентификатор = "ПФ_MXL_Т2ГСМС";
		КомандаПечати.Представление = НСтр("ru = 'Личная карточка (Т-2 ГС (МС))'");
		КомандаПечати.Порядок = 35;
	
	КонецЕсли;
	
КонецПроцедуры

Функция НужноПечататьМакетСотрудника(КоллекцияПечатныхФорм) Экспорт
	
	НужноПечататьМакет = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т2ГСМС");
		
	КонецЕсли;
	
	Возврат НужноПечататьМакет;
	
КонецФункции

Процедура ПечататьМакетСотрудника(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т2ГСМС") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т2ГСМС", НСтр("ru='Личная карточка (Т-2 ГС (МС))'"),
			ПечатьТ2ГСМС(МассивОбъектов, ОбъектыПечати), ,);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ2ГСМС(МассивОбъектов, ОбъектыПечати) 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ОтчетТ2 = Отчеты.УнифицированнаяФормаТ2.Создать();
	ОтчетТ2.ИнициализироватьОтчет();
	ОтчетТ2.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетТ2.СхемаКомпоновкиДанных.ВариантыНастроек.Т2.Настройки);
	
	ЗначениеПараметра = ОтчетТ2.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КлючВарианта"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Значение = "Т2ГСМС";
	КонецЕсли; 
		
	Отбор = ОтчетТ2.КомпоновщикНастроек.Настройки.Отбор;
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "РабочееМесто.Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, МассивОбъектов);
	
	ОтчетТ2.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ЭтоВариантОтчетаТ2ГСМС(Знач КлючВарианта) Экспорт
	
	Возврат Врег(КлючВарианта) = "Т2ГСМС";
	
КонецФункции

#КонецОбласти


#Область СправочникДолжности

Процедура ДополнитьФормуЭлементаСправочникаДолжности(Форма, ИмяГруппыДляВставки = "ГруппаГосударственнаяСлужба") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиГосударственнойСлужбы = ГосударственнаяСлужба.НастройкиГосударственнойСлужбы();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		ЗаголовокГруппы = НСтр("ru = 'Отношение должности к муниципальной службе'");
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'Отношение должности к государственной службе'");
	КонецЕсли;
	
	Форма.ГруппаГосударственнаяСлужбаЗаголовок = ЗаголовокГруппы;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СвойстваДолжностейГосударственнойСлужбы", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.СвойстваДолжностейГосударственнойСлужбы"),,,Истина));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Если Форма.Элементы.Найти("ВидДолжностиГосударственнойСлужбы") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаФормы = Форма.Элементы.Найти(ИмяГруппыДляВставки); 
	
	ПолеВвода = Форма.Элементы.Вставить("ВидДолжностиГосударственнойСлужбы", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.Заголовок = НСтр("ru = 'Вид должности'");
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваДолжностейГосударственнойСлужбыПриИзменении");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") И НастройкиГосударственнойСлужбы.ИспользоватьГосударственныеМуниципальныеДолжности Тогда
		
		ПолеВвода = Форма.Элементы.Вставить("ИсчислениеСтраховогоСтажаПФРГосударственнойДолжности", Тип("ПолеФормы"), ГруппаФормы);
		ПолеВвода.ПутьКДанным = "СвойстваДолжностейГосударственнойСлужбы.ИсчислениеСтраховогоСтажаПФРГосударственнойДолжности";
		ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
		ПолеВвода.Заголовок = НСтр("ru = 'Код исчисления стажа ПФР'");
		ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Справочники.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ЗамещениеГосударственныхДолжностей()));
		ПолеВвода.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			
	КонецЕсли;
	
	ПолеВвода = Форма.Элементы.Вставить("КатегорияДолжностиГосударственнойСлужбы", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваДолжностейГосударственнойСлужбы.КатегорияДолжностиГосударственнойСлужбы";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.Заголовок = НСтр("ru = 'Категория должности'");
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваДолжностейГосударственнойСлужбыПриИзменении");
	
	ПолеВвода = Форма.Элементы.Вставить("ГруппаДолжностиГосударственнойСлужбы", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваДолжностейГосударственнойСлужбы.ГруппаДолжностиГосударственнойСлужбы";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.Заголовок = НСтр("ru = 'Группа должности'");
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваДолжностейГосударственнойСлужбыПриИзменении");
	
	ПолеВвода = Форма.Элементы.Вставить("ДолжностьПрокурора", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора";
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваДолжностейГосударственнойСлужбыПриИзменении");

	ПолеВвода = Форма.Элементы.Вставить("ДолжностьСудьи", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи";
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваДолжностейГосударственнойСлужбыПриИзменении");
	
	ПолеВвода = Форма.Элементы.Вставить("ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваДолжностейГосударственнойСлужбы.ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность";
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПолеВвода.Заголовок = НСтр("ru = 'Должность помощника'");
	ПолеВвода.Подсказка = НСтр("ru = 'Должность учреждена для непосредственного обеспечения исполнения полномочий лица, замещающего муниципальную должность'");
	ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваДолжностейГосударственнойСлужбыПриИзменении");

КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжности(Форма) Экспорт	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СвойстваДолжностейГосударственнойСлужбы) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СвойстваДолжностейГосударственнойСлужбы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Должность = Форма.Объект.Ссылка;
	МенеджерЗаписи.Прочитать();
	
	ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СвойстваДолжностейГосударственнойСлужбы);
	
	ГосударственнаяСлужбаКлиентСервер.УстановитьСвойстваЭлементовСвойстваДолжностейГосударственнойСлужбы(Форма);
	
КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеДолжности(Форма, Ссылка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СвойстваДолжностейГосударственнойСлужбы) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СвойстваДолжностейГосударственнойСлужбы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Должность.Установить(Ссылка);
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Форма.СвойстваДолжностейГосударственнойСлужбы);
	Запись.Должность = Ссылка;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.УстановитьДополнительноеСвойствоПропуститьОбновлениеЗависимыхСтажей(НаборЗаписей.ДополнительныеСвойства);
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораСправочникаДолжности(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка  = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.Должности КАК Должности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	|		ПО Должности.Ссылка = СвойстваДолжностейГосударственнойСлужбы.Должность
	|ГДЕ
	|	СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы = &ЯвляетсяДолжностьюГосударственнойСлужбы
	|	И &ДополнительноеУсловие";
	
	ВидыДоговоровГосударственнойСлужбы = ВидыДоговоровГосударственнойСлужбы();
	
	Запрос.УстановитьПараметр("ЯвляетсяДолжностьюГосударственнойСлужбы", ВидыДоговоровГосударственнойСлужбы.Найти(Параметры.ВидДоговора) <> Неопределено);
	
	ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.Должности, Параметры, Запрос, "Должности")
	
КонецПроцедуры 

Процедура ПриСозданииФормыСпискаСправочникаДолжности(Форма, Параметры, ОписаниеСписка) Экспорт
	ДополнитьФормуСпискаОтборомДолжностейГосударственнойСлужбы(Форма, Параметры, ОписаниеСписка);	
КонецПроцедуры

Процедура ПроверитьЗаписьДолжностиВФорме(Форма, Отказ) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = Форма.СвойстваДолжностейГосударственнойСлужбы;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["СвойстваДолжностейГосударственнойСлужбы"];
	Синоним = МетаданныеРегистра.Синоним;
	Если ЗначениеЗаполнено(МетаданныеРегистра.ПредставлениеЗаписи) Тогда
		Синоним = МетаданныеРегистра.ПредставлениеЗаписи;
	КонецЕсли;

	ПроверяемыеЗначения = Новый Массив;
	ПроверяемыеЗначения.Добавить(МетаданныеРегистра.Ресурсы.ВидДолжностиГосударственнойСлужбы);
	
	ДолжностьГосслужбы = МенеджерЗаписи.ВидДолжностиГосударственнойСлужбы = Перечисления.ВидыДолжностейГосударственнойСлужбы.ДолжностьГосударственнойГражданскойСлужбы
			Или МенеджерЗаписи.ВидДолжностиГосударственнойСлужбы = Перечисления.ВидыДолжностейГосударственнойСлужбы.ДолжностьМуниципальнойСлужбы;
	
	Если ДолжностьГосслужбы Тогда
		ПроверяемыеЗначения.Добавить(МетаданныеРегистра.Ресурсы.ГруппаДолжностиГосударственнойСлужбы);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
			ПроверяемыеЗначения.Добавить(МетаданныеРегистра.Ресурсы.КатегорияДолжностиГосударственнойСлужбы);
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого ПроверяемоеЗначение Из ПроверяемыеЗначения Цикл
		ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, "СвойстваДолжностейГосударственнойСлужбы", ПроверяемоеЗначение, Синоним, Отказ);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти


#Область СправочникШтатноеРасписание

Процедура ОбработкаПолученияДанныхВыбораСправочникаШтатноеРасписание(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка  = Ложь;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	|		ПО ШтатноеРасписание.Должность = СвойстваДолжностейГосударственнойСлужбы.Должность
	|ГДЕ
	|	ЕСТЬNULL(СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы, ЛОЖЬ) = &ЯвляетсяДолжностьюГосударственнойСлужбы
	|	И ШтатноеРасписание.Владелец = &Владелец
	|	И ШтатноеРасписание.Подразделение = &Подразделение
	|	И ШтатноеРасписание.ДатаУтверждения <= &ДатаПримененияОтбора
	|	И &ДополнительноеУсловие";
	
	ВидыДоговоровГосударственнойСлужбы = ВидыДоговоровГосударственнойСлужбы();
	
	Запрос.УстановитьПараметр("ЯвляетсяДолжностьюГосударственнойСлужбы", ВидыДоговоровГосударственнойСлужбы.Найти(Параметры.ВидДоговора) <> Неопределено);
	
	Если Параметры.Отбор.Свойство("Владелец") 
		И ЗначениеЗаполнено(Параметры.Отбор.Владелец) Тогда
		Запрос.УстановитьПараметр("Владелец", Параметры.Отбор.Владелец);
		Параметры.Отбор.Удалить("Владелец");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ШтатноеРасписание.Владелец = &Владелец", "");	
	КонецЕсли; 
	
	Если Параметры.Отбор.Свойство("Подразделение") 
		И ЗначениеЗаполнено(Параметры.Отбор.Подразделение) Тогда
		Запрос.УстановитьПараметр("Подразделение", Параметры.Отбор.Подразделение);
		Параметры.Отбор.Удалить("Подразделение");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ШтатноеРасписание.Подразделение = &Подразделение", "");	
	КонецЕсли; 
	
	Если Параметры.Отбор.Свойство("ДатаПримененияОтбора") 
		И ЗначениеЗаполнено(Параметры.Отбор.ДатаПримененияОтбора) Тогда
		Запрос.УстановитьПараметр("ДатаПримененияОтбора", Параметры.Отбор.ДатаПримененияОтбора);
		Параметры.Отбор.Удалить("ДатаПримененияОтбора");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ШтатноеРасписание.ДатаУтверждения <= &ДатаПримененияОтбора", "");	
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.Должности, Параметры, Запрос, "ШтатноеРасписание")
	
КонецПроцедуры

Процедура ПриСозданииФормыСпискаСправочникаШтатноеРасписание(Форма, Параметры, ОписаниеСписка) Экспорт
	
	ДополнитьФормуСпискаОтборомДолжностейГосударственнойСлужбы(Форма, Параметры, ОписаниеСписка);	
	
КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжностиДляПозицииШтатногоРасписания(Форма) Экспорт	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СвойстваДолжностейГосударственнойСлужбы) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СвойстваДолжностейГосударственнойСлужбы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Должность = Форма.Объект.Должность;
	МенеджерЗаписи.Прочитать();
	
	ЗаполнитьЗначенияСвойств(Форма, МенеджерЗаписи, "ЯвляетсяДолжностьюГосударственнойСлужбы,ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы");
	
КонецПроцедуры

Процедура ДополнитьФормуЭлементаСправочникаШтатноеРасписание(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЯвляетсяДолжностьюГосударственнойСлужбы", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы", Новый ОписаниеТипов("Булево")));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
КонецПроцедуры

Функция ЗначениеПараметраВыбораНачисленийВПозицииШтатногоРасписанияПоОтношениюКДенежномуСодержанию(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Форма.ЯвляетсяДолжностьюГосударственнойСлужбы;
	
КонецФункции

Функция ЗначениеПараметраВыбораНачисленийВПозицииШтатногоРасписанияПоОтношениюКДенежномуДовольствию(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Форма.ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы;
	
КонецФункции

Функция ЭтоДолжностьГосударственнойСлужбы(Форма) Экспорт
	
	Если (Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьГосударственнуюСлужбу")
			ИЛИ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьМуниципальнуюСлужбу"))
		И Форма.ЯвляетсяДолжностьюГосударственнойСлужбы Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВидДоговораГосударственнойСлужбы(Форма, ВидДоговора) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьГосударственнуюСлужбу")
			ИЛИ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьМуниципальнуюСлужбу") Тогда
		
		ВидыДоговоровГосударственнойМуниципальнойСлужбы = ВидыДоговоровГосударственнойСлужбы();
		Возврат ВидыДоговоровГосударственнойМуниципальнойСлужбы.Найти(ВидДоговора) <> Неопределено;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти


#Область ПланыВидовРасчета

Функция УточнитьТекстЗапросаСпискаНачислений(ТекстЗапроса, ТекстЗапросаУсловий = "", ДенежноеСодержанияДляРасчетаСтраховых = Ложь) Экспорт
	
	ЕстьНовыйТекстЗапроса = Ложь;
	ДобавитьСоединение = Истина;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Или ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Если ДенежноеСодержанияДляРасчетаСтраховых Тогда
			ТекстВставкиЯвляетсяДенежнымСодержанием = 
			"ВЫБОР
			|   	КОГДА ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки) 
			|   		ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку) 
			|       	ТОГДА ИСТИНА
			|       ИНАЧЕ ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием, ЛОЖЬ)
			|   КОНЕЦ";
		Иначе
			ТекстВставкиЯвляетсяДенежнымСодержанием = "ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием, ЛОЖЬ)"
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ЯвляетсяДенежнымСодержанием", ТекстВставкиЯвляетсяДенежнымСодержанием+" КАК ЯвляетсяДенежнымСодержанием");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПустаяСсылка) КАК ОтношениеКДенежномуСодержанию", "ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию, ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПустаяСсылка)) КАК ОтношениеКДенежномуСодержанию");
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
		|	ПО ПланВидовРасчетаНачисления.Ссылка = СвойстваНачисленийГосударственныхСлужащих.Начисление";
		
		Если Не ПустаяСтрока(ТекстЗапросаУсловий) Тогда
			ТекстЗапросаУсловий = СтрЗаменить(ТекстЗапросаУсловий, "ПланВидовРасчетаНачисления.ЯвляетсяДенежнымСодержанием", ТекстВставкиЯвляетсяДенежнымСодержанием);
			ТекстЗапросаУсловий = СтрЗаменить(ТекстЗапросаУсловий, "ПланВидовРасчетаНачисления.ОтношениеКДенежномуСодержанию", "ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию, ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПустаяСсылка))");
		КонецЕсли;
		
		ДобавитьСоединение = Ложь;
		ЕстьНовыйТекстЗапроса = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ЯвляетсяДенежнымДовольствием", "ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием, ЛОЖЬ) КАК ЯвляетсяДенежнымДовольствием");
		Если ДобавитьСоединение Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
			|	ПО ПланВидовРасчетаНачисления.Ссылка = СвойстваНачисленийГосударственныхСлужащих.Начисление";
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстЗапросаУсловий) Тогда
			ТекстЗапросаУсловий = СтрЗаменить(ТекстЗапросаУсловий, "ПланВидовРасчетаНачисления.ЯвляетсяДенежнымДовольствием", "ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием, ЛОЖЬ)");
		КонецЕсли;
		
		ЕстьНовыйТекстЗапроса = Истина;
		
	КонецЕсли;
	
	Если ЕстьНовыйТекстЗапроса Тогда
		Возврат ТекстЗапроса;
	Иначе
		Возврат "";;
	КонецЕсли;
	
	
КонецФункции

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора) Экспорт
	
	УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержаниюЭлементуФормы(
		Форма, ОписаниеТаблицыНачислений.ИмяТаблицы + ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ЗначениеПараметраВыбора);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержаниюЭлементуФормы(Форма, Знач ИмяЭлемента, Знач ЗначениеПараметраВыбора = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметраВыбора = Неопределено Тогда
		ЗначениеПараметраВыбора = КадровыйУчетРасширенный.ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма);
	КонецЕсли;
	
	ЭлементФормыНачисление = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормыНачисление <> Неопределено Тогда
		
		ПараметрыВыбораНачислений = Новый Массив;
		Для каждого ПараметрВыбора Из ЭлементФормыНачисление.ПараметрыВыбора Цикл
			Если ПараметрВыбора.Имя = "Отбор.ЯвляетсяДенежнымСодержанием" Тогда
				Продолжить;
			КонецЕсли; 
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбора);
		КонецЦикла;
		
		ПараметрВыбораНачислений = Новый ПараметрВыбора("Отбор.ЯвляетсяДенежнымСодержанием", ЗначениеПараметраВыбора);
		ПараметрыВыбораНачислений.Добавить(ПараметрВыбораНачислений);
		ЭлементФормыНачисление.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНачислений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормыНачисление = Форма.Элементы.Найти(ОписаниеТаблицыНачислений.ИмяТаблицы + ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета);
		
	Если ЭлементФормыНачисление <> Неопределено Тогда
		
		ПараметрыВыбораНачислений = Новый Массив;
		Для каждого ПараметрВыбора Из ЭлементФормыНачисление.ПараметрыВыбора Цикл
			Если ПараметрВыбора.Имя = "Отбор.ЯвляетсяДенежнымДовольствием" Тогда
				Продолжить;
			КонецЕсли; 
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбора);
		КонецЦикла;
		
		ПараметрВыбораНачислений = Новый ПараметрВыбора("Отбор.ЯвляетсяДенежнымДовольствием", ЗначениеПараметраВыбора);
		ПараметрыВыбораНачислений.Добавить(ПараметрВыбораНачислений);
		ЭлементФормыНачисление.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНачислений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Ссылка, СвойстваНачисления) Экспорт

	МенеджерЗаписи = РегистрыСведений.СвойстваНачисленийГосударственныхСлужащих.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Начисление = Ссылка;
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СвойстваНачисления);
	МенеджерЗаписи.Начисление = Ссылка;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Функция ОписаниеОтношениеКСохраняемомуДенежномуДовольствию() Экспорт

	ОтношениеКДенежномуДовольствию = Новый Структура(
	"ОкладПоВоинскойДолжности,
	|ОкладПоВоинскомуЗванию,
	|ОкладПоСпециальномуЗванию,
	|ДолжностнойОклад,
	|НадбавкаЗаВыслугуЛет,
	|НадбавкаЗаКласснуюКвалификацию,
	|НадбавкаЗаСекретность,
	|ПрочиеВыплаты,
	|НадбавкаЗаОсобыеУсловияСлужбы,
	|ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей");
	
	ОтношениеКДенежномуДовольствию.ОкладПоВоинскойДолжности = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскойДолжности;
	ОтношениеКДенежномуДовольствию.ОкладПоВоинскомуЗванию = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскомуЗванию;
	ОтношениеКДенежномуДовольствию.ОкладПоСпециальномуЗванию = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоСпециальномуЗванию;
	ОтношениеКДенежномуДовольствию.ДолжностнойОклад = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ДолжностнойОклад;
	ОтношениеКДенежномуДовольствию.НадбавкаЗаВыслугуЛет = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаВыслугуЛет;
	ОтношениеКДенежномуДовольствию.НадбавкаЗаКласснуюКвалификацию = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаКласснуюКвалификацию;
	ОтношениеКДенежномуДовольствию.НадбавкаЗаСекретность = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаСекретность;
	ОтношениеКДенежномуДовольствию.ПрочиеВыплаты = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ПрочиеВыплаты;
	ОтношениеКДенежномуДовольствию.НадбавкаЗаОсобыеУсловияСлужбы = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаОсобыеУсловияСлужбы;
	ОтношениеКДенежномуДовольствию.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей;
	
	Возврат ОтношениеКДенежномуДовольствию;   

КонецФункции

Процедура ДополнитьФормуПланаВидовРасчетаНачисления(Форма, ИмяГруппыДляВставки = "ДенежноеСодержание") Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
		
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СвойстваНачисленийГосударственныхСлужащих", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.СвойстваНачисленийГосударственныхСлужащих"),,,Истина));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.СвойстваНачисленийГосударственныхСлужащих"),,,Истина));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Если Форма.Элементы.Найти("ЯвляетсяДенежнымСодержанием") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаФормы = Форма.Элементы.Найти("ГруппаОтношениеКДенежномуСодержанию");
	
	ПолеВвода = Форма.Элементы.Вставить("ЯвляетсяДенежнымСодержанием", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием";
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПолеВвода.Заголовок = "Входит в состав денежного содержания как:";
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ЯвляетсяДенежнымСодержаниемПриИзменении");
	
	ПолеВвода = Форма.Элементы.Вставить("ОтношениеКДенежномуСодержанию", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваНачисленийГосударственныхСлужащихПриИзменении");
	
	ГруппаФормы = Форма.Элементы.Найти("ГруппаРасчетСохраняемогоДенежногоСодержания");
	
	ПолеВвода = Форма.Элементы.Вставить("УчетПриРасчетеОтпуска", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеОтпуска";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.Заголовок = "На период ежегодного отпуска";
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваНачисленийГосударственныхСлужащихПриИзменении");
	ПолеВвода.РежимВыбораИзСписка = Истина;
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется);
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям);
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается);
	
	ПолеВвода = Форма.Элементы.Вставить("УчетПриРасчетеСохраняемогоДенежногоСодержания", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеСохраняемогоДенежногоСодержания";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.Заголовок = "На период командировки, стажировки и т.д.";
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваНачисленийГосударственныхСлужащихПриИзменении");
	ПолеВвода.РежимВыбораИзСписка = Истина;
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется);
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается);
	
	ПолеВвода = Форма.Элементы.Вставить("УчетВКомпенсацииПриУвольнении", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.Заголовок = "Для компенсации при увольнении";
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваНачисленийГосударственныхСлужащихПриИзменении");
	ПолеВвода.РежимВыбораИзСписка = Истина;
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется);
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям);
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется);
	ПолеВвода.СписокВыбора.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается);
	
	ГруппаФормы = Форма.Элементы.Найти("ГруппаОтношениеКДенежномуДовольствию");
	
	ПолеВвода = Форма.Элементы.Вставить("ЯвляетсяДенежнымДовольствием", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием";
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПолеВвода.Заголовок = "Входит в состав денежного довольствия как:";
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ЯвляетсяДенежнымДовольствиемПриИзменении");
	
	ПолеВвода = Форма.Элементы.Вставить("ОтношениеКДенежномуДовольствию", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваНачисленийОтношениеКДенежномуДовольствиюПриИзменении");

	ГруппаФормы = Форма.Элементы.Найти("ГруппаРасчетСохраняемогоДенежногоДовольствия");
	
	ПолеВвода = Форма.Элементы.Вставить("ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим", Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным = "СвойстваНачисленийГосударственныхСлужащих.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_СвойстваНачисленийВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащимПриИзменении");
	
КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеНачисления(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.СвойстваНачисленийГосударственныхСлужащих.СоздатьМенеджерЗаписи();
	Набор.Начисление = Форма.Объект.Ссылка;
	Набор.Прочитать();
	
	Форма.ЗначениеВРеквизитФормы(Набор,"СвойстваНачисленийГосударственныхСлужащих");
	Форма.ЗначениеВРеквизитФормы(Набор,"СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение");
	
	ГосударственнаяСлужбаКлиентСервер.УстановитьСвойстваЭлементовСвойстваНачисленийГосударственныхСлужащих(Форма);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Или ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Форма.ЗаголовокДенежноеСодержание = "Денежное содержание";
	Иначе
		Форма.ЗаголовокДенежноеСодержание = "Денежное довольствие";
	КонецЕсли;

КонецПроцедуры

// После включения настройки надо дозаполнить свойства некоторых начислений в части отношения к денежному содержанию.
Процедура ЗаполнитьДополнительныеСвойстваНачислений(ОбновлениеИБ = Ложь) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииНачислений", КатегорииНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление,
	|	ИСТИНА КАК ЯвляетсяДенежнымСодержанием,
	|	ВЫБОР
	|		КОГДА СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием ЕСТЬ NULL 
	|				ИЛИ СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
	|							ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.МатериальнаяПомощь)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПрочиеВыплаты)
	|				КОНЕЦ
	|		ИНАЧЕ СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию
	|	КОНЕЦ КАК ОтношениеКДенежномуСодержанию,
	|	ВЫБОР
	|		КОГДА СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием ЕСТЬ NULL 
	|				ИЛИ СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеОтпуска = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
	|							ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается)
	|				КОНЕЦ
	|		ИНАЧЕ СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеОтпуска
	|	КОНЕЦ КАК УчетПриРасчетеОтпуска,
	|	ВЫБОР
	|		КОГДА СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием ЕСТЬ NULL 
	|				ИЛИ СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеСохраняемогоДенежногоСодержания = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается)
	|		ИНАЧЕ СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеСохраняемогоДенежногоСодержания
	|	КОНЕЦ КАК УчетПриРасчетеСохраняемогоДенежногоСодержания,
	|	ВЫБОР
	|		КОГДА СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием ЕСТЬ NULL 
	|				ИЛИ СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
	|							ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается)
	|				КОНЕЦ
	|		ИНАЧЕ СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении
	|	КОНЕЦ КАК УчетВКомпенсацииПриУвольнении
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
	|		ПО (СвойстваНачисленийГосударственныхСлужащих.Начисление = Начисления.Ссылка)
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачислений)
	|	И (СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием ЕСТЬ NULL 
	|			ИЛИ СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием
	|				И (СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПустаяСсылка)
	|					ИЛИ СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеОтпуска = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
	|					ИЛИ СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеСохраняемогоДенежногоСодержания = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
	|					ИЛИ СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.СвойстваНачисленийГосударственныхСлужащих.СоздатьНаборЗаписей();
		Набор.Отбор.Начисление.Установить(Выборка.Начисление);
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		Если ОбновлениеИБ Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		Иначе	
			Набор.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаписьНачисленияВФорме(Форма, Отказ) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием Тогда
		
		МенеджерЗаписи = Форма.СвойстваНачисленийГосударственныхСлужащих;
		
		МетаданныеРегистра = Метаданные.РегистрыСведений["СвойстваНачисленийГосударственныхСлужащих"];
		Синоним = МетаданныеРегистра.Синоним;
		Если ЗначениеЗаполнено(МетаданныеРегистра.ПредставлениеЗаписи) Тогда
			Синоним = МетаданныеРегистра.ПредставлениеЗаписи;
		КонецЕсли;
		
		ПроверяемыеЗначения = Новый Массив;
		ПроверяемыеЗначения.Добавить(МетаданныеРегистра.Ресурсы.ОтношениеКДенежномуСодержанию);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
			ПроверяемыеЗначения.Добавить(МетаданныеРегистра.Ресурсы.УчетВКомпенсацииПриУвольнении);
			ПроверяемыеЗначения.Добавить(МетаданныеРегистра.Ресурсы.УчетПриРасчетеОтпуска);
			ПроверяемыеЗначения.Добавить(МетаданныеРегистра.Ресурсы.УчетПриРасчетеСохраняемогоДенежногоСодержания);
		КонецЕсли;
		
		Для Каждого ПроверяемоеЗначение Из ПроверяемыеЗначения Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, "СвойстваНачисленийГосударственныхСлужащих", ПроверяемоеЗначение, Синоним, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Форма.СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием Тогда
								
		ЭтоРКИлиСН = (Форма.Объект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
		ИЛИ Форма.Объект.КатегорияНачисленияИлиНеоплаченногоВремени  = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
		
		МенеджерЗаписи = Форма.СвойстваНачисленийГосударственныхСлужащих;
		
		МетаданныеРегистра = Метаданные.РегистрыСведений["СвойстваНачисленийГосударственныхСлужащих"];
		Синоним = МетаданныеРегистра.Синоним;
		Если ЗначениеЗаполнено(МетаданныеРегистра.ПредставлениеЗаписи) Тогда
			Синоним = МетаданныеРегистра.ПредставлениеЗаписи;
		КонецЕсли;
		
		ПроверяемыеЗначения = Новый Массив;
		Если НЕ ЭтоРКИлиСН Тогда
			ПроверяемыеЗначения.Добавить(МетаданныеРегистра.Ресурсы.ОтношениеКДенежномуДовольствию);
		КонецЕсли;
		
		Для Каждого ПроверяемоеЗначение Из ПроверяемыеЗначения Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, "СвойстваНачисленийГосударственныхСлужащих", ПроверяемоеЗначение, Синоним, Отказ);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, ИмяРегистра, ОписаниеПоля, Синоним, Отказ, ПутьКРеквизитуФормы = "")

	Если Не ЗначениеЗаполнено(МенеджерЗаписи[ОписаниеПоля.Имя]) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: не заполнено поле ""%2"".'"), Синоним, ?(ЗначениеЗаполнено(ОписаниеПоля.Синоним), ОписаниеПоля.Синоним, ОписаниеПоля.Имя));
		Если ПустаяСтрока(ПутьКРеквизитуФормы) Тогда
			ПутьКРеквизитуФормы = ИмяРегистра + "." + ОписаниеПоля.Имя;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	ПутьКРеквизитуФормы, , Отказ);
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаписатьДополнительныеСвойстваНачисления(Форма, Ссылка) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СвойстваНачисленийГосударственныхСлужащих.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Форма.СвойстваНачисленийГосударственныхСлужащих);
	МенеджерЗаписи.Начисление = Ссылка;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура СоздатьПоказательПроцентНадбавкиЗаСекретность(ПараметрыПланаВидовРасчета, СозданныеЭлементы, СоздаватьПоказателиГосслужбы) Экспорт

	ПоказателиРасчетаЗарплатыМенеджер = Справочники.ПоказателиРасчетаЗарплаты;
	
	Если СоздаватьПоказателиГосслужбы Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаСекретность";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за секретность'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаСекретность");
	КонецЕсли;	

КонецПроцедуры

Процедура СоздатьПоказательПроцентНадбавкиЗаОсобыеУсловияСлужбы(ПараметрыПланаВидовРасчета, СозданныеЭлементы, СоздаватьПоказателиГосслужбы) Экспорт

	ПоказателиРасчетаЗарплатыМенеджер = Справочники.ПоказателиРасчетаЗарплаты;
	
	Если СоздаватьПоказателиГосслужбы Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаОсобыеУсловияСлужбы";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за особые условия службы'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаОсобыеУсловияСлужбы");
	КонецЕсли;	

КонецПроцедуры

// Подписка на событие при записи начислений.  
// Заполняет дополнительные свойства начислений государственных служащих.
//
Процедура ПриЗаписиНачисленийГосударственныхСлужащих(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	// Для РК и СН необходимо произвести запись Дополнительных свойств начислений по отношению к ДД.
	Если (Источник.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
		ИЛИ Источник.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка) Тогда
		ДополнительныеСвойстваНачисления = Новый Структура("ЯвляетсяДенежнымДовольствием",Истина);
		ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Источник.Ссылка, ДополнительныеСвойстваНачисления)
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти


#Область АттестацияГосударственныхСлужащих

Функция ЭтоАттестацияГосударственныхСлужащих(ВидАттестации) Экспорт	
	Возврат ВидАттестации = ВидАттестацииГосударственныхСлужащих();	
КонецФункции 

Функция ВидАттестацииГосударственныхСлужащих()
	Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыАттестацийСотрудников.АттестацияГосударственныхСлужащих");	
КонецФункции

Процедура СоздатьВидАттестацииГосударственныхСлужащих() Экспорт
	
	Если Константы.ИспользоватьГосударственнуюСлужбу.Получить()
		Или Константы.ИспользоватьМуниципальнуюСлужбу.Получить() Тогда
		
		ВидАттестацииСсылка = ВидАттестацииГосударственныхСлужащих();
		
		Если ЗначениеЗаполнено(ВидАттестацииСсылка) Тогда
			ВидАттестации =  ВидАттестацииСсылка.ПолучитьОбъект();
		Иначе
			ВидАттестации = Справочники.ВидыАттестацийСотрудников.СоздатьЭлемент();
			ВидАттестации.ИмяПредопределенныхДанных = "АттестацияГосударственныхСлужащих";
		КонецЕсли;
		
		ВидАттестации.Наименование = "Аттестация государственных и муниципальных служащих";
		ВидАттестации.ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности;
		ВидАттестации.Периодичность = Перечисления.Периодичность.Год;
		ВидАттестации.КоличествоПериодов = 3;
		ВидАттестации.ИспользоватьОграничениеПоМаксимальномуВозрасту = Истина;
		ВидАттестации.ВозрастПослеКоторогоСотрудникНеПодлежитАттестации = 60;
		ВидАттестации.ИспользоватьОграничениеПоМинимальномуСрокуРаботы = Истина;
		ВидАттестации.КоличествоПериодовМинимальногоСрокаРаботы = 1;
		ВидАттестации.ПериодичностьМинимальногоСрокаРаботы = Перечисления.Периодичность.Год;
		ВидАттестации.Записать();
		
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаОписанияАттестаций(ТекстЗапроса) Экспорт
	
	Если ВидАттестацииГосударственныхСлужащих() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапросаОписанияАттестаций();	
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаДолжностиВидовАттестаций(ТекстЗапроса) Экспорт
	
	Если ВидАттестацииГосударственныхСлужащих() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапросаДолжностиВидовАттестаций();	
	
КонецПроцедуры

Функция ДоступныеРезультатыАттестацииГосударственныхСлужащих() Экспорт
	
	ДоступныеРезультаты = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
		ДоступныеРезультаты.Добавить(Перечисления.РезультатыАттестацииНаСоответствиеДолжностиГосслужащего.СоответствуетЗамещаемойДолжности);
		ДоступныеРезультаты.Добавить(Перечисления.РезультатыАттестацииНаСоответствиеДолжностиГосслужащего.СоответствуетЗамещаемойДолжностиПриУспешномПолученииДопОбразования);
		ДоступныеРезультаты.Добавить(Перечисления.РезультатыАттестацииНаСоответствиеДолжностиГосслужащего.СоответствуетЗамещаемойДолжностиРекомендуетсяВКадровыйРезерв);
		ДоступныеРезультаты.Добавить(Перечисления.РезультатыАттестацииНаСоответствиеДолжностиГосслужащего.НеСоответствуетЗамещаемойДолжности);
	Иначе 
		ДоступныеРезультаты.Добавить(Перечисления.РезультатыАттестацииНаСоответствиеДолжностиГосслужащего.СоответствуетЗамещаемойДолжности);
		ДоступныеРезультаты.Добавить(Перечисления.РезультатыАттестацииНаСоответствиеДолжностиГосслужащего.НеСоответствуетЗамещаемойДолжности);
	КонецЕсли;
	
	Возврат ДоступныеРезультаты;
	
КонецФункции

Функция ОбластиМакетаПриказОФормированииАттестационнойКомиссии() Экспорт
	
	ОбластиМакета = Новый Структура;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовГосударственныхСлужащих.ПФ_MXL_ПриказОФормированииАттестационнойКомиссииГосударственныхСлужащих");
	ОбластиМакета.Вставить("ОбластьШапка", 			Макет.ПолучитьОбласть("Шапка"));
	ОбластиМакета.Вставить("ОбластьЧленКомиссии", 	Макет.ПолучитьОбласть("ЧленКомиссии"));
	ОбластиМакета.Вставить("ОбластьПодвал", 		Макет.ПолучитьОбласть("Подвал"));
	
	Возврат ОбластиМакета;
	
КонецФункции

Функция ОбластиМакетаГрафикАттестацииСотрудников() Экспорт
	
	ОбластиМакета = Новый Структура;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовГосударственныхСлужащих.ПФ_MXL_ГрафикАттестацииГосударственныхСлужащих");
	
	ОбластиМакета.Вставить("ОбластьШапка",  Макет.ПолучитьОбласть("Шапка"));
	ОбластиМакета.Вставить("ОбластьСтрока", Макет.ПолучитьОбласть("Строка"));
	ОбластиМакета.Вставить("ОбластьПодвал", Макет.ПолучитьОбласть("Подвал"));
	
	Возврат ОбластиМакета;
	
КонецФункции

Функция ОбластиМакетаПротоколЗаседанияАттестационнойКомиссии() Экспорт
	
	ОбластиМакета = Новый Структура;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовГосударственныхСлужащих.ПФ_MXL_ПротоколЗаседанияАттестационнойКомиссии");
	
	ОбластиМакета.Вставить("ОбластьШапка", Макет.ПолучитьОбласть("Шапка"));
	ОбластиМакета.Вставить("ОбластьЧленКомиссии", Макет.ПолучитьОбласть("ЧленКомиссии"));
	ОбластиМакета.Вставить("ОбластьПовестка", Макет.ПолучитьОбласть("Повестка"));
	ОбластиМакета.Вставить("ОбластьАттестуемый", Макет.ПолучитьОбласть("Аттестуемый"));
	ОбластиМакета.Вставить("ОбластьРешениеКомиссииНачало", Макет.ПолучитьОбласть("РешениеКомиссииНачало"));
	ОбластиМакета.Вставить("ОбластьРешениеКомиссии", Макет.ПолучитьОбласть("РешениеКомиссии"));
	ОбластиМакета.Вставить("ОбластьПодвал", Макет.ПолучитьОбласть("Подвал"));
	ОбластиМакета.Вставить("ОбластьПодписьЧленаКомиссии", Макет.ПолучитьОбласть("ПодписьЧленаКомиссии"));
	
	Возврат ОбластиМакета;
	
КонецФункции

Функция АттестационныеЛистыСотрудников(ПриказыОбАттестации, ОбъектыПечати) Экспорт
	
	Возврат Обработки.ПечатьКадровыхПриказовГосударственныхСлужащих.АттестационныеЛистыГосударственныхСлужащих(ПриказыОбАттестации, ОбъектыПечати);

КонецФункции

Функция НеобходимоОтображатьДатуВнеочереднойАттестации(ВидАттестации) Экспорт
	Возврат Ложь;
КонецФункции

Функция ТекстОписанияВидаАттестацииГосударственныхСлужащих() Экспорт
	Возврат Нстр("ru = 'Аттестации подлежат все сотрудники, работающие на должностях, относящихся к должностям государственной службы.'");
КонецФункции 

Функция ПоложительныйРезультатАттестации() Экспорт 
	
	ПоложительныйРезультатАттестации = Перечисления.РезультатыАттестацииНаСоответствиеДолжностиГосслужащего.СоответствуетЗамещаемойДолжности;
	
	Возврат ПоложительныйРезультатАттестации;
	
КонецФункции

#КонецОбласти


#Область ОбслуживаниеНастроекПрограммы

Процедура ЗаписатьНастройкиГосслужбы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиПрограммы.ИспользоватьВоеннуюСлужбу <> Константы.ИспользоватьВоеннуюСлужбу.Получить() Тогда
		Если НастройкиПрограммы.ИспользоватьВоеннуюСлужбу И Константы.ИспользоватьМуниципальнуюСлужбу.Получить() Тогда
			Константы.ИспользоватьМуниципальнуюСлужбу.Установить(Ложь);
		КонецЕсли;
		Константы.ИспользоватьВоеннуюСлужбу.Установить(НастройкиПрограммы.ИспользоватьВоеннуюСлужбу);
	КонецЕсли;
	
	Если НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу <> Константы.ИспользоватьГосударственнуюСлужбу.Получить() Тогда
		Если НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу И Константы.ИспользоватьМуниципальнуюСлужбу.Получить() Тогда
			Константы.ИспользоватьМуниципальнуюСлужбу.Установить(Ложь);
		КонецЕсли;
		Константы.ИспользоватьГосударственнуюСлужбу.Установить(НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу);
	КонецЕсли;
	
	Если НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу <> Константы.ИспользоватьМуниципальнуюСлужбу.Получить() Тогда
		Если НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу И Константы.ИспользоватьГосударственнуюСлужбу.Получить() Тогда
			Константы.ИспользоватьГосударственнуюСлужбу.Установить(Ложь);
		КонецЕсли;
		Если НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу И Константы.ИспользоватьВоеннуюСлужбу.Получить() Тогда
			Константы.ИспользоватьВоеннуюСлужбу.Установить(Ложь);
		КонецЕсли;
		Константы.ИспользоватьМуниципальнуюСлужбу.Установить(НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу);
	КонецЕсли;
	
	Если НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу Тогда
		Константы.ИспользоватьУчетКлассныхЧинов.Установить(НастройкиПрограммы.ИспользоватьУчетКлассныхЧинов);
	ИначеЕсли Не НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу Тогда
		Константы.ИспользоватьУчетКлассныхЧинов.Установить(Ложь);
	КонецЕсли;
	Константы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим.Установить(НастройкиПрограммы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим);
	Константы.ИспользоватьРасчетСохраняемогоДенежногоСодержания.Установить(НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания);
	
	Настройки = РегистрыСведений.НастройкиГосударственнойСлужбы.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗаполнитьЗначенияСвойств(Настройки,НастройкиПрограммы);
	Настройки.Записать();
	
	УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций();
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьВоеннуюСлужбу.Установить(Параметры.ПараметрыПрограммы.ИспользоватьВоеннуюСлужбу);
	Константы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим.Установить(Параметры.ПараметрыПрограммы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим);
	Константы.ИспользоватьРасчетСохраняемогоДенежногоСодержания.Установить(Параметры.ПараметрыПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания);
	
	Настройки = РегистрыСведений.НастройкиГосударственнойСлужбы.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.ПараметрыПрограммы.НастройкиГосударственнойСлужбы);
	Настройки.Записать();
	
	УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций();
		
КонецПроцедуры

Процедура УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций() Экспорт
	
	ИспользоватьГосударственныеСлужбы = Константы.ИспользоватьВоеннуюСлужбу.Получить() Или Константы.ИспользоватьГосударственнуюСлужбу.Получить() Или Константы.ИспользоватьМуниципальнуюСлужбу.Получить();
	
	Если Не ИспользоватьГосударственныеСлужбы Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		СтрокаНабора = НаборЗаписей.Добавить();
	Иначе
		СтрокаНабора = НаборЗаписей[0];
	КонецЕсли;
	
	СтрокаНабора.ИспользоватьМатериальнуюПомощь = Истина;
	СтрокаНабора.ИспользоватьМатериальнуюПомощьПриОтпуске  = Истина;
	СтрокаНабора.ИспользоватьЕдиновременнуюВыплатуКОтпуску = Истина;
	СтрокаНабора.ИспользоватьИндексациюЗаработка = Истина;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры

Процедура НачальнаяНастройкаПрограммыРеквизитыФормыВПараметры(Форма, СтруктураПараметров) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСвойств = "ИспользоватьРасчетДенежногоДовольствияВоеннослужащих,
	|ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву,
	|РазрешеноСовместительствоВоеннослужащимПоКонтракту,
	|ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца,
	|ИспользоватьРасчетДенежногоСодержанияПрокуроров,
	|ИспользоватьГосударственныеМуниципальныеДолжности,
	|ИспользоватьРасчетДенежногоСодержанияСудей,
	|ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы,
	|ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы,
	|ИспользоватьСохраняемоеДенежноеСодержаниеСудей";
	
	Настройки = РегистрыСведений.НастройкиГосударственнойСлужбы.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗаполнитьЗначенияСвойств(Настройки,Форма,СтрокаСвойств);
	
	СтруктураПараметров.ПараметрыПрограммы.НастройкиГосударственнойСлужбы = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиГосударственнойСлужбы);		

КонецПроцедуры

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.УнифицированнаяФормаТ2, "Т2ГСМС");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьГосударственнуюСлужбу");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьМуниципальнуюСлужбу");
	Вариант.Включен = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеСтатьиУвольненияДляТ8(СтатьяУвольнения) Экспорт
	
	Если ТипЗнч(СтатьяУвольнения) = Тип("СправочникСсылка.ОснованияУвольненияСГосударственнойСлужбы") Тогда
		Возврат Строка(СтатьяУвольнения) + " " + НСтр("ru='Федерального закона от 27.04.2004 № 79-ФЗ ""О государственной гражданской службе Российской Федерации""'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ДополнитьФормуСпискаОтборомДолжностейГосударственнойСлужбы(Форма, Параметры, ОписаниеСписка)
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = Форма[ОписаниеСписка.ИмяРеквизитаСписка].ТекстЗапроса;	
	
	ПоследнийСимволВыбрать = СтрНайти(ТекстЗапроса, "ИЗ") - 1;
	
	СекцияВыбрать = Лев(ТекстЗапроса, ПоследнийСимволВыбрать);
	
	СекцияВыбрать = СокрЛП(СекцияВыбрать) + ",
	| ЕстьNULL(СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы, ЛОЖЬ) КАК ЯвляетсяДолжностьюГосударственнойСлужбы,
	| ЕстьNULL(СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы, ЛОЖЬ) КАК ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы
	| ";
	
	ОкончаниеЗапроса = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - ПоследнийСимволВыбрать);
	
	ТекстЗапроса = СекцияВыбрать + ОкончаниеЗапроса;	
	
	СтрокаЗамены = "КАК " + ОписаниеСписка.ИмяТаблицыДолжностей; 
	СтрокаПодстановки = СтрокаЗамены + " 
	| ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	| ПО " + ОписаниеСписка.ИмяТаблицыДолжностей + "." + ОписаниеСписка.ИмяПоляДолжности + " = СвойстваДолжностейГосударственнойСлужбы.Должность";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаЗамены, СтрокаПодстановки);
	
	Форма[ОписаниеСписка.ИмяРеквизитаСписка].ТекстЗапроса = ТекстЗапроса;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЯвляетсяДолжностьюГосударственнойСлужбы", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьОтборДолжностейГосударственнойСлужбы", Новый ОписаниеТипов("Булево")));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	ВидыДоговоровГосударственнойСлужбы = ВидыДоговоровГосударственнойСлужбы();
	
	ВидДоговора = Неопределено; 
	Форма.ИспользоватьОтборДолжностейГосударственнойСлужбы = Ложь;
	
	Если Параметры.Свойство("ВидДоговора", ВидДоговора) Тогда
		Форма.ИспользоватьОтборДолжностейГосударственнойСлужбы = Истина;
	КонецЕсли;
	
	Форма.ЯвляетсяДолжностьюГосударственнойСлужбы = ВидыДоговоровГосударственнойСлужбы.Найти(ВидДоговора) <> Неопределено;		
КонецПроцедуры

Процедура ДобавитьКомандуПечатиСлужебногоКонтракта(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ЧтениеКадровогоСостоянияРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовГосударственныхСлужащих";
		КомандаПечати.Идентификатор = "ПФ_MXL_СлужебныйКонтрактГосударственногоСлужащего";
		КомандаПечати.Представление = НСтр("ru = 'Служебный контракт государственного служащего'");
		КомандаПечати.Порядок = 100;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли; 
КонецПроцедуры

Функция ВидыДоговоровГосударственнойСлужбы() Экспорт
	ВидыДоговоровГосударственнойСлужбы = Новый Массив;
	ВидыДоговоровГосударственнойСлужбы.Добавить(Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего);
	ВидыДоговоровГосударственнойСлужбы.Добавить(Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего);
	Возврат ВидыДоговоровГосударственнойСлужбы; 
КонецФункции

Функция ТекстЗапросаОписанияАттестаций()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыАттестацийСотрудников.Ссылка КАК ВидАттестации,
	|	ВидыАттестацийСотрудников.ТипАттестации,
	|	ВидыАттестацийСотрудников.ЭтоВнешняяАттестация,
	|	ВидыАттестацийСотрудников.Периодичность,
	|	ВидыАттестацийСотрудников.КоличествоПериодов,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуВозрасту,
	|	ВидыАттестацийСотрудников.ВозрастДоКоторогоСотрудникНеПодлежитАттестации,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМаксимальномуВозрасту,
	|	ВидыАттестацийСотрудников.ВозрастПослеКоторогоСотрудникНеПодлежитАттестации,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуСрокуРаботы,
	|	ВидыАттестацийСотрудников.ПериодичностьМинимальногоСрокаРаботы,
	|	ВидыАттестацийСотрудников.КоличествоПериодовМинимальногоСрокаРаботы,
	|	ВидыАттестацийСотрудников.АттестовыватьВсеДолжностиСпециальности,
	|	ИСТИНА КАК ОтборПоДолжности
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников КАК ВидыАттестацийСотрудников
	|ГДЕ
	|	ВидыАттестацийСотрудников.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыАттестацийСотрудников.АттестацияГосударственныхСлужащих)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДолжностиВидовАттестаций()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыАттестацийСотрудников.Ссылка КАК ВидАттестации,
	|	Должности.Ссылка КАК Должность
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников КАК ВидыАттестацийСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	|			ПО Должности.Ссылка = СвойстваДолжностейГосударственнойСлужбы.Должность
	|				И (СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы)
	|		ПО (ВидыАттестацийСотрудников.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыАттестацийСотрудников.АттестацияГосударственныхСлужащих))";
	
	Возврат ТекстЗапроса;

КонецФункции 

// Предназначена для получения настроек 
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиГосударственнойСлужбы() Экспорт
	
	НастройкиГосударственнойСлужбы = РегистрыСведений.НастройкиГосударственнойСлужбы.СоздатьМенеджерЗаписи();
	НастройкиГосударственнойСлужбы.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиГосударственнойСлужбы, Метаданные.РегистрыСведений.НастройкиГосударственнойСлужбы);
	
	Если НастройкиГосударственнойСлужбы.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	СтруктураНастроек.НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих = Истина;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура ДобавитьОтборыПоВидуДоговора(Отборы, ВключатьВедомственныхВоенных = Ложь) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		
		Если Отборы = Неопределено Тогда
			Отборы = Новый Массив;
		КонецЕсли; 
		
		Если ВключатьВедомственныхВоенных И  НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащих") Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ВидДоговора", "В", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровГражданскойИВедомственнойСлужбы());
		Иначе
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ВидДоговора", "В", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровКромеВоеннойСлужбы());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеестрКадровыхПриказов() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.РеестрКадровыхПриказов.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
	// Кадровый перевод военнослужащего
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыйПереводВоеннослужащего.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.КадровыйПереводВоеннослужащего КАК КадровыйПереводВоеннослужащего
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО КадровыйПереводВоеннослужащего.Ссылка = РеестрКадровыхПриказов.Регистратор
	|ГДЕ
	|	КадровыйПереводВоеннослужащего.Проведен
	|	И РеестрКадровыхПриказов.Номер ЕСТЬ NULL 
	|	И КадровыйПереводВоеннослужащего.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхОперацийВоеннослужащих.ПереводСтажераНаКонтракт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыйПереводВоеннослужащего.Ссылка
	|ИЗ
	|	Документ.КадровыйПереводВоеннослужащего КАК КадровыйПереводВоеннослужащего
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО КадровыйПереводВоеннослужащего.Ссылка = РеестрКадровыхПриказов.Регистратор
	|			И (РеестрКадровыхПриказов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	КадровыйПереводВоеннослужащего.Проведен
	|	И КадровыйПереводВоеннослужащего.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхОперацийВоеннослужащих.ПереводСтажераНаКонтракт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыйПереводВоеннослужащего.Ссылка КАК Регистратор,
	|	КадровыйПереводВоеннослужащего.Сотрудник,
	|	КадровыйПереводВоеннослужащего.Ссылка КАК ДокументОснование,
	|	КадровыйПереводВоеннослужащего.Номер КАК НомерПриказа,
	|	КадровыйПереводВоеннослужащего.Дата КАК ДатаПриказа,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
	|	КадровыйПереводВоеннослужащего.ДатаПеревода КАК Дата
	|ИЗ
	|	Документ.КадровыйПереводВоеннослужащего КАК КадровыйПереводВоеннослужащего
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО КадровыйПереводВоеннослужащего.Ссылка = ДокументыКОбработке.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Номер = 1;
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
        	Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.Дата);
           				
		НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
	    				
		НоваяЗапись.Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры     

Процедура ДобавитьПоказателиВоеннойСлужбы(ТаблицаПоказателей) Экспорт
			
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиГосударственнойСлужбы", "ИспользоватьРасчетДенежногоДовольствияВоеннослужащих", 
			"Выполняется расчет денежного довольствия", "Особенности предприятия", "Военная служба", "Ложь", 2, 1, 2);	
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиГосударственнойСлужбы", "ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву", 
			"Рассчитывается денежное довольствие военнослужащих по призыву", "Особенности предприятия", "Военная служба", "Ложь", 2, 1, 3);	
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиГосударственнойСлужбы", "РазрешеноСовместительствоВоеннослужащимПоКонтракту", 
			"Разрешено замещение должностей на условиях совместительства", "Особенности предприятия", "Военная служба", "Ложь", 2, 1, 4);	
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиГосударственнойСлужбы", "ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца", 
			"Премия за добросовестное выполнение служебных обязанностей выплачивается из расчета оклада денежного содержания, установленного сотруднику на 1 число месяца", "Особенности предприятия", "Военная служба", "Ложь", 2, 1, 5);	
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьПоказательИспользоватьИндексациюЗаработка(ТаблицаПоказателей) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьГосударственнуюМуниципальнуюСлужбу") Тогда
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьИндексациюЗаработка", 
			"Выполняется индексация заработка сотрудников", "Расчет зарплаты", "", "Ложь", 4, 1, 8);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПоказателиМатериальнаяПомощь(ТаблицаПоказателей) Экспорт

	Если ПолучитьФункциональнуюОпцию("НеИспользоватьГосударственнуюМуниципальнуюСлужбу") Тогда
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьМатериальнуюПомощь", 
			"Выплачивается материальная помощь сотрудникам", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 9);
		Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьМатериальнуюПомощьПриОтпуске", 
			"Выплата материальной помощи к отпуску", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 10);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели = Неопределено, РегистрацияНачисленийДоступна = Истина, КонтролируемыеПоля = Неопределено, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь, ДокументСсылка = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащих") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву") Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели, РегистрацияНачисленийДоступна, КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, ДокументСсылка);

КонецПроцедуры

Процедура ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ОтображатьТекущиеЗначения = Ложь, ФормаДополнена = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащих") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ОтображатьТекущиеЗначения, ФормаДополнена);
	
КонецПроцедуры

Процедура ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, ОписаниеТаблицы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащих") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву") Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияТаблиц.Добавить(ОписаниеТаблицы);

КонецПроцедуры

Процедура ЗаполнитьПозицииВКадровыхПриказах(СообщатьОбОшибках = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.ДатаЗачисления >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|	И НЕ ТаблицаДокумента.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка)))
		|ИЗ
		|	Документ.КадровыйПереводВоеннослужащего КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.ДатаПеревода >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДолжностьПоШтатномуРасписанию = Выборка.ДолжностьПоШтатномуРасписанию;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				
				Если СообщатьОбОшибках Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='При заполнении позиций в кадровых приказах не удалось записать %1, этот документ необходимо обработать в ручном режиме.'"),
						ДокументОбъект.Ссылка);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						ДокументОбъект.Ссылка);
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы) Экспорт 
	
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПрисвоениеВоинскогоСпециальногоЗвания"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПрисвоениеВоинскогоСпециальногоЗванияСписком"));	
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПрисвоениеКлассногоЧинаРанга"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПрисвоениеКлассногоЧинаРангаСписком"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего"));
	
КонецПроцедуры

Процедура УстановитьНастройкиГосударственнойСлужбы() Экспорт 
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбы = Константы.ИспользоватьГосударственнуюСлужбу.Получить() Или Константы.ИспользоватьМуниципальнуюСлужбу.Получить();
	
	Если Не ИспользоватьГосударственнуюМуниципальнуюСлужбы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
		СтруктураНастроек.Вставить("ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы", Истина);
	КонецЕсли;
	
	
	МассивВидовДолжностей = Новый Массив();
	МассивВидовДолжностей.Добавить(Перечисления.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность);
	МассивВидовДолжностей.Добавить(Перечисления.ВидыДолжностейГосударственнойСлужбы.МуниципальнаяДолжность);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДолжностей",МассивВидовДолжностей);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтатноеРасписание.Должность
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	|		ПО ШтатноеРасписание.Должность = СвойстваДолжностейГосударственнойСлужбы.Должность
	|ГДЕ
	|	ЕСТЬNULL(СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы, ЛОЖЬ) = ИСТИНА
	|	И ЕСТЬNULL(СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы, ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ПустаяСсылка)) В (&ВидыДолжностей)
	|	И НЕ ШтатноеРасписание.Закрыта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		СтруктураНастроек.Вставить("ИспользоватьГосударственныеМуниципальныеДолжности", Истина);
	КонецЕсли;
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтатноеРасписание.Должность
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	|		ПО ШтатноеРасписание.Должность = СвойстваДолжностейГосударственнойСлужбы.Должность
	|ГДЕ
	|	ЕСТЬNULL(СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы, ЛОЖЬ) = ИСТИНА
	|	И ЕСТЬNULL(СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы, ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность)
	|	И ЕСТЬNULL(СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора, ЛОЖЬ) = ИСТИНА
	|	И НЕ ШтатноеРасписание.Закрыта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		СтруктураНастроек.Вставить("ИспользоватьРасчетДенежногоСодержанияСудей", Истина);
	КонецЕсли;
	
	Если СтруктураНастроек.Количество() > 0 Тогда
		НастройкиГосударственнойСлужбы = РегистрыСведений.НастройкиГосударственнойСлужбы.СоздатьМенеджерЗаписи();
		НастройкиГосударственнойСлужбы.Прочитать();
		Если НастройкиГосударственнойСлужбы.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(НастройкиГосударственнойСлужбы,СтруктураНастроек);
			НастройкиГосударственнойСлужбы.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеСвойстваДолжностейГосслужащих(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоСодержанияПрокуроров")Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СвойстваДолжностейГосударственнойСлужбы.Должность,
	|	СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы,
	|	СвойстваДолжностейГосударственнойСлужбы.КатегорияДолжностиГосударственнойСлужбы,
	|	СвойстваДолжностейГосударственнойСлужбы.ГруппаДолжностиГосударственнойСлужбы,
	|	СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы,
	|	СвойстваДолжностейГосударственнойСлужбы.ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность,
	|	СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы,
	|	СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора КАК ДолжностьПрокурораСледователяСудьи,
	|	ВЫБОР
	|		КОГДА СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы = ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность)
	|			ТОГДА СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДолжностьСудьи,
	|	ВЫБОР
	|		КОГДА СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы = ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора
	|	КОНЕЦ КАК ДолжностьПрокурора
	|ИЗ
	|	РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО (ШтатноеРасписание.Должность = СвойстваДолжностейГосударственнойСлужбы.Должность)
	|ГДЕ
	|	СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы
	|	И СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора
	|	И НЕ ЕСТЬNULL(ШтатноеРасписание.Закрыта, ИСТИНА)";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СвойстваДолжностейГосударственнойСлужбы", "Должность", Выборка.Должность) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.СвойстваДолжностейГосударственнойСлужбы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Должность.Установить(Выборка.Должность);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаполнитьСоставСохраняемогоДенежногоСодержания(ПараметрыОбновления = НеОпределено) Экспорт
	
	ОбрабатываемыеДокументы = Новый Массив();
	ОбрабатываемыеДокументы.Добавить(Метаданные.Документы.БольничныйЛист);
	ОбрабатываемыеДокументы.Добавить(Метаданные.Документы.Командировка);
	ОбрабатываемыеДокументы.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку);
	ОбрабатываемыеДокументы.Добавить(Метаданные.Документы.Отпуск);
	ОбрабатываемыеДокументы.Добавить(Метаданные.Документы.Увольнение);
	
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	
	Для Каждого МетаданныеДокумента Из ОбрабатываемыеДокументы Цикл
		
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстОбъединения = 
		"ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка КАК Регистратор,
		|	ТаблицаНачислений.Ссылка.ПериодРегистрации КАК Период,
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаНачислений.Ссылка.Организация КАК Организация,
		|	ТаблицаНачислений.Начисление КАК Начисление,
		|	ТаблицаНачислений.Результат КАК Сумма
		|ИЗ
		|	#ТаблицаНачислений.ДенежноеСодержание КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Ссылка.Проведен		
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка КАК Регистратор,
		|	ТаблицаНачислений.Ссылка.ПериодРегистрации КАК Период,
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаНачислений.Ссылка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
		|	ТаблицаНачислений.Сумма КАК Сумма
		|ИЗ
		|	#ТаблицаНачислений.ДенежноеСодержаниеФактическиеНачисления КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Ссылка.Проведен		
		|";
				
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя());
						
		// Добавляем объединение в общий запрос.
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединения;
		ПерваяТаблица = Ложь;
		
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеРегистраторов.Регистратор,
		|	ДанныеРегистраторов.Период,
		|	ДанныеРегистраторов.Сотрудник,
		|	ДанныеРегистраторов.ФизическоеЛицо,
		|	ДанныеРегистраторов.Организация,
		|	ДанныеРегистраторов.Начисление,
		|	ДанныеРегистраторов.Сумма
		|ИЗ (" +ТекстЗапроса+"
		|) КАК ДанныеРегистраторов
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ,
		|	Регистратор";
		
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.СоставСохраняемогоДенежногоСодержания.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыНакопления.СоставСохраняемогоДенежногоСодержания.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
	КонецЕсли;	
	
	
КонецПроцедуры

Функция ПолучитьНастройкуВариантаРасчетаСреднегоИзРегистра(ВидДокумента, Должность)
		
	Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантРасчетаСреднего") И 
		ЗначениеЗаполнено(Должность) И
		ЗначениеЗаполнено(ВидДокумента) Тогда		
		
		НастройкаДляДокументаДолжности 				= РегистрыСведений.ВариантыРасчетаСреднегоЗаработкаДокументов.СоздатьМенеджерЗаписи();		
		НастройкаДляДокументаДолжности.ВидДокумента = ВидДокумента;
		НастройкаДляДокументаДолжности.Должность 	= Должность;
		НастройкаДляДокументаДолжности.Прочитать();
		Если НастройкаДляДокументаДолжности.Выбран() Тогда
			Возврат НастройкаДляДокументаДолжности.РасчетДенежногоСодержания;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

Процедура УстановитьВариантРасчетаПоСреднемуЗаработку(Объект, ИмяРеквизитаДатаСобытия = "ДатаНачалаСобытия") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") ИЛИ
		НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
		
	ДатаСобытия = Объект[ИмяРеквизитаДатаСобытия];		

	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ВидДоговора,ВидДолжностиГосударственнойСлужбы,ЯвляетсяСудьей,Должность", ДатаСобытия);
	ВидДоговора 							= КадровыеДанныеСотрудника[0].ВидДоговора;
	ВидДолжностиГосударственнойСлужбы 		= КадровыеДанныеСотрудника[0].ВидДолжностиГосударственнойСлужбы;
	ЯвляетсяСудьей 							= КадровыеДанныеСотрудника[0].ЯвляетсяСудьей;
	Должность 								= КадровыеДанныеСотрудника[0].Должность;
	ВидДокумента							= РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(Объект.Ссылка);	
	РасчетДС = Ложь;	
	
	Если ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего Или ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего Тогда
		
		СохраненныйВариант  = ПолучитьНастройкуВариантаРасчетаСреднегоИзРегистра(ВидДокумента, Должность);
		
		Если СохраненныйВариант = Неопределено Тогда
		
			НастройкиГосударственнойСлужбы = НастройкиГосударственнойСлужбы();
			
			Если ЯвляетсяСудьей Тогда
				
				РасчетДС = НастройкиГосударственнойСлужбы.ИспользоватьСохраняемоеДенежноеСодержаниеСудей;
				
			ИначеЕсли НастройкиГосударственнойСлужбы.ИспользоватьГосударственныеМуниципальныеДолжности И
				(ВидДолжностиГосударственнойСлужбы = Перечисления.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность ИЛИ
				ВидДолжностиГосударственнойСлужбы = Перечисления.ВидыДолжностейГосударственнойСлужбы.МуниципальнаяДолжность)Тогда
				
				РасчетДС = НастройкиГосударственнойСлужбы.ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы;
				
			Иначе
				РасчетДС = НастройкиГосударственнойСлужбы.ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы;
			КонецЕсли;
		Иначе
			РасчетДС = СохраненныйВариант;	
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.РасчетДенежногоСодержания = РасчетДС;
		
КонецПроцедуры

Процедура СохранитьВариантРасчетаСреднегоЗаработкаДокумента(Объект, ДатаСобытия) Экспорт
	Если (Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания"))
		ИЛИ (не ПолучитьФункциональнуюОпцию("ВыбиратьВариантРасчетаСреднего")) Тогда
		Возврат;	
	КонецЕсли;
	
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ВидДоговора,Должность", ДатаСобытия);
	ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
	Должность 	= КадровыеДанныеСотрудника[0].Должность;
		
	ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(Объект);	
	
	Если (ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего 
		Или ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего)
		И ЗначениеЗаполнено(Должность) 
		И ЗначениеЗаполнено(ВидДокумента) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ВариантыРасчетаСреднегоЗаработкаДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидДокумента = ВидДокумента;
		МенеджерЗаписи.Должность 	= Должность;
		МенеджерЗаписи.РасчетДенежногоСодержания = Объект.РасчетДенежногоСодержания; 	
		МенеджерЗаписи.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьФормулыНачисленийСохраняемогоДенежногоСодержания(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания")Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НачисленияУдержания.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииДенежногоСодержания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НачисленияУдержания.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.КатегорияУдержания В(&КатегорииДенежногоСодержания)";
		
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	КатегорииДенежногоСодержания = Новый Массив();
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска);
	
	Запрос.УстановитьПараметр("КатегорииДенежногоСодержания",КатегорииДенежногоСодержания);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета." + Выборка.Ссылка.Метаданные().Имя, "Ссылка", Выборка.ссылка) Тогда
				Продолжить;
			КонецЕсли;		
		
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НачислениеОбъект.ФормулаРасчета 				= СтрЗаменить(НачислениеОбъект.ФормулаРасчета,"СохраняемоеДенежноеСодержание / СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих","ОКР(СохраняемоеДенежноеСодержание / СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих, 2)"); 
			НачислениеОбъект.ФормулаРасчетаДляВыполнения 	= СтрЗаменить(НачислениеОбъект.ФормулаРасчетаДляВыполнения,"ИсходныеДанные.СохраняемоеДенежноеСодержание / ИсходныеДанные.СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих","ОКР(ИсходныеДанные.СохраняемоеДенежноеСодержание / ИсходныеДанные.СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих, 2)"); 
			НачислениеОбъект.ОбменДанными.Загрузка = Истина;
			НачислениеОбъект.Записать();
				
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьПризнакиИзмененияТерриторийВКадровыхПереводах(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТерриторииСотрудников.Регистратор КАК Регистратор,
		|	ТерриторииСотрудников.Сотрудник КАК Сотрудник,
		|	ЛОЖЬ КАК СписочныйДокумент
		|ПОМЕСТИТЬ ВТРегистраторыТерриторий
		|ИЗ
		|	РегистрСведений.ТерриторииСотрудников КАК ТерриторииСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводВоеннослужащего КАК КадровыйПереводВоеннослужащего
		|		ПО ТерриторииСотрудников.Регистратор = КадровыйПереводВоеннослужащего.Ссылка
		|			И (НЕ КадровыйПереводВоеннослужащего.ПеревестиНаДругуюТерриторию)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТерриторииСотрудников.Регистратор,
		|	ТерриторииСотрудников.Сотрудник,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ТерриторииСотрудников КАК ТерриторииСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводВоеннослужащегоСписком.Сотрудники КАК КадровыйПереводВоеннослужащегоСпискомСотрудники
		|		ПО ТерриторииСотрудников.Регистратор = КадровыйПереводВоеннослужащегоСпискомСотрудники.Ссылка
		|			И (НЕ КадровыйПереводВоеннослужащегоСпискомСотрудники.ПеревестиНаДругуюТерриторию)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистраторыТерриторий.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторыТерриторий КАК РегистраторыТерриторий";
	
	ОбработкаЗавершена = Истина;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбработкаЗавершена = Ложь;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РегистраторыТерриторий.Регистратор КАК Регистратор,
			|	РегистраторыТерриторий.Сотрудник КАК Сотрудник,
			|	РегистраторыТерриторий.СписочныйДокумент КАК СписочныйДокумент
			|ИЗ
			|	ВТРегистраторыТерриторий КАК РегистраторыТерриторий
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Выборка.Регистратор.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			КадровыйПеревод = Выборка.Регистратор.ПолучитьОбъект();
			
			Если Выборка.СписочныйДокумент Тогда
				
				Пока Выборка.Следующий() Цикл
					
					СтрокаСотрудника = КадровыйПеревод.Сотрудники.Найти(Выборка.Сотрудник, "Сотрудник");
					Если СтрокаСотрудника <> Неопределено Тогда
						СтрокаСотрудника.ПеревестиНаДругуюТерриторию = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				КадровыйПеревод.ПеревестиНаДругуюТерриторию = Истина;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КадровыйПеревод);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура СброситьРасчетСохраняемогоДенежногоСодержания() Экспорт
	
	Настройки = РегистрыСведений.НастройкиГосударственнойСлужбы.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Настройки.ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы 		= Ложь;
	Настройки.ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы 	= Ложь;
	Настройки.ИспользоватьСохраняемоеДенежноеСодержаниеСудей				 			= Ложь;
	Настройки.Записать();
					
КонецПроцедуры

Процедура ЗаполнитьПодключаемыеХарактеристики(ПараметрыОбновления = Неопределено) Экспорт
	
	ИсточникиХарактеристик = Новый Массив;
	ИсточникиХарактеристик.Добавить("СвойстваДолжностейГосударственнойСлужбы");
	ИсточникиХарактеристик.Добавить("СвойстваНачисленийГосударственныхСлужащих");
	ИсточникиХарактеристик.Добавить("СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов");
	ПодключаемыеХарактеристикиЗарплатаКадры.ОбновитьНаборыПодключаемыхХарактеристик(Ложь, ИсточникиХарактеристик, ПараметрыОбновления);
	
КонецПроцедуры

// При включенной ФО ИспользоватьВоеннуюСлужбу - начисления РК и СН всегда входят в денежное довольствие. 
Процедура ЗаполнитьДополнительныеСвойстваНачисленийРКиСН(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииНачислений", КатегорииНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Начисления.Ссылка КАК Начисление,
	|	ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымСодержанием, ЛОЖЬ) КАК ЯвляетсяДенежнымСодержанием,
	|	ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуСодержанию, ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПустаяСсылка)) КАК ОтношениеКДенежномуСодержанию,
	|	ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеОтпуска, ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)) КАК УчетПриРасчетеОтпуска,
	|	ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеСохраняемогоДенежногоСодержания, ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)) КАК УчетПриРасчетеСохраняемогоДенежногоСодержания,
	|	ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении, ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)) КАК УчетВКомпенсацииПриУвольнении,
	|	ИСТИНА КАК ЯвляетсяДенежнымДовольствием,
	|	ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию, ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ПустаяСсылка)) КАК ОтношениеКДенежномуДовольствию
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
	|		ПО (СвойстваНачисленийГосударственныхСлужащих.Начисление = Начисления.Ссылка)
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачислений)
	|	И ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием, ЛОЖЬ) = ЛОЖЬ";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);	
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СвойстваНачисленийГосударственныхСлужащих", "Начисление", Выборка.Начисление) Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.СвойстваНачисленийГосударственныхСлужащих.СоздатьНаборЗаписей();
		Набор.Отбор.Начисление.Установить(Выборка.Начисление);
		Набор.ОбменДанными.Загрузка = Истина;
		
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		Набор.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваНачисленийГосслужбы() Экспорт	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланВидовРасчетаНачисления.Ссылка КАК Начисление,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымСодержанием,
	|   ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуСодержанию.ПустаяСсылка) КАК ОтношениеКДенежномуСодержанию	
	|ИЗ ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления";
	
	НовыйТекстЗапроса = УточнитьТекстЗапросаСпискаНачислений(Запрос.Текст);
	Если Не ПустаяСтрока(НовыйТекстЗапроса) Тогда
		Запрос.Текст = НовыйТекстЗапроса;
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СоответствиеНачислений = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		СтруктураСвойствНачисления = Новый Структура("ЯвляетсяДенежнымСодержанием,ОтношениеКДенежномуСодержанию");
		ЗаполнитьЗначенияСвойств(СтруктураСвойствНачисления,Выборка);
		СоответствиеНачислений.Вставить(Выборка.Начисление,	СтруктураСвойствНачисления);
	КонецЦикла;
	
	Возврат СоответствиеНачислений;
	
КонецФункции

Функция СоответствиеИдентификаторовСтрокОтчетностиРасходовИЧисленностиВидамДолжностей() Экспорт
	
	СоответствиеСтрокОтчетности = Новый Соответствие;
		
	СоответствиеСтрокОтчетности.Вставить(Перечисления.ВидыДолжностейГосударственнойСлужбы.ДолжностьГосударственнойГражданскойСлужбы,"ДолжностьГосударственнойГражданскойСлужбы");
	СоответствиеСтрокОтчетности.Вставить(Перечисления.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность,					"ГосударственнаяДолжность");
	СоответствиеСтрокОтчетности.Вставить(Перечисления.ВидыДолжностейГосударственнойСлужбы.НеЯвляетсяДолжностьюГосударственнойСлужбы,"НеЯвляетсяДолжностьюГосударственнойСлужбы");
	СоответствиеСтрокОтчетности.Вставить(Перечисления.ВидыДолжностейГосударственнойСлужбы.ДолжностьМуниципальнойСлужбы,				"ДолжностьМуниципальнойСлужбы");
	СоответствиеСтрокОтчетности.Вставить(Перечисления.ВидыДолжностейГосударственнойСлужбы.МуниципальнаяДолжность,					"МуниципальнаяДолжность");
	СоответствиеСтрокОтчетности.Вставить(Перечисления.ВидыДолжностейГосударственнойСлужбы.НеЯвляетсяДолжностьюМуниципальнойСлужбы,	"НеЯвляетсяДолжностьюМуниципальнойСлужбы");
	СоответствиеСтрокОтчетности.Вставить(Перечисления.ВидыДолжностейГосударственнойСлужбы.ВоинскаяДолжность,						"ДолжностьИногоВидаФедеральнойГосударственнойСлужбы");
	СоответствиеСтрокОтчетности.Вставить(Перечисления.ВидыДолжностейГосударственнойСлужбы.ДолжностьПравоохранительнойСлужбы,		"ДолжностьИногоВидаФедеральнойГосударственнойСлужбы");
	
	Возврат СоответствиеСтрокОтчетности;	
	
КонецФункции

Процедура ЗаполнитьРегистрСтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов(ПараметрыОбновления = НеОпределено) Экспорт
	
	СоответствиеСтрокОтчетности = СоответствиеИдентификаторовСтрокОтчетностиРасходовИЧисленностиВидамДолжностей();
	
	СоответствиеСтрокВидамДолжностей = Новый ТаблицаЗначений;
	СоответствиеСтрокВидамДолжностей.Колонки.Добавить("ИДСтроки", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	СоответствиеСтрокВидамДолжностей.Колонки.Добавить("ВидДолжности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДолжностейГосударственнойСлужбы"));
	
	Для Каждого ЭлементСоответствия Из СоответствиеСтрокОтчетности Цикл
		СтрокаСоответствия = СоответствиеСтрокВидамДолжностей.Добавить();
		СтрокаСоответствия.ВидДолжности = ЭлементСоответствия.Ключ;
		СтрокаСоответствия.ИДСтроки 	= ЭлементСоответствия.Значение;
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СоответствиеСтрокВидамДолжностей",СоответствиеСтрокВидамДолжностей);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СоответствиеСтрокВидамДолжностей.ВидДолжности,
	|	СоответствиеСтрокВидамДолжностей.ИДСтроки
	|ПОМЕСТИТЬ ВТСоответствиеСтрокВидамДолжностей
	|ИЗ
	|	&СоответствиеСтрокВидамДолжностей КАК СоответствиеСтрокВидамДолжностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваДолжностейГосударственнойСлужбы.Должность КАК Должность,
	|	СправочникСтрокОтчетности.Ссылка КАК СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов
	|ИЗ
	|	РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеСтрокВидамДолжностей КАК СоответствиеСтрокВидамДолжностей
	|		ПО (СоответствиеСтрокВидамДолжностей.ВидДолжности = СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов КАК СправочникСтрокОтчетности
	|		ПО (СправочникСтрокОтчетности.КодКатегорииПерсонала = СоответствиеСтрокВидамДолжностей.ИДСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов КАК СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов
	|		ПО СвойстваДолжностейГосударственнойСлужбы.Должность = СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.Должность
	|ГДЕ
	|	СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы <> ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ПустаяСсылка)
	|	И СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов ЕСТЬ NULL ";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов", "Должность", Выборка.Должность) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Должность.Установить(Выборка.Должность);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьПоказательИНачислениеСДД() Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу")) Тогда
		Возврат;
	КонецЕсли;
	
	ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления; 
	
	РасчетДенежногоДовольствия.СоздатьПоказательСохраняемоеДенежноеДовольствие(Истина);
		
	КоллекторНачислений = Новый Соответствие;
	СвойстваНачислений = ПланыВидовРасчетаМенеджер.СвойстваНачисленийПоКатегориям();
	
	РасчетДенежногоДовольствия.СоздатьНачислениеОтпускПоБеременностиИРодамВоеннослужащего(Истина, КоллекторНачислений, СвойстваНачислений);
	РасчетДенежногоДовольствия.СоздатьНачислениеОтпускПоУходуЗаРебенкомДоПолутораЛетВоеннослужащего(Истина, КоллекторНачислений, СвойстваНачислений);
		
	ПланыВидовРасчетаМенеджер.ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
		
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыДобавитьВыплатыВоеннослужащим(ПараметрыОбновления = НеОпределено) Экспорт
	
	ВидыДокументов = Новый Массив();
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоБеременностиИРодамВоеннослужащего);
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенкомВоеннослужащего);
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ИсключениеИзСписковЧасти);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДокументов",ВидыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВидыДокументовМежрасчетныхНачислений.Ссылка КАК ВидДокументаОснования
	|ИЗ
	|	Перечисление.ВидыДокументовМежрасчетныхНачислений КАК ВидыДокументовМежрасчетныхНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|		ПО (СпособыВыплатыЗарплаты.ВидДокументаОснования = ВидыДокументовМежрасчетныхНачислений.Ссылка)
	|			И (СпособыВыплатыЗарплаты.Поставляемый)
	|ГДЕ
	|	ВидыДокументовМежрасчетныхНачислений.Ссылка В(&ВидыДокументов)
	|	И СпособыВыплатыЗарплаты.Ссылка ЕСТЬ NULL";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);		
		ОписаниеЭлементов = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыОписанияПоставляемых();
		
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеЭлемента = ОписаниеЭлементов.Найти(Выборка.ВидДокументаОснования, "ВидДокументаОснования");
			
			СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеЭлемента,, "ИмяПредопределенныхДанных");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
			
		КонецЦикла;		
		
	КонецЕсли;	
			
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыДобавитьОтпускВоеннослужащего(ПараметрыОбновления = НеОпределено) Экспорт
	
	ВидыДокументов = Новый Массив();
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускВоеннослужащего);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДокументов",ВидыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВидыДокументовМежрасчетныхНачислений.Ссылка КАК ВидДокументаОснования
	|ИЗ
	|	Перечисление.ВидыДокументовМежрасчетныхНачислений КАК ВидыДокументовМежрасчетныхНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|		ПО (СпособыВыплатыЗарплаты.ВидДокументаОснования = ВидыДокументовМежрасчетныхНачислений.Ссылка)
	|			И (СпособыВыплатыЗарплаты.Поставляемый)
	|ГДЕ
	|	ВидыДокументовМежрасчетныхНачислений.Ссылка В(&ВидыДокументов)
	|	И СпособыВыплатыЗарплаты.Ссылка ЕСТЬ NULL";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);		
		
		ОписанияПоставляемых = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыОписанияПоставляемых();
		
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеЭлемента = ОписанияПоставляемых.Найти(Выборка.ВидДокументаОснования, "ВидДокументаОснования");
			
			СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеЭлемента,, "ИмяПредопределенныхДанных");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
			
		КонецЦикла;		
		
	КонецЕсли;	
			
КонецПроцедуры

Процедура ДобавитьКатегорииВоеннослужащих(МассивКатегорий) Экспорт
	
	Если  ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамВоеннослужащего);
		МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим);
		МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаСверхурочныхВоеннослужащим);
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоздатьВТЗамещениеГосударственныхДолжностей(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	ВЫБОР
	|		КОГДА СвойстваДолжностей.ВидДолжностиГосударственнойСлужбы = ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность)
	|			ТОГДА СвойстваДолжностей.ИсчислениеСтраховогоСтажаПФРГосударственнойДолжности
	|		КОГДА СвойстваДолжностей.ВидДолжностиГосударственнойСлужбы = ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ДолжностьГосударственнойГражданскойСлужбы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ЗГГС)
	|		КОГДА СвойстваДолжностей.ВидДолжностиГосударственнойСлужбы = ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ДолжностьМуниципальнойСлужбы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ЗМС)
	|		КОГДА СвойстваДолжностей.ВидДолжностиГосударственнойСлужбы = ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.МуниципальнаяДолжность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ЗМД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка)
	|	КОНЕЦ КАК ЗамещениеГосударственныхМуниципальныхДолжностей
	|ПОМЕСТИТЬ ВТЗамещениеГосударственныхДолжностей
	|ИЗ
	|	Справочник.Должности КАК Должности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностей
	|		ПО Должности.Ссылка = СвойстваДолжностей.Должность";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура НастроитьУчетСудей(ПараметрыОбновления = НеОпределено) Экспорт
	
	НастройкиГосударственнойСлужбы = НастройкиГосударственнойСлужбы();
	
	Если НастройкиГосударственнойСлужбы.ИспользоватьРасчетДенежногоСодержанияСудей
		И НЕ НастройкиГосударственнойСлужбы.ИспользоватьГосударственныеМуниципальныеДолжности Тогда
		// Для корректного учета судей необходимо взвести учет государственных должностей
		Настройки = РегистрыСведений.НастройкиГосударственнойСлужбы.СоздатьМенеджерЗаписи();
		Настройки.Прочитать();
		ЗаполнитьЗначенияСвойств(Настройки,НастройкиГосударственнойСлужбы);
		Настройки.Записать();
		
		// И все для судейских должности нужно установить правильный вид должности 		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СвойстваДолжностейГосударственнойСлужбы.Должность КАК Должность,
		|	ВЫБОР
		|		КОГДА СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность)
		|		ИНАЧЕ СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы
		|	КОНЕЦ КАК ВидДолжностиГосударственнойСлужбы,
		|	ВЫБОР
		|		КОГДА СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДолжностейГосударственнойСлужбы.ПустаяСсылка)
		|		ИНАЧЕ СвойстваДолжностейГосударственнойСлужбы.КатегорияДолжностиГосударственнойСлужбы
		|	КОНЕЦ КАК КатегорияДолжностиГосударственнойСлужбы,
		|	ВЫБОР
		|		КОГДА СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыДолжностейГосударственнойСлужбы.ПустаяСсылка)
		|		ИНАЧЕ СвойстваДолжностейГосударственнойСлужбы.ГруппаДолжностиГосударственнойСлужбы
		|	КОНЕЦ КАК ГруппаДолжностиГосударственнойСлужбы,
		|	СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы КАК ЯвляетсяДолжностьюГосударственнойСлужбы,
		|	СвойстваДолжностейГосударственнойСлужбы.ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность КАК ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность,
		|	СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурора КАК ДолжностьПрокурора,
		|	СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы КАК ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы,
		|	СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи КАК ДолжностьСудьи,
		|	СвойстваДолжностейГосударственнойСлужбы.ДолжностьПрокурораСледователяСудьи КАК ДолжностьПрокурораСледователяСудьи
		|ИЗ
		|	РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
		|ГДЕ
		|	СвойстваДолжностейГосударственнойСлужбы.ДолжностьСудьи
		|	И СвойстваДолжностейГосударственнойСлужбы.ВидДолжностиГосударственнойСлужбы <> ЗНАЧЕНИЕ(Перечисление.ВидыДолжностейГосударственнойСлужбы.ГосударственнаяДолжность)";
		
		Если ПараметрыОбновления = НеОпределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Иначе
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СвойстваДолжностейГосударственнойСлужбы", "Должность", Выборка.Должность) Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.СвойстваДолжностейГосударственнойСлужбы.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Должность.Установить(Выборка.Должность);
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЦикла;
		КонецЕсли;	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
		
	
КонецПроцедуры

Функция ПоказателиОкладЗаКлассныйЧин() Экспорт
	
	МассивПоказателей = Новый Массив();
	МассивПоказателей.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ОкладЗаКлассныйЧин);
	
	Возврат МассивПоказателей;
	
КонецФункции

Процедура ЗаполнитьИндексируемыеПоУмолчаниюПоказатели(ИндексируемыеПоказатели, ВидИндексацийГосударственныхСлужащих, ИндексацияВоеннослужащих, РежимИндексацииСотрудников = Истина) Экспорт
	
	ИндексируемыеПоказатели.Очистить();

	ПоказателиОклада = ИндексацияЗаработка.ИдексируемыеПоУмолчаниюПоказатели(); 	
	Если ИндексацияВоеннослужащих Тогда
		ПоказателИОкладПоЗваниюЧину = РасчетДенежногоДовольствия.ПоказателиОВЗ();	
	Иначе
		ПоказателИОкладПоЗваниюЧину = ПоказателиОкладЗаКлассныйЧин();		
	КонецЕсли;
		
	Если ВидИндексацийГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыДенежногоСодержания 
		ИЛИ (ИндексацияВоеннослужащих И РежимИндексацииСотрудников) Тогда
		
		Для Каждого Показатель из ПоказателиОклада Цикл
			СтрокаПоказателя = ИндексируемыеПоказатели.Добавить();
			СтрокаПоказателя.Показатель = Показатель;		
		КонецЦикла;	
			
		Для Каждого Показатель из ПоказателИОкладПоЗваниюЧину Цикл
			СтрокаПоказателя = ИндексируемыеПоказатели.Добавить();
			СтрокаПоказателя.Показатель = Показатель;
		КонецЦикла;	
		
	ИначеЕсли ВидИндексацийГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыПоДолжности Тогда
		
		Для Каждого Показатель из ПоказателиОклада Цикл
			СтрокаПоказателя = ИндексируемыеПоказатели.Добавить();
			СтрокаПоказателя.Показатель = Показатель;		
		КонецЦикла;	
		
	ИначеЕсли ВидИндексацийГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыПоЗванию Тогда
		
		Для Каждого Показатель из ПоказателИОкладПоЗваниюЧину Цикл
			СтрокаПоказателя = ИндексируемыеПоказатели.Добавить();
			СтрокаПоказателя.Показатель = Показатель;
		КонецЦикла;	
		
	КонецЕсли;
		
	ИндексацияЗаработка.УстановитьОкруглениеПоУмолчанию(ИндексируемыеПоказатели);
	
КонецПроцедуры

Процедура УстановитьОтборПоДолжностямГосслужбы(Отбор, ВидИндексацийГосударственныхСлужащих, ИндексацияВоеннослужащих = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидИндексацийГосударственныхСлужащих) Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяПоляОтбора = "ЯвляетсяДолжностьюГосударственнойСлужбы";
	Если ИндексацияВоеннослужащих Тогда
		ИмяПоляОтбора = "ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы";	
	КонецЕсли; 
			
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			Отбор, ИмяПоляОтбора, "=", Истина);
					
КонецПроцедуры			


#Область ПечатьВедомостей

Процедура ВедомостьВКассуДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расчетно-платежная ведомость 13-ФО. Контрактники
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_13ФО";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость 13-ФО'");
	КомандаПечати.Порядок = 40;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВоеннуюСлужбу";
	
	// Расчетно-платежная ведомость 15-ФО. Призывники
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_15ФО";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость 15-ФО'");
	КомандаПечати.Порядок = 41;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву";
	
	// Расчетно-платежная ведомость Форма 6002501. Контрактники
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_6002501";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость 6002501'");
	КомандаПечати.Порядок = 42;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВоеннуюСлужбу";
	
	// Расчетно-платежная ведомость Форма 6002502. Призывники
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_6002502";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость 6002502'");
	КомандаПечати.Порядок = 43;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву";
	
КонецПроцедуры

Процедура ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм,
		"ПФ_MXL_13ФО") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_13ФО",
		"Расчетно-платежная ведомость 13-ФО",
		Обработки.ПечатьФормВоинскойСлужбы.Печать13ФО(МассивОбъектов,
			ОбъектыПечати,
			"13ФО"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм,
		"ПФ_MXL_15ФО") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_15ФО",
		"Расчетно-платежная ведомость 15-ФО",
		Обработки.ПечатьФормВоинскойСлужбы.Печать13ФО(МассивОбъектов,
			ОбъектыПечати,
			"15ФО"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм,
		"ПФ_MXL_6002501") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_6002501",
		"Расчетно-платежная ведомость 6002501",
		Обработки.ПечатьФормВоинскойСлужбы.Печать13ФО(МассивОбъектов,
			ОбъектыПечати,
			"Форма6002501"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм,
		"ПФ_MXL_6002502") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_6002502",
		"Расчетно-платежная ведомость 6002502",
		Обработки.ПечатьФормВоинскойСлужбы.Печать13ФО(МассивОбъектов,
			ОбъектыПечати,
			"Форма6002502"));			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата13ФО(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь)  Экспорт
	
	Обработки.ПечатьФормВоинскойСлужбы.ПриКомпоновкеРезультата13ФО(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата15ФО(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Обработки.ПечатьФормВоинскойСлужбы.ПриКомпоновкеРезультата15ФО(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);

КонецПроцедуры

Процедура ПриКомпоновкеРезультата6002501(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь)  Экспорт
	
	Обработки.ПечатьФормВоинскойСлужбы.ПриКомпоновкеРезультата6002501(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата6002502(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь)  Экспорт
	
	Обработки.ПечатьФормВоинскойСлужбы.ПриКомпоновкеРезультата6002502(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	
КонецПроцедуры

Процедура ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

Процедура ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Если Не СтандартнаяОбработка Тогда
		Возврат
	КонецЕсли;
	
	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(Отчет.КомпоновщикНастроек);
	
	Если КлючВарианта = "13ФО" Тогда
		ПриКомпоновкеРезультата13ФО(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	ИначеЕсли КлючВарианта = "15ФО" Тогда
		ПриКомпоновкеРезультата15ФО(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	ИначеЕсли КлючВарианта = "Форма6002501" Тогда
		ПриКомпоновкеРезультата6002501(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	ИначеЕсли КлючВарианта = "Форма6002502" Тогда
		ПриКомпоновкеРезультата6002502(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

Функция ДоступноИзменениеВариантаРасчетаВДокументе(Сотрудник, ДатаСобытия) Экспорт	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") ИЛИ
		Не ПолучитьФункциональнуюОпцию("ВыбиратьВариантРасчетаСреднего") ИЛИ
		НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ложь;
	КонецЕсли;
		
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ВидДоговора", ДатаСобытия);
	ВидДоговора 							= КадровыеДанныеСотрудника[0].ВидДоговора;
	
	ДоступноИзменениеВариантаРасчета = Ложь;
	
	Если (ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего Или ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего) Тогда
		ДоступноИзменениеВариантаРасчета = Истина;	
	КонецЕсли;
		
	Возврат ДоступноИзменениеВариантаРасчета;	
		
КонецФункции

Процедура СоздатьНачислениеОплатаДнейУходаЗаДетьмиИнвалидамиГосслужащих(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу")) 
	   И НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")) Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НачисленияУдержания.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииДенежногоСодержания)
	|";
		
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	КатегорииДенежногоСодержания = Новый Массив();
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами);
	
	Запрос.УстановитьПараметр("КатегорииДенежногоСодержания",КатегорииДенежногоСодержания);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления; 
						
		КоллекторНачислений = Новый Соответствие;
		СвойстваНачислений = ПланыВидовРасчетаМенеджер.СвойстваНачисленийПоКатегориям();
		
		РасчетДенежногоСодержания.СоздатьНачислениеОплатаДнейУходаЗаДетьмиИнвалидамиГосслужащих(Истина, КоллекторНачислений, СвойстваНачислений);
			
		ПланыВидовРасчетаМенеджер.ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
				
	КонецЕсли;	
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);			
					
КонецПроцедуры

#Область СпособыВыплатыЗарплаты

Функция ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплатыДоступныеПоМетаданным() Экспорт
	
	ДоступныеЗначения = Новый Массив;
	ДоступныеЗначения.Добавить(Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Гражданские);
	ДоступныеЗначения.Добавить(Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ВоеннослужащиеПоКонтракту);
	ДоступныеЗначения.Добавить(Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ВоеннослужащиеПоПризыву);
	
	Возврат ДоступныеЗначения
	
КонецФункции

Функция ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплатыДоступныеПоФункциональнымОпциям() Экспорт
	
	ДоступныеЗначения = Новый Массив;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		ДоступныеЗначения.Добавить(Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Гражданские);
		ДоступныеЗначения.Добавить(Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ВоеннослужащиеПоКонтракту);
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву") Тогда
		ДоступныеЗначения.Добавить(Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ВоеннослужащиеПоПризыву);
	КонецЕсли;	
	
	Возврат ДоступныеЗначения
	
КонецФункции
	
Функция СпособыВыплатыЗарплатыОписанияПоставляемых() Экспорт
	
	Описания = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыНовыеОписания();
	
	Описание = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование         = НСтр("ru = 'Зарплата гражданского персонала'");
	Описание.ХарактерВыплаты      = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ГруппаВидовДоговоров = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Гражданские;
	
	Описание = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование         = НСтр("ru = 'Денежное довольствие военнослужащих по призыву'");
	Описание.ХарактерВыплаты      = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ГруппаВидовДоговоров = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ВоеннослужащиеПоПризыву;
	
	Описание = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование         = НСтр("ru = 'Денежное довольствие военнослужащих по контракту'");
	Описание.ХарактерВыплаты      = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ГруппаВидовДоговоров = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ВоеннослужащиеПоКонтракту;
	
	Описание = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование          = НСтр("ru = 'Исключения из списков части'");
	Описание.ХарактерВыплаты       = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ВидДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ИсключениеИзСписковЧасти;
	Описание.ГруппаВидовДоговоров  = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Описание = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование          = НСтр("ru = 'Отпуска по беременности и родам военнослужащих'");
	Описание.ХарактерВыплаты       = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	Описание.ВидДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоБеременностиИРодамВоеннослужащего;
	Описание.ГруппаВидовДоговоров  = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Описание = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование          = НСтр("ru = 'Отпуска по уходу за ребенком военнослужащих'");
	Описание.ХарактерВыплаты       = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ВидДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенкомВоеннослужащего;
	Описание.ГруппаВидовДоговоров  = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Описание = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование          = НСтр("ru = 'Отпуска военнослужащих'");
	Описание.ХарактерВыплаты       = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	Описание.ВидДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускВоеннослужащего;
	Описание.ГруппаВидовДоговоров  = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Описание = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование          = НСтр("ru = 'Денежная компенсация за работы сверх нормы служебного времени военнослужащим'");
	Описание.ХарактерВыплаты       = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	Описание.ВидДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ОплатаСверхурочныхВоеннослужащим;
	Описание.ГруппаВидовДоговоров  = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Возврат Описания
	
КонецФункции

#КонецОбласти

Процедура УстановитьПараметрыНабораСвойствВоинскиеСпециальныеЗвания(ПараметрыОбновления = НеОпределено) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьВоеннуюСлужбу.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВоинскиеСпециальныеЗвания", ПараметрыНабора);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствКлассныеЧиныРанги(ПараметрыОбновления = НеОпределено) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьУчетКлассныхЧинов.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_КлассныеЧиныРанги", ПараметрыНабора);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьВидамиСтажаДолжностей(Должность, ВидыСтажаДолжностей) Экспорт
	
	ФОИспользоватьГосударственнуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу");
	ФОИспользоватьВоеннуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу");
	
	Если ФОИспользоватьГосударственнуюСлужбу
		Или ФОИспользоватьВоеннуюСлужбу Тогда
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(Должность) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			Запрос.УстановитьПараметр("Должность", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должность, "Должность"));
		Иначе
			Запрос.УстановитьПараметр("Должность", Должность);
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы КАК ЯвляетсяДолжностьюГосударственнойСлужбы,
			|	СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы КАК ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы
			|ИЗ
			|	РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
			|ГДЕ
			|	СвойстваДолжностейГосударственнойСлужбы.Должность = &Должность
			|	И (СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы
			|			ИЛИ СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСтажаДолжностей, ВидыСтажейПоСвойствамДолжностей(Выборка));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыСтажейПоСвойствамДолжностиФормы(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Возврат ВидыСтажейПоСвойствамДолжностей(Форма.СвойстваДолжностейГосударственнойСлужбы);
	
КонецФункции

Функция ВидыСтажейПоСвойствамДолжностей(СвойствамДолжностей) Экспорт
	
	Если СвойствамДолжностей.ЯвляетсяДолжностьюГосударственнойСлужбы Тогда
		ВидыСтажаДолжностей = ВидыСтажейГосударственнойСлужбы();
	Иначе
		ВидыСтажаДолжностей = Новый Массив;
	КонецЕсли;
	
	Если СвойствамДолжностей.ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСтажаДолжностей, ВидыСтажейВоеннойСлужбы());
	КонецЕсли;
	
	Возврат ВидыСтажаДолжностей;
	
КонецФункции

Функция ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста() Экспорт
	
	ВидыСтажаДолжностей = ВидыСтажейГосударственнойСлужбы();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСтажаДолжностей, ВидыСтажейВоеннойСлужбы());
	
	Возврат ВидыСтажаДолжностей;
	
КонецФункции

Функция ВидыСтажейГосударственнойСлужбы()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
		Возврат Справочники.ВидыСтажа.ВидыСтажаПоКатегории(Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ВидыСтажейВоеннойСлужбы()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат Справочники.ВидыСтажа.ВидыСтажаПоКатегории(Перечисления.КатегорииСтажа.ВыслугаЛетНаВоеннойСлужбе);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ДолжностиСАвтоматическимУчетомПрерыванияСтажей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвойстваДолжностейГосударственнойСлужбы.Должность КАК Должность
		|ИЗ
		|	РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
		|ГДЕ
		|	(СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюГосударственнойСлужбы
		|			ИЛИ СвойстваДолжностейГосударственнойСлужбы.ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Должность");
	
КонецФункции

Процедура СоздатьПоказательИНачислениеСверхурочныхВоеннослужащих(ПараметрыОбновления = НеОпределено) Экспорт
		
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу")) Тогда
		Возврат;
	КонецЕсли;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НачисленияУдержания.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачислений)
	|";
		
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	КатегорииНачислений = Новый Массив();
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаСверхурочныхВоеннослужащим);
	
	Запрос.УстановитьПараметр("КатегорииНачислений",КатегорииНачислений);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		РасчетДенежногоДовольствия.СоздатьПоказателиОплатыСверхурочныхРабот(Истина);
			
		ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления; 
		КоллекторНачислений = Новый Соответствие;
		СвойстваНачислений = ПланыВидовРасчетаМенеджер.СвойстваНачисленийПоКатегориям();
		
		РасчетДенежногоДовольствия.СоздатьНачислениеОплатаСверхурочныхВоеннослужащих(Истина, КоллекторНачислений, СвойстваНачислений);
			
		ПланыВидовРасчетаМенеджер.ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
				
	КонецЕсли;	
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);			
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыДобавитьОплатуСверхурочныхВоеннослужащим(ПараметрыОбновления = НеОпределено) Экспорт
	
	ВидыДокументов = Новый Массив();
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОплатаСверхурочныхВоеннослужащим);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДокументов",ВидыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВидыДокументовМежрасчетныхНачислений.Ссылка КАК ВидДокументаОснования
	|ИЗ
	|	Перечисление.ВидыДокументовМежрасчетныхНачислений КАК ВидыДокументовМежрасчетныхНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|		ПО (СпособыВыплатыЗарплаты.ВидДокументаОснования = ВидыДокументовМежрасчетныхНачислений.Ссылка)
	|			И (СпособыВыплатыЗарплаты.Поставляемый)
	|ГДЕ
	|	ВидыДокументовМежрасчетныхНачислений.Ссылка В(&ВидыДокументов)
	|	И СпособыВыплатыЗарплаты.Ссылка ЕСТЬ NULL";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);		
		
		ОписанияПоставляемых = ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыОписанияПоставляемых();
		
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеЭлемента = ОписанияПоставляемых.Найти(Выборка.ВидДокументаОснования, "ВидДокументаОснования");
			
			СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеЭлемента,, "ИмяПредопределенныхДанных");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
			
		КонецЦикла;		
		
	КонецЕсли;	
			
КонецПроцедуры

Процедура УточнитьСвойстваПоказателяДенежногоСодержания(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания")Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПоказателиРасчетаЗарплаты.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.Ссылка = &Показатель	
	|	И НЕ ПоказателиРасчетаЗарплаты.ПериодическийПоказательСотрудника	
	|";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Показатель", Справочники.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник." + Выборка.Ссылка.Метаданные().Имя, "Ссылка", Выборка.ссылка) Тогда
				Продолжить;
			КонецЕсли;		
		
			ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПоказательОбъект.ПериодическийПоказательСотрудника = Истина;
			ПоказательОбъект.ОбменДанными.Загрузка = Истина;
			ПоказательОбъект.Записать();
				
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры
	
Процедура УточнитьСвойстваНачисленийДенежноеСодержаниеНаПериодКомандировки(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания")Тогда
		Возврат;
	КонецЕсли; 
			
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	НачисленияПоказатели.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|ГДЕ
	|	НачисленияПоказатели.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки)
	|	И НачисленияПоказатели.Показатель = &Показатель	
	|	И НЕ НачисленияПоказатели.ЗапрашиватьПриВводе	
	|";
		
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	ПоказательСохраняемоеДенежноеСодержание = Справочники.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Показатель", ПоказательСохраняемоеДенежноеСодержание);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета." + Выборка.Ссылка.Метаданные().Имя, "Ссылка", Выборка.ссылка) Тогда
				Продолжить;
			КонецЕсли;		
		
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			НайденныеСтроки = НачислениеОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ПоказательСохраняемоеДенежноеСодержание));
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
				СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
			КонецЦикла;
			НачислениеОбъект.ОбменДанными.Загрузка = Истина;
			НачислениеОбъект.Записать();
				
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтключитьКадровыйУчетГосударственнойСлужбы(Источник, Отказ) Экспорт
	
	Если Не Источник.Значение Тогда
		
		ИспользоватьГосударственнуюСлужбу = Константы.ИспользоватьГосударственнуюСлужбу.СоздатьМенеджерЗначения();
		ИспользоватьГосударственнуюСлужбу.Значение = Ложь;
		ИспользоватьГосударственнуюСлужбу.ОбменДанными.Загрузка = Истина;
		ИспользоватьГосударственнуюСлужбу.Записать();
		
		ИспользоватьМуниципальнуюСлужбу = Константы.ИспользоватьМуниципальнуюСлужбу.СоздатьМенеджерЗначения();
		ИспользоватьМуниципальнуюСлужбу.Значение = Ложь;
		ИспользоватьМуниципальнуюСлужбу.ОбменДанными.Загрузка = Истина;
		ИспользоватьМуниципальнуюСлужбу.Записать();
		
		ИспользоватьВоеннуюСлужбу = Константы.ИспользоватьВоеннуюСлужбу.СоздатьМенеджерЗначения();
		ИспользоватьВоеннуюСлужбу.Значение = Ложь;
		ИспользоватьВоеннуюСлужбу.ОбменДанными.Загрузка = Истина;
		ИспользоватьВоеннуюСлужбу.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ИсточникСведенийОШтатномРасписании

Процедура ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников) Экспорт
	
	ДобавитьОписаниеСвойствДолжностейГосударственнойСлужбы(ОписаниеИсточников);
	
КонецПроцедуры


Процедура ДобавитьОписаниеСвойствДолжностейГосударственнойСлужбы(ОписаниеИсточников)
	
	ИдентификаторИсточника = "РегистрСведенийСвойстваДолжностейГосударственнойСлужбы";
	
	ОписаниеИсточника = УправлениеШтатнымРасписанием.ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	ОписаниеИсточника.Порядок = 1;
	
	ИмяДанныхШР = "ВидДолжностиГосударственнойСлужбы";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "КатегорияДолжностиГосударственнойСлужбы";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ГруппаДолжностиГосударственнойСлужбы";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ЯвляетсяДолжностьюГосударственнойСлужбы";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ДолжностьПомощникаЗамещающегоМуниципальнуюДолжность";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ДолжностьПрокурора";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ЯвляетсяДолжностьюВоеннойПравоохранительнойСлужбы";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ДолжностьСудьи";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ДолжностьПрокурораСледователяСудьи";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ИсчислениеСтраховогоСтажаПФРГосударственнойДолжности";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		ОписаниеИсточника.ТекстСоединений = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК РегистрСведенийСвойстваДолжностейГосударственнойСлужбы
			|		ПО РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность = РегистрСведенийСвойстваДолжностейГосударственнойСлужбы.Должность}";
		
	Иначе
		
		ОписаниеИсточника.ТекстСоединений = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК РегистрСведенийСвойстваДолжностейГосударственнойСлужбы
			|		ПО СправочникШтатноеРасписание.Должность = РегистрСведенийСвойстваДолжностейГосударственнойСлужбы.Должность}";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
