////////////////////////////////////////////////////////////////////////////////
// Подсистема РасчетДенежногоДовольствия
// 
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Создает или отключает в зависимости от настроек начисления 
// входящие в состав денежного довольствия.
// 
Процедура СоздатьНачисленияДенежногоДовольствия(НастройкиРасчетаЗарплаты, КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета) Экспорт

	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	ИспользоватьВоеннуюСлужбу = НастройкиПрограммы.ИспользоватьВоеннуюСлужбу;
	ИспользоватьРасчетДенежногоДовольствияВоеннослужащих = НастройкиПрограммы.ИспользоватьРасчетДенежногоДовольствияВоеннослужащих;
	ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву = НастройкиПрограммы.ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву;
	
	ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления; 
	
	СоздаватьНачисления = ИспользоватьВоеннуюСлужбу;
	СоздаватьНачисленияДДВоеннослужащих = СоздаватьНачисления И ИспользоватьРасчетДенежногоДовольствияВоеннослужащих;
	СоздаватьНачисленияДДСотрудников    = СоздаватьНачисления И Не ИспользоватьРасчетДенежногоДовольствияВоеннослужащих;

	// начисления денежного довольствия военнослужащих
	
	// ОВД
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОВД'");
	Описание.Наименование			= НСтр("ru = 'Оклад по воинской должности'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'ОВД'");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоВоинскойДолжности;
	Описание.ФормулаРасчета			= "Оклад * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДВоеннослужащих Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскойДолжности, Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВД);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоВоинскойДолжности = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// ОВЗ
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОВЗ'");
	Описание.Наименование			= НСтр("ru = 'Оклад по воинскому званию'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'ОВЗ'");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоВоинскомуЗванию;
	Описание.ФормулаРасчета			= "ОкладПоВоинскомуЗванию * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ОкладПоВоинскомуЗванию");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДВоеннослужащих Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскомуЗванию,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВЗ);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоВоинскомуЗванию = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за выслугу лет военнослужащим
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПНВЛ'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за выслугу лет на военной службе'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'ПНВЛ'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаВыслугуЛетНаВоеннойСлужбе / 100 * (Оклад + ОкладПоВоинскомуЗванию) * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыслугуЛетНаВоеннойСлужбе;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДВоеннослужащих Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаВыслугуЛет,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.НеИндексируемое);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыслугуЛетНаВоеннойСлужбе = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за классную квалификацию
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НКлКв'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за классную квалификацию'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Надб. за класс. квалифик'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаКласснуюКвалификацию / 100 * Оклад * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаКласснуюКвалификацию;
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаКласснуюКвалификацию");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДВоеннослужащих Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаКласснуюКвалификацию,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВД);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаКласснуюКвалификацию = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за особые условия военной службы
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НОУС'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за особые условия военной службы'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Особые усл. службы'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаОсобыеУсловияСлужбы / 100 * Оклад * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаОсобыеУсловияВоеннойСлужбы;
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаОсобыеУсловияСлужбы");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДВоеннослужащих Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаОсобыеУсловияСлужбы, Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.НеИндексируемое);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаОсобыеУсловияВоеннойСлужбы = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Премия за добросовестное выполнение служебных обязанностей
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления(); 
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПДВСО'");
	Описание.Наименование			= НСтр("ru = 'Премия за добросовестное выполнение служебных обязанностей'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'ПДВСО'");
	Описание.ФормулаРасчета 		= "0.25 * (Оклад + ОкладПоВоинскомуЗванию) * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДВоеннослужащих Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОДС);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;

	
	// начисления денежного довольствия сотрудников
	
	// Оклад по должности
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДЛОКЛ'");
	Описание.Наименование			= НСтр("ru = 'Оклад по должности'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Должн. оклад'");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДолжностнойОкладСотрудникаДД;
	Описание.ФормулаРасчета			= "Оклад * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДСотрудников Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ДолжностнойОклад,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВД);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДолжностнойОкладСотрудникаДД = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оклад за специальное звание
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОКЛСЗ'");
	Описание.Наименование			= НСтр("ru = 'Оклад по специальному званию'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Оклад по спец. званию'");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоСпециальномуЗванию;
	Описание.ФормулаРасчета			= "ОкладПоСпециальномуЗванию * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ОкладПоСпециальномуЗванию");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДСотрудников Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоСпециальномуЗванию,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВЗ);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоСпециальномуЗванию = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за стаж службы
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НССл'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за стаж службы'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Надбавка за стаж службы'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаСтажСлужбы / 100 * (Оклад + ОкладПоСпециальномуЗванию) * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаСтажСлужбы;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДСотрудников Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаСтажСлужбы,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.НеИндексируемое);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаСтажСлужбы = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за квалификационное звание
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НССл'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за квалификационное звание'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Надбавка за квал. звание'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаКвалификационноеЗвание / 100 * Оклад * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаКвалификационноеЗвание;
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаКвалификационноеЗвание");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДСотрудников Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаКвалификационноеЗвание,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВД);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаКвалификационноеЗвание = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за особые условия службы
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НОУС'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за особые условия службы'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Особые усл. службы'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаОсобыеУсловияСлужбы / 100 * Оклад * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаОсобыеУсловияСлужбы;
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаОсобыеУсловияСлужбы");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДСотрудников Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаОсобыеУсловияСлужбы, Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.НеИндексируемое);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаОсобыеУсловияСлужбы = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Премия за добросовестное выполнение служебных обязанностей
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления(); 
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПДВСО'");
	Описание.Наименование			= НСтр("ru = 'Премия за добросовестное выполнение служебных обязанностей'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'ПДВСО'");
	Описание.ФормулаРасчета 		= "0.25 * (Оклад + ОкладПоСпециальномуЗванию) * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностейСотрудникам;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисленияДДСотрудников Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОДС);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностейСотрудникам = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Общие начисления
	
	// Надбавка за работу со сведениями, составляющими гостайну
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НГОСТ'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за работу со сведениями, составляющими гостайну'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Надбавка за секретность'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаСекретность / 100 * Оклад * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаСекретностьДД;
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаСекретность");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисления Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаСекретность,  Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.НеИндексируемое);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаСекретностьДД = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за выполнение задач, связанных с риском для жизни и здоровья в мирное время.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НРИСК'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за выполнение задач, связанных с риском для жизни и здоровья в мирное время'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Надбавка за риск в мирн. время'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаВыполнениеЗадачСвязанныхСРиском  / 100 * Оклад * ДоляНеполногоРабочегоВремени * КалендарныеДни / КалендарныеДниМесяца";
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыполнениеЗадачСвязанныхСРиском;
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаВыполнениеЗадачСвязанныхСРиском");
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисления Тогда
		ДополнительныеСвойстваНачислений = ДополнительныеСвойстваНачислений(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ПрочиеВыплаты, Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВД);
		Описание.Вставить("СвойстваНачисленийГосударственныхСлужащих", ДополнительныеСвойстваНачислений);
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыполнениеЗадачСвязанныхСРиском = Описание.СсылкаНаОбъект;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отпуск по беременности и родам военнослужащего
	СоздатьНачислениеОтпускПоБеременностиИРодамВоеннослужащего(СоздаватьНачисления, КоллекторНачислений, СвойстваНачислений);
	// Отпуск по уходу за ребенком до 1.5 лет военнослужащего
	СоздатьНачислениеОтпускПоУходуЗаРебенкомДоПолутораЛетВоеннослужащего(СоздаватьНачисления, КоллекторНачислений, СвойстваНачислений);
	// Оплата сверхурочных военнослужащим	
	СоздатьНачислениеОплатаСверхурочныхВоеннослужащих(СоздаватьНачисления, КоллекторНачислений, СвойстваНачислений);	
КонецПроцедуры

Процедура СоздатьПоказателиНачисленийДенежногоДовольствия(ПараметрыПланаВидовРасчета = Неопределено) Экспорт

	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	ИспользоватьВоеннуюСлужбу = НастройкиПрограммы.ИспользоватьВоеннуюСлужбу;
	ИспользоватьРасчетДенежногоДовольствияВоеннослужащих = НастройкиПрограммы.ИспользоватьРасчетДенежногоДовольствияВоеннослужащих;
	ИспользоватьГосударственнуюСлужбу = НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу;
	ИспользоватьМуниципальнуюСлужбу   = НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу;
	
	ПоказателиРасчетаЗарплатыМенеджер = Справочники.ПоказателиРасчетаЗарплаты;
	
	Если ПараметрыПланаВидовРасчета = Неопределено Тогда
		ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	КонецЕсли;
	ПараметрыПоказателей = ПараметрыПланаВидовРасчета.ПараметрыПоказателей;
	
	СоздаватьПоказатели = ИспользоватьВоеннуюСлужбу;
	СоздаватьПоказателиГосслужбы = ИспользоватьВоеннуюСлужбу Или ИспользоватьГосударственнуюСлужбу Или ИспользоватьМуниципальнуюСлужбу;
	
	СозданныеЭлементы = ПараметрыПланаВидовРасчета.СсылкиПоказателиРасчетаЗарплаты;
	Если СозданныеЭлементы = Неопределено Тогда 
		СозданныеЭлементы = ПоказателиРасчетаЗарплатыМенеджер.СсылкиПоказателиРасчетаЗарплатыНачальнойНастройкиПрограммы();
	КонецЕсли;

	// ОкладПоВоинскомуЗванию
	Если СоздаватьПоказатели И ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ОкладПоВоинскомуЗванию";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад по воинскому званию'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'ОВЗ'");
		ОписаниеПоказателя.ДопускаетсяНулевоеЗначение = Истина;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Истина;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("ОкладПоВоинскомуЗванию");
	КонецЕсли;
	
	// ОкладПоСпециальномуЗванию
	Если СоздаватьПоказатели И Не ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ОкладПоСпециальномуЗванию";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад по специальному званию'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Окл. по званию'");
		ОписаниеПоказателя.ДопускаетсяНулевоеЗначение = Истина;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Истина;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("ОкладПоСпециальномуЗванию");
	КонецЕсли;
	
	// ПроцентНадбавкиЗаВыслугуЛетНаВоеннойСлужбе
	Если СоздаватьПоказатели И ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаВыслугуЛетНаВоеннойСлужбе";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за выслугу лет на военной службе'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.ВидСтажа = Справочники.ВидыСтажа.СоздатьВидСтажаЗаВыслугуЛетНаВоеннойСлужбе(Истина);
		ОписаниеПоказателя.Предопределенный = Ложь;
		Показатель = ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		ПоказателиРасчетаЗарплатыМенеджер.ЗаполнитьШкалуСтажаНадбавкиЗаВыслугуЛет(Показатель, Перечисления.КатегорииСтажа.ВыслугаЛетНаВоеннойСлужбе);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаВыслугуЛетНаВоеннойСлужбе");
	КонецЕсли;
	
	// ПроцентНадбавкиЗаВыслугуЛетНаВоеннойСлужбе
	Если СоздаватьПоказатели И Не ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаСтажСлужбы";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за стаж службы'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.ВидСтажа = Справочники.ВидыСтажа.СоздатьВидСтажаЗаВыслугуЛетНаВоеннойСлужбе(Ложь);
		ОписаниеПоказателя.Предопределенный = Ложь;
		Показатель = ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		ПоказателиРасчетаЗарплатыМенеджер.ЗаполнитьШкалуСтажаНадбавкиЗаВыслугуЛет(Показатель, Перечисления.КатегорииСтажа.ВыслугаЛетНаВоеннойСлужбе);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаСтажСлужбы");
	КонецЕсли;
	
	// ПроцентНадбавкиЗаКласснуюКвалификацию
	Если СоздаватьПоказатели И ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаКласснуюКвалификацию";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за классную квалификацию'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаКласснуюКвалификацию");
	КонецЕсли;
	
	// ПроцентНадбавкиЗаКвалификационноеЗвание
	Если СоздаватьПоказатели И Не ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаКвалификационноеЗвание";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за квалификационное звание'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаКвалификационноеЗвание");
	КонецЕсли;
	
	// ПроцентНадбавкиЗаВыполнениеЗадачСвязанныхСРиском
	Если СоздаватьПоказатели Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаВыполнениеЗадачСвязанныхСРиском";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за вып. задач связ. с риском'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаВыполнениеЗадачСвязанныхСРиском");
	КонецЕсли;

	// СохраняемоеДенежноеДовольствие
	СоздатьПоказательСохраняемоеДенежноеДовольствие(СоздаватьПоказатели, ПараметрыПланаВидовРасчета, СозданныеЭлементы);
	СоздатьПоказателиОплатыСверхурочныхРабот(СоздаватьПоказатели, ПараметрыПланаВидовРасчета, СозданныеЭлементы);
	
	ГосударственнаяСлужба.СоздатьПоказательПроцентНадбавкиЗаОсобыеУсловияСлужбы(ПараметрыПланаВидовРасчета, СозданныеЭлементы, СоздаватьПоказателиГосслужбы);
	ГосударственнаяСлужба.СоздатьПоказательПроцентНадбавкиЗаСекретность(ПараметрыПланаВидовРасчета, СозданныеЭлементы, СоздаватьПоказателиГосслужбы);
	
КонецПроцедуры

Процедура ДополнитьОписаниеОтбораНачисленийБазаРКиСН(ОтборБазовых) Экспорт

	Если Не Константы.ИспользоватьВоеннуюСлужбу.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ОтношениеКДенежномуДовольствию = Новый Массив;
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскойДолжности);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскомуЗванию);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ДолжностнойОклад);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоСпециальномуЗванию);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаВыслугуЛет);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаСтажСлужбы);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаКласснуюКвалификацию);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаКвалификационноеЗвание);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаОсобыеУсловияСлужбы);
	ОтношениеКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаСекретность);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОтношениеКДенежномуДовольствию", ОтношениеКДенежномуДовольствию);
	
	ОтборБазовых.Вставить("ОтборПоДополнительнымСвойствамНачисления", Отбор);

КонецПроцедуры

Функция ВидРасчетаСоответствуетОтбору(ВидРасчетаОбъект, Отбор) Экспорт

	Если Не Константы.ИспользоватьВоеннуюСлужбу.Получить() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Отбор.Свойство("ОтборПоДополнительнымСвойствамНачисления") Тогда
		
		ДополнительныйОтбор = Отбор.ОтборПоДополнительнымСвойствамНачисления;
		
		Если ВидРасчетаОбъект.ДополнительныеСвойства.Свойство("СвойстваНачисленийГосударственныхСлужащих") Тогда
			
			СвойстваНачисления = ВидРасчетаОбъект.ДополнительныеСвойства.СвойстваНачисленийГосударственныхСлужащих;
			Если Не СвойстваНачисления.ЯвляетсяДенежнымДовольствием Тогда  
				Возврат Истина;
			КонецЕсли;
			
			Для Каждого ЭлементОтбора Из ДополнительныйОтбор Цикл
				ПолеОтбора = ЭлементОтбора.Ключ;
				ЗначениеОтбора = ЭлементОтбора.Значение;
				Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
					Если ЗначениеОтбора.Найти(СвойстваНачисления[ПолеОтбора]) = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если СвойстваНачисления[ПолеОтбора] <> ЗначениеОтбора Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции 

Процедура СвойстваНачисленийОтношениеКДенежномуДовольствиюПриИзменении(Форма) Экспорт

	ЗаполнитьЗначенияСвойств(Форма.СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение, Форма.СвойстваНачисленийГосударственныхСлужащих,"ОтношениеКДенежномуДовольствию");
	Форма.ЗаполнитьСвязиНачисления();
	
КонецПроцедуры

Процедура УстановитьДополнительныеСвойстваНачисления(ВидРасчетаОбъект, Описание) Экспорт

	Если Не Константы.ИспользоватьВоеннуюСлужбу.Получить() Тогда
		Возврат;
	КонецЕсли;

	СтруктураСвойств = Неопределено;
	Если ТипЗнч(Описание) = Тип("Структура") Тогда
		Описание.Свойство("СвойстваНачисленийГосударственныхСлужащих", СтруктураСвойств);
	ИначеЕсли ТипЗнч(Описание) = Тип("УправляемаяФорма") Тогда
		Если Описание.Элементы.Найти("ЯвляетсяДенежнымСодержанием") <> Неопределено Тогда
			СтруктураСвойств = Описание.РеквизитФормыВЗначение("СвойстваНачисленийГосударственныхСлужащих");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураСвойств <>  Неопределено Тогда
		ВидРасчетаОбъект.ДополнительныеСвойства.Вставить("СвойстваНачисленийГосударственныхСлужащих", СтруктураСвойств);	
	КонецЕсли;

КонецПроцедуры

Функция ДополнительныеСвойстваНачислений(ОтношениеКДенежномуДовольствию,ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим)

	ДополнительныеСвойстваНачислений = Новый Структура("ЯвляетсяДенежнымДовольствием,ОтношениеКДенежномуДовольствию,ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим");
	ДополнительныеСвойстваНачислений.ЯвляетсяДенежнымДовольствием = Истина;
	ДополнительныеСвойстваНачислений.ОтношениеКДенежномуДовольствию = ОтношениеКДенежномуДовольствию;
	ДополнительныеСвойстваНачислений.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим = ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим;
	
	Возврат ДополнительныеСвойстваНачислений;

КонецФункции 

// Вычисляет значение показателей ОкладПоВоинскомуЗванию, ОкладПоСпециальномуЗванию.
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяОкладЗаВоинскоеСпециальноеЗвание(ДополнительныеПоказатели) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	// Вычисляемые показатели
	ОкладПоВоинскомуЗванию = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоВоинскомуЗванию");
	ОкладПоСпециальномуЗванию = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоСпециальномуЗванию");
	ПоказателиДляРасчета = Новый Массив;
	ПоказателиДляРасчета.Добавить(ОкладПоВоинскомуЗванию);
	ПоказателиДляРасчета.Добавить(ОкладПоСпециальномуЗванию);
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));

	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.ЗначениеОпределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПоказателиДляРасчета.Найти(СтрокаПоказателей.Показатель) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = СтрокаПоказателей.Сотрудник;
		НоваяСтрока.ДатаНачала = СтрокаПоказателей.ДатаНачала;
		НоваяСтрока.Показатель = СтрокаПоказателей.Показатель;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.ДатаНачала КАК Период,
	|	ИсходныеДанные.Показатель
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.Показатель,
	|	Сотрудники.ФизическоеЛицо,
	|	ИсходныеДанные.Период
	|ПОМЕСТИТЬ ВТИсходныеДанныеСФизическимЛицом
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ИсходныеДанные.Сотрудник = Сотрудники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПериодыФизическихЛиц.Период КАК Период,
	|	МАКСИМУМ(ВоинскиеСпециальныеЗвания.Период) КАК ПериодДвижения
	|ПОМЕСТИТЬ ВТДатыПоследнихДвижений
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИсходныеДанныеСФизическимЛицом.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ИсходныеДанныеСФизическимЛицом.Период КАК Период
	|	ИЗ
	|		ВТИсходныеДанныеСФизическимЛицом КАК ИсходныеДанныеСФизическимЛицом) КАК ПериодыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВоинскиеСпециальныеЗванияФизическихЛиц КАК ВоинскиеСпециальныеЗвания
	|		ПО ПериодыФизическихЛиц.ФизическоеЛицо = ВоинскиеСпециальныеЗвания.ФизическоеЛицо
	|			И ПериодыФизическихЛиц.Период >= ВоинскиеСпециальныеЗвания.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыФизическихЛиц.ФизическоеЛицо,
	|	ПериодыФизическихЛиц.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ПериодДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДвижений.ФизическоеЛицо,
	|	ДатыПоследнихДвижений.Период,
	|	ВоинскиеСпециальныеЗванияФизическихЛиц.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание
	|ПОМЕСТИТЬ ВТВоинскоеСпециальноеЗваниеФизическихЛиц
	|ИЗ
	|	ВТДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВоинскиеСпециальныеЗванияФизическихЛиц КАК ВоинскиеСпециальныеЗванияФизическихЛиц
	|		ПО ДатыПоследнихДвижений.ФизическоеЛицо = ВоинскиеСпециальныеЗванияФизическихЛиц.ФизическоеЛицо
	|			И ДатыПоследнихДвижений.ПериодДвижения = ВоинскиеСпециальныеЗванияФизическихЛиц.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДатыПоследнихДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыЗваний.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание,
	|	ПериодыЗваний.Период,
	|	МАКСИМУМ(ОкладыПоВоинскимСпециальнымЗваниям.Период) КАК ПериодДвижения
	|ПОМЕСТИТЬ ВТДатыПоследнихДвижений
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВоинскоеСпециальноеЗваниеФизическихЛиц.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание,
	|		ВоинскоеСпециальноеЗваниеФизическихЛиц.Период КАК Период
	|	ИЗ
	|		ВТВоинскоеСпециальноеЗваниеФизическихЛиц КАК ВоинскоеСпециальноеЗваниеФизическихЛиц) КАК ПериодыЗваний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОкладыПоВоинскимСпециальнымЗваниям КАК ОкладыПоВоинскимСпециальнымЗваниям
	|		ПО ПериодыЗваний.ВоинскоеСпециальноеЗвание = ОкладыПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание
	|			И ПериодыЗваний.Период >= ОкладыПоВоинскимСпециальнымЗваниям.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыЗваний.ВоинскоеСпециальноеЗвание,
	|	ПериодыЗваний.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВоинскоеСпециальноеЗвание,
	|	ПериодДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДвижений.ВоинскоеСпециальноеЗвание КАК ВоинскоеСпециальноеЗвание,
	|	ДатыПоследнихДвижений.Период КАК Период,
	|	ОкладыПоВоинскимСпециальнымЗваниям.Размер КАК РазмерПоказателя
	|ПОМЕСТИТЬ ВТРазмерыПоказателей
	|ИЗ
	|	ВТДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОкладыПоВоинскимСпециальнымЗваниям КАК ОкладыПоВоинскимСпециальнымЗваниям
	|		ПО ДатыПоследнихДвижений.ВоинскоеСпециальноеЗвание = ОкладыПоВоинскимСпециальнымЗваниям.ВоинскоеСпециальноеЗвание
	|			И ДатыПоследнихДвижений.ПериодДвижения = ОкладыПоВоинскимСпециальнымЗваниям.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВоинскоеСпециальноеЗвание,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.Показатель,
	|	ВоинскоеСпециальноеЗваниеФизическихЛиц.Период КАК ДатаНачала,
	|	РазмерыПоказателей.РазмерПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ВТВоинскоеСпециальноеЗваниеФизическихЛиц КАК ВоинскоеСпециальноеЗваниеФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРазмерыПоказателей КАК РазмерыПоказателей
	|		ПО ВоинскоеСпециальноеЗваниеФизическихЛиц.ВоинскоеСпециальноеЗвание = РазмерыПоказателей.ВоинскоеСпециальноеЗвание
	|			И ВоинскоеСпециальноеЗваниеФизическихЛиц.Период = РазмерыПоказателей.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходныеДанныеСФизическимЛицом КАК ИсходныеДанные
	|		ПО ВоинскоеСпециальноеЗваниеФизическихЛиц.ФизическоеЛицо = ИсходныеДанные.ФизическоеЛицо
	|			И ВоинскоеСпециальноеЗваниеФизическихЛиц.Период = ИсходныеДанные.Период";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ОтборСтрок = Новый Структура("Сотрудник, Показатель, ДатаНачала, ЗначениеОпределено");
	ОтборСтрок.Вставить("ЗначениеОпределено", Ложь);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		СтрокиПоказателяСотрудника = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаПоказателяСотрудника Из СтрокиПоказателяСотрудника Цикл
			СтрокаПоказателяСотрудника.Значение = Выборка.ЗначениеПоказателя;
			СтрокаПоказателяСотрудника.ЗначениеОпределено = Истина;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ОсновныеНачисленияДенежногоДовольствия(НеИсключатьНачисленияВАрхиве = Ложь) Экспорт
	
	// НеИсключатьНачисленияВАрхиве
	// Исключаем начисления в архиве когда нужен список актуальных начислений,
	// например для автоподстановки в список плановых начислений.
	
	ОсновныеНачисления = Новый Структура;
	ОсновныеНачисления.Вставить("ОкладыПоДолжности", Новый Массив);
	ОсновныеНачисления.Вставить("ОкладыЗаЗвание", Новый Массив);
	ОсновныеНачисления.Вставить("НадбавкиЗаВыслугуЛет", Новый Массив);
	
	СписокОтношенийКДенежномуДовольствию = Новый Массив;
	СписокОтношенийКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ДолжностнойОклад);
	СписокОтношенийКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскойДолжности);
	СписокОтношенийКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскомуЗванию);
	СписокОтношенийКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоСпециальномуЗванию);
	СписокОтношенийКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаВыслугуЛет);
	СписокОтношенийКДенежномуДовольствию.Добавить(Перечисления.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаСтажСлужбы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтношенийКДенежномуДовольствию", СписокОтношенийКДенежномуДовольствию);
	Запрос.УстановитьПараметр("НеИсключатьНачисленияВАрхиве", НеИсключатьНачисленияВАрхиве);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвойстваНачисленийГосударственныхСлужащих.Начисление,
		|	СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию КАК ОтношениеКДенежномуДовольствию
		|ИЗ
		|	РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
		|ГДЕ
		|	СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию В(&СписокОтношенийКДенежномуДовольствию)
		|	И (&НеИсключатьНачисленияВАрхиве
		|			ИЛИ НЕ СвойстваНачисленийГосударственныхСлужащих.Начисление.ВАрхиве)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СвойстваНачисленийГосударственныхСлужащих.Начисление.РеквизитДопУпорядочивания";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОтношениеКДенежномуДовольствию = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ДолжностнойОклад
				Или Выборка.ОтношениеКДенежномуДовольствию = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскойДолжности Тогда
				
				Ключ = "ОкладыПоДолжности";
				
			ИначеЕсли Выборка.ОтношениеКДенежномуДовольствию = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскомуЗванию
				Или Выборка.ОтношениеКДенежномуДовольствию = Перечисления.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоСпециальномуЗванию Тогда
				
				Ключ = "ОкладыЗаЗвание";
				
			Иначе
				Ключ = "НадбавкиЗаВыслугуЛет";
			КонецЕсли;
			
			ОсновныеНачисления[Ключ].Добавить(Выборка.Начисление);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат ОсновныеНачисления;
	
КонецФункции

// Описание таблицы НачисленияЗаПериод см РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления.
Процедура ДозаполнитьНачисленияДенежногоДовольствия(НачисленияЗаПериод) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Если НачисленияЗаПериод.Колонки.Найти("ЭтоПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей") <> Неопределено Тогда
		
		НачисленияЗаПериод.Индексы.Добавить("ЭтоПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей");
		Отбор = Новый Структура("ЭтоПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей", Истина);
		НайденныеСтроки = НачисленияЗаПериод.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНачислений = НачисленияЗаПериод.СкопироватьКолонки();
		ТаблицаНачислений.Колонки.Добавить("ИндексСтрокиИсходнойТаблицы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
		
		ИндексыСтрок = Новый Массив;
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ИндексСтрокиИсходнойТаблицы = НачисленияЗаПериод.Индекс(СтрокаТЗ);
		КонецЦикла;
		
		ТаблицаНачислений.Сортировать("Сотрудник,Начисление,ДатаНачала");
		СравниваемыеКолонки = Новый Массив;
		СравниваемыеКолонки.Добавить("Сотрудник");
		СравниваемыеКолонки.Добавить("Начисление");
		
		СтрокиКУдалению = Новый Массив;
		
		ПредыдущаяСтрока = Неопределено;
		КоличествоСтрок = ТаблицаНачислений.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл 
			
			ИндексСтроки = Сч - 1;
			ТекСтрока = ТаблицаНачислений[ИндексСтроки];
			
			Если ПредыдущаяСтрока = Неопределено Тогда 
				ПредыдущаяСтрока = ТекСтрока;
				Продолжить;
			КонецЕсли;
			
			Если НачалоДня(ПредыдущаяСтрока["ДатаОкончания"]) + 86400 = НачалоДня(ТекСтрока["ДатаНачала"]) Тогда
				Если НачалоМесяца(ТекСтрока["ДатаНачала"]) = НачалоМесяца(ПредыдущаяСтрока["ДатаОкончания"]) Тогда 
					ОбъединитьСтроки = Истина;
					Для Каждого ИмяКолонки Из СравниваемыеКолонки Цикл 
						Если ТекСтрока[ИмяКолонки] <> ПредыдущаяСтрока[ИмяКолонки] Тогда
							ОбъединитьСтроки = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если ОбъединитьСтроки Тогда 
						ТекСтрока["ДатаНачала"] = ПредыдущаяСтрока["ДатаНачала"];
						СтрокиКУдалению.Добавить(НачисленияЗаПериод[ПредыдущаяСтрока.ИндексСтрокиИсходнойТаблицы]);
						ТекСтрокаИсходнойТаблицы = НачисленияЗаПериод[ТекСтрока.ИндексСтрокиИсходнойТаблицы];
						ТекСтрокаИсходнойТаблицы["ДатаНачала"] = ТекСтрока["ДатаНачала"];
						ТекСтрокаИсходнойТаблицы["НачалоБазовогоПериода"] = ТекСтрока["ДатаНачала"];
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			ПредыдущаяСтрока = ТекСтрока;
			
		КонецЦикла;
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			НачисленияЗаПериод.Удалить(СтрокаКУдалению);	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаСвойствамиНачислений(ТекстЗапроса, НачисленияЗаПериод, ИменаПолейДляЗаполнения) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиГосударственнойСлужбы = ГосударственнаяСлужба.НастройкиГосударственнойСлужбы();
	Если НастройкиГосударственнойСлужбы.ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
		Пакет = ПакетЗапросов[ПакетЗапросов.Количество()-1];
		
		ВыражениеВыбора = Новый ВыражениеСхемыЗапроса("ЕстьNULL(СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием, Ложь)");
		Для каждого ОператорВложенногоЗапроса Из Пакет.Операторы Цикл
			
			ОператорВложенногоЗапроса.Источники.Добавить("РегистрСведений.СвойстваНачисленийГосударственныхСлужащих", "СвойстваНачисленийГосударственныхСлужащих");
			УсловиеСоединения = "ДанныеНачислений.Начисление = СвойстваНачисленийГосударственныхСлужащих.Начисление
			|И СвойстваНачисленийГосударственныхСлужащих.ОтношениеКДенежномуДовольствию = Значение(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей)";
			
			ОператорВложенногоЗапроса.Источники[0].Соединения.Добавить("СвойстваНачисленийГосударственныхСлужащих", УсловиеСоединения);
			ОператорВложенногоЗапроса.ВыбираемыеПоля.Добавить(Строка(ВыражениеВыбора));
			
		КонецЦикла;
		
		Для каждого Колонка Из Пакет.Колонки Цикл
			Если ВРег(Колонка.Поля[0]) = ВРег(ВыражениеВыбора) Тогда
				Колонка.Псевдоним = "ЭтоПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		ИменаПолейДляЗаполнения = "ЭтоПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей";
		НачисленияЗаПериод.Колонки.Добавить("ЭтоПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	Если НастройкиГосударственнойСлужбы.ИспользоватьРасчетДенежногоДовольствияВоеннослужащих И ЗначениеЗаполнено(ГрафикРаботыКалендарныеДни()) Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
		Пакет = ПакетЗапросов[ПакетЗапросов.Количество()-1];
		
		ВыражениеВыбораГрафик = Новый ВыражениеСхемыЗапроса("ДанныеНачислений.ГрафикРаботы");
		НовоеВыражениеВыбораГрафик = Новый ВыражениеСхемыЗапроса("ЕСТЬNULL(ДанныеНачислений.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.КалендарныеДни))");
		ВыражениеВыбораГрафикНорма = Новый ВыражениеСхемыЗапроса("ДанныеНачислений.ГрафикРаботыНорма");
		НовоеВыражениеВыбораГрафикНорма = Новый ВыражениеСхемыЗапроса("ЕСТЬNULL(ДанныеНачислений.ГрафикРаботыНорма, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.КалендарныеДни))");
		
		Для каждого Оператор Из Пакет.Операторы Цикл
			
			Для каждого ВыбираемоеПоле Из Оператор.ВыбираемыеПоля Цикл
				
				Если ВыбираемоеПоле = ВыражениеВыбораГрафик Тогда
					Оператор.ВыбираемыеПоля.Установить(Оператор.ВыбираемыеПоля.Индекс(ВыбираемоеПоле),НовоеВыражениеВыбораГрафик);
				КонецЕсли;
				
				Если ВыбираемоеПоле = ВыражениеВыбораГрафикНорма Тогда
					Оператор.ВыбираемыеПоля.Установить(Оператор.ВыбираемыеПоля.Индекс(ВыбираемоеПоле),НовоеВыражениеВыбораГрафикНорма);
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;
		
		Для каждого Колонка Из Пакет.Колонки Цикл
			Если ВРег(Колонка.Поля[0]) = ВРег(НовоеВыражениеВыбораГрафик) Тогда
				Колонка.Псевдоним = "ГрафикРаботы";
			ИначеЕсли ВРег(Колонка.Поля[0]) = ВРег(НовоеВыражениеВыбораГрафикНорма) Тогда
				Колонка.Псевдоним = "ГрафикРаботыНорма";
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;

КонецПроцедуры

// Описание таблицы НачисленияЗаПериод см РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления.
Процедура ПриЗаполненииСведенийНачисленийДляРасчета(Начисления) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиГосударственнойСлужбы = ГосударственнаяСлужба.НастройкиГосударственнойСлужбы();
	
	ГрафикРаботыКалендарныеДни = ГрафикРаботыКалендарныеДни();
	Если НастройкиГосударственнойСлужбы.ИспользоватьРасчетДенежногоДовольствияВоеннослужащих И ЗначениеЗаполнено(ГрафикРаботыКалендарныеДни) Тогда
		Для Каждого СтрокаНачислений Из Начисления Цикл
			Если Не ЗначениеЗаполнено(СтрокаНачислений.ГрафикРаботы) Тогда
				СтрокаНачислений.ГрафикРаботы = ГрафикРаботыКалендарныеДни;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаНачислений.ГрафикРаботыНорма) Тогда
				СтрокаНачислений.ГрафикРаботыНорма = ГрафикРаботыКалендарныеДни;
			КонецЕсли; 	
			Если Не ЗначениеЗаполнено(СтрокаНачислений.ОбщийГрафик) Тогда
				СтрокаНачислений.ОбщийГрафик = ГрафикРаботыКалендарныеДни;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

Функция ГрафикРаботыКалендарныеДни() Экспорт

	КалендарныеДни = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ГрафикиРаботыСотрудников.КалендарныеДни");
	Если КалендарныеДни <> Неопределено Тогда
		Возврат КалендарныеДни;
	КонецЕсли;
	
	КалендарныеДни = Справочники.ГрафикиРаботыСотрудников.СоздатьЭлемент();
	КалендарныеДни.ИмяПредопределенныхДанных = "КалендарныеДни";
	КалендарныеДни.ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	КалендарныеДни.ДлительностьРабочейНедели = 40;
	КалендарныеДни.УчитыватьПраздники = Ложь;
	КалендарныеДни.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафиковРаботыСотрудников.ПоНеделям;
	ВидВремениЯвка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	СтрокаВидВремени = КалендарныеДни.ВидыВремени.Добавить();
	СтрокаВидВремени.ВидВремени = ВидВремениЯвка;
	Для НомерДня = 1 По 7 Цикл
		СтрокаШаблона = КалендарныеДни.ШаблонЗаполнения.Добавить();
		СтрокаШаблона.ДеньВключенВГрафик = Истина;
		СтрокаРасписания = КалендарныеДни.ДанныеОРабочихЧасах.Добавить();
		СтрокаРасписания.ВидВремени = ВидВремениЯвка;
		СтрокаРасписания.НомерДняЦикла = НомерДня;
		СтрокаРасписания.Часов = 8;
	КонецЦикла;
	КалендарныеДни.Наименование = НСтр("ru = 'Календарные дни'");
	
	КалендарныеДни.ОбменДанными.Загрузка = Истина;
	КалендарныеДни.Записать();
	
	Для НомерГода = 2014 По 2020 Цикл
		ДанныеГрафика = КалендарныеДни.ДанныеГрафикаПоНастройкам(НомерГода);
		УчетРабочегоВремениРасширенный.ЗаписатьДанныеГрафика(КалендарныеДни.Ссылка, ДанныеГрафика, НомерГода);
	КонецЦикла;
	
	Возврат КалендарныеДни.Ссылка;

КонецФункции

Процедура УстановитьЗависимыеНастройкиИспользоватьРасчетДенежногоДовольствияВоеннослужащих(НаборЗаписей, Отказ) Экспорт

	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей[0].ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ГрафикРаботыКалендарныеДни();
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма, ОписаниеТаблицыНачислений) Экспорт
	
	ЭлементФормыНачисление = Форма.Элементы.Найти(ОписаниеТаблицыНачислений.ИмяТаблицы + ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета);
		
	Если ЭлементФормыНачисление <> Неопределено Тогда
		
		ПараметрыВыбораНачислений = Новый Массив;
		Для каждого ПараметрВыбора Из ЭлементФормыНачисление.ПараметрыВыбора Цикл
			Если ПараметрВыбора.Имя = "Отбор.ЯвляетсяДенежнымДовольствием" Тогда
				Продолжить;
			КонецЕсли; 
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбора);
		КонецЦикла;
		
		ПараметрВыбораНачислений = Новый ПараметрВыбора("Отбор.ЯвляетсяДенежнымДовольствием", Истина);
		ПараметрыВыбораНачислений.Добавить(ПараметрВыбораНачислений);
		ЭлементФормыНачисление.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНачислений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьОписаниеТаблицНачисленийДляЗаполненияПериодаДействия(ОписаниеТаблиц) Экспорт
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧасти;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧасти;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧасти;
	Описание.ИмяТабличнойЧасти = "Пособия";
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧасти;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧастиСписком;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧастиСписком;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧастиСписком;
	Описание.ИмяТабличнойЧасти = "Пособия";
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧастиСписком;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	
КонецПроцедуры

Процедура ДополнитьОписаниеТаблицПерерасчетаДляЗаполненияФиксСторно(ОписаниеТаблиц) Экспорт
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧасти;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписаниеТаблиц.Добавить(Описание);
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧасти;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	ОписаниеТаблиц.Добавить(Описание);
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧастиСписком;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписаниеТаблиц.Добавить(Описание);
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧастиСписком;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	ОписаниеТаблиц.Добавить(Описание);
	
КонецПроцедуры

Процедура ДополнитьОписаниеТаблицДляЗаполненияТарифаПростоя(ОписаниеТаблиц) Экспорт
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧасти;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписаниеТаблиц.Добавить(Описание);
	
	Описание = РасчетЗарплатыРасширенный.ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧастиСписком;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписаниеТаблиц.Добавить(Описание);
	
КонецПроцедуры

Процедура ДополнитьОписаниеТаблицДляОбновленияГрафиковРаботы(ОписаниеТаблиц) Экспорт
	
	ТабличныеЧасти = Новый Соответствие;
	ОписаниеТаблиц.Вставить(Метаданные.Документы.ИсключениеИзСписковЧасти, ТабличныеЧасти);
	ТабличныеЧасти.Вставить(Метаданные.Документы.ИсключениеИзСписковЧасти.ТабличныеЧасти.Начисления, УчетРабочегоВремениРасширенный.ОписаниеТаблицыНачислений());
	ТабличныеЧасти.Вставить(Метаданные.Документы.ИсключениеИзСписковЧасти.ТабличныеЧасти.НачисленияПерерасчет, УчетРабочегоВремениРасширенный.ОписаниеТаблицыНачислений());
	ТабличныеЧасти.Вставить(Метаданные.Документы.ИсключениеИзСписковЧасти.ТабличныеЧасти.Пособия, УчетРабочегоВремениРасширенный.ОписаниеТаблицыНачислений());
	ТабличныеЧасти.Вставить(Метаданные.Документы.ИсключениеИзСписковЧасти.ТабличныеЧасти.ПособияПерерасчет, УчетРабочегоВремениРасширенный.ОписаниеТаблицыНачислений());
	
КонецПроцедуры

Процедура СоздатьНачислениеОтпускПоБеременностиИРодамВоеннослужащего(СоздаватьНачисления, КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления; 
				
	Если КоллекторНачислений = Неопределено Тогда
		КоллекторНачислений = Новый Соответствие;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамВоеннослужащего;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОБРВС'");
	Описание.Наименование			= НСтр("ru = 'Отпуск по беременности и родам военнослужащего'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Отп. по берем. в.с.'");
	
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьНачислениеОтпускПоУходуЗаРебенкомДоПолутораЛетВоеннослужащего(СоздаватьНачисления, КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления; 
				
	Если КоллекторНачислений = Неопределено Тогда
		КоллекторНачислений = Новый Соответствие;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	КонецЕсли;
				
	// Безусловно создаем отпуск по уходу за ребенком до 1.5 лет.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РВС15'");
	Описание.Наименование			= НСтр("ru = 'Пособие по уходу за ребенком до полутора лет военнослужащим'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб. до 1,5 в.с.'");	
	
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьПоказательСохраняемоеДенежноеДовольствие(СоздаватьПоказатели, ПараметрыПланаВидовРасчета = Неопределено, СозданныеЭлементы = Неопределено) Экспорт
	
	ПоказателиРасчетаЗарплатыМенеджер = Справочники.ПоказателиРасчетаЗарплаты;
	
	Если ПараметрыПланаВидовРасчета = Неопределено Тогда
		ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	КонецЕсли;
	
	Если СозданныеЭлементы = Неопределено Тогда 
		СозданныеЭлементы = ПоказателиРасчетаЗарплатыМенеджер.СсылкиПоказателиРасчетаЗарплатыНачальнойНастройкиПрограммы();
	КонецЕсли;
	
	ИспользоватьРасчетДенежногоДовольствияВоеннослужащих = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия");
		
	
	Если СоздаватьПоказатели И ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "СохраняемоеДенежноеДовольствие";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Сохраняемое денежное довольствие'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Сохр. д. довольствие'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.Точность = 2;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "СохраняемоеДенежноеДовольствие");
	КонецЕсли;	

КонецПроцедуры

Процедура СвойстваНачисленийВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащимПриИзменении(Форма) Экспорт

	ЗаполнитьЗначенияСвойств(Форма.СвойстваНачисленийГосударственныхСлужащихПрежнееЗначение, Форма.СвойстваНачисленийГосударственныхСлужащих,"ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим");
	Форма.ЗаполнитьСвязиНачисления();
	
КонецПроцедуры

Процедура ОбновитьДанныеСохраняемогоДенежногоДовольствияДокумента(СтруктураОбъекта) Экспорт
			
	Сотрудник 			= СтруктураОбъекта.Сотрудник;
	ДокументСсылка 		= СтруктураОбъекта.Ссылка;
	ДенежноеДовольствие = СтруктураОбъекта.ДенежноеДовольствие;
	Организация 		= СтруктураОбъекта.Организация;
	ДатаНачалаСобытия 	= СтруктураОбъекта.ДатаНачалаСобытия;
	ПериодРегистрации 	= СтруктураОбъекта.ПериодРегистрации;
	
	Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
		СотрудникиДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	Иначе
		СотрудникиДокумента = Сотрудник;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Сотрудник");
		
	Для каждого Сотрудник Из СотрудникиДокумента Цикл
		СтруктураПоиска.Сотрудник = Сотрудник;
		УдаляемыеСтроки = ДенежноеДовольствие.НайтиСтроки(СтруктураПоиска);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ДенежноеДовольствие.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
	|				ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием, ЛОЖЬ)
	|	КОНЕЦ КАК ЯвляетсяДенежнымДовольствием
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
	|		ПО Начисления.Ссылка = СвойстваНачисленийГосударственныхСлужащих.Начисление";
	ЯвляетсяДенежнымДовольствием = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЯвляетсяДенежнымДовольствием.Вставить(Выборка.Начисление, Выборка.ЯвляетсяДенежнымДовольствием);
	КонецЦикла;
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, Организация);
	МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
	МенеджерРасчета.НастройкиРасчета.ИсключатьРанееОплаченныеПериоды = Ложь;
	СтрокиНачислений = МенеджерРасчета.НачисленияЗарплатыЗаПериод(СотрудникиДокумента, ДатаНачалаСобытия, КонецДня(ДатаНачалаСобытия));
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиНачислений, "Начисление");
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
		
			
	Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
			
		Если ЯвляетсяДенежнымДовольствием[СтрокаНачислений.Начисление] Тогда
			
			НоваяСтрока = ДенежноеДовольствие.Добавить();
			СтрокаРезультатаРасчетаВДанныеФормы(НоваяСтрока, СтрокаНачислений, ВидыРасчетаИнфо);
			НоваяСтрока.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтроки;
			
		КонецЕсли;
			
	КонецЦикла;
				
КонецПроцедуры

Функция РассчитатьСохраняемоеДенежноеДовольствие(ИсходныеДанныеДляРасчета) Экспорт

	Сотрудник 			= ИсходныеДанныеДляРасчета.Сотрудник;	
	Организация 		= ИсходныеДанныеДляРасчета.Организация;
	ПериодРасчета 		= ИсходныеДанныеДляРасчета.ПериодРасчета;
	ДанныеОНачислениях 	= ИсходныеДанныеДляРасчета.ДанныеОНачислениях;
	
	БазаДляРКиСН = Новый Соответствие;
	ТаблицаРКиСН = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	ТаблицаРКиСН.Колонки.Добавить("ВидРасчетаИнфо");
	
	ИменаКадровыхДанных = "Подразделение,ГрафикРаботы";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ИменаКадровыхДанных, ИсходныеДанныеДляРасчета.ДатаНачалаСобытия, , Ложь);
	
	СохраняемоеДенежноеДовольствие = 0;
	ДенежноеДовольствиеСотрудников = Новый Соответствие();
	
	СоответствиеВременныхСотрудников = Новый Соответствие();
	// сохраняемые начисления
	Если ДанныеОНачислениях.Количество() > 0 Тогда
		
		ИсходныеСтроки      = Новый Массив;
		
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРасчета, Организация);
		
		ВидыРасчета = Новый Массив;
		ОтборПоСотруднику = Новый Структура("Сотрудник");
		
		Для Каждого СтрокаСотрудника Из КадровыеДанные Цикл
			
			ВременныйСотрудник 			= Справочники.Сотрудники.ПолучитьСсылку();
			СоответствиеВременныхСотрудников.Вставить(ВременныйСотрудник, СтрокаСотрудника.Сотрудник);
			ЗаполнитьЗначенияСвойств(ОтборПоСотруднику, СтрокаСотрудника);
			ДанныеОНачисленияхСотрудника 	= ДанныеОНачислениях.НайтиСтроки(ОтборПоСотруднику);
			СтрокаСотрудника.Сотрудник 		= ВременныйСотрудник;
			
			Для каждого СтрокаНачислений Из ДанныеОНачисленияхСотрудника Цикл
				
				ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
				Если ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
					Или ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
					НоваяСтрока = ТаблицаРКиСН.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
					НоваяСтрока.ВидРасчетаИнфо = ВидРасчетаИнфо;
					НоваяСтрока.ИдентификаторСтроки = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
				Иначе
					
					ИсходныеСтроки.Добавить(СтрокаНачислений);
					ВидыРасчета.Добавить(СтрокаНачислений.Начисление);
					
					НоваяСтрока = МенеджерРасчета.СтрокаТаблицыНачислений();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
					НоваяСтрока.Сотрудник 		= СтрокаСотрудника.Сотрудник;
					НоваяСтрока.ДатаНачала 		= НачалоМесяца(ПериодРасчета);
					НоваяСтрока.ДатаОкончания 	= КонецМесяца(ПериодРасчета);
					Если ВидРасчетаИнфо.ТребуетсяРасчетБазы
						И ВидРасчетаИнфо.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
						
						НоваяСтрока.НачалоБазовогоПериода = НоваяСтрока.ДатаНачала;
						НоваяСтрока.ОкончаниеБазовогоПериода = НоваяСтрока.ДатаОкончания;
						
					КонецЕсли;
					
					РасчетЗарплатыРасширенныйФормы.ПоказателиВМенеджерРасчета(НоваяСтрока, СтрокаНачислений, "Начисления");
					
					НоваяСтрока.Подразделение     = СтрокаСотрудника.Подразделение;
					НоваяСтрока.ГрафикРаботы 	  = СтрокаСотрудника.ГрафикРаботы;
					НоваяСтрока.ОбщийГрафик 	  = СтрокаСотрудника.ГрафикРаботы;
					НоваяСтрока.ГрафикРаботыНорма = СтрокаСотрудника.ГрафикРаботы;
					НоваяСтрока.ФиксРасчетВремени = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;	
			
		ПоказателиУчетаВремени = ПоказателиУчетаВремени();
		СвойстваНачислений = СвойстваНачислений(ВидыРасчета);
		ПоказателиСотрудников = ТаблицаПоказателейПоТаблицеНачисления(МенеджерРасчета.Зарплата.Начисления, СвойстваНачислений, ПоказателиУчетаВремени);
		
		
		ГрафикиРаботы  = КадровыеДанные.Скопировать(,"Сотрудник,ГрафикРаботы"); 
		ДанныеГрафиковСотрудников = ДанныеГрафиковСотрудников(ГрафикиРаботы, Год(ПериодРасчета));
		
		ЗаполнитьПоказателиУчетаВремениСотрудников(ПоказателиСотрудников, ДанныеГрафиковСотрудников, ПоказателиУчетаВремени);
		
		СтруктураПоискаПоказателей = Новый Структура("Сотрудник,Показатель");
		Для каждого СтрокаТаблицыРасчета Из МенеджерРасчета.Зарплата.Начисления Цикл
			
			Для Каждого ОписаниеПоказателя Из СвойстваНачислений[СтрокаТаблицыРасчета.Начисление].Показатели Цикл
				
				СтруктураПоискаПоказателей.Сотрудник  = СтрокаТаблицыРасчета.Сотрудник;
				СтруктураПоискаПоказателей.Показатель = ОписаниеПоказателя.Показатель;
				СтрокиПоказателей = ПоказателиСотрудников.НайтиСтроки(СтруктураПоискаПоказателей);	
				Если СтрокиПоказателей.Количество() > 0 И СтрокиПоказателей[0].ЗначениеЗаполнено = Истина Тогда
					МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(СтрокаТаблицыРасчета, СтрокиПоказателей[0].Показатель, СтрокиПоказателей[0].Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Истина;
		МенеджерРасчета.РассчитатьЗарплату();
		
		Для каждого УдаляемаяСтрока Из ИсходныеСтроки Цикл
			ДанныеОНачислениях.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		БазовыеВидыРасчета = БазовыеВидыРасчетаДляРКиСН();
				
		СохраняемоеДенежноеДовольствие = 0;
		ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
		Для каждого СтрокаРасчета Из МенеджерРасчета.Зарплата.Начисления Цикл
			НоваяСтрока = ДанныеОНачислениях.Добавить();
			СтрокаРезультатаРасчетаВДанныеФормы(НоваяСтрока, СтрокаРасчета, ВидыРасчетаИнфо);
			НоваяСтрока.Сотрудник = СоответствиеВременныхСотрудников[СтрокаРасчета.Сотрудник];
			
			СохраняемоеДенежноеДовольствие = ДенежноеДовольствиеСотрудников[НоваяСтрока.Сотрудник];
			Если СохраняемоеДенежноеДовольствие = Неопределено Тогда
				СохраняемоеДенежноеДовольствие = 0;
			КонецЕсли;			
			СохраняемоеДенежноеДовольствие = СохраняемоеДенежноеДовольствие + НоваяСтрока.Результат;
			ДенежноеДовольствиеСотрудников.Вставить(НоваяСтрока.Сотрудник,СохраняемоеДенежноеДовольствие);
			 
			Для каждого ЭлементКоллекции Из БазовыеВидыРасчета Цикл
				ОсновнойВР = ЭлементКоллекции.Ключ;
				БазовыеВР  = ЭлементКоллекции.Значение;
				Если БазовыеВР.Найти(НоваяСтрока.Начисление) <> Неопределено Тогда
					БазыНачисленийСотрудника = БазаДляРКиСН[НоваяСтрока.Сотрудник];
					Если БазыНачисленийСотрудника = Неопределено Тогда
						БазыНачисленийСотрудника = Новый Соответствие;
						БазаДляРКиСН.Вставить(НоваяСтрока.Сотрудник, БазыНачисленийСотрудника);
					КонецЕсли;					
					НакопленнаяБаза = БазыНачисленийСотрудника[ОсновнойВР];
					Если НакопленнаяБаза = Неопределено Тогда
						НакопленнаяБаза = 0;
					КонецЕсли;
					НакопленнаяБаза = НакопленнаяБаза + НоваяСтрока.Результат;
					БазыНачисленийСотрудника.Вставить(ОсновнойВР, НакопленнаяБаза);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Сотрудник,ИдентификаторСтрокиВидаРасчета");
	Для каждого СтрокаНачисления Из ТаблицаРКиСН Цикл
		
		ВидРасчетаИнфо = СтрокаНачисления.ВидРасчетаИнфо;
		
		БазыНачисленийСотрудника = БазаДляРКиСН[СтрокаНачисления.Сотрудник];
		Если БазыНачисленийСотрудника = Неопределено Тогда
			База = 0;
		Иначе
			База = БазыНачисленийСотрудника[СтрокаНачисления.Начисление];			
		КонецЕсли;
		
		Если База = Неопределено Тогда
			База = 0;
		КонецЕсли;
		
		ИсходныеДанные = Новый Структура("Результат", 0);
		
		ПоказателиВидаРасчета = ВидРасчетаИнфо.Показатели;
		НомерПоказателя = 0;
		Для Каждого СведенияОПоказателе Из ПоказателиВидаРасчета Цикл
			НомерПоказателя = НомерПоказателя + 1;
			Показатель = СведенияОПоказателе.Показатель;
			Если Не ЗначениеЗаполнено(Показатель) Или Не СведенияОПоказателе.ОтображатьВДокументахНачисления Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(Показатель);
			Если ИдентификаторПоказателя = "РасчетнаяБаза" Тогда
				ЗначениеПоказателя = База;
			Иначе
				ЗначениеПоказателя = СтрокаНачисления["Значение" + НомерПоказателя];
				Для СчПоказателей = 1 По ВидРасчетаИнфо.КоличествоПоказателейИспользуемыхПриРасчете Цикл
					ПоказательСтрокиНачисления = СтрокаНачисления["Показатель" + СчПоказателей];
					Если ПоказательСтрокиНачисления = Показатель Тогда
						ЗначениеПоказателя = СтрокаНачисления["Значение" + СчПоказателей];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ИсходныеДанные.Вставить(ИдентификаторПоказателя, ЗначениеПоказателя);
		КонецЦикла;
		
		ФормулаРасчетаДляВыполнения = СтрЗаменить(ВидРасчетаИнфо.ФормулаРасчетаДляВыполнения, "ИсходныеДанные.", "Параметры.");
		Попытка 
			СтрокаНачисления.Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаРасчетаДляВыполнения, ИсходныеДанные);
		Исключение
			СтрокаНачисления.Результат = 0;
		КонецПопытки;
		
		ОтборСтрок.Сотрудник 						= СтрокаНачисления.Сотрудник; 
		ОтборСтрок.ИдентификаторСтрокиВидаРасчета 	= СтрокаНачисления.ИдентификаторСтроки;
		НайденныеСтроки = ДанныеОНачислениях.НайтиСтроки(ОтборСтрок);
		НайденныеСтроки[0].Результат = СтрокаНачисления.Результат;
		
		СохраняемоеДенежноеДовольствие = ДенежноеДовольствиеСотрудников[СтрокаНачисления.Сотрудник];
		Если СохраняемоеДенежноеДовольствие = Неопределено Тогда
			СохраняемоеДенежноеДовольствие = 0;
		КонецЕсли;			
		СохраняемоеДенежноеДовольствие = СохраняемоеДенежноеДовольствие + СтрокаНачисления.Результат;
		ДенежноеДовольствиеСотрудников.Вставить(СтрокаНачисления.Сотрудник, СохраняемоеДенежноеДовольствие);
			
	КонецЦикла;
	
	//ДенежноеДовольствиеЗаМесяц = СохраняемоеДенежноеДовольствие + ТаблицаРКиСН.Итог("Результат");
	
	Возврат ДенежноеДовольствиеСотрудников;

КонецФункции

Процедура РассчитатьСохраняемоеДенежноеДовольствиеДокумента(Форма, Описание) Экспорт

	ДанныеФормы = РасчетДенежногоДовольствияКлиентСервер.ОписаниеПараметровСохраняемоеДенежноеДовольствие();
	
	Объект = Форма.Объект;
		
	ДанныеФормы.Сотрудник 	   = Объект.Сотрудник;
	ДанныеФормы.Организация    = Объект.Организация;
	ДанныеФормы.ПериодРасчета  = Объект[Описание.МесяцНачисленияИмя];
	ДанныеФормы.ДатаНачалаСобытия  = Объект[Описание.ДатаНачалаСобытияИмя];
	ДанныеФормы.ДанныеОНачислениях = Объект.ДенежноеДовольствие;
			
	СохраняемоеДенежноеДовольствие = РассчитатьСохраняемоеДенежноеДовольствие(ДанныеФормы);
		
	Объект.СохраняемоеДенежноеДовольствие = СохраняемоеДенежноеДовольствие[Объект.Сотрудник];
	
	
КонецПроцедуры

Процедура СоздатьВТРазбиениеСтрокНачислений(МенеджерВременныхТаблиц, ОписаниеВТ, ИменаВТ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиГосударственнойСлужбы = ГосударственнаяСлужба.НастройкиГосударственнойСлужбы();
	Если Не НастройкиГосударственнойСлужбы.ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление,
		|	ЛОЖЬ КАК РазбиватьСтроку
		|ПОМЕСТИТЬ ВТРазбиениеСтрокДенежногоДовольствия
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачислений
		|		ПО (СвойстваНачислений.Начисление = Начисления.Начисление)
		|			И (СвойстваНачислений.ОтношениеКДенежномуДовольствию = ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТ.ИмяПоляНачисление);
	Запрос.Выполнить();
	ИменаВТ.Добавить("ВТРазбиениеСтрокДенежногоДовольствия");
	
КонецПроцедуры

Процедура СоздатьНачислениеОплатаСверхурочныхВоеннослужащих(СоздаватьНачисления, КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления; 
				
	Если КоллекторНачислений = Неопределено Тогда
		КоллекторНачислений = Новый Соответствие;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаСверхурочныхВоеннослужащим;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'СВХВС'");
	Описание.Наименование			= НСтр("ru = 'Оплата сверхурочных часов военнослужащих'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Сверхурочно в.с.'");
	
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьПоказателиОплатыСверхурочныхРабот(СоздаватьПоказатели, ПараметрыПланаВидовРасчета = Неопределено, СозданныеЭлементы = Неопределено) Экспорт
	
	ПоказателиРасчетаЗарплатыМенеджер = Справочники.ПоказателиРасчетаЗарплаты;
	
	Если ПараметрыПланаВидовРасчета = Неопределено Тогда
		ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	КонецЕсли;
	
	Если СозданныеЭлементы = Неопределено Тогда 
		СозданныеЭлементы = ПоказателиРасчетаЗарплатыМенеджер.СсылкиПоказателиРасчетаЗарплатыНачальнойНастройкиПрограммы();
	КонецЕсли;
	
	ИспользоватьРасчетДенежногоДовольствияВоеннослужащих = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия");
		
	
	Если СоздаватьПоказатели И ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "КоличествоДнейКомпенсацииВС";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Количество работы сверх нормы служебного времени'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Дней компенсации в\с'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.Предопределенный = Истина;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "КоличествоДнейКомпенсацииВС");
	КонецЕсли;	
	
	Если СоздаватьПоказатели И ИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "СреднемесячноеКоличествоДнейВС";
		ОписаниеПоказателя.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации;
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Среднемесячное количество дней для оплат военнослужащим'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Среднемес. дней в\с'");
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = истина;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);				
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "СреднемесячноеКоличествоДнейВС");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоказательДенежноеДовольствиеСотрудников(Форма,СтруктураОбъекта) Экспорт
	
	ПоказательСДД = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеДовольствие");
	Объект = Форма.Объект;	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.ВидРасчета);
	ЕстьПоказательСДД = Ложь;
	
	НомерПоказателяСДД = 1;
	Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если ОписаниеПоказателя.Показатель = ПоказательСДД Тогда
			ЕстьПоказательСДД = Истина;	
			Прервать;
		КонецЕсли;
		НомерПоказателяСДД = НомерПоказателяСДД + 1;		
	КонецЦикла;

	Если ЕстьПоказательСДД Тогда 
		КолонкаПоказателяСДД = "Значение" + НомерПоказателяСДД;
		
		ДанныеФормы = РасчетДенежногоДовольствияКлиентСервер.ОписаниеПараметровСохраняемоеДенежноеДовольствие();
		ЗаполнитьЗначенияСвойств(ДанныеФормы,СтруктураОбъекта);
		ДанныеФормы.ДанныеОНачислениях = СтруктураОбъекта.ДенежноеДовольствие;
		
		СохраняемоеДенежноеДовольствиеСотрудников = РассчитатьСохраняемоеДенежноеДовольствие(ДанныеФормы);
		
		Для Каждого СтрокаСотрудника Из Объект.Начисления Цикл
			Если СтруктураОбъекта.Сотрудник.Найти(СтрокаСотрудника.Сотрудник) = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			СтрокаСотрудника[КолонкаПоказателяСДД] = СохраняемоеДенежноеДовольствиеСотрудников[СтрокаСотрудника.Сотрудник];

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение представления команды расшифровки специализированных показателей 
//  учета денежного довольствия.
//
// Параметры:
//		ДокументСсылка
//		ВидРасчетаИнфо - Информация о виде расчета, полученная с помощью метода
//		                 ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета.
//		СтрокаНачислений - строка таблицы "Начисления".
//		РежимРаботы - режим работы таблицы с видами расчетов
//			0 - режим ввода штатного расписания - вводятся максимальные 
//				и минимальные значения ("вилка") условно-постоянных показателей
//			1 - режим ввода плановых начислений - вводятся значения 
//				условно-постоянных показателей
//			2 - режим ввода начислений в документе-начислятеле - вводятся значения всех 
//				показателей, отображаемых при виде расчета.
//		ДокументСсылка - расчетный документ.
//
Процедура ЗаполнитьДанныеПоказателейДенежногоДовольствия(ВидРасчетаИнфо, СтрокаНачислений, РежимРаботы, ДокументСсылка = Неопределено) Экспорт
	
	Если РежимРаботы = 0 Или РежимРаботы = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипыДокументовРасчетаПоДенежномуДовольствию().Найти(ТипЗнч(ДокументСсылка)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиДенежногоДовольствия = РасчетДенежногоДовольствияКлиентСервер.ПоказателиДенежногоДовольствия();
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если ПоказателиДенежногоДовольствия.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
			ОтображатьРасшифровку = Истина;
			Если СтрокаНачислений.Свойство("ДокументОснование") И ЗначениеЗаполнено(СтрокаНачислений.ДокументОснование) Тогда
				ОтображатьРасшифровку = Ложь;
			КонецЕсли;
			Если ОтображатьРасшифровку Тогда
				СтрокаНачислений["КомандаРасшифровки" + СчетчикПоказателей] = РасчетДенежногоДовольствияКлиентСервер.ПредставлениеКомандыРасшифровки();
			КонецЕсли;
		КонецЕсли;			
		СчетчикПоказателей = СчетчикПоказателей + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция СреднемесячноеКоличествоДнейДляВоеннослужащих(ДатаНачалаСобытия) Экспорт 
	
	Результат = РегистрыСведений.СреднемесячноеКоличествоДнейВоеннослужащих.СрезПоследних(ДатаНачалаСобытия);
	
	КоличествоДней = 0;
	Если Результат.Количество() > 0 Тогда
		КоличествоДней =  Результат[0].КоличествоДней;
	КонецЕсли;
	
	Возврат ?(КоличествоДней = 0, 30.4, КоличествоДней);
	
КонецФункции

Функция ПоказателиОВД()
	
	МассивПоказателей = Новый Массив();
	МассивПоказателей.Добавить(Справочники.ПоказателиРасчетаЗарплаты.Оклад);
	
	Возврат МассивПоказателей;
	
КонецФункции

Функция ПоказателиОВЗ() Экспорт
	
	МассивПоказателей = Новый Массив();
	МассивПоказателей.Добавить(ВоинскиеСпециальныеЗвания.ПоказательОкладПоВоинскомуСпециальномуЗванию());
	
	Возврат МассивПоказателей;
	
КонецФункции

Процедура ДополнитьРегистраторыУвольнения(ТипыДокументовУвольнения) Экспорт
	ТипыДокументовУвольнения.Добавить(Тип("ДокументСсылка.ИсключениеИзСписковЧасти"));
	ТипыДокументовУвольнения.Добавить(Тип("ДокументСсылка.ИсключениеИзСписковЧастиСписком"));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеРасчетаСохраняемогоДенежногоДовольствия

Функция БазовыеВидыРасчетаДляРКиСН()

	БазовыеВидыРасчета = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияБазовыеВидыРасчета.Ссылка КАК Ссылка,
	|	НачисленияБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
	|ГДЕ
	|	НачисленияБазовыеВидыРасчета.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ОсновнойВР = Выборка.Ссылка;
		БазовыеВР = Новый Массив;
		Пока Выборка.Следующий() Цикл
			БазовыеВР.Добавить(Выборка.ВидРасчета);
		КонецЦикла;
		БазовыеВидыРасчета.Вставить(ОсновнойВР, БазовыеВР);
		
	КонецЦикла;
	
	Возврат БазовыеВидыРасчета;

КонецФункции

Процедура СтрокаРезультатаРасчетаВДанныеФормы(СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо)

	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		Показатели = ОбщегоНазначения.ВыгрузитьКолонку(ЗначенияРеквизитов.Показатели, "Показатель");
		Если СтрокаИсточник.Показатели.Количество() > 0 Тогда
			Сч = 1;
			Для Каждого Показатель Из Показатели Цикл
				СтрокаПоказателя = СтрокаИсточник.Показатели.Найти(Показатель, "Показатель");
				Если СтрокаПоказателя <> Неопределено И Показатель.ОтображатьВДокументахНачисления Тогда
					СтрокаПриемник["Показатель" + Сч] = СтрокаПоказателя.Показатель;
					СтрокаПриемник["Значение" + Сч]   = СтрокаПоказателя.Значение;
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПоказателиУчетаВремени()
	
	ПоляОписанияПоказателяУчетаВремени = "ВремяВДнях, ВремяВЧасах, НормаВДнях, НормаВДняхПолная, НормаВчасах, КалендарныеДни, КалендарныеДниМесяца";	
	ПоказателиУчетаВремени = Новый Соответствие;
	
	ОписаниеПоказателяВремяВДнях = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяВремяВДнях.ВремяВДнях = Истина;
	
	ОписаниеПоказателяНормаВДнях = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВДнях.НормаВДнях = Истина;
	
	ОписаниеПоказателяНормаВДняхПолная = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВДняхПолная.НормаВДняхПолная = Истина;
	
	ОписаниеПоказателяВремяВЧасах = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяВремяВЧасах.ВремяВЧасах = Истина;

	ОписаниеПоказателяНормаВчасах = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВчасах.НормаВчасах = Истина;
	
	ОписаниеПоказателяКалендарныеДни = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяКалендарныеДни.КалендарныеДни = Истина;
	
	ОписаниеПоказателяКалендарныеДниМесяца = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяКалендарныеДниМесяца.КалендарныеДниМесяца = Истина;
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"), ОписаниеПоказателяВремяВДнях);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"), ОписаниеПоказателяВремяВДнях);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"), ОписаниеПоказателяНормаВДняхПолная);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"), ОписаниеПоказателяНормаВДнях);
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"), ОписаниеПоказателяВремяВЧасах);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"), ОписаниеПоказателяВремяВЧасах);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"), ОписаниеПоказателяНормаВчасах);
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"), ОписаниеПоказателяКалендарныеДниМесяца);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"), ОписаниеПоказателяКалендарныеДниМесяца);
	
	Возврат ПоказателиУчетаВремени;
	
КонецФункции

Функция ТаблицаПоказателей()
	
	ПоказателиНачислений = Новый ТаблицаЗначений;
	ПоказателиНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПоказателиНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ПоказателиНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ПоказателиНачислений.Колонки.Добавить("ЗначениеЗаполнено", Новый ОписаниеТипов("Булево"));
	
	Возврат ПоказателиНачислений;
	
КонецФункции

Функция ТаблицаПоказателейПоТаблицеНачисления(ТаблицаНачислений, СвойстваНачислений, ПоказателиУчетаВремени)
	
	ПоказателейНачислений = ТаблицаПоказателей();
		
	Для Каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
		
		СвойстваНачисления = СвойстваНачислений[СтрокаТаблицыНачислений.Начисление];
		
		Если СвойстваНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Для Каждого ДанныеПоказателя Из СвойстваНачисления.Показатели Цикл
			
			Если Не ЗначениеЗаполнено(ДанныеПоказателя.Показатель) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ПоказателиУчетаВремени[ДанныеПоказателя.Показатель] <> Неопределено Тогда
				СтрокаТаблицыПоказателей = ПоказателейНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПоказателей, СтрокаТаблицыНачислений);
				СтрокаТаблицыПоказателей.Показатель = ДанныеПоказателя.Показатель;	
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;	
	
	ПоказателейНачислений.Свернуть("Сотрудник, Показатель, Значение, ЗначениеЗаполнено");
	
	Возврат ПоказателейНачислений; 
	
КонецФункции

Функция СвойстваНачислений(Начисления)
	
	СвойстваНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.ЗачетНормыВремени,
	|	Начисления.РеквизитДопУпорядочивания,
	|	НачисленияПоказатели.Показатель,
	|	НачисленияПоказатели.ЗапрашиватьПриВводе
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО (НачисленияПоказатели.Ссылка = Начисления.Ссылка)
	|ГДЕ
	|	Начисления.Ссылка В(&Начисления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеквизитыНачислений = "Показатели, ЗачетНормыВремени, РеквизитДопУпорядочивания";
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		СвойстваНачисления = Новый Структура(РеквизитыНачислений);
		ЗаполнитьЗначенияСвойств(СвойстваНачисления, Выборка);
		
		ТаблицаПоказателей = Новый ТаблицаЗначений;
		ТаблицаПоказателей.Колонки.Добавить("Показатель");
		ТаблицаПоказателей.Колонки.Добавить("ЗапрашиватьПриВводе");
		
		СвойстваНачисления.Показатели = ТаблицаПоказателей;
		СвойстваНачислений.Вставить(Выборка.Ссылка, СвойстваНачисления);
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Показатель) Тогда 
				СтрокаТаблицПоказателя = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицПоказателя, Выборка);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат СвойстваНачислений;
	
КонецФункции

Функция ЗначениеПоказателяУчетаВремениПоДаннымГрафика(Показатель, ДанныеГрафика, ОписаниеПоказателейУчетаВремени)
	
	ВремяВДняхПоУмолчанию = 20;
	ВремяВЧасахПоУмолчанию = 160;
	
	СвойстваПоказателя = ОписаниеПоказателейУчетаВремени[Показатель];
	
	Если СвойстваПоказателя.КалендарныеДни = Истина Тогда
		Возврат 1;
	ИначеЕсли СвойстваПоказателя.КалендарныеДниМесяца = Истина Тогда	
		Возврат 1;
	ИначеЕсли СвойстваПоказателя.НормаВДняхПолная = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВДняхПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНормаПолногоГрафика) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНормаПолногоГрафика;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНорма;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;	
	ИначеЕсли СвойстваПоказателя.НормаВДнях = Истина  Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВДняхПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНорма;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;
	ИначеЕсли СвойстваПоказателя.ВремяВДнях = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВДняхПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДней) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДней;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;	
	ИначеЕсли СвойстваПоказателя.ВремяВЧасах = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВЧасахПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоЧасов) Тогда 
			Возврат ДанныеГрафика.СреднемесячноеЧислоЧасов;
		Иначе 
			Возврат ВремяВЧасахПоУмолчанию;
		КонецЕсли;
	ИначеЕсли СвойстваПоказателя.НормаВчасах = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВЧасахПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоЧасовНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоЧасовНорма;
		Иначе
			Возврат ВремяВЧасахПоУмолчанию;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
	
КонецФункции

Функция ДанныеГрафиковСотрудников(ГрафикиРаботы, Год)
		
	ДанныеГрафиковСотрудников = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикиРаботы.ВыгрузитьКолонку("ГрафикРаботы"));
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	ГрафикиПолногоВремени.ДлительностьРабочейНедели КАК ДлительностьРабочейНеделиГрафикаПолногоВремени,
	|	СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасовНормаПолногоГрафика,
	|	СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНормаПолногоГрафика,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоЧасов
	|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов
	|	КОНЕЦ КАК СреднемесячноеЧислоЧасовНорма,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНорма,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасов,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДней
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиПолногоВремени
	|		ПО ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = ГрафикиПолногоВремени.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
	|		ПО ГрафикиРаботыСотрудников.Ссылка = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
	|			И (СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год = &Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковПолногоВремени
	|		ПО ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафиковПолногоВремени.ГрафикРаботыСотрудников
	|			И (СреднемесячныеНормыВремениГрафиковПолногоВремени.Год = &Год)
	|ГДЕ
	|	ГрафикиРаботыСотрудников.Ссылка В (&ГрафикРаботы)";
	
	СтруктураОтбора = Новый Структура("ГрафикРаботы");
	ДанныеГрафиков = Запрос.Выполнить().Выгрузить();
	Для каждого ДанныеСотрудника Из ГрафикиРаботы Цикл
		
		ДанныеГрафикаСотрудника = Новый Структура("
		|ДлительностьРабочейНедели,
		|ДлительностьРабочейНеделиГрафикаПолногоВремени,
		|СреднемесячноеЧислоЧасовНормаПолногоГрафика,
		|СреднемесячноеЧислоДнейНормаПолногоГрафика,
		|СреднемесячноеЧислоЧасовНорма,
		|СреднемесячноеЧислоДнейНорма,
		|СреднемесячноеЧислоЧасов,
		|СреднемесячноеЧислоДней",1,1,1,1,1,1,1,1);
		
		ДанныеГрафика = ДанныеГрафиков.Найти(ДанныеСотрудника.ГрафикРаботы,"ГрафикРаботы");
		Если ДанныеГрафика <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеГрафикаСотрудника, ДанныеГрафика);
		КонецЕсли;
		
		ДанныеГрафиковСотрудников.Вставить(ДанныеСотрудника.Сотрудник, ДанныеГрафикаСотрудника);
		
	КонецЦикла;
		
	Возврат ДанныеГрафиковСотрудников;

КонецФункции 

Процедура ЗаполнитьПоказателиУчетаВремениСотрудников(ПоказателиНачисленийСотрудников, ДанныеГрафиковСотрудников, ПоказателиУчетаВремени)
	
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл
		
		Если ПоказателиУчетаВремени[СтрокаПоказателя.Показатель] = Неопределено Тогда
			// это не показатель учета времени
			Продолжить;
		КонецЕсли;
		
		//НайденнаяСтрока = ИзвестныеПоказатели.Найти(СтрокаПоказателя.Показатель,"Показатель");
		//Если НайденнаяСтрока = Неопределено Тогда
			СтрокаПоказателя.Значение = ЗначениеПоказателяУчетаВремениПоДаннымГрафика(СтрокаПоказателя.Показатель, ДанныеГрафиковСотрудников[СтрокаПоказателя.Сотрудник], ПоказателиУчетаВремени);
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		//Иначе
		//	СтрокаПоказателя.Значение = НайденнаяСтрока.Значение;
		//	СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыОбслуживанияФормДокументовДляРасчетаСреднегоДенежногоДовольствия

// Добавляет команду печати "Расчет среднего заработка", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиРасчетаСреднегоДенежногоДовольствия(КомандыПечати, МенеджерПечати) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
				
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = МенеджерПечати;
		КомандаПечати.Идентификатор = "РасчетСреднегоДенежногоДовольствия";
		КомандаПечати.Представление = НСтр("ru = 'Расчет среднего денежного довольствия'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
				
	КонецЕсли; 
	
КонецПроцедуры

Функция ПараметрыОбновленияДанныхУчетаСреднегоДенежногоДовольствия() Экспорт
	
	Параметры = Новый Структура(
		"ДанныеОНачислениях, 
		|ДанныеОВремени, 
		|ДанныеОбИндексации,		
		|ДатаНачалаСобытия");
		
	Возврат Параметры;
	
КонецФункции

// Процедура выполняет объединение данных среднего денежного довольствия 
// из учета с аналогичными данными документа.
// Выполняется, например, при изменении периода расчета среднего заработка.
// Обеспечивает сохранение пользовательских данных в документе.
//
Процедура ОбновитьДанныеУчетаСреднегоДенежногоДовольствия(Сотрудник, НачалоПериода, ОкончаниеПериода, ДополнительныеПараметры) Экспорт
	
	ДанныеОНачислениях = ДополнительныеПараметры.ДанныеОНачислениях;
	ДанныеОВремени = ДополнительныеПараметры.ДанныеОВремени;
	ДанныеОбИндексации = ДополнительныеПараметры.ДанныеОбИндексации;
	
	ДанныеОбИндексации.Очистить();
	
	// Удаляем строки, "не попадающие" в новый период расчета среднего.
	УдалитьДанныеВнеПериодаРасчетаСреднегоДенежногоДовольствия(ДанныеОНачислениях, НачалоПериода, ОкончаниеПериода); 
	УдалитьДанныеВнеПериодаРасчетаСреднегоДенежногоДовольствия(ДанныеОВремени, НачалоПериода, ОкончаниеПериода); 
			
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоДенежногоДовольствияСотрудника(Сотрудник, ДополнительныеПараметры.ДатаНачалаСобытия,НачалоПериода,ОкончаниеПериода);
	
	// Объединение данных, полученных из учета, с данными документа осуществляется по следующим правилам
	// Данные в документе заменяются данными из учета в одном из следующих случаев
	//	- источник данных в документе не относится к группе источников "Результаты редактирования" (СведенияДоНачалаЭксплуатации и Исправления)
	//	- порядковый номер источника из учета (приоритет) выше, чем в документе.
	
	// Следовательно, необходимо в разрезе сотрудника и месяца для каждой коллекции определить максимальный приоритет источника 
	// и наличие результатов редактирования.
	
	ПриоритетИсточников = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПриоритетИсточников();
	СохраняемыеЗначения = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.РезультатыРедактирования();
	
	СочетанияЗамены = Новый ТаблицаЗначений;
	СочетанияЗамены.Колонки.Добавить("Сотрудник");
	СочетанияЗамены.Колонки.Добавить("Период");
	
	ОтборСтрок = Новый Структура("Сотрудник, Период");
	
	СоответствиеКоллекций = Новый Соответствие;
	СоответствиеКоллекций.Вставить(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеОНачислениях);
	СоответствиеКоллекций.Вставить(ДанныеДляРасчета.ДанныеОВремени, ДанныеОВремени);
	
	Для Каждого КлючИЗначение Из СоответствиеКоллекций Цикл
		КоллекцияУчета = КлючИЗначение.Ключ;
		КоллекцияДокумента = КлючИЗначение.Значение;
		СочетанияЗамены.Очистить();
		Для Каждого СтрокаДанных Из КоллекцияУчета Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДанных);
			НайденныеСочетания = СочетанияЗамены.НайтиСтроки(ОтборСтрок);
			Если НайденныеСочетания.Количество() > 0 Тогда
				// Такое сочетание уже есть, пропускаем.
				Продолжить;
			КонецЕсли;
			НайденныеСтроки = КоллекцияДокумента.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Строк за этот месяц вовсе нет в документе, добавляем.
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
				Продолжить;
			КонецЕсли;
			ЕстьСохраняемыеЗначения = Ложь;
			ПриоритетИзДокумента = 0;
			Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
				Если СохраняемыеЗначения.Найти(СтрокаДокумента.Источник) <> Неопределено Тогда
					// Источник относится к сохраняемым значениям, пропускаем.
					ЕстьСохраняемыеЗначения = Истина;
				КонецЕсли;
				Приоритет = ПриоритетИсточников[СтрокаДокумента.Источник];
				Если ПриоритетИзДокумента < Приоритет Тогда
					ПриоритетИзДокумента = Приоритет;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьСохраняемыеЗначения Тогда
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
				Продолжить;
			КонецЕсли;
			// Сравниваем приоритет.
			ПриоритетИзУчета = ПриоритетИсточников[СтрокаДанных.Источник];
			Если ПриоритетИзУчета > ПриоритетИзДокумента Тогда
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
			КонецЕсли;
		КонецЦикла;
		
		// Удаляем все строки, соответствующие отобранным сочетаниям Сотрудник + Период.
		Для Каждого Сочетание Из СочетанияЗамены Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
			// Переносим.
			// Удаляем существующие строки...
			СтрокиДокумента = КоллекцияДокумента.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				КоллекцияДокумента.Удалить(СтрокаДокумента);
			КонецЦикла;
			// ..и добавляем из данных расчета.
			СтрокиУчета = КоллекцияУчета.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаУчета Из СтрокиУчета Цикл
				ЗаполнитьЗначенияСвойств(КоллекцияДокумента.Добавить(), СтрокаУчета);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ДополнительныеПараметры.Свойство("ДанныеОбИндексации") Тогда
		// Заполняем таблицы документа с данными среднего заработка.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ДанныеОбИндексации, ДополнительныеПараметры.ДанныеОбИндексации);
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет таблицы документа данными учета среднего денежного довольствия
// по результатам их редактирования.
//
Процедура ЗаполнитьДанныеУчетаСреднегоДенежногоДовольствия(Объект, СреднийЗаработок, Форма) Экспорт
	
	РедактируемыеНачисления = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеОНачислениях);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемыеНачисления, Объект.СреднийЗаработокДД);
	
	Если СреднийЗаработок.Свойство("ДанныеОВремени") И ЗначениеЗаполнено(СреднийЗаработок.ДанныеОВремени) Тогда 
		РедактируемоеВремя = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеОВремени);
		Если РедактируемоеВремя <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемоеВремя, Объект.ОтработанноеВремяДляСреднегоДД);
		КонецЕсли;	
	КонецЕсли;	
	
	Если СреднийЗаработок.Свойство("ДанныеОбИндексации") И ЗначениеЗаполнено(СреднийЗаработок.ДанныеОбИндексации)  Тогда
		РедактируемаяИндексация = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеОбИндексации);
		Если РедактируемаяИндексация <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемаяИндексация, Объект.ДанныеОбИндексации);
		КонецЕсли;	
	КонецЕсли;	
	
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры	

// Выполняет упаковку данных общего среднего денежного довольствия формы документа для передачи в форму редактирования.
//
Процедура ЗаполнитьТаблицыДанныхСреднегоДенежногоДовольствияПоДокументу(ДанныеФормыОбъект, ПараметрыРедактирования) Экспорт
	
	// Переносим содержимое табличных частей в таблицы значений и помещаем последние во временное хранилище
	// - начисления.
	ДанныеНачислений = ПустаяТаблицаНачисленийСреднееДенежноеДовольствие();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.СреднийЗаработокДД, ДанныеНачислений);
	ПараметрыРедактирования.ДанныеОНачислениях = ПоместитьВоВременноеХранилище(ДанныеНачислений);
	
	// - отработанное время
	ОтработанноеВремя = ПустаяТаблицаОтработанноеВремяСреднееДенежноеДовольствие();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.ОтработанноеВремяДляСреднегоДД, ОтработанноеВремя);
	ПараметрыРедактирования.ДанныеОВремени = ПоместитьВоВременноеХранилище(ОтработанноеВремя);
	
	// - данные индексации
	ДанныеИндексации = ПустаяТаблицаДанныеИндексации();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.ДанныеОбИндексации, ДанныеИндексации);
	ПараметрыРедактирования.ДанныеОбИндексации = ПоместитьВоВременноеХранилище(ДанныеИндексации);
	
КонецПроцедуры

Процедура НастроитьДоступностьРедактированияПоказателейДенежногоДовольствия(Форма, ОписаниеТаблицыВидовРасчета) Экспорт
	
	ВидРасчета 		= ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект." + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета);
	ВидРасчетаИнфо 	= ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	ПоказателиДенежногоДовольствия = РасчетДенежногоДовольствияКлиентСервер.ПоказателиДенежногоДовольствия();
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если ПоказателиДенежногоДовольствия.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
			ИмяПоля = ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "Значение" + СчетчикПоказателей;
			ПолеПоказателя = Форма.Элементы.Найти("НачисленияЗначение2");
			Если ПолеПоказателя <> Неопределено Тогда
				ПолеПоказателя.ТолькоПросмотр = Истина;	
			КонецЕсли;
		КонецЕсли;			
		СчетчикПоказателей = СчетчикПоказателей + 1;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииПолученияДанныхСреднегоДенежногоДовольствия

Процедура УдалитьДанныеВнеПериодаРасчетаСреднегоДенежногоДовольствия(КоллекцияДанныхСреднего, НачалоПериода, ОкончаниеПериода) Экспорт
	
	СохраняемыеЗначения = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.РезультатыРедактирования();
	
 	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаКоллекции Из КоллекцияДанныхСреднего Цикл
		ПодходитПоПериоду = СтрокаКоллекции.Период >= НачалоПериода И СтрокаКоллекции.Период <= ОкончаниеПериода;
				
		// Если не подходит по периоду, удаляем, но корректировки оставляем.
		Если Не ПодходитПоПериоду И СохраняемыеЗначения.Найти(СтрокаКоллекции.Источник) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаКоллекции);
			Продолжить;
		КонецЕсли;	
			
		Если Не ПодходитПоПериоду Тогда
			УдаляемыеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		КоллекцияДанныхСреднего.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиГраницыПериодаРасчетаОбщегоСреднегоЗаработка(ТаблицаДанных, МинимальнаяДата, МаксимальнаяДата)
	
	МинимальнаяДата		= Дата(1, 1, 1);
	МаксимальнаяДата	= Дата(1, 1, 1);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если Не ЗначениеЗаполнено(МинимальнаяДата) Тогда
			МинимальнаяДата = СтрокаТаблицы.НачалоПериодаРасчетаСреднего;
		КонецЕсли;
		МинимальнаяДата		= Мин(МинимальнаяДата, СтрокаТаблицы.НачалоПериодаРасчетаСреднего);
		МаксимальнаяДата	= Макс(МаксимальнаяДата, СтрокаТаблицы.ОкончаниеПериодаРасчетаСреднего);
	КонецЦикла;
	
КонецПроцедуры

// Составляет массив типов документов, в которых осуществляется локальный расчет показателей денежного довольствия.
//
Функция ТипыДокументовРасчетаПоДенежномуДовольствию() Экспорт 
	
	ТипыДокументов = Новый Массив();
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОплатаСверхурочныхВоеннослужащим"));
	Возврат ТипыДокументов;
	
КонецФункции

#КонецОбласти


#Область КонструкторыТаблицДанныхСреднегоДенежногоДовольствия

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокДД
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаНачисленийСреднееДенежноеДовольствие() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("СоставнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ОтработанноеВремяДляСреднегоДД
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаОтработанноеВремяСреднееДенежноеДовольствие() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПустаяТаблицаИсходныхДанныхРасчетаСреднегоДенежногоДовольствия() Экспорт
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачалаСобытия", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("НачалоПериодаРасчетаСреднего", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ОкончаниеПериодаРасчетаСреднего", Новый ОписаниеТипов("Дата"));
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ДанныеОбИндексации
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаДанныеИндексации() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ВидИндексации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИндексируемогоДенежногоСодержания"));
	ТаблицаДанных.Колонки.Добавить("КоэффициентИндексации", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(4, 2));
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти


#Область ПолучениеДанныхДляРасчетаСреднегоДенежногоДовольствия

// Возвращает структуру содержащую таблицы значений
// с данными о начислениях, отработанном времени и
// коэффициентах для расчета среднего заработка.
//      	 
// Параметры:
//      Сотрудник 
//		НачалоПериода - начало периода расчета среднего денежного довольствия.
//		ОкончаниеПериода - окончание периода расчета среднего денежного довольствия.
//		ПорядокРасчета - правила расчета общего среднего денежного довольствия.
//		ОтборМесяцев - необязательный, массив дат начала месяцев, 
//			если указан, данные будут получены только за эти месяцы.
//
// Возвращаемое значение:
// 		ДанныеДляРасчетаСреднего - структура, содержащая следующие поля:
//		ДанныеОНачислениях - таблица значений с колонками.
//			Сотрудник
//			ФизическоеЛицо
//			Период
//			СоставнаяЧасть
//			Сумма.
//
//		ДанныеОВремени - таблица значений с колонками.
//			Сотрудник
//			ФизическоеЛиц
//			Период
//			ОтработаноДнейКалендарных
//			Источник.
//
//		ДанныеОбИндексации - таблица значений с колонками.
//			Сотрудник
//			Период
//			КоэффициентИндексации 
//
Функция ДанныеДляРасчетаСреднегоДенежногоДовольствияСотрудника(Сотрудник, ДатаНачалаСобытия, НачалоПериода, ОкончаниеПериода, ОтборМесяцев = Неопределено, ИсключаемыйРегистратор = Неопределено, УчитыватьКорректировки = Истина) Экспорт
	
	ИсходныеДанные = ПустаяТаблицаИсходныхДанныхРасчетаСреднегоДенежногоДовольствия();
	
	СтрокаТаблицы = ИсходныеДанные.Добавить();
	СтрокаТаблицы.Сотрудник = Сотрудник;
	СтрокаТаблицы.ДатаНачалаСобытия = ДатаНачалаСобытия;
	СтрокаТаблицы.НачалоПериодаРасчетаСреднего = НачалоПериода;
	СтрокаТаблицы.ОкончаниеПериодаРасчетаСреднего = ОкончаниеПериода;
	
	Возврат ДанныеДляРасчетаСреднегоДенежногоДовольствияСотрудников(ИсходныеДанные, ОтборМесяцев, ИсключаемыйРегистратор, УчитыватьКорректировки);
	
КонецФункции

// Возвращает структуру, содержащую таблицы значений с данными о начислениях, 
// отработанном времени и коэффициентах индексации для расчета среднего денежного довольствия.
//      	 
// Параметры:
//      ДокументСсылка - ссылка на документ расчета.
//		ТаблицаСотрудники - таблица значений с колонками.
//			Сотрудник: должно быть непустым
//			ДатаНачалаСобытия
//          НачалоПериодаРасчетаСреднего
//			ОкончаниеПериодаРасчетаСреднего.
//
// Возвращаемое значение:
// 		ДанныеДляРасчетаСреднего - структура, содержащая следующие поля:
//		ДанныеОНачислениях - таблица значений с колонками.
//			Сотрудник
//			ФизическоеЛицо
//			Период
//			СоставнаяЧасть
//			Сумма
//			Источник
//			Организация.
//
//		ДанныеОВремени - таблица значений с колонками.
//			Сотрудник
//			ФизическоеЛицо
//			Период
//			ОтработаноДнейКалендарных
//			Источник.
//
//		ДанныеОбИндексации - таблица значений с колонками.
//			Сотрудник
//			Период
//			КоэффициентИндексации 
//
Функция ДанныеДляРасчетаСреднегоДенежногоДовольствияСотрудников(ТаблицаСотрудники, ОтборМесяцев = Неопределено, ИсключаемыйРегистратор = Неопределено, УчитыватьКорректировки = Истина) Экспорт
	
	Перем МинимальнаяДатаНачала;
	Перем МаксимальнаяДатаОкончания;
	
	МесяцыРасчетаСотрудников = Новый ТаблицаЗначений;
	МесяцыРасчетаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	МесяцыРасчетаСотрудников.Колонки.Добавить("ПорядокРасчетаСреднегоОтбор", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	МесяцыРасчетаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	// Определяем границы расчета среднего.
	НайтиГраницыПериодаРасчетаОбщегоСреднегоЗаработка(ТаблицаСотрудники, МинимальнаяДатаНачала, МаксимальнаяДатаОкончания);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, МинимальнаяДатаНачала, МаксимальнаяДатаОкончания);
	
	// начисления, которые показываются в отчетах в составе других начислений
	МассивВРРКиСН = Новый Массив;
	МассивВРРКиСН.Добавить(РасчетЗарплаты.НачислениеРайонныйКоэффициент());
	МассивВРРКиСН.Добавить(РасчетЗарплаты.НачислениеСевернаяНадбавка());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодыРасчетаСреднегоСотрудников", ТаблицаСотрудники);
	Запрос.УстановитьПараметр("ОтборМесяцев", ОтборМесяцев);
	Запрос.УстановитьПараметр("ПоВсемМесяцам", ОтборМесяцев = Неопределено);
	Запрос.УстановитьПараметр("ДатаНачала", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", МаксимальнаяДатаОкончания);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("УчитыватьКорректировки", УчитыватьКорректировки);
	Запрос.УстановитьПараметр("НачисленияРКиСН", МассивВРРКиСН);
	
	// Общий заработок, без учета годовых премий.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыРасчета.Сотрудник,
		|	ПериодыРасчета.ДатаНачалаСобытия,
		|	ПериодыРасчета.НачалоПериодаРасчетаСреднего,
		|	ПериодыРасчета.ОкончаниеПериодаРасчетаСреднего
		|ПОМЕСТИТЬ ВТПериодыРасчетаСреднегоСотрудников
		|ИЗ
		|	&ПериодыРасчетаСреднегоСотрудников КАК ПериодыРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборГодовыхПремий.Сотрудник,
		|	ГОД(ДОБАВИТЬКДАТЕ(ОтборГодовыхПремий.ДатаНачалаСобытия, ГОД, -1)) КАК ГодовыеПремииЗаГод
		|ПОМЕСТИТЬ ВТОтборГодовыхПремий
		|ИЗ
		|	ВТПериодыРасчетаСреднегоСотрудников КАК ОтборГодовыхПремий
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваНачисленийГосударственныхСлужащих.Начисление,
		|	СвойстваНачисленийГосударственныхСлужащих.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим КАК СоставнаяЧасть 
		|ПОМЕСТИТЬ ВТСвойстваНачислений
		|ИЗ
		|	РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
		|ГДЕ
		|	СвойстваНачисленийГосударственныхСлужащих.ЯвляетсяДенежнымДовольствием
		|	И СвойстваНачисленийГосударственныхСлужащих.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим <> ЗНАЧЕНИЕ(Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ПустаяСсылка)
		|	И СвойстваНачисленийГосударственныхСлужащих.ВходитВРасчетПособияПоУходуЗаРебенкомВоеннослужащим <> ЗНАЧЕНИЕ(Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.НеВходитВРасчет)
		|	И НЕ СвойстваНачисленийГосударственныхСлужащих.Начисление В(&НачисленияРКиСН)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОДС) 
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В(&НачисленияРКиСН)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистра.Период,
		|	ДанныеРегистра.Сотрудник,
		|	ДанныеРегистра.СоставнаяЧасть,
		|	ДанныеРегистра.ПереносДанных,
		|	СУММА(ДанныеРегистра.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТДанныеДляРасчетаСреднего
		|ИЗ
		|	(ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ) КАК Период,
		|		ДанныеРегистра.Сотрудник КАК Сотрудник,
		|		ОтношениеКДенежномуДовольствию.СоставнаяЧасть КАК СоставнаяЧасть,
		|		ВЫБОР
		|			КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПереносДанных
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПереносДанных,
		|		ДанныеРегистра.Сумма КАК Сумма
		|	ИЗ
		|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК ДанныеРегистра
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвойстваНачислений КАК ОтношениеКДенежномуДовольствию
		|			ПО (ОтношениеКДенежномуДовольствию.Начисление = ДанныеРегистра.НачислениеУдержание)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборГодовыхПремий КАК Отбор
		|			ПО (Отбор.Сотрудник = ДанныеРегистра.Сотрудник)
		|				И (ДанныеРегистра.Регистратор <> &ИсключаемыйРегистратор)
		|				И (ДанныеРегистра.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				)) КАК ДанныеРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра.Период,
		|	ДанныеРегистра.Сотрудник,
		|	ДанныеРегистра.СоставнаяЧасть,
		|	ДанныеРегистра.ПереносДанных
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеРегистра.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Месяцы.Период КАК Месяц
		|ПОМЕСТИТЬ ВТМесяцы
		|ИЗ
		|	ВТПериоды КАК Месяцы
		|ГДЕ
		|	(Месяцы.Период В (&ОтборМесяцев)
		|			ИЛИ &ПоВсемМесяцам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыРасчетаСреднегоСотрудников.Сотрудник,
		|	Месяцы.Месяц
		|ПОМЕСТИТЬ ВТМесяцыРасчетаСотрудников
		|ИЗ
		|	ВТПериодыРасчетаСреднегоСотрудников КАК ПериодыРасчетаСреднегоСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцы КАК Месяцы
		|		ПО ПериодыРасчетаСреднегоСотрудников.НачалоПериодаРасчетаСреднего <= Месяцы.Месяц
		|			И ПериодыРасчетаСреднегоСотрудников.ОкончаниеПериодаРасчетаСреднего >= Месяцы.Месяц";

	Запрос.Выполнить();
	
	// Данные начислений (основной заработок).
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.СоставнаяЧасть,
		|	ДанныеНачислений.Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ПОМЕСТИТЬ ВТНачисленияСреднегоЗаработка
		|ИЗ
		|	ВТДанныеДляРасчетаСреднего КАК ДанныеНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК МесяцыРасчетаСотрудников
		|		ПО (МесяцыРасчетаСотрудников.Месяц = ДанныеНачислений.Период)
		|			И (МесяцыРасчетаСотрудников.Сотрудник = ДанныеНачислений.Сотрудник)
		|			И (ДанныеНачислений.ПереносДанных = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.СоставнаяЧасть,
		|	ДанныеНачислений.Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|ИЗ
		|	ВТДанныеДляРасчетаСреднего КАК ДанныеНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК МесяцыРасчетаСотрудников
		|		ПО (МесяцыРасчетаСотрудников.Месяц = ДанныеНачислений.Период)
		|			И (МесяцыРасчетаСотрудников.Сотрудник = ДанныеНачислений.Сотрудник)
		|			И (ДанныеНачислений.ПереносДанных = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.Период,
		|	МИНИМУМ(Начисления.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТНачисленияСреднегоЗаработкаМинимальныйПриоритет
		|ИЗ
		|	ВТНачисленияСреднегоЗаработка КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Сотрудник,
		|	Начисления.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.СоставнаяЧасть,
		|	ДанныеНачислений.Источник,
		|	СУММА(ДанныеНачислений.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеНачислений.Сотрудник КАК Сотрудник,
		|		ДанныеНачислений.Период КАК Период,
		|		ДанныеНачислений.СоставнаяЧасть КАК СоставнаяЧасть,
		|		ДанныеНачислений.Источник КАК Источник,
		|		ДанныеНачислений.Сумма КАК Сумма
		|	ИЗ
		|		ВТНачисленияСреднегоЗаработка КАК ДанныеНачислений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСреднегоЗаработкаМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ДанныеНачислений.Сотрудник)
		|				И (МинимальныйПриоритет.Период = ДанныеНачислений.Период)
		|				И (МинимальныйПриоритет.Приоритет = ДанныеНачислений.Приоритет)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеНачислений.Сотрудник,
		|		ДанныеНачислений.Период,
		|		ДанныеНачислений.СоставнаяЧасть,
		|		ДанныеНачислений.Источник,
		|		ДанныеНачислений.Сумма
		|	ИЗ
		|		ВТНачисленияСреднегоЗаработка КАК ДанныеНачислений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСреднегоЗаработкаМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ДанныеНачислений.Сотрудник)
		|				И (МинимальныйПриоритет.Период = ДанныеНачислений.Период)
		|				И (МинимальныйПриоритет.Приоритет = 1)
		|				И (ДанныеНачислений.Приоритет = 3)) КАК ДанныеНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.СоставнаяЧасть,
		|	ДанныеНачислений.Источник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.СоставнаяЧасть УБЫВ";

	ВыборкаНачислений = Запрос.Выполнить().Выбрать();
	
	ДанныеНачислений = ПустаяТаблицаНачисленийСреднееДенежноеДовольствие();
	Пока ВыборкаНачислений.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеНачислений.Добавить(), ВыборкаНачислений);
	КонецЦикла;
			
	// Данные отработанного времени.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиМесяцы.Сотрудник,
		|	СотрудникиМесяцы.Месяц КАК ДатаНачалаПериода,
		|	КОНЕЦПЕРИОДА(СотрудникиМесяцы.Месяц, МЕСЯЦ) КАК ДатаОкончанияПериода
		|ИЗ
		|	ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы";
	
	ИсходныеДанные = Запрос.Выполнить().Выгрузить();
	
	УчетРабочегоВремениРасширенный.СоздатьВТВремяПоГрафикамСотрудников(ИсходныеДанные, МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВремени.Период,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПереносДанных,
		|	СУММА(ДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
		|ПОМЕСТИТЬ ВТНакопленияВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеВремени.ПериодДействия КАК Период,
		|		ДанныеВремени.Сотрудник КАК Сотрудник,
		|		ВЫБОР
		|			КОГДА ДанныеВремени.Регистратор ССЫЛКА Документ.ПереносДанных
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПереносДанных,
		|		ВЫБОР
		|			КОГДА ДанныеВремени.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * РАЗНОСТЬДАТ(ДанныеВремени.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ДанныеВремени.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ) КАК ОтработаноДнейКалендарных		
		|	ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			ПериодДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				И Регистратор <> &ИсключаемыйРегистратор
		|	            И ВидРасчета.ЗачетНормыВремени
		|				И ВидРасчета.ЗачетОтработанногоВремени
		|				И Сотрудник В
		|					(ВЫБРАТЬ
		|						ПериодыРасчета.Сотрудник
		|					ИЗ
		|						ВТПериодыРасчетаСреднегоСотрудников КАК ПериодыРасчета)) КАК ДанныеВремени) КАК ДанныеВремени
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВремени.Период,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПереносДанных
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеВремени.ОтработаноДнейКалендарных) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДанныеВремени.Период КАК Период,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ОтработаноДнейКалендарных,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ПОМЕСТИТЬ ВТВремяДляРасчетаСреднего
		|ИЗ
		|	ВТНакопленияВремени КАК ДанныеВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|		ПО (СотрудникиМесяцы.Сотрудник = ДанныеВремени.Сотрудник)
		|			И (СотрудникиМесяцы.Месяц = ДанныеВремени.Период)
		|			И (ДанныеВремени.ПереносДанных = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ДанныеВремени.Период,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ОтработаноДнейКалендарных,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|ИЗ
		|	ВТНакопленияВремени КАК ДанныеВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|		ПО (СотрудникиМесяцы.Сотрудник = ДанныеВремени.Сотрудник)
		|			И (СотрудникиМесяцы.Месяц = ДанныеВремени.Период)
		|			И (ДанныеВремени.ПереносДанных = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Время.Сотрудник,
		|	Время.Период,
		|	МИНИМУМ(Время.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет
		|ИЗ
		|	ВТВремяДляРасчетаСреднего КАК Время
		|
		|СГРУППИРОВАТЬ ПО
		|	Время.Сотрудник,
		|	Время.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВремени.Месяц,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Источник,
		|	СУММА(ДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
		|ПОМЕСТИТЬ ВТДанныеВремениПоСотрудникам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеВремени.Период КАК Месяц,
		|		ДанныеВремени.Сотрудник КАК Сотрудник,
		|		ДанныеВремени.Источник КАК Источник,
		|		ДанныеВремени.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных
		|	ИЗ
		|		ВТВремяДляРасчетаСреднего КАК ДанныеВремени
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО ДанныеВремени.Сотрудник = МинимальныйПриоритет.Сотрудник
		|				И ДанныеВремени.Период = МинимальныйПриоритет.Период
		|				И ДанныеВремени.Приоритет = МинимальныйПриоритет.Приоритет
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеВремени.Период,
		|		ДанныеВремени.Сотрудник,
		|		ДанныеВремени.Источник,
		|		ДанныеВремени.ОтработаноДнейКалендарных
		|	ИЗ
		|		ВТВремяДляРасчетаСреднего КАК ДанныеВремени
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО ДанныеВремени.Сотрудник = МинимальныйПриоритет.Сотрудник
		|				И ДанныеВремени.Период = МинимальныйПриоритет.Период
		|				И (МинимальныйПриоритет.Приоритет = 1)
		|				И (ДанныеВремени.Приоритет = 3)
		|	
		|	) КАК ДанныеВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВремени.Месяц,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Период,
		|	СУММА(ДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
		|ПОМЕСТИТЬ ВТДанныеВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеВремени.Сотрудник КАК Сотрудник,
		|		ДанныеВремени.Источник КАК Источник,
		|		ДанныеВремени.Месяц КАК Период,
		|		ДанныеВремени.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных
		|	ИЗ
		|		ВТДанныеВремениПоСотрудникам КАК ДанныеВремени
		|	) КАК ДанныеВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Период,
		|	ЕСТЬNULL(ИсточникиДанных.Источник, ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)) КАК Источник,
		|	ДанныеВремени.ОтработаноДнейКалендарных
		|ИЗ
		|	ВТДанныеВремени КАК ДанныеВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднего КАК ИсточникиДанных
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ИсточникиДанных.Сотрудник)
		|				И (МинимальныйПриоритет.Период = ИсточникиДанных.Период)
		|		ПО (ИсточникиДанных.Сотрудник = ДанныеВремени.Сотрудник)
		|			И (ИсточникиДанных.Период = ДанныеВремени.Период)
		|			И (ИсточникиДанных.Приоритет = МинимальныйПриоритет.Приоритет)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Период";

	ВыборкаВремени = Запрос.Выполнить().Выбрать();
	ДанныеВремени = ПустаяТаблицаОтработанноеВремяСреднееДенежноеДовольствие();
	Пока ВыборкаВремени.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеВремени.Добавить(), ВыборкаВремени);
	КонецЦикла;
	
	// Данные индексации
	// Для получения данных индексации исходные данные нужно дополнить данными месяца наступления события, 
	// т.к. индексация в этом месяце также распространяется на расчетный период в соответствии с п.16 постановления 922.
	Для Каждого СтрокаДанных Из ТаблицаСотрудники Цикл
		СтрокаДанных.ОкончаниеПериодаРасчетаСреднего = ДобавитьМесяц(СтрокаДанных.ОкончаниеПериодаРасчетаСреднего, 1);
	КонецЦикла;
	
	ДанныеИндексации = ДанныеИндексации(ТаблицаСотрудники);
	
	ДанныеДляРасчета = Новый Структура(
		"ДанныеОНачислениях, 
		|ДанныеОВремени, 
		|ДанныеОбИндексации");
		
	ДанныеДляРасчета.ДанныеОНачислениях = ДанныеНачислений;
	ДанныеДляРасчета.ДанныеОВремени = ДанныеВремени;
	ДанныеДляРасчета.ДанныеОбИндексации = ДанныеИндексации;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции	

// Получает таблицу коэффициентов по месяцам, 
// которые необходимо применить к среднему денежному довольствию из-за проводимой индексации заработка.
//
// Параметры:
//	ИсходныеДанные - таблица значений, 
//		созданная конструктором см. ПустаяТаблицаИсходныхДанныхРасчетаОбщегоСреднегоДенежногоДовольствия
//	КоэффициентУчитываетПоследующиеИндексации 
//		- если Истина, коэффициент на конкретный месяц учитывает все индексации произошедшие ПОСЛЕ него (для расчета
//		показателя КоэффициентИндексации)
//		- если Ложь, коэффициент на конкретный месяц учитывает все индексации произошедшие ДО него.
//
Функция ДанныеИндексации(ИсходныеДанные, КоэффициентУчитываетПоследующиеИндексации = Ложь) Экспорт
	
	ДанныеИндексации = Новый ТаблицаЗначений;
	ДанныеИндексации.Колонки.Добавить("Сотрудник");
	ДанныеИндексации.Колонки.Добавить("Период");
	ДанныеИндексации.Колонки.Добавить("ВидИндексации");
	ДанныеИндексации.Колонки.Добавить("КоэффициентИндексации");
	
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат ДанныеИндексации;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.НачалоПериодаРасчетаСреднего,
		|	ИсходныеДанные.ОкончаниеПериодаРасчетаСреднего,
		|	ИсходныеДанные.ДатаНачалаСобытия
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ИсходныеДанные.НачалоПериодаРасчетаСреднего) КАК НачалоПервогоИнтервала,
		|	МАКСИМУМ(ИсходныеДанные.ОкончаниеПериодаРасчетаСреднего) КАК ОкончаниеПоследнегоИнтервала
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеИндексации;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	// Создаем ВТ с месяцами
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Выборка.НачалоПервогоИнтервала, Выборка.ОкончаниеПоследнегоИнтервала);
	
	// Выбираем коэффициенты индексации заработка: 
	// - для индексации выплат, учитываемых при расчете показателя среднего заработка, 
	// для каждого месяца выбираем коэффициенты, всех индексаций, случившихся ДО него
	// - для расчета показателя КоэффициентИндексации - для каждого месяца 
	// выборка коэффициентов всех индексаций, случившихся ПОСЛЕ него.
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	Месяцы.Период КАК Период,
		|	ВидыИндексируемогоДенежногоСодержания.ССылка КАК ВидИндексации,
		|	ЕСТЬNULL(КоэффициентыИндексацииДенежногоДовольствия.Коэффициент, 1) КАК КоэффициентИндексации
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Месяцы
		|		ПО (Месяцы.Период МЕЖДУ ИсходныеДанные.НачалоПериодаРасчетаСреднего И ИсходныеДанные.ОкончаниеПериодаРасчетаСреднего)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыИндексируемогоДенежногоСодержания КАК ВидыИндексируемогоДенежногоСодержания
		|		ПО ИСТИНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииДенежногоДовольствия КАК КоэффициентыИндексацииДенежногоДовольствия
		|		ПО ИсходныеДанные.Сотрудник = КоэффициентыИндексацииДенежногоДовольствия.Сотрудник
		|			И (Месяцы.Период >= НАЧАЛОПЕРИОДА(КоэффициентыИндексацииДенежногоДовольствия.Период, МЕСЯЦ))
		|			И (КоэффициентыИндексацииДенежногоДовольствия.Период >= ИсходныеДанные.ДатаНачалаСобытия)
		|			И КоэффициентыИндексацииДенежногоДовольствия.ВидИндексации = ВидыИндексируемогоДенежногоСодержания.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ВидИндексации,
		|	Период УБЫВ		
		|ИТОГИ ПО
		|	Сотрудник,
		|	ВидИндексации,
		|	Период";
	
	Если Не КоэффициентУчитываетПоследующиеИндексации Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ">=", "<");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период УБЫВ", "Период ВОЗР");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Обходя результаты запроса агрегируем коэффициенты.
	
	ВыборкаПоСотрудникам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		ВыборкаПоВидамИндексаций = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоВидамИндексаций.Следующий() Цикл
			ВыборкаПоМесяцам = ВыборкаПоВидамИндексаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоМесяцам.Следующий() Цикл
				Коэффициент = 1;
				Выборка = ВыборкаПоМесяцам.Выбрать();
				Пока Выборка.Следующий() Цикл
					Коэффициент = Коэффициент * Выборка.КоэффициентИндексации;
				КонецЦикла;
				СтрокаИндексации = ДанныеИндексации.Добавить();
				СтрокаИндексации.Сотрудник = ВыборкаПоСотрудникам.Сотрудник;
				СтрокаИндексации.Период = ВыборкаПоМесяцам.Период;
				СтрокаИндексации.ВидИндексации = ВыборкаПоМесяцам.ВидИндексации;
				СтрокаИндексации.КоэффициентИндексации = Коэффициент;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеИндексации;
	
КонецФункции

// Функция - Таблицы данных среднего Денежного Довольствия
//
// Параметры:
//  ИмяДокумента - Строка, имя документа для которого надо получить данные для расчета среднего заработка
//  МассивСсылок - массив, "ДокументСсылка.ОтпускПоУходуЗаРебенкомВоеннослужащего".
// 
// Возвращаемое значение:
//  ДанныеДляРасчета - структура, содержит поля с таблицами данных для расчета среднего заработка по МассивСсылок 
//					ДанныеОНачислениях, Таблица значений	
//					ДанныеОВремени, Таблица значений	
//					ДанныеСтрахователей, Таблица значений.
//
Функция ТаблицыДанныхСреднегоДенежногоДовольствия(ИмяДокумента, МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СреднийЗаработокДД.Ссылка,
		|	СреднийЗаработокДД.Сотрудник,
		|	СреднийЗаработокДД.СоставнаяЧасть,
		|	СреднийЗаработокДД.Период,
		|	СреднийЗаработокДД.Сумма
		|ИЗ
		|	Документ.#ИмяДокумента#.СреднийЗаработокДД КАК СреднийЗаработокДД
		|ГДЕ
		|	СреднийЗаработокДД.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработанноеВремяДляСреднегоДД.Ссылка,
		|	ОтработанноеВремяДляСреднегоДД.Сотрудник,
		|	ОтработанноеВремяДляСреднегоДД.Период,
		|	ОтработанноеВремяДляСреднегоДД.ОтработаноДнейКалендарных,
		|	ОтработанноеВремяДляСреднегоДД.Источник
		|ИЗ
		|	Документ.#ИмяДокумента#.ОтработанноеВремяДляСреднегоДД КАК ОтработанноеВремяДляСреднегоДД
		|ГДЕ
		|	ОтработанноеВремяДляСреднегоДД.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументДанныеОбИндексации.Ссылка,
		|	ДокументДанныеОбИндексации.Сотрудник,
		|	ДокументДанныеОбИндексации.Период,
		|	ДокументДанныеОбИндексации.ВидИндексации,
		|	ДокументДанныеОбИндексации.КоэффициентИндексации
		|ИЗ
		|	Документ.#ИмяДокумента#.ДанныеОбИндексации КАК ДокументДанныеОбИндексации
		|ГДЕ
		|	ДокументДанныеОбИндексации.Ссылка В (&МассивСсылок)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента#", ИмяДокумента);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеОНачислениях 	= Результат[0].Выгрузить();
	ДанныеВремени 		= Результат[1].Выгрузить();
	ДанныеИндексации	= Результат[2].Выгрузить();	
	ДанныеДляРасчета 	= Новый Структура("ДанныеОНачислениях,ДанныеОВремени,ДанныеОбИндексации", ДанныеОНачислениях, ДанныеВремени, ДанныеИндексации);
	
	Возврат ДанныеДляРасчета;
	
КонецФункции 

// Функция - Реквизиты документа для подготовки параметров расчета среднего денежного довольствия.
//
// Возвращаемое значение:
//  РеквизитыДокумента - описание документа в котором рассчитывается средний заработок. 
//				Структура, содержащая поля:
//					Ссылка, "ДокументСсылка.ОтпускПоУходуЗаРебенкомВоеннослужащего"
//					Сотрудник, СправочникСсылка.Сотрудник
//					ФизическоеЛицо, СправочникСсылка.ФизическиеЛица
//					ДатаНачалаСобытия, Дата
//					ПрименятьПредельнуюВеличину, Булево
//					ПериодРасчетаСреднегоЗаработкаНачало, Дата
//					ПериодРасчетаСреднегоЗаработкаОкончание, Дата
//					РайонныйКоэффициентРФ, Число.
//
Функция РеквизитыДокументаДляРасчетаСреднегоДенежногоДовольствия() Экспорт
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка");
	РеквизитыДокумента.Вставить("ФизическоеЛицо");
	РеквизитыДокумента.Вставить("Сотрудник");
	РеквизитыДокумента.Вставить("ДатаНачалаСобытия");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаНачало");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаОкончание");
	РеквизитыДокумента.Вставить("РайонныйКоэффициентРФ", 1);
	РеквизитыДокумента.Вставить("ПрименятьПредельнуюВеличину");
	
	Возврат РеквизитыДокумента;
	
КонецФункции

// Функция - Данные документа для расчета среднего денежного довольствия
//
// Параметры:
//  РеквизитыДокумента - см. РасчетДенежногоДовольствия.РеквизитыДокументаДляРасчетаСреднегоДенежногоДовольствия
//  ТаблицыДанныхОСреднем - см. РасчетДенежногоДовольствия.ТаблицыДанныхСреднегоДенежногоДовольствия.
// 
// Возвращаемое значение:
//  ДанныеДокумента - структура, содержит поля: 
//					ПараметрыРасчета, см. РасчетДенежногоДовольствия.ПараметрыРасчетаСреднегоДневногоДенежногоДовольствияПоДокументу
//					ДанныеРасчетаСреднего, см. РасчетДенежногоДовольствияКлиентСервер.ДанныеРасчетаСреднегоДенежногоДовольствия.
//
Функция ДанныеДокументаДляРасчетаСреднегоДенежногоДовольствия(РеквизитыДокумента, ТаблицыДанныхОСреднем) Экспорт
	
	ДанныеДокумента = Новый Структура("ПараметрыРасчета,ДанныеРасчетаСреднего");
	
	ДанныеОНачислениях 	= ТаблицаДанныеОНачисленияхИзДанныхСреднегоДенежногоДовольствия(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	ДанныеОВремени 		= ТаблицаДанныеОВремениИзДанныхСреднегоДенежногоДовольствия(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	ДанныеОбИндексации 	= ТаблицаДанныеОбИндексацииИзДанныхСреднегоДенежногоДовольствия(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	
	ДанныеДокумента.ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоДенежногоДовольствияПоДокументу(РеквизитыДокумента, ДанныеОбИндексации);
		
	ДанныеДокумента.ДанныеРасчетаСреднего = РасчетДенежногоДовольствияКлиентСервер.ДанныеРасчетаСреднегоДенежногоДовольствия(ДанныеОНачислениях,ДанныеОВремени,ДанныеДокумента.ПараметрыРасчета);
	
	Возврат ДанныеДокумента;
	
КонецФункции

Функция ТаблицаДанныеОбИндексацииИзДанныхСреднегоДенежногоДовольствия(Ссылка, ТаблицыДанныхСреднегоДенежногоДовольствия)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоДенежногоДовольствия["ДанныеОбИндексации"], "Ссылка", Ссылка);
КонецФункции

Функция ТаблицаДанныеОНачисленияхИзДанныхСреднегоДенежногоДовольствия(Ссылка, ТаблицыДанныхСреднегоДенежногоДовольствия)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоДенежногоДовольствия["ДанныеОНачислениях"], "Ссылка", Ссылка);
КонецФункции

Функция ТаблицаДанныеОВремениИзДанныхСреднегоДенежногоДовольствия(Ссылка, ТаблицыДанныхСреднегоДенежногоДовольствия)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоДенежногоДовольствия["ДанныеОВремени"], "Ссылка", Ссылка);
КонецФункции

// Функция - Параметры расчета среднего дневного денежного довольствия по документу
//
// Параметры:
//  РеквизитыДокумента	 - 	см. РасчетДенежногоДовольствия.РеквизитыДокументаДляРасчетаСреднегоДенежногоДовольствия 
//  ДанныеОНачислениях	 - 	см. ТаблицыДанныхСреднегоДенежногоДовольствия 
//  ДанныеОВремени		 - 	см. ТаблицыДанныхСреднегоДенежногоДовольствия.
// 
// Возвращаемое значение:
//  ПараметрыРасчета - структура, см.РасчетДенежногоДовольствияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаДенежногоДовольствия.
//
Функция ПараметрыРасчетаСреднегоДневногоДенежногоДовольствияПоДокументу(РеквизитыДокумента, ДанныеОбИндексации) Экспорт
		
	ПараметрыРасчета = РасчетДенежногоДовольствияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаДенежногоДовольствия();
	ПараметрыРасчета.ДатаНачалаСобытия 							= РеквизитыДокумента.ДатаНачалаСобытия;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало 		= РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание 	= РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	ПараметрыРасчета.Индексации 								= ДанныеОбИндексации;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ТаблицаОтобраннаяПоПолю(ИсходнаяТаблица, Поле, ЗначениеОтбора)
	
	ОтобраннаяТаблица = ИсходнаяТаблица.СкопироватьКолонки();
	
	Для каждого Строка Из ИсходнаяТаблица Цикл
		Если Строка[Поле] = ЗначениеОтбора Тогда
			ЗаполнитьЗначенияСвойств(ОтобраннаяТаблица.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;

	Возврат ОтобраннаяТаблица;

КонецФункции

Функция КоэффициентИндексацииПоказателя(КоэффициентИндексации, Показатель, ВидИндексацииГосударственныхСлужащих) Экспорт
	
	Если  ВидИндексацииГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыДенежногоСодержания
		ИЛИ НЕ ЗначениеЗаполнено(ВидИндексацииГосударственныхСлужащих) Тогда
		Возврат КоэффициентИндексации;		
	КонецЕсли;
	
	Если ВидИндексацииГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыПоЗванию Тогда
		ИндексируемыеПоказатели = ПоказателиОВЗ();		
	Иначе	
		ИндексируемыеПоказатели = ПоказателиОВД();		
	КонецЕсли;
	
	Возврат ?(ИндексируемыеПоказатели.Найти(Показатель) = Неопределено, 1, КоэффициентИндексации);
	
КонецФункции

Функция ТаблицаКоэффициентовИндексацииДенежногоДовольствияСотрудников(ТаблицаПоказателейСотрудников, ИндексацияВоеннослужащих, ВидИндексацииГосударственныхСлужащих) Экспорт
	
	ИспользоватьВоеннуюСлужбу  = Константы.ИспользоватьВоеннуюСлужбу.Получить();

	Если Не ИспользоватьВоеннуюСлужбу ИЛИ НЕ ИндексацияВоеннослужащих ИЛИ НЕ ЗначениеЗаполнено(ВидИндексацииГосударственныхСлужащих) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ТаблицаКоэффициентовИндексации = Новый ТаблицаЗначений;
	ТаблицаКоэффициентовИндексации.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаКоэффициентовИндексации.Колонки.Добавить("КоэффициентИндексацииОДС", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(12, 10));
	ТаблицаКоэффициентовИндексации.Колонки.Добавить("КоэффициентИндексацииОВД", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(12, 10));
	ТаблицаКоэффициентовИндексации.Колонки.Добавить("КоэффициентИндексацииОВЗ", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(12, 10));
	ТаблицаКоэффициентовИндексации.Колонки.Добавить("РазмерОВД", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаКоэффициентовИндексации.Колонки.Добавить("РазмерОВЗ", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	
	ПоказателиОВДОВЗ = Новый Соответствие();
	
	МассивОВД = ПоказателиОВД();
	Для Каждого Показатель из МассивОВД Цикл
		ПоказателиОВДОВЗ.Вставить(Показатель,"ОВД");	
	КонецЦикла;
	
	МассивОВЗ = ПоказателиОВЗ();
	Для Каждого Показатель из МассивОВЗ Цикл
		ПоказателиОВДОВЗ.Вставить(Показатель,"ОВЗ");
	КонецЦикла;
	
	Для Каждого СтрокаПоказателяСотрудника из ТаблицаПоказателейСотрудников Цикл
		Если ПоказателиОВДОВЗ.Получить(СтрокаПоказателяСотрудника.Показатель) <> Неопределено Тогда
			НоваяСтрокаКоэффициента = ТаблицаКоэффициентовИндексации.Добавить();
			НоваяСтрокаКоэффициента.Сотрудник = СтрокаПоказателяСотрудника.Сотрудник;
			НоваяСтрокаКоэффициента["КоэффициентИндексации"+ПоказателиОВДОВЗ[СтрокаПоказателяСотрудника.Показатель]] = СтрокаПоказателяСотрудника.КоэффициентИндексации;
			НоваяСтрокаКоэффициента["Размер"+ПоказателиОВДОВЗ[СтрокаПоказателяСотрудника.Показатель]] = СтрокаПоказателяСотрудника.Значение;
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаКоэффициентовИндексации.Свернуть("Сотрудник", "КоэффициентИндексацииОДС,КоэффициентИндексацииОВД,КоэффициентИндексацииОВЗ,РазмерОВД,РазмерОВЗ");
	
	ТаблицаКоэффициентовИндексацииДенежногоДовольствия = Новый ТаблицаЗначений;
	ТаблицаКоэффициентовИндексацииДенежногоДовольствия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаКоэффициентовИндексацииДенежногоДовольствия.Колонки.Добавить("ВидИндексации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИндексируемогоДенежногоСодержания"));
	ТаблицаКоэффициентовИндексацииДенежногоДовольствия.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(12, 10));
	
	Для Каждого СтрокаИндексации из ТаблицаКоэффициентовИндексации Цикл
		
		СтрокаИндексации.КоэффициентИндексацииОВД = ?(СтрокаИндексации.КоэффициентИндексацииОВД = 0,1,СтрокаИндексации.КоэффициентИндексацииОВД); 
		СтрокаИндексации.КоэффициентИндексацииОВЗ = ?(СтрокаИндексации.КоэффициентИндексацииОВЗ = 0,1,СтрокаИндексации.КоэффициентИндексацииОВЗ); 
		СтрокаИндексации.КоэффициентИндексацииОДС = (СтрокаИндексации.РазмерОВД + СтрокаИндексации.РазмерОВЗ)/(СтрокаИндексации.РазмерОВД/СтрокаИндексации.КоэффициентИндексацииОВД + СтрокаИндексации.РазмерОВЗ/СтрокаИндексации.КоэффициентИндексацииОВЗ);
		
		СтрокаИндексацииДД = ТаблицаКоэффициентовИндексацииДенежногоДовольствия.Добавить();
		СтрокаИндексацииДД.Сотрудник 		= СтрокаИндексации.Сотрудник; 
		СтрокаИндексацииДД.ВидИндексации 	= Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыДенежногоСодержания;
		СтрокаИндексацииДД.Коэффициент 		= СтрокаИндексации.КоэффициентИндексацииОДС;
		
		Если ВидИндексацииГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыДенежногоСодержания ИЛИ
			ВидИндексацииГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыПоДолжности Тогда
			СтрокаИндексацииДД = ТаблицаКоэффициентовИндексацииДенежногоДовольствия.Добавить();
			СтрокаИндексацииДД.Сотрудник 		= СтрокаИндексации.Сотрудник; 
			СтрокаИндексацииДД.ВидИндексации 	= Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыПоДолжности;
			СтрокаИндексацииДД.Коэффициент 		= СтрокаИндексации.КоэффициентИндексацииОВД;
		КонецЕсли;
			
		Если ВидИндексацииГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыДенежногоСодержания ИЛИ
			ВидИндексацииГосударственныхСлужащих = Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыПоЗванию Тогда
			СтрокаИндексацииДД = ТаблицаКоэффициентовИндексацииДенежногоДовольствия.Добавить();
			СтрокаИндексацииДД.Сотрудник 		= СтрокаИндексации.Сотрудник; 
			СтрокаИндексацииДД.ВидИндексации 	= Перечисления.ВидыИндексируемогоДенежногоСодержания.ОкладыПоЗванию;
			СтрокаИндексацииДД.Коэффициент 		= СтрокаИндексации.КоэффициентИндексацииОВЗ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаКоэффициентовИндексацииДенежногоДовольствия;	
КонецФункции

Процедура ЗарегистрироватьКоэффициентыИндексацииДенежногоДовольствия(Движения, Отказ, Период, ТаблицаКоэффициентовДенежногоДовольствия, ЗаписыватьДвижения = Ложь)  Экспорт
	
	Если ТаблицаКоэффициентовДенежногоДовольствия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаКоэффициентов Из ТаблицаКоэффициентовДенежногоДовольствия Цикл
		НоваяСтрока = Движения.КоэффициентыИндексацииДенежногоДовольствия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоэффициентов);
		НоваяСтрока.Период = Период;
		Движения.КоэффициентыИндексацииДенежногоДовольствия.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Движения.КоэффициентыИндексацииДенежногоДовольствия.Записать();
		Движения.КоэффициентыИндексацииДенежногоДовольствия.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ОтпускПоУходуЗаРебенкомВоеннослужащего);
	СписокОбъектов.Добавить(Документы.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего);
	СписокОбъектов.Добавить(Документы.ЗачислениеВСпискиЧасти);
	СписокОбъектов.Добавить(Документы.ЗачислениеВСпискиЧастиСписком);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего);
	СписокОбъектов.Добавить(Документы.ИсключениеИзСписковЧасти);
	СписокОбъектов.Добавить(Документы.ИсключениеИзСписковЧастиСписком);
	СписокОбъектов.Добавить(Документы.КадровыйПереводВоеннослужащего);
	СписокОбъектов.Добавить(Документы.КадровыйПереводВоеннослужащегоСписком);
	СписокОбъектов.Добавить(Документы.ОтпускВоеннослужащего);
	СписокОбъектов.Добавить(Документы.ОтпускПоБеременностиИРодамВоеннослужащего);
	СписокОбъектов.Добавить(Документы.ОплатаСверхурочныхВоеннослужащим);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


