////////////////////////////////////////////////////////////////////////////////
// Подсистема «Расчет денежного содержания».
// 
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьДанныеСохраняемогоДенежногоСодержанияДокумента(Форма, ОписаниеДокумента, ОбновитьДенежноеСодержание = Истина, ОбновитьФактическиеНачисления = Истина) Экспорт
	
	Объект = Форма.Объект;
	
	Сотрудник = Объект.Сотрудник;
	ПериодРасчетаНачало = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ПериодРасчетаОкончание = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
	ДокументСсылка = Объект.Ссылка;
	ДолжностьЗамещаласьМенее12Месяцев = Ложь;
	Если Объект.Свойство("ДолжностьЗамещаласьМенее12Месяцев") Тогда
		ДолжностьЗамещаласьМенее12Месяцев = Объект.ДолжностьЗамещаласьМенее12Месяцев;
	КонецЕсли;
	ДенежноеСодержание = Объект.ДенежноеСодержание;
	ДенежноеСодержаниеФактическиеНачисления = Объект.ДенежноеСодержаниеФактическиеНачисления;
	Организация = Объект.Организация;
	ДатаНачалаСобытия = Объект[ОписаниеДокумента.ДатаНачалаСобытияИмя];
	ПериодРегистрации = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	НазначенияРасчетаДенежногоСодержания = Форма.НазначенияРасчетаДенежногоСодержания;
	
	Если ОбновитьФактическиеНачисления Тогда
				
		ДенежноеСодержаниеФактическиеНачисления.Очистить();
		
		НазначенияРасчета = Новый Массив;
		Для каждого НазначениеРасчетаКлючИЗначение Из НазначенияРасчетаДенежногоСодержания Цикл
			НазначенияРасчета.Добавить(НазначениеРасчетаКлючИЗначение.Значение);
		КонецЦикла;
		
		СоставнаяЧасть = Новый Массив;
		СоставнаяЧасть.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям);
		Если ДолжностьЗамещаласьМенее12Месяцев Тогда
			СоставнаяЧасть.Добавить(Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется);	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НазначенияРасчета", НазначенияРасчета);
		Запрос.УстановитьПараметр("ДатаНачала", ПериодРасчетаНачало);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодРасчетаОкончание)); 
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ДокументСсылка);
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("СоставнаяЧасть", СоставнаяЧасть);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	НазначениеРасчетаСохраняемогоДенежногоСодержания.Ссылка КАК НазначениеРасчета
		|ПОМЕСТИТЬ ВТНазначенияРасчета
		|ИЗ
		|	Перечисление.НазначениеРасчетаСохраняемогоДенежногоСодержания КАК НазначениеРасчетаСохраняемогоДенежногоСодержания
		|ГДЕ
		|	НазначениеРасчетаСохраняемогоДенежногоСодержания.Ссылка В(&НазначенияРасчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Ссылка КАК ВидРасчета,
		|	НазначенияРасчета.НазначениеРасчета,
		|	ВЫБОР
		|		КОГДА НазначенияРасчета.НазначениеРасчета = ЗНАЧЕНИЕ(Перечисление.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие)
		|			ТОГДА СвойстваНачислений.УчетВКомпенсацииПриУвольнении
		|		КОГДА НазначенияРасчета.НазначениеРасчета = ЗНАЧЕНИЕ(Перечисление.НазначениеРасчетаСохраняемогоДенежногоСодержания.ЕжегодныйОтпуск)
		|			ТОГДА СвойстваНачислений.УчетПриРасчетеОтпуска
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
		|	КОНЕЦ КАК СоставнаяЧасть
		|ПОМЕСТИТЬ ВТВидыРасчетовПоНазначениямРасчетов
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачислений
		|		ПО Начисления.Ссылка = СвойстваНачислений.Начисление
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНазначенияРасчета КАК НазначенияРасчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НазначенияРасчета.НазначениеРасчета = ЗНАЧЕНИЕ(Перечисление.НазначениеРасчетаСохраняемогоДенежногоСодержания.ЕжегодныйОтпуск)
		|					И СвойстваНачислений.УчетПриРасчетеОтпуска = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям)
		|				ТОГДА ИСТИНА
		|			КОГДА НазначенияРасчета.НазначениеРасчета = ЗНАЧЕНИЕ(Перечисление.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие)
		|					И (СвойстваНачислений.УчетВКомпенсацииПриУвольнении = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям)
		|						ИЛИ СвойстваНачислений.УчетВКомпенсацииПриУвольнении = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется))
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НазначенияРасчета.НазначениеРасчета = ЗНАЧЕНИЕ(Перечисление.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие)
		|				ТОГДА СвойстваНачислений.УчетВКомпенсацииПриУвольнении
		|			КОГДА НазначенияРасчета.НазначениеРасчета = ЗНАЧЕНИЕ(Перечисление.НазначениеРасчетаСохраняемогоДенежногоСодержания.ЕжегодныйОтпуск)
		|				ТОГДА СвойстваНачислений.УчетПриРасчетеОтпуска
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка)
		|		КОНЕЦ В (&СоставнаяЧасть)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоНазначениямРасчетов.ВидРасчета
		|ПОМЕСТИТЬ ВТИспользуемыеВидыРасчетов
		|ИЗ
		|	ВТВидыРасчетовПоНазначениямРасчетов КАК НачисленияПоНазначениямРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Период,
		|	Начисления.Сотрудник,
		|	Начисления.НачислениеУдержание КАК ВидРасчета,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИспользуемыеВидыРасчетов КАК ИспользуемыеВидыРасчетов
		|		ПО Начисления.НачислениеУдержание = ИспользуемыеВидыРасчетов.ВидРасчета
		|ГДЕ
		|	Начисления.Сотрудник = &Сотрудник
		|	И Начисления.Регистратор <> &ИсключаемыйРегистратор
		|	И Начисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Период,
		|	Начисления.НачислениеУдержание,
		|	Начисления.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	СУММА(Начисления.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОНачислениях.Сотрудник,
		|	СведенияОНачислениях.Месяц КАК Период,
		|	СведенияОНачислениях.НазначениеРасчета,
		|	СведенияОНачислениях.Начисление КАК ВидРасчета,
		|	СУММА(СведенияОНачислениях.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТДанныеПрошлойВерсии
		|ИЗ
		|	РегистрСведений.СведенияОНачисленияхДляРасчетаСохраняемогоДенежногоСодержания КАК СведенияОНачислениях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИспользуемыеВидыРасчетов КАК ИспользуемыеВидыРасчетов
		|		ПО СведенияОНачислениях.Начисление = ИспользуемыеВидыРасчетов.ВидРасчета
		|ГДЕ
		|	СведенияОНачислениях.Сотрудник = &Сотрудник
		|	И СведенияОНачислениях.Месяц МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОНачислениях.Сотрудник,
		|	СведенияОНачислениях.Месяц,
		|	СведенияОНачислениях.Начисление,
		|	СведенияОНачислениях.НазначениеРасчета
		|
		|ИМЕЮЩИЕ
		|	СУММА(СведенияОНачислениях.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеНачисления.Сотрудник,
		|	ФактическиеНачисления.Период КАК Период,
		|	ФактическиеНачисления.Начисление,
		|	ФактическиеНачисления.Сумма,
		|	ФактическиеНачисления.НазначениеРасчета КАК НазначениеРасчета,
		|	ФактическиеНачисления.СоставнаяЧасть,
		|	ФактическиеНачисления.Корректировка КАК Корректировка
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.Сотрудник КАК Сотрудник,
		|		Начисления.Период КАК Период,
		|		Начисления.ВидРасчета КАК Начисление,
		|		ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка) КАК СоставнаяЧасть,
		|		Начисления.Сумма КАК Сумма,
		|		ВидыРасчетовПоНазначениямРасчетов.НазначениеРасчета КАК НазначениеРасчета,
		|		ЛОЖЬ КАК Корректировка
		|	ИЗ
		|		ВТНачисления КАК Начисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыРасчетовПоНазначениямРасчетов КАК ВидыРасчетовПоНазначениямРасчетов
		|			ПО Начисления.ВидРасчета = ВидыРасчетовПоНазначениямРасчетов.ВидРасчета
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Начисления.Сотрудник,
		|		Начисления.Период,
		|		Начисления.ВидРасчета,
		|		ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПустаяСсылка),
		|		Начисления.Сумма,
		|		ВидыРасчетовПоНазначениямРасчетов.НазначениеРасчета,
		|		ИСТИНА
		|	ИЗ
		|		ВТДанныеПрошлойВерсии КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчетовПоНазначениямРасчетов КАК ВидыРасчетовПоНазначениямРасчетов
		|			ПО Начисления.ВидРасчета = ВидыРасчетовПоНазначениямРасчетов.ВидРасчета
		|				И Начисления.НазначениеРасчета = ВидыРасчетовПоНазначениямРасчетов.НазначениеРасчета
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СведенияОНачислениях.Сотрудник,
		|		СведенияОНачислениях.Месяц,
		|		ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка),
		|		СведенияОНачислениях.СоставнаяЧасть,
		|		СведенияОНачислениях.Сумма,
		|		СведенияОНачислениях.НазначениеРасчета,
		|		ИСТИНА
		|	ИЗ
		|		РегистрСведений.СведенияОНачисленияхДляРасчетаСохраняемогоДенежногоСодержания КАК СведенияОНачислениях
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНазначенияРасчета КАК НазначенияРасчета
		|			ПО СведенияОНачислениях.НазначениеРасчета = НазначенияРасчета.НазначениеРасчета
		|	ГДЕ
		|		СведенияОНачислениях.Сотрудник = &Сотрудник
		|		И СведенияОНачислениях.Начисление = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|		И СведенияОНачислениях.Месяц МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И СведенияОНачислениях.Сумма <> 0
		|		И СведенияОНачислениях.СоставнаяЧасть В(&СоставнаяЧасть)) КАК ФактическиеНачисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НазначениеРасчета,
		|	Период,
		|	Корректировка";

		ДанныеФактическихНачислений = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФактическихНачислений, ДенежноеСодержаниеФактическиеНачисления);
		
	КонецЕсли;
	
	Если ОбновитьДенежноеСодержание Тогда
		
		СотрудникиДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
		
		ДенежноеСодержание.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление,
		|	ВЫБОР
		|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
		|				ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
		|			ТОГДА ИСТИНА
		|		КОГДА СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеОтпуска = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СохраняетсяПриРасчетеОтпуска,
		|	ВЫБОР
		|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
		|				ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
		|			ТОГДА ИСТИНА
		|		КОГДА СвойстваНачисленийГосударственныхСлужащих.УчетПриРасчетеСохраняемогоДенежногоСодержания = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СохраняетсяПриРасчетеСохраняемогоДенежногоСодержания,
		|	ВЫБОР
		|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
		|				ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
		|			ТОГДА ИСТИНА
		|		КОГДА СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СохраняетсяПриРасчетеКомпенсацииПриУвольнении,
		|	ВЫБОР
		|		КОГДА СвойстваНачисленийГосударственныхСлужащих.УчетВКомпенсацииПриУвольнении = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УсловноСохраняетсяПриРасчетеКомпенсацииПриУвольнении
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваНачисленийГосударственныхСлужащих КАК СвойстваНачисленийГосударственныхСлужащих
		|		ПО Начисления.Ссылка = СвойстваНачисленийГосударственныхСлужащих.Начисление";
		
		СохраняетсяПриРасчетеОтпуска = Новый Соответствие;
		СохраняетсяПриРасчетеСохраняемогоДенежногоСодержания = Новый Соответствие;
		СохраняетсяПриРасчетеКомпенсацииПриУвольнении = Новый Соответствие;
		УсловноСохраняетсяПриРасчетеКомпенсацииПриУвольнении = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СохраняетсяПриРасчетеОтпуска.Вставить(Выборка.Начисление, Выборка.СохраняетсяПриРасчетеОтпуска);
			СохраняетсяПриРасчетеСохраняемогоДенежногоСодержания.Вставить(Выборка.Начисление, Выборка.СохраняетсяПриРасчетеСохраняемогоДенежногоСодержания);
			
			Если Выборка.УсловноСохраняетсяПриРасчетеКомпенсацииПриУвольнении Тогда
				Если ДолжностьЗамещаласьМенее12Месяцев  Тогда
					СохраняетсяПриРасчетеКомпенсацииПриУвольнении.Вставить(Выборка.Начисление, Ложь);
				Иначе
					СохраняетсяПриРасчетеКомпенсацииПриУвольнении.Вставить(Выборка.Начисление, Истина);
				КонецЕсли;
			Иначе
				СохраняетсяПриРасчетеКомпенсацииПриУвольнении.Вставить(Выборка.Начисление, Выборка.СохраняетсяПриРасчетеКомпенсацииПриУвольнении);
			КонецЕсли;
			
		КонецЦикла;
		
		СоответствиеНазначениеРасчета = Новый Соответствие;
		СоответствиеНазначениеРасчета.Вставить(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ЕжегодныйОтпуск, СохраняетсяПриРасчетеОтпуска);
		СоответствиеНазначениеРасчета.Вставить(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.СохраняемоеДенежноеСодержание, СохраняетсяПриРасчетеСохраняемогоДенежногоСодержания);
		СоответствиеНазначениеРасчета.Вставить(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие, СохраняетсяПриРасчетеКомпенсацииПриУвольнении);
		
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, Организация);
		МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
		МенеджерРасчета.НастройкиРасчета.ИсключатьРанееОплаченныеПериоды = Ложь;
		СтрокиНачислений = МенеджерРасчета.НачисленияЗарплатыЗаПериод(СотрудникиДокумента, ДатаНачалаСобытия, КонецДня(ДатаНачалаСобытия));
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиНачислений, "Начисление");
		ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
		
		Для каждого НазначениеРасчетаКлючИЗначение Из НазначенияРасчетаДенежногоСодержания Цикл
			
			НачислениеСохраняетсяПриРасчете = СоответствиеНазначениеРасчета[НазначениеРасчетаКлючИЗначение.Значение];
			
			Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
				Если НачислениеСохраняетсяПриРасчете[СтрокаНачислений.Начисление] Тогда
					НоваяСтрока = ДенежноеСодержание.Добавить();
					СтрокаРезультатаРасчетаВДанныеФормы(НоваяСтрока, СтрокаНачислений, ВидыРасчетаИнфо);
					НоваяСтрока.НазначениеРасчета = НазначениеРасчетаКлючИЗначение.Значение;
					НоваяСтрока.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтроки;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит формы НазначенияРасчетаДенежногоСодержания.
//
Процедура ЗаполнитьРеквизитФормыНазначенияРасчетаДенежногоСодержания(Форма) Экспорт
	
	МетаданныеДокумента = Форма.Объект.Ссылка.Метаданные();
	
	НазначенияРасчетаДокументов = НазначенияРасчетаДокументов();
	НазначенияРасчета = НазначенияРасчетаДокументов[МетаданныеДокумента];
	
	СтруктураРеквизитовИСпособовРасчета = Новый Структура;
	Для каждого Значение Из НазначенияРасчета Цикл
		
		Если Значение = Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ЕжегодныйОтпуск Тогда
			ЗначениеКлюча = "ЕжегодныйОтпуск";
		ИначеЕсли Значение = Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие Тогда
			ЗначениеКлюча = "ВыходноеПособие";
		Иначе
			ЗначениеКлюча = "СохраняемоеДенежноеСодержание";
		КонецЕсли;
		
		СтруктураРеквизитовИСпособовРасчета.Вставить(ЗначениеКлюча, Значение);
		
	КонецЦикла;
	
	Форма.НазначенияРасчетаДенежногоСодержания = Новый ФиксированнаяСтруктура(СтруктураРеквизитовИСпособовРасчета);
	
КонецПроцедуры

Процедура РассчитатьСохраняемоеДенежноеСодержаниеДокумента(Форма, Описание) Экспорт
	
	ДанныеФормы = РасчетДенежногоСодержанияКлиентСервер.ОписаниеПараметровСохраняемоеДенежноеСодержание();
	
	Объект = Форма.Объект;
	
	НазначенияРасчетаДенежногоСодержания = Форма.НазначенияРасчетаДенежногоСодержания;
	
	ДанныеФормы.Сотрудник 	   = Объект.Сотрудник;
	ДанныеФормы.Организация    = Объект.Организация;
	ДанныеФормы.ПериодРасчета  = Объект[Описание.МесяцНачисленияИмя];
	ДанныеФормы.ДатаНачалаСобытия  = Объект[Описание.ДатаНачалаСобытияИмя];
	ДанныеФормы.ДанныеОНачислениях = Объект.ДенежноеСодержание;
	ДанныеФормы.ДанныеОФактическихНачислениях = Объект.ДенежноеСодержаниеФактическиеНачисления;
	
	Для каждого НазначенияРасчетаКлючИЗначение Из НазначенияРасчетаДенежногоСодержания Цикл
		
		ДанныеФормы.НазначениеРасчета  = НазначенияРасчетаКлючИЗначение.Значение;
		СохраняемоеДенежноеСодержание = РассчитатьСохраняемоеДенежноеСодержание(ДанныеФормы);
		Если ДанныеФормы.НазначениеРасчета = Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие Тогда
			Объект.МесячноеДенежноеСодержание = СохраняемоеДенежноеСодержание;
		Иначе
			Объект.СохраняемоеДенежноеСодержание = СохраняемоеДенежноеСодержание;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Описание структуры ИсходныеДанныеДляРасчета см РасчетДенежногоСодержанияКлиентСервер.ОписаниеПараметровСохраняемоеДенежноеСодержание().
//
Функция РассчитатьСохраняемоеДенежноеСодержание(ИсходныеДанныеДляРасчета) Экспорт
	
	Сотрудник 			= ИсходныеДанныеДляРасчета.Сотрудник;
	Организация 		= ИсходныеДанныеДляРасчета.Организация;
	ПериодРасчета 		= ИсходныеДанныеДляРасчета.ПериодРасчета;
	НазначениеРасчета 	= ИсходныеДанныеДляРасчета.НазначениеРасчета;
	ДанныеОНачислениях 	= ИсходныеДанныеДляРасчета.ДанныеОНачислениях;
	ДанныеОФактическихНачислениях = ИсходныеДанныеДляРасчета.ДанныеОФактическихНачислениях;
	
	БазаДляРКиСН = Новый Соответствие;
	БазовыеВидыРасчета = БазовыеВидыРасчетаДляРКиСН();
	МенеджерРасчетаРКиСН = Неопределено;
	Отбор = Новый Структура("НазначениеРасчета", НазначениеРасчета);
	
	СохраняемоеДенежноеСодержание = 0 ;
	СуммаФактическиеНачисления = 0;
	ВсегоРКиСН = 0;
	
	// сохраняемые начисления
	Если ДанныеОНачислениях.Количество() > 0 Тогда
		
		ИсходныеСтроки  = Новый Массив;
		СтрокиРКиСН 	= Новый Массив;

		ИменаКадровыхДанных = "Подразделение,ГрафикРаботы";
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ИменаКадровыхДанных, ИсходныеДанныеДляРасчета.ДатаНачалаСобытия, , Ложь);
		
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ГрафикРаботы  = Справочники.ГрафикиРаботыСотрудников.ПустаяСсылка();
		Если КадровыеДанные.Количество() > 0 Тогда
			Подразделение = КадровыеДанные[0].Подразделение;
			ГрафикРаботы  = КадровыеДанные[0].ГрафикРаботы;
		КонецЕсли;
		ДанныеГрафикаСотрудника = ДанныеГрафикаСотрудника(ГрафикРаботы, Год(ПериодРасчета));
		
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРасчета, Организация);
		
		ВидыРасчета = Новый Массив;
		ВременныйСотрудник = Справочники.Сотрудники.ПолучитьСсылку();
		
		СтрокиНачислений = ДанныеОНачислениях.НайтиСтроки(Отбор);
		Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
			
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
			ИсходныеСтроки.Добавить(СтрокаНачислений);
			ВидыРасчета.Добавить(СтрокаНачислений.Начисление);
			
			НоваяСтрока = МенеджерРасчета.СтрокаТаблицыНачислений();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			НоваяСтрока.Сотрудник 		= ВременныйСотрудник;
			НоваяСтрока.ДатаНачала 		= НачалоМесяца(ПериодРасчета);
			НоваяСтрока.ДатаОкончания 	= КонецМесяца(ПериодРасчета);
			Если ВидРасчетаИнфо.ТребуетсяРасчетБазы
				И ВидРасчетаИнфо.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
				
				НоваяСтрока.НачалоБазовогоПериода = НоваяСтрока.ДатаНачала;
				НоваяСтрока.ОкончаниеБазовогоПериода = НоваяСтрока.ДатаОкончания;
				
			КонецЕсли;
			
			РасчетЗарплатыРасширенныйФормы.ПоказателиВМенеджерРасчета(НоваяСтрока, СтрокаНачислений, "Начисления");
			
			НоваяСтрока.Подразделение     = Подразделение;
			НоваяСтрока.ГрафикРаботы 	  = ГрафикРаботы;
			НоваяСтрока.ОбщийГрафик 	  = ГрафикРаботы;
			НоваяСтрока.ГрафикРаботыНорма = ГрафикРаботы;
			НоваяСтрока.ФиксРасчетВремени = Истина;
			
			Если ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
				Или ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
				СтрокиРКиСН.Добавить(НоваяСтрока);
			КонецЕсли;
				
		КонецЦикла;
		
		ПоказателиУчетаВремени = ПоказателиУчетаВремени();
		СвойстваНачислений = СвойстваНачислений(ВидыРасчета);
		ПоказателиСотрудников = ТаблицаПоказателейПоТаблицеНачисления(МенеджерРасчета.Зарплата.Начисления, СвойстваНачислений, ПоказателиУчетаВремени);
		
		ИзвестныеПоказатели = Новый ТаблицаЗначений;
		ИзвестныеПоказатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));	
		ИзвестныеПоказатели.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
		ЗаполнитьПоказателиУчетаВремениСотрудника(ПоказателиСотрудников, ДанныеГрафикаСотрудника, ПоказателиУчетаВремени, ИзвестныеПоказатели);
		
		СтруктураПоискаПоказателей = Новый Структура("Показатель");
		Для каждого СтрокаТаблицыРасчета Из МенеджерРасчета.Зарплата.Начисления Цикл
			Для Каждого ОписаниеПоказателя Из СвойстваНачислений[СтрокаТаблицыРасчета.Начисление].Показатели Цикл
				СтруктураПоискаПоказателей.Показатель = ОписаниеПоказателя.Показатель;
				СтрокиПоказателей = ПоказателиСотрудников.НайтиСтроки(СтруктураПоискаПоказателей);	
				Если СтрокиПоказателей.Количество() > 0 И СтрокиПоказателей[0].ЗначениеЗаполнено = Истина Тогда
					МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(СтрокаТаблицыРасчета, СтрокиПоказателей[0].Показатель, СтрокиПоказателей[0].Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из ИсходныеСтроки Цикл
			ДанныеОНачислениях.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		МенеджерРасчетаРКиСН = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРасчета, Организация);
		Для каждого СтрокаРКиСН Из СтрокиРКиСН Цикл
			ЗаполнитьЗначенияСвойств(МенеджерРасчетаРКиСН.СтрокаТаблицыНачислений(), СтрокаРКиСН);
			МенеджерРасчета.Зарплата.Начисления.Удалить(СтрокаРКиСН);
		КонецЦикла;
		
		МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Истина;
		МенеджерРасчета.РассчитатьЗарплату();
		
		ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
		Для каждого СтрокаРасчета Из МенеджерРасчета.Зарплата.Начисления Цикл
			НоваяСтрока = ДанныеОНачислениях.Добавить();
			СтрокаРезультатаРасчетаВДанныеФормы(НоваяСтрока, СтрокаРасчета, ВидыРасчетаИнфо);
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.НазначениеРасчета = НазначениеРасчета;
			СохраняемоеДенежноеСодержание = СохраняемоеДенежноеСодержание + НоваяСтрока.Результат;
			
			Для каждого ЭлементКоллекции Из БазовыеВидыРасчета Цикл
				ОсновнойВР = ЭлементКоллекции.Ключ;
				БазовыеВР  = ЭлементКоллекции.Значение;
				Если БазовыеВР.Найти(НоваяСтрока.Начисление) <> Неопределено Тогда
					НакопленнаяБаза = БазаДляРКиСН[ОсновнойВР];
					Если НакопленнаяБаза = Неопределено Тогда
						НакопленнаяБаза = 0;
					КонецЕсли;
					НакопленнаяБаза = НакопленнаяБаза + НоваяСтрока.Результат;
					БазаДляРКиСН.Вставить(ОсновнойВР, НакопленнаяБаза);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// фактические начисления
	ФактическиеНачисления = ДанныеОФактическихНачислениях.НайтиСтроки(Отбор);
	Для каждого СтрокаНачислений Из ФактическиеНачисления Цикл
		
		СуммаКУчету = ОКР(СтрокаНачислений.Сумма / 12, 2);
		СуммаФактическиеНачисления = СуммаФактическиеНачисления + СуммаКУчету;
		
		Для каждого ЭлементКоллекции Из БазовыеВидыРасчета Цикл
			ОсновнойВР = ЭлементКоллекции.Ключ;
			НакопленнаяБаза = БазаДляРКиСН[ОсновнойВР];
			Если НакопленнаяБаза = Неопределено Тогда
				НакопленнаяБаза = 0;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
				НакопленнаяБаза = НакопленнаяБаза + СуммаКУчету;
			Иначе
				БазовыеВР  = ЭлементКоллекции.Значение;
				Если БазовыеВР.Найти(СтрокаНачислений.Начисление) <> Неопределено Тогда
					НакопленнаяБаза = НакопленнаяБаза + СуммаКУчету;
				КонецЕсли;
			КонецЕсли;
			БазаДляРКиСН.Вставить(ОсновнойВР, НакопленнаяБаза);
		КонецЦикла;
		
	КонецЦикла;
	
	Если МенеджерРасчетаРКиСН <> Неопределено Тогда
		Для каждого СтрокаНачисления Из МенеджерРасчетаРКиСН.Зарплата.Начисления Цикл
			
			База = БазаДляРКиСН[СтрокаНачисления.Начисление];
			Если База = Неопределено Тогда
				База = 0;
			КонецЕсли;
			
			ИсходныеДанные = Новый Структура;
			
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления.Начисление);
			ПоказателиВидаРасчета = ВидРасчетаИнфо.Показатели;
			Для Каждого СведенияОПоказателе Из ПоказателиВидаРасчета Цикл
				Показатель = СведенияОПоказателе.Показатель;
				Если Не ЗначениеЗаполнено(Показатель) Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(Показатель);
				Если ИдентификаторПоказателя = "РасчетнаяБаза" Тогда
					ЗначениеПоказателя = База;
					ИсходныеДанные.Вставить(ИдентификаторПоказателя,ЗначениеПоказателя);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого СтрокаПоказатель Из СтрокаНачисления.Показатели Цикл
				Если Не ЗначениеЗаполнено(СтрокаПоказатель.Показатель) Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(СтрокаПоказатель.Показатель);
				Если ИдентификаторПоказателя = "РасчетнаяБаза" Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПоказателя = 0;
				Если СтрокаПоказатель.Значение <> Неопределено Тогда
					ЗначениеПоказателя = СтрокаПоказатель.Значение;
				КонецЕсли;
				ИсходныеДанные.Вставить(ИдентификаторПоказателя,ЗначениеПоказателя);
			КонецЦикла; 
			
			ФормулаРасчетаДляВыполнения = СтрЗаменить(ВидРасчетаИнфо.ФормулаРасчетаДляВыполнения, "ИсходныеДанные.", "Параметры.");
			Попытка 
				СтрокаНачисления.Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаРасчетаДляВыполнения, ИсходныеДанные);
			Исключение
				СтрокаНачисления.Результат = 0;
			КонецПопытки;
			
			НоваяСтрока = ДанныеОНачислениях.Добавить();
			СтрокаРезультатаРасчетаВДанныеФормы(НоваяСтрока, СтрокаНачисления, ВидыРасчетаИнфо);
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.НазначениеРасчета = НазначениеРасчета;
			ВсегоРКиСН = ВсегоРКиСН + НоваяСтрока.Результат;
			
		КонецЦикла;
	КонецЕсли;

	ДенежноеСодержаниеЗаМесяц = СохраняемоеДенежноеСодержание + СуммаФактическиеНачисления + ВсегоРКиСН;
	
	Возврат ДенежноеСодержаниеЗаМесяц;
	
КонецФункции

// Создает или отключает в зависимости от настроек начисления 
// входящие в состав денежного содержания государственных, муниципальных служащих.
// 
Процедура СоздатьНачисленияДенежногоСодержания(НастройкиРасчетаЗарплаты, КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета) Экспорт
	
	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	ИспользоватьГосударственнуюСлужбу = НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу;
	ИспользоватьМуниципальнуюСлужбу   = НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу;
	НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим = НастройкиПрограммы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим;
	ИспользоватьУчетКлассныхЧинов      = НастройкиПрограммы.ИспользоватьУчетКлассныхЧинов;
	ИспользоватьРасчетСохраняемогоДенежногоСодержания = НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания;
	
	ДополнительныеСвойстваНачислений = Новый Структура("ЯвляетсяДенежнымСодержанием,ОтношениеКДенежномуСодержанию,УчетПриРасчетеОтпуска,УчетПриРасчетеСохраняемогоДенежногоСодержания,УчетВКомпенсацииПриУвольнении");
	ДополнительныеСвойстваНачислений.ЯвляетсяДенежнымСодержанием = Истина;
	
	ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления;
	
	СоздаватьНачисления = (ИспользоватьГосударственнуюСлужбу Или ИспользоватьМуниципальнуюСлужбу);
	
	// Должностной оклад
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДЛОКЛ'");
	Описание.Наименование			= НСтр("ru = 'Должностной оклад'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Оклад'");
	Описание.ФормулаРасчета			= "Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДолжностнойОкладГосслужащего;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДолжностнойОкладГосслужащего = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ДолжностнойОклад;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Единое денежное вознаграждение.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЕДВН'");
	Описание.Наименование			= НСтр("ru = 'Единое денежное вознаграждение'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Денежн. вознагр.'");
	Описание.ФормулаРасчета			= "Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕдиноеДенежноеВознаграждение;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ВыплачиваетсяЕдиноеДенежноеВознаграждение Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕдиноеДенежноеВознаграждение = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ЕдиноеДенежноеВознаграждение;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оклад за классный чин
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОКЛКЛЧ'");
	Описание.Наименование			= НСтр("ru = 'Оклад за классный чин'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Оклад за классн. чин'");
	Описание.ФормулаРасчета			= "ОкладЗаКлассныйЧин * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ОкладЗаКлассныйЧин");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладЗаКлассныйЧин;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ИспользоватьГосударственнуюСлужбу Или (ИспользоватьУчетКлассныхЧинов И НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим) Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладЗаКлассныйЧин = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ОкладЗаКлассныйЧин;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка к окладу за классный чин.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НДКЛЧ'");
	Описание.Наименование			= НСтр("ru = 'Надбавка к окладу за классный чин'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Надб. за классн. чин'");
	Описание.ФормулаРасчета			= "ПроцентНадбавкиКОкладуЗаКлассныйЧин / 100 * Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиКОкладуЗаКлассныйЧин");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаКОкладуЗаКлассныйЧин;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ИспользоватьМуниципальнуюСлужбу И ИспользоватьУчетКлассныхЧинов И Не НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаКОкладуЗаКлассныйЧин = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ПрочиеЕжемесячныеВыплаты;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Ежемесячная квалификационная надбавка.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЕМКВН'");
	Описание.Наименование			= НСтр("ru = 'Ежемесячная квалификационная надбавка'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Квалиф. надб.'");
	Описание.ФормулаРасчета			= "ПроцентЕжемесячнойКвалификационнойНадбавки / 100 * Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентЕжемесячнойКвалификационнойНадбавки");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяКвалификационнаяНадбавка;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ВыплачиваетсяЕжемесячнаяКвалификационнаяНадбавка Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяКвалификационнаяНадбавка = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ПрочиеЕжемесячныеВыплаты;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за выслугу лет
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Если ИспользоватьГосударственнуюСлужбу Тогда
		Описание.Код					= НСтр("ru = 'НВЛГС'");
		Описание.Наименование			= НСтр("ru = 'Надбавка за выслугу лет на государственной службе'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Выслуга лет'");
	ИначеЕсли ИспользоватьМуниципальнуюСлужбу Тогда
		Описание.Код					= НСтр("ru = 'НВЛМС'");
		Описание.Наименование			= НСтр("ru = 'Надбавка за выслугу лет на муниципальной службе'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Выслуга лет'");
	КонецЕсли;
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаВыслугуЛетНаГосударственнойСлужбе / 100 * Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыслугуЛетГосслужащим;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыслугуЛетГосслужащим = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаВыслугуЛет;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Надбавка за особые условия службы.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Если ИспользоватьГосударственнуюСлужбу Тогда
		Описание.Код					= НСтр("ru = 'НОУГС'");
		Описание.Наименование			= НСтр("ru = 'Надбавка за особые условия государственной службы'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Особые усл. гос. службы'");
	ИначеЕсли ИспользоватьМуниципальнуюСлужбу Тогда
		Описание.Код					= НСтр("ru = 'НОУМС'");
		Описание.Наименование			= НСтр("ru = 'Надбавка за особые условия муниципальной службы'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Особые усл. мун. службы'");
	КонецЕсли;	
	Описание.ФормулаРасчета			= "ПроцентНадбавкиЗаОсобыеУсловияСлужбы / 100 * Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаОсобыеУсловияСлужбы");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаОсобыеУсловияСлужбыГосслужащих;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаОсобыеУсловияСлужбыГосслужащих = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаОсобыеУсловияСлужбы;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;   
	
	// Надбавка за секретность
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НОУС'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за секретность'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Секретность'");
	Описание.ФормулаРасчета			= "ПроцентНадбавкиЗаСекретность / 100 * Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаСекретность");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаСекретность;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаСекретность = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаСекретность;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Ежемесячное денежное поощрение.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЕМДП'");
	Описание.Наименование			= НСтр("ru = 'Ежемесячное денежное поощрение'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Денежн. поощр.'");
	Описание.ФормулаРасчета			= "КоличествоДолжностныхОкладов * Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("КоличествоДолжностныхОкладов");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячноеДенежноеПоощрение;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячноеДенежноеПоощрение = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ЕжемесячноеДенежноеПоощрение;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НачислениеСохраняется;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениямИлиСохраняется;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Премия за выполнение особо важных и сложных заданий.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПрОВСЗ'");
	Описание.Наименование			= НСтр("ru = 'Премия за выполнение особо важных и сложных заданий'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Особ. задания'");
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.Рассчитывается  = Ложь;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ПремияЗаВыполнениеОсобоВажныхИСложныхЗаданий;
	Описание.КлючевыеСвойства = "Ссылка";
	Если СоздаватьНачисления Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ПремияЗаВыполнениеОсобоВажныхИСложныхЗаданий = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ПремияЗаОсобоВажныеИСложныеЗадания;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Единовременная выплата к отпуску госслужащего.
	КоличествоОкладовДляВыплатыКОтпуску = СтрЗаменить(Строка(ПараметрыПланаВидовРасчета.КоличествоОкладовДляВыплатыКОтпускуГосслужащего),",",".");
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЕВОТП'");
	Описание.ФормулаРасчета = "(Оклад + ОкладЗаКлассныйЧин) * " + КоличествоОкладовДляВыплатыКОтпуску;
	Описание.Наименование			= НСтр("ru = 'Единовременная выплата к отпуску госслужащего'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Выпл. к отп.'");
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕдиновременнаяВыплатаКОтпускуГосслужащего;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ИспользоватьГосударственнуюСлужбу Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕдиновременнаяВыплатаКОтпускуГосслужащего = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ЕдиновременнаяВыплатаКОтпуску;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Материальная помощь к отпуску госслужащего.
	КоличествоОкладовДляМатериальнойПомощи = СтрЗаменить(Строка(ПараметрыПланаВидовРасчета.КоличествоОкладовДляМатериальнойПомощиГосслужащего),",",".");
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'МТПОМ'");
	Описание.Наименование			= НСтр("ru = 'Материальная помощь к отпуску госслужащего'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Матпом. при отп.'");
	Описание.ФормулаРасчета = "(Оклад + ОкладЗаКлассныйЧин) * " + КоличествоОкладовДляМатериальнойПомощи;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.МатериальнаяПомощьКОтпускуГосслужащего;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ИспользоватьГосударственнуюСлужбу Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.МатериальнаяПомощьКОтпускуГосслужащего = Описание.СсылкаНаОбъект;
		ДополнительныеСвойстваНачислений.ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.МатериальнаяПомощь;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеОтпуска 						   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям;
		ДополнительныеСвойстваНачислений.УчетПриРасчетеСохраняемогоДенежногоСодержания = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.НеУчитывается;
		ДополнительныеСвойстваНачислений.УчетВКомпенсацииПриУвольнении 				   = Перечисления.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям;
		ГосударственнаяСлужба.ЗаписатьСвойстваНачисленийГосударственныхСлужащих(Описание.СсылкаНаОбъект, ДополнительныеСвойстваНачислений);
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Командировка
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'КОМНД'");
	Описание.Наименование			= НСтр("ru = 'Командировка (денежное содержание)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Командировка'");
	Описание.КлючевыеСвойства		= "КатегорияНачисленияИлиНеоплаченногоВремени";
	Если СоздаватьНачисления И ИспользоватьРасчетСохраняемогоДенежногоСодержания И НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Выходное пособие
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Наименование			= НСтр("ru = 'Компенсация при увольнении (месячное денежное содержание)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Выходн. пособие'");
	Описание.Код 					= НСтр("ru = 'КПУ'");
	Описание.КлючевыеСвойства		= "КатегорияНачисленияИлиНеоплаченногоВремени";
	Если СоздаватьНачисления И ИспользоватьГосударственнуюСлужбу Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Дополнительный учебный отпуск (оплачиваемый).
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'УЧЕБН'");
	Описание.Наименование			= НСтр("ru = 'Дополнительный учебный отпуск (сохр. денежное содержание)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Учебн. отп.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный");
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если СоздаватьНачисления И ИспользоватьРасчетСохраняемогоДенежногоСодержания И НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата до денежного содержания за дни болезни.
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДПСДС'");
	Описание.Наименование			= НСтр("ru = 'Доплата до денежного содержания за дни болезни'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Допл. за дни болезни'");
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КлючевыеСвойства		= "КатегорияНачисленияИлиНеоплаченногоВремени";
	Если СоздаватьНачисления И ИспользоватьРасчетСохраняемогоДенежногоСодержания
		И НастройкиРасчетаЗарплаты.ИспользоватьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оплата дней по уходу за детьми-инвалидами
	СоздатьНачислениеОплатаДнейУходаЗаДетьмиИнвалидамиГосслужащих(СоздаватьНачисления, КоллекторНачислений, СвойстваНачислений);
	
КонецПроцедуры


Процедура СоздатьНачислениеОплатаДнейУходаЗаДетьмиИнвалидамиГосслужащих(СоздаватьНачисления, КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ПланыВидовРасчетаМенеджер = ПланыВидовРасчета.Начисления;
	
	Если КоллекторНачислений = Неопределено Тогда
		КоллекторНачислений = Новый Соответствие;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	ИспользоватьРасчетСохраняемогоДенежногоСодержания = НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания;	
		
	Описание = ПланыВидовРасчетаМенеджер.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ИНВ'");
	Описание.Наименование			= НСтр("ru = 'Оплата дней ухода за детьми-инвалидами (сохр. ден. содержание)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за детьми-инв.'");		

	Если СоздаватьНачисления И ИспользоватьРасчетСохраняемогоДенежногоСодержания Тогда
		ПланыВидовРасчетаМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчетаМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
		
КонецПроцедуры



Процедура СоздатьПоказателиНачисленийДенежногоСодержания(ПараметрыПланаВидовРасчета = Неопределено) Экспорт
	
	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	ИспользоватьГосударственнуюСлужбу = НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу;
	ИспользоватьМуниципальнуюСлужбу   = НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу;
	НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим = НастройкиПрограммы.НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим;
	ИспользоватьУчетКлассныхЧинов = НастройкиПрограммы.ИспользоватьУчетКлассныхЧинов;
	ИспользоватьВоеннуюСлужбу = НастройкиПрограммы.ИспользоватьВоеннуюСлужбу;
	
	ПоказателиРасчетаЗарплатыМенеджер = Справочники.ПоказателиРасчетаЗарплаты;
	
	Если ПараметрыПланаВидовРасчета = Неопределено Тогда
		ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	КонецЕсли;
	ПараметрыПоказателей = ПараметрыПланаВидовРасчета.ПараметрыПоказателей;
	
	СоздаватьПоказатели = (ИспользоватьГосударственнуюСлужбу Или ИспользоватьМуниципальнуюСлужбу);
	СоздаватьПоказателиГосслужбы = СоздаватьПоказатели Или ИспользоватьВоеннуюСлужбу;
	
	СозданныеЭлементы = ПараметрыПланаВидовРасчета.СсылкиПоказателиРасчетаЗарплаты;
	Если СозданныеЭлементы = Неопределено Тогда 
		СозданныеЭлементы = ПоказателиРасчетаЗарплатыМенеджер.СсылкиПоказателиРасчетаЗарплатыНачальнойНастройкиПрограммы();
	КонецЕсли;
	
	// ОкладЗаКлассныйЧин
	Если ИспользоватьГосударственнуюСлужбу Или (ИспользоватьУчетКлассныхЧинов И НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим) Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ОкладЗаКлассныйЧин";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад за классный чин'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Окл. классн. чин'");
		ОписаниеПоказателя.ДопускаетсяНулевоеЗначение = Истина;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Истина;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("ОкладЗаКлассныйЧин");
	КонецЕсли;
	
	// ПроцентНадбавкиКОкладуЗаКлассныйЧин
	Если ИспользоватьУчетКлассныхЧинов И Не НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиКОкладуЗаКлассныйЧин";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки к окладу за классный чин'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ДопускаетсяНулевоеЗначение = Истина;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Истина;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("ПроцентНадбавкиКОкладуЗаКлассныйЧин");
	КонецЕсли;
	
	// ПроцентЕжемесячнойКвалификационнойНадбавки
	Если ПараметрыПланаВидовРасчета.ВыплачиваетсяЕжемесячнаяКвалификационнаяНадбавка Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентЕжемесячнойКвалификационнойНадбавки";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент ежемесячной квалификац. надбавки'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентЕжемесячнойКвалификационнойНадбавки");
	КонецЕсли;
	
	// ПроцентНадбавкиЗаВыслугуЛетНаГосударственнойСлужбе
	Если СоздаватьПоказатели Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаВыслугуЛетНаГосударственнойСлужбе";
		Если ИспользоватьГосударственнуюСлужбу Тогда
			ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за выслугу лет на государственной службе'");
		Иначе
			ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за выслугу лет на муниципальной службе'");
		КонецЕсли;
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.ВидСтажа = Справочники.ВидыСтажа.СоздатьВидСтажаЗаВыслугуЛетНаГосударственнойСлужбе(ИспользоватьГосударственнуюСлужбу);
		ОписаниеПоказателя.Предопределенный = Ложь;
		Показатель = ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		ПоказателиРасчетаЗарплатыМенеджер.ЗаполнитьШкалуСтажаНадбавкиЗаВыслугуЛет(Показатель, Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаВыслугуЛетНаГосударственнойСлужбе");
	КонецЕсли;
	
	ГосударственнаяСлужба.СоздатьПоказательПроцентНадбавкиЗаОсобыеУсловияСлужбы(ПараметрыПланаВидовРасчета, СозданныеЭлементы, СоздаватьПоказателиГосслужбы);
	ГосударственнаяСлужба.СоздатьПоказательПроцентНадбавкиЗаСекретность(ПараметрыПланаВидовРасчета, СозданныеЭлементы, СоздаватьПоказателиГосслужбы);
	
	// КоличествоДолжностныхОкладов
	Если СоздаватьПоказатели Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;
		ОписаниеПоказателя.Идентификатор = "КоличествоДолжностныхОкладов";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Количество должностных окладов'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Кол. окладов'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.Предопределенный = Ложь;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "КоличествоДолжностныхОкладов");
	КонецЕсли;
	
	Если ИспользоватьГосударственнуюСлужбу Тогда
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "МесяцевВыплатыКомпенсации";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Месяцев выплаты компенсации'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Месяцев выпл. компенс.'");
		ОписаниеПоказателя.Точность = 2;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя);
		
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "МесячноеДенежноеСодержание";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Месячное денежное содержание'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Месячное ден. содерж.'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.Точность = 2;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя);
	Иначе
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("МесячноеДенежноеСодержание");
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("МесяцевВыплатыКомпенсации");
	КонецЕсли;
	
	Если НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания Тогда
		
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "СохраняемоеДенежноеСодержание";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Сохраняемое денежное содержание'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Сохр. ден. содержание'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.Точность = 2;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя);
		
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "КоэффициентИндексацииСохраняемогоДенежногоСодержания";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Коэффициент индексации сохраняемого денежного содержания'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Коэф. индекс. ден. содерж.'");
		ОписаниеПоказателя.Точность = 2;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя);
		
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих";
		ОписаниеПоказателя.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации;
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Среднемесячное количество календарных дней отпуска госслужащих'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Среднемес. кол. дней'");
		ОписаниеПоказателя.Точность = 2;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя);
		
		ОписаниеПоказателя = ПоказателиРасчетаЗарплатыМенеджер.ОписаниеПоказателя();
		ОписаниеПоказателя.Идентификатор = "ПроцентОплатыСохраняемогоДенежногоСодержания";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент оплаты сохраняемого денежного содержания'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% оплаты ден. содерж.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Истина;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя);
		
	Иначе
		
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("СохраняемоеДенежноеСодержание");
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("КоэффициентИндексацииСохраняемогоДенежногоСодержания");
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих");
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("ПроцентОплатыСохраняемогоДенежногоСодержания");
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НазначенияРасчетаДокументов() Экспорт
	
	НазначенияРасчетаДокументов = Новый Соответствие;
	
	НазначенияРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ЕжегодныйОтпуск);
	НазначенияРасчетаДокументов.Вставить(Метаданные.Документы.Отпуск, НазначенияРасчета);
	
	НазначенияРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.СохраняемоеДенежноеСодержание);
	НазначенияРасчетаДокументов.Вставить(Метаданные.Документы.Командировка, НазначенияРасчета);
	
	НазначенияРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.СохраняемоеДенежноеСодержание);
	НазначенияРасчетаДокументов.Вставить(Метаданные.Документы.ОплатаПоСреднемуЗаработку, НазначенияРасчета);
	
	НазначенияРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ЕжегодныйОтпуск);
	НазначенияРасчета.Добавить(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие);
	НазначенияРасчетаДокументов.Вставить(Метаданные.Документы.Увольнение, НазначенияРасчета);
	
	НазначенияРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.СохраняемоеДенежноеСодержание);
	НазначенияРасчетаДокументов.Вставить(Метаданные.Документы.БольничныйЛист, НазначенияРасчета);
	
	НазначенияРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.СохраняемоеДенежноеСодержание);
	НазначенияРасчетаДокументов.Вставить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами, НазначенияРасчета);
	
	Возврат НазначенияРасчетаДокументов;
	
КонецФункции 

Функция КоличествоДнейВМесяцеДляОплатыОтпусков(ДатаНачалаСобытия) Экспорт 
	
	Результат = РегистрыСведений.СреднемесячноеКоличествоДнейДляОплатыОтпусковГосслужащих.СрезПоследних(ДатаНачалаСобытия);
	
	КоличествоДней = 0;
	Если Результат.Количество() > 0 Тогда
		КоличествоДней =  Результат[0].КоличествоДней;
	КонецЕсли;
	
	Возврат ?(КоличествоДней = 0, 29.3, КоличествоДней);
	
КонецФункции

// Вычисляет значение показателей ОкладЗаКлассныйЧин, ПроцентНадбавкиКОкладуЗаКлассныйЧин.
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяОкладНадбавкаЗаКлассныйЧин(ДополнительныеПоказатели) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетКлассныхЧинов") Тогда
		Возврат;
	КонецЕсли;
	
	// Вычисляемые показатели
	ОкладЗаКлассныйЧин = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладЗаКлассныйЧин");
	ПроцентНадбавкиКОкладуЗаКлассныйЧин = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиКОкладуЗаКлассныйЧин");
	ПоказателиДляРасчета = Новый Массив;
	ПоказателиДляРасчета.Добавить(ОкладЗаКлассныйЧин);
	ПоказателиДляРасчета.Добавить(ПроцентНадбавкиКОкладуЗаКлассныйЧин);
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.ЗначениеОпределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПоказателиДляРасчета.Найти(СтрокаПоказателей.Показатель) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = СтрокаПоказателей.Сотрудник;
		НоваяСтрока.ДатаНачала = СтрокаПоказателей.ДатаНачала;
		НоваяСтрока.Показатель = СтрокаПоказателей.Показатель;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.ДатаНачала КАК Период,
	|	ИсходныеДанные.Показатель
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.Показатель,
	|	Сотрудники.ФизическоеЛицо,
	|	ИсходныеДанные.Период
	|ПОМЕСТИТЬ ВТИсходныеДанныеСФизическимЛицом
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ИсходныеДанные.Сотрудник = Сотрудники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПериодыФизическихЛиц.Период КАК Период,
	|	МАКСИМУМ(КлассныеЧины.Период) КАК ПериодДвижения
	|ПОМЕСТИТЬ ВТДатыПоследнихДвижений
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИсходныеДанныеСФизическимЛицом.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ИсходныеДанныеСФизическимЛицом.Период КАК Период
	|	ИЗ
	|		ВТИсходныеДанныеСФизическимЛицом КАК ИсходныеДанныеСФизическимЛицом) КАК ПериодыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлассныеЧиныРангиФизическихЛиц КАК КлассныеЧины
	|		ПО ПериодыФизическихЛиц.ФизическоеЛицо = КлассныеЧины.ФизическоеЛицо
	|			И ПериодыФизическихЛиц.Период >= КлассныеЧины.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыФизическихЛиц.ФизическоеЛицо,
	|	ПериодыФизическихЛиц.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ПериодДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДвижений.ФизическоеЛицо,
	|	ДатыПоследнихДвижений.Период,
	|	КлассныеЧиныРангиФизическихЛиц.КлассныйЧинРанг КАК КлассныйЧин
	|ПОМЕСТИТЬ ВТКлассныеЧиныФизическихЛиц
	|ИЗ
	|	ВТДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассныеЧиныРангиФизическихЛиц КАК КлассныеЧиныРангиФизическихЛиц
	|		ПО ДатыПоследнихДвижений.ФизическоеЛицо = КлассныеЧиныРангиФизическихЛиц.ФизическоеЛицо
	|			И ДатыПоследнихДвижений.ПериодДвижения = КлассныеЧиныРангиФизическихЛиц.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДатыПоследнихДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКлассныхЧинов.КлассныйЧин КАК КлассныйЧин,
	|	ПериодыКлассныхЧинов.Период,
	|	МАКСИМУМ(ОкладыПоКласснымЧинам.Период) КАК ПериодДвижения
	|ПОМЕСТИТЬ ВТДатыПоследнихДвижений
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлассныеЧиныФизическихЛиц.КлассныйЧин КАК КлассныйЧин,
	|		КлассныеЧиныФизическихЛиц.Период КАК Период
	|	ИЗ
	|		ВТКлассныеЧиныФизическихЛиц КАК КлассныеЧиныФизическихЛиц) КАК ПериодыКлассныхЧинов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОкладыНадбавкиПоКласснымЧинамРангам КАК ОкладыПоКласснымЧинам
	|		ПО ПериодыКлассныхЧинов.КлассныйЧин = ОкладыПоКласснымЧинам.КлассныйЧинРанг
	|			И ПериодыКлассныхЧинов.Период >= ОкладыПоКласснымЧинам.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыКлассныхЧинов.КлассныйЧин,
	|	ПериодыКлассныхЧинов.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлассныйЧин,
	|	ПериодДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДвижений.КлассныйЧин КАК КлассныйЧин,
	|	ДатыПоследнихДвижений.Период КАК Период,
	|	ОкладыПоКласснымЧинам.Размер КАК РазмерПоказателя
	|ПОМЕСТИТЬ ВТРазмерыПоказателей
	|ИЗ
	|	ВТДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОкладыНадбавкиПоКласснымЧинамРангам КАК ОкладыПоКласснымЧинам
	|		ПО ДатыПоследнихДвижений.КлассныйЧин = ОкладыПоКласснымЧинам.КлассныйЧинРанг
	|			И ДатыПоследнихДвижений.ПериодДвижения = ОкладыПоКласснымЧинам.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлассныйЧин,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.Показатель,
	|	КлассныеЧиныФизическихЛиц.Период КАК ДатаНачала,
	|	РазмерыПоказателей.РазмерПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ВТКлассныеЧиныФизическихЛиц КАК КлассныеЧиныФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРазмерыПоказателей КАК РазмерыПоказателей
	|		ПО КлассныеЧиныФизическихЛиц.КлассныйЧин = РазмерыПоказателей.КлассныйЧин
	|			И КлассныеЧиныФизическихЛиц.Период = РазмерыПоказателей.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходныеДанныеСФизическимЛицом КАК ИсходныеДанные
	|		ПО КлассныеЧиныФизическихЛиц.ФизическоеЛицо = ИсходныеДанные.ФизическоеЛицо
	|			И КлассныеЧиныФизическихЛиц.Период = ИсходныеДанные.Период";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ОтборСтрок = Новый Структура("Сотрудник, Показатель, ДатаНачала, ЗначениеОпределено");
	ОтборСтрок.Вставить("ЗначениеОпределено", Ложь);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		СтрокиПоказателяСотрудника = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаПоказателяСотрудника Из СтрокиПоказателяСотрудника Цикл
			СтрокаПоказателяСотрудника.Значение = Выборка.ЗначениеПоказателя;
			СтрокаПоказателяСотрудника.ЗначениеОпределено = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбслуживаниеРасчетаСохраняемогоДенежногоСодержания

Функция БазовыеВидыРасчетаДляРКиСН()

	БазовыеВидыРасчета = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияБазовыеВидыРасчета.Ссылка КАК Ссылка,
	|	НачисленияБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
	|ГДЕ
	|	НачисленияБазовыеВидыРасчета.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ОсновнойВР = Выборка.Ссылка;
		БазовыеВР = Новый Массив;
		Пока Выборка.Следующий() Цикл
			БазовыеВР.Добавить(Выборка.ВидРасчета);
		КонецЦикла;
		БазовыеВидыРасчета.Вставить(ОсновнойВР, БазовыеВР);
		
	КонецЦикла;
	
	Возврат БазовыеВидыРасчета;

КонецФункции

Процедура СтрокаРезультатаРасчетаВДанныеФормы(СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо)

	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		Показатели = ОбщегоНазначения.ВыгрузитьКолонку(ЗначенияРеквизитов.Показатели, "Показатель");
		Если СтрокаИсточник.Показатели.Количество() > 0 Тогда
			Сч = 1;
			Для Каждого Показатель Из Показатели Цикл
				СтрокаПоказателя = СтрокаИсточник.Показатели.Найти(Показатель, "Показатель");
				Если СтрокаПоказателя <> Неопределено И Показатель.ОтображатьВДокументахНачисления Тогда
					СтрокаПриемник["Показатель" + Сч] = СтрокаПоказателя.Показатель;
					СтрокаПриемник["Значение" + Сч]   = СтрокаПоказателя.Значение;
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПоказателиУчетаВремени()
	
	ПоляОписанияПоказателяУчетаВремени = "ВремяВДнях, ВремяВЧасах, НормаВДнях, НормаВДняхПолная, НормаВчасах, КалендарныеДни, КалендарныеДниМесяца";	
	ПоказателиУчетаВремени = Новый Соответствие;
	
	ОписаниеПоказателяВремяВДнях = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяВремяВДнях.ВремяВДнях = Истина;
	
	ОписаниеПоказателяНормаВДнях = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВДнях.НормаВДнях = Истина;
	
	ОписаниеПоказателяНормаВДняхПолная = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВДняхПолная.НормаВДняхПолная = Истина;
	
	ОписаниеПоказателяВремяВЧасах = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяВремяВЧасах.ВремяВЧасах = Истина;

	ОписаниеПоказателяНормаВчасах = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВчасах.НормаВчасах = Истина;
	
	ОписаниеПоказателяКалендарныеДни = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяКалендарныеДни.КалендарныеДни = Истина;
	
	ОписаниеПоказателяКалендарныеДниМесяца = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяКалендарныеДниМесяца.КалендарныеДниМесяца = Истина;
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"), ОписаниеПоказателяВремяВДнях);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"), ОписаниеПоказателяВремяВДнях);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"), ОписаниеПоказателяНормаВДняхПолная);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"), ОписаниеПоказателяНормаВДнях);
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"), ОписаниеПоказателяВремяВЧасах);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"), ОписаниеПоказателяВремяВЧасах);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"), ОписаниеПоказателяНормаВчасах);
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"), ОписаниеПоказателяКалендарныеДниМесяца);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"), ОписаниеПоказателяКалендарныеДниМесяца);
	
	Возврат ПоказателиУчетаВремени;
	
КонецФункции

Функция ТаблицаПоказателей()
	
	ПоказателиНачислений = Новый ТаблицаЗначений;
	ПоказателиНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ПоказателиНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ПоказателиНачислений.Колонки.Добавить("ЗначениеЗаполнено", Новый ОписаниеТипов("Булево"));
	
	Возврат ПоказателиНачислений;
	
КонецФункции

Функция ТаблицаПоказателейПоТаблицеНачисления(ТаблицаНачислений, СвойстваНачислений, ПоказателиУчетаВремени)
	
	ПоказателейНачислений = ТаблицаПоказателей();
		
	Для Каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
		
		СвойстваНачисления = СвойстваНачислений[СтрокаТаблицыНачислений.Начисление];
		
		Если СвойстваНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Для Каждого ДанныеПоказателя Из СвойстваНачисления.Показатели Цикл
			
			Если Не ЗначениеЗаполнено(ДанныеПоказателя.Показатель) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ПоказателиУчетаВремени[ДанныеПоказателя.Показатель] <> Неопределено Тогда
				СтрокаТаблицыПоказателей = ПоказателейНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПоказателей, СтрокаТаблицыНачислений);
				СтрокаТаблицыПоказателей.Показатель = ДанныеПоказателя.Показатель;	
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;	
	
	ПоказателейНачислений.Свернуть("Показатель, Значение, ЗначениеЗаполнено");
	
	Возврат ПоказателейНачислений; 
	
КонецФункции

Функция СвойстваНачислений(Начисления)
	
	СвойстваНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.ЗачетНормыВремени,
	|	Начисления.РеквизитДопУпорядочивания,
	|	НачисленияПоказатели.Показатель,
	|	НачисленияПоказатели.ЗапрашиватьПриВводе
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО (НачисленияПоказатели.Ссылка = Начисления.Ссылка)
	|ГДЕ
	|	Начисления.Ссылка В(&Начисления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеквизитыНачислений = "Показатели, ЗачетНормыВремени, РеквизитДопУпорядочивания";
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		СвойстваНачисления = Новый Структура(РеквизитыНачислений);
		ЗаполнитьЗначенияСвойств(СвойстваНачисления, Выборка);
		
		ТаблицаПоказателей = Новый ТаблицаЗначений;
		ТаблицаПоказателей.Колонки.Добавить("Показатель");
		ТаблицаПоказателей.Колонки.Добавить("ЗапрашиватьПриВводе");
		
		СвойстваНачисления.Показатели = ТаблицаПоказателей;
		СвойстваНачислений.Вставить(Выборка.Ссылка, СвойстваНачисления);
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Показатель) Тогда 
				СтрокаТаблицПоказателя = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицПоказателя, Выборка);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат СвойстваНачислений;
	
КонецФункции

Функция ДанныеГрафикаСотрудника(ГрафикРаботы, Год)

	ДанныеГрафикаСотрудника = Новый Структура("
	|ДлительностьРабочейНедели,
	|ДлительностьРабочейНеделиГрафикаПолногоВремени,
	|СреднемесячноеЧислоЧасовНормаПолногоГрафика,
	|СреднемесячноеЧислоДнейНормаПолногоГрафика,
	|СреднемесячноеЧислоЧасовНорма,
	|СреднемесячноеЧислоДнейНорма,
	|СреднемесячноеЧислоЧасов,
	|СреднемесячноеЧислоДней",1,1,1,1,1,1,1,1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	ГрафикиПолногоВремени.ДлительностьРабочейНедели КАК ДлительностьРабочейНеделиГрафикаПолногоВремени,
	|	СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасовНормаПолногоГрафика,
	|	СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНормаПолногоГрафика,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоЧасов
	|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов
	|	КОНЕЦ КАК СреднемесячноеЧислоЧасовНорма,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНорма,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасов,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДней
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиПолногоВремени
	|		ПО ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = ГрафикиПолногоВремени.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
	|		ПО ГрафикиРаботыСотрудников.Ссылка = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
	|			И (СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год = &Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковПолногоВремени
	|		ПО ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафиковПолногоВремени.ГрафикРаботыСотрудников
	|			И (СреднемесячныеНормыВремениГрафиковПолногоВремени.Год = &Год)
	|ГДЕ
	|	ГрафикиРаботыСотрудников.Ссылка = &ГрафикРаботы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеГрафикаСотрудника, Выборка);
	КонецЕсли;
	
	Возврат ДанныеГрафикаСотрудника;

КонецФункции 

Функция ЗначениеПоказателяУчетаВремениПоДаннымГрафика(Показатель, ДанныеГрафика, ОписаниеПоказателейУчетаВремени)
	
	ВремяВДняхПоУмолчанию = 20;
	ВремяВЧасахПоУмолчанию = 160;
	
	СвойстваПоказателя = ОписаниеПоказателейУчетаВремени[Показатель];
	
	Если СвойстваПоказателя.КалендарныеДни = Истина Тогда
		Возврат 1;
	ИначеЕсли СвойстваПоказателя.КалендарныеДниМесяца = Истина Тогда	
		Возврат 1;
	ИначеЕсли СвойстваПоказателя.НормаВДняхПолная = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВДняхПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНормаПолногоГрафика) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНормаПолногоГрафика;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНорма;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;	
	ИначеЕсли СвойстваПоказателя.НормаВДнях = Истина  Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВДняхПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНорма;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;
	ИначеЕсли СвойстваПоказателя.ВремяВДнях = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВДняхПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДней) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДней;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;	
	ИначеЕсли СвойстваПоказателя.ВремяВЧасах = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВЧасахПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоЧасов) Тогда 
			Возврат ДанныеГрафика.СреднемесячноеЧислоЧасов;
		Иначе 
			Возврат ВремяВЧасахПоУмолчанию;
		КонецЕсли;
	ИначеЕсли СвойстваПоказателя.НормаВчасах = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВЧасахПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоЧасовНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоЧасовНорма;
		Иначе
			Возврат ВремяВЧасахПоУмолчанию;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
	
КонецФункции

Процедура ЗаполнитьПоказателиУчетаВремениСотрудника(ПоказателиНачисленийСотрудников, ДанныеГрафикаСотрудника, ПоказателиУчетаВремени, ИзвестныеПоказатели)
	
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл
		
		Если ПоказателиУчетаВремени[СтрокаПоказателя.Показатель] = Неопределено Тогда
			// это не показатель учета времени
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ИзвестныеПоказатели.Найти(СтрокаПоказателя.Показатель,"Показатель");
		Если НайденнаяСтрока = Неопределено Тогда
			СтрокаПоказателя.Значение = ЗначениеПоказателяУчетаВремениПоДаннымГрафика(СтрокаПоказателя.Показатель, ДанныеГрафикаСотрудника, ПоказателиУчетаВремени);
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		Иначе
			СтрокаПоказателя.Значение = НайденнаяСтрока.Значение;
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеПроведенияДокументов

Функция СведенияОКорректировкахДляРегистрацииДенежногоСодержанияДокумента(ДокументСсылка) Экспорт
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбу  = Константы.ИспользоватьГосударственнуюСлужбу.Получить() ИЛИ Константы.ИспользоватьМуниципальнуюСлужбу.Получить();
	
	Если Не ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДенежноеСодержание.Сотрудник,
	|	ДенежноеСодержание.НазначениеРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСохраняемомДенежномСодержании.ПоФактическимНачислениям) КАК СоставнаяЧасть,
	|	ДенежноеСодержание.Начисление,
	|	ДенежноеСодержание.Период КАК Месяц,
	|	ДенежноеСодержание.Сумма,
	|	ДенежноеСодержание.Корректировка,
	|	ДенежноеСодержание.Ссылка.Организация КАК Организация,
	|	ДенежноеСодержание.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	#ТабличнаяЧастьНачисления КАК ДенежноеСодержание
	|ГДЕ
	|	ДенежноеСодержание.Ссылка = &ДокументСсылка
	|	И ДенежноеСодержание.Корректировка";
	
	ИмяТаблицыДокумента = ДокументСсылка.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТабличнаяЧастьНачисления", ИмяТаблицыДокумента + ".ДенежноеСодержаниеФактическиеНачисления");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция СведенияОКорректировкахСотрудниковДляРегистрацииДенежногоСодержанияДокумента(ДокументСсылка, ИмяТабличнойЧастиСотрудники = "") Экспорт
	
	СведенияОКорректировках = Новый Соответствие;
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбу  = Константы.ИспользоватьГосударственнуюСлужбу.Получить() ИЛИ Константы.ИспользоватьМуниципальнуюСлужбу.Получить();
	
	Если Не ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
		Возврат СведенияОКорректировках;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДенежноеСодержание.Сотрудник КАК Сотрудник,
	|	ТаблицаДенежноеСодержание.НазначениеРасчета,
	|	ТаблицаДенежноеСодержание.СоставнаяЧасть,
	|	ТаблицаДенежноеСодержание.Начисление,
	|	ТаблицаДенежноеСодержание.Период КАК Месяц,
	|	ТаблицаДенежноеСодержание.Сумма,
	|	ТаблицаДенежноеСодержание.Корректировка,
	|	ТаблицаДенежноеСодержание.Ссылка.Организация КАК Организация,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоПериода,
	|	Сотрудники.ПериодРасчетаСреднегоЗаработкаОкончание КАК ОкончаниеПериода
	|ИЗ
	|	#ТабличнаяЧастьНачисления КАК ТаблицаДенежноеСодержание
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ТабличнаяЧастьСотрудники КАК Сотрудники
	|		ПО ТаблицаДенежноеСодержание.Ссылка = Сотрудники.Ссылка
	|			И ТаблицаДенежноеСодержание.Сотрудник = Сотрудники.Сотрудник
	|ГДЕ
	|	ТаблицаДенежноеСодержание.Ссылка = &ДокументСсылка
	|	И ТаблицаДенежноеСодержание.Корректировка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НачалоПериода";
	
	ИмяТаблицыДокумента = ДокументСсылка.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТабличнаяЧастьНачисления", ИмяТаблицыДокумента + ".ДенежноеСодержаниеФактическиеНачисления");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТабличнаяЧастьСотрудники", ИмяТаблицыДокумента + ?(ПустаяСтрока(ИмяТабличнойЧастиСотрудники), "", "." + ИмяТабличнойЧастиСотрудники));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		КорректировкиНачислений = ПустаяТаблицаКорректировкиДляРасчетаСохраняемогоДенежногоСодержания();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(КорректировкиНачислений.Добавить(), Выборка);
		КонецЦикла; 
		
		СведенияОКорректировках.Вставить(Выборка.Сотрудник,
		Новый Структура("КорректировкиНачислений,НачалоПериода,ОкончаниеПериода", КорректировкиНачислений, Выборка.НачалоПериода, Выборка.ОкончаниеПериода));
		
	КонецЦикла; 
	
	Возврат СведенияОКорректировках;
	
КонецФункции

Процедура ЗарегистрироватьКорректировкиДляРасчетаСохраняемогоДенежногоСодержания(КорректировкиНачислений, НачалоПериода, ОкончаниеПериода) Экспорт 
	
	Если КорректировкиНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ИзмеренияНачислений = "Сотрудник, Организация, ФизическоеЛицо, НазначениеРасчета, Месяц, СоставнаяЧасть, Начисление";
	КорректировкиНачислений.Свернуть(ИзмеренияНачислений, "Сумма");
	
	ЗаписатьТаблицуЗначенийВРегистрСведений(
	КорректировкиНачислений, 
	РегистрыСведений.СведенияОНачисленияхДляРасчетаСохраняемогоДенежногоСодержания.СоздатьНаборЗаписей(), 
	"Сотрудник, НазначениеРасчета, Месяц",
	НачалоПериода, 
	ОкончаниеПериода);
	
КонецПроцедуры	

Процедура ЗарегистрироватьКорректировкиДляРасчетаСохраняемогоДенежногоСодержанияСотрудников(КорректировкиНачисленийСотрудников) Экспорт 
	
	Если КорректировкиНачисленийСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого ОписаниеКорректировок Из КорректировкиНачисленийСотрудников Цикл
		
		КорректировкиСотрудника = ОписаниеКорректировок.Значение;
		
		КорректировкиНачислений = КорректировкиСотрудника.КорректировкиНачислений;
		НачалоПериода 			= КорректировкиСотрудника.НачалоПериода;
		ОкончаниеПериода 		= КорректировкиСотрудника.ОкончаниеПериода;
		
		ЗарегистрироватьКорректировкиДляРасчетаСохраняемогоДенежногоСодержания(КорректировкиНачислений, НачалоПериода, ОкончаниеПериода);
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииРегистрацииКорректировок

Процедура ЗаписатьТаблицуЗначенийВРегистрСведений(ИсходнаяТаблицаЗначений, НаборЗаписей, ИменаПолейОтбора, НачалоПериода, ОкончаниеПериода)
	
	// Записываем пустые наборы записей на месяцы, 
	// для которых в таблице ИсходнаяТаблицаЗначений нет строк за период с НачалоПериода по ОкончаниеПериода.
	
	ПоляОтбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейОтбора);
	
	Отбор = Новый Структура;
	СочетанияОтбора = Новый ТаблицаЗначений;
	Для Каждого ПолеОтбора Из ПоляОтбора Цикл
		Если СокрЛП(ПолеОтбора) = "Месяц" Тогда
			// Сочетания выбираем без учета месяца.
			Продолжить;
		КонецЕсли;
		Отбор.Вставить(СокрЛП(ПолеОтбора));
		СочетанияОтбора.Колонки.Добавить(СокрЛП(ПолеОтбора));
	КонецЦикла;
	
	// Заполняем таблицу сочетаний.
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблицаЗначений Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		Если СочетанияОтбора.НайтиСтроки(Отбор).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СочетанияОтбора.Добавить(), Отбор);
		КонецЕсли;
	КонецЦикла;
	
	Отбор.Вставить("Месяц");
	МесяцОбхода = НачалоПериода;
	Пока МесяцОбхода < ОкончаниеПериода Цикл
		Для Каждого СтрокаСочетания Из СочетанияОтбора Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаСочетания);
			Отбор.Месяц = МесяцОбхода;
			Если ИсходнаяТаблицаЗначений.НайтиСтроки(Отбор).Количество() = 0 Тогда
				// Очищаем пространство в регистре сведений.
				Для Каждого КлючИЗначение Из Отбор Цикл
					НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
		МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
	КонецЦикла;
	
	// Записываем таблицу значений.
	ТаблицаЗначений = ИсходнаяТаблицаЗначений.Скопировать();
	
	СтруктураОтбора = Новый Структура(ИменаПолейОтбора);
	Пока ТаблицаЗначений.Количество() > 0 Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТаблицаЗначений[0]);
		СтрокиПоОтбору = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиПоОтбору Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицы);
			ТаблицаЗначений.Удалить(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаКорректировкиДляРасчетаСохраняемогоДенежногоСодержания()
	
	ТаблицаКорректировок = Новый ТаблицаЗначений;
	
	ТаблицаКорректировок.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаКорректировок.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаКорректировок.Колонки.Добавить("НазначениеРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.НазначениеРасчетаСохраняемогоДенежногоСодержания"));
	ТаблицаКорректировок.Колонки.Добавить("СоставнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСохраняемомДенежномСодержании"));
	ТаблицаКорректировок.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаКорректировок.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаКорректировок.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаКорректировок.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("Булево"));
	ТаблицаКорректировок.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Возврат ТаблицаКорректировок;
	
КонецФункции

Функция СведенияОСоставеМесячногоДенежногоСодержания(ДокументСсылка, ТаблицаНачислений, ПолеВидаНачисления = "Начисление") Экспорт
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбу  = Константы.ИспользоватьГосударственнуюСлужбу.Получить() ИЛИ Константы.ИспользоватьМуниципальнуюСлужбу.Получить();
	
	Если Не ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
		Возврат Новый Массив;
	КонецЕсли;	
	
	// Составляем временную таблицу из табличных частей документа.
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
	
	// Составляем текст запроса создания временной таблицы.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстОбъединения = 
		"ВЫБРАТЬ
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаНачислений.Ссылка.Организация КАК Организация,
		|	ТаблицаНачислений.Начисление КАК Начисление,
		|	ТаблицаНачислений.Результат КАК Сумма
		|ИЗ
		|	#ТаблицаНачислений КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Ссылка = &ДокументСсылка";
				
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		
		// Если есть поле Период - то работаем с ФактическимиНачислениями
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("Период") <> Неопределено Тогда
		// нужно брать 1/12 суммы
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Результат КАК Сумма", "Результат / 12 КАК Сумма");
		КонецЕсли;
		
		// Подменяем поле начисления , лишь в случае, если в анализируемой таблице нет поля "по умолчанию".
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("Начисление") = Неопределено Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление КАК Начисление", ПолеВидаНачисления + " КАК Начисление");
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("Результат") = Неопределено Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Результат", "Сумма");
		КонецЕсли;
		
		// Добавляем объединение в общий запрос.
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединения;
		ПерваяТаблица = Ложь;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗарегистрироватьНачисленияСоставМесячногоДенежногоСодержания(Движения, Отказ, Период, Начисления, ЗаписыватьДвижения = Ложь)  Экспорт
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаНачислений Из Начисления Цикл
		НоваяСтрока = Движения.СоставСохраняемогоДенежногоСодержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		НоваяСтрока.Период = Период;
		Движения.СоставСохраняемогоДенежногоСодержания.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Движения.СоставСохраняемогоДенежногоСодержания.Записать();
		Движения.СоставСохраняемогоДенежногоСодержания.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкуИспользоватьРасчетСохраняемогоДенежногоСодержания(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбу  = Константы.ИспользоватьГосударственнуюСлужбу.Получить() ИЛИ Константы.ИспользоватьМуниципальнуюСлужбу.Получить();
	ИспользоватьРасчетДенежногоСодержанияСудей = НаборЗаписей[0].ИспользоватьРасчетДенежногоСодержанияСудей;	
	
	НовоеЗначение = ИспользоватьГосударственнуюМуниципальнуюСлужбу 
	И ( (НаборЗаписей[0].ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы ИЛИ НаборЗаписей[0].ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы)
	ИЛИ (ИспользоватьРасчетДенежногоСодержанияСудей И НаборЗаписей[0].ИспользоватьСохраняемоеДенежноеСодержаниеСудей) );
	
	Если НовоеЗначение <> Константы.ИспользоватьРасчетСохраняемогоДенежногоСодержания.Получить() Тогда
		Константы.ИспользоватьРасчетСохраняемогоДенежногоСодержания.Установить(НовоеЗначение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
