////////////////////////////////////////////////////////////////////////////////
// Подсистема «Учет сохраняемого денежного довольствия».
// 
// Процедуры и функции, предназначенные для использования как на сервере, 
// так и на клиенте.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает сумму значений в поле [ИмяПоля] всех элементов коллекции.
//
Функция ИтогиПоПолю(Коллекция, ИмяПоля) Экспорт
	
	ИтогиПоПолю = 0;
	
	Для каждого Элемент Из Коллекция Цикл
		ИтогиПоПолю = ИтогиПоПолю + Элемент[ИмяПоля]; 
	КонецЦикла;
	
	Возврат ИтогиПоПолю;
	
КонецФункции 

// Возвращает рассчитанный показатель среднего денежного довольствия.
//
Функция СреднийЗаработок(Заработок, Время) Экспорт
	 Возврат ?(Время = 0, 0, Окр(Заработок / Время, 2));
КонецФункции

// Предоставляет значение среднего денежного довольствия.
//
// Параметры
//	Начисления - тип коллекция строк, для которой доступен обход Для Каждого ... Из...
//		структура строк соответствует конструктору ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка
//	Время - тип коллекция строк, для которой доступен обход Для Каждого ... Из...
//	ДополнительныеПараметры - тип Структура, см. ДополнительныеПараметрыРасчетаСреднегоДенежногоДовольствия.
//
// Возвращаемое значение - Число, значение среднедневного или среднечасового заработка.
//
Функция СреднееДенежноеДовольствие(Начисления, Время, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоДенежногоДовольствия();
	КонецЕсли;
	
	ДанныеДляРасчета = ДанныеРасчетаСреднегоДенежногоДовольствия(Начисления, Время, ДополнительныеПараметры);
		
	ВсегоЗаработок = ИтогиПоПолю(ДанныеДляРасчета.Заработок, "Учтено");	
	ВсегоВремя = ИтогиПоПолю(ДанныеДляРасчета.ОтработанноеВремя, "ОтработаноДнейКалендарных");	
	
	Возврат СреднийЗаработок(ВсегоЗаработок, ВсегоВремя); 
	
КонецФункции

Функция ОписаниеПараметровСохраняемоеДенежноеДовольствие() Экспорт

	Параметры = Новый Структура(
	"Организация,
	|ПериодРасчета,
	|ДатаНачалаСобытия,
	|ДанныеОНачислениях,
	|Сотрудник");

	Возврат Параметры;
	
КонецФункции 

Процедура ЗаполнитьИнформациюЗаполненностиДанныхСохраняемоеДенежноеДовольствиеДокумента(Форма, ОписаниеДокумента, СтруктураИнфонадписи) Экспорт
	
	ЕстьНеЗаполненныеДанные = Ложь;
	
	Если Форма.Объект.ДенежноеДовольствие.Количество() = 0 Тогда
		ЕстьНеЗаполненныеДанные = Истина;
	КонецЕсли;
	
	ТекстСообщения = "";
	Если ЕстьНеЗаполненныеДанные Тогда
		ТекстСообщения = НСтр("ru = 'Данные о сохраняемом денежном довольствии неполные.
		|Для ввода недостающих данных используйте команду ""Изменить"".'");
	Иначе
		
		ДатаСобытия = Форма.Объект[ОписаниеДокумента.ДатаНачалаСобытияИмя];
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные о сохраняемом денежном довольствии на %1.'"), 
			Формат(ДатаСобытия, "ДЛФ=D"));
		Если Форма.РасчетДенежногоДовольствияРедактировался Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru = ' Есть ручные корректировки!'");
		КонецЕсли;
	
	КонецЕсли;
	
	СтруктураИнфонадписи.Текст = Новый ФорматированнаяСтрока(ТекстСообщения);
	СтруктураИнфонадписи.Картинка = ?(ЕстьНеЗаполненныеДанные, БиблиотекаКартинок.Предупреждение, БиблиотекаКартинок.Информация);
	
КонецПроцедуры

// Конструирует структуру дополнительных параметров методов расчета среднего заработка.
//
Функция ДополнительныеПараметрыРасчетаСреднегоДенежногоДовольствия() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"НачалоПериода, 
		|ОкончаниеПериода, 
		|ДатаНачалаСобытия, 
		|Индексации, 
		|Начисление, 
		|ПоСтатьямФинансирования");
		
	ДополнительныеПараметры.ПоСтатьямФинансирования = Ложь;
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Функция составляет коллекцию показателей денежного довольствия.
//
// Возвращаемое значение - массив.
//
Функция ПоказателиДенежногоДовольствия() Экспорт
	
	ИменаПоказателей = Новый Массив;
	ИменаПоказателей.Добавить("СохраняемоеДенежноеДовольствие");
	
	МассивПоказателей = Новый Массив;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		ПоказательСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИмяПоказателя);
		Если ПоказательСсылка <> Неопределено Тогда
			МассивПоказателей.Добавить(ПоказательСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПоказателей;
	
КонецФункции

// Определяет представление команды, предназначенной для расшифровки показателя.
//
Функция ПредставлениеКомандыРасшифровки() Экспорт
	Возврат НСтр("ru = 'Состав'");
КонецФункции

#КонецОбласти

#Область ФормированиеДанныхРасчетаСреднегоДенежногоДовольствия

Процедура РассчитатьУчитываемоеВремя(Время, УчитываемоеВремя, ДополнительныеПараметры)
	
	ДатаНачалаСобытия = ДополнительныеПараметры.ДатаНачалаСобытия;
	НачалоПериода = ДополнительныеПараметры.ПериодРасчетаСреднегоЗаработкаНачало;
	ОкончаниеПериода = ДополнительныеПараметры.ПериодРасчетаСреднегоЗаработкаОкончание;
			
	Для Каждого ПервичнаяСтрокаВремени Из Время Цикл
		
		// Используем данные только за рассчитываемый период.
		Если ПервичнаяСтрокаВремени.Период < НачалоПериода 
			Или ПервичнаяСтрокаВремени.Период > ОкончаниеПериода Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = ОтборЭлементаВремени(ПервичнаяСтрокаВремени.Период);
		
		СтрокаОтработанноеВремя 							= ЭлементВремениПоОтбору(УчитываемоеВремя, Отбор);
		
		СтрокаОтработанноеВремя.ОтработаноДнейКалендарных 	= ПервичнаяСтрокаВремени.ОтработаноДнейКалендарных;
		СтрокаОтработанноеВремя.Учтено 						= СтрокаОтработанноеВремя.ОтработаноДнейКалендарных;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура РассчитатьУчитываемыйЗаработок(Начисления, УчитываемыйЗаработок, ДополнительныеПараметры)
	
	НачалоПериода = ДополнительныеПараметры.ПериодРасчетаСреднегоЗаработкаНачало;
	ОкончаниеПериода = ДополнительныеПараметры.ПериодРасчетаСреднегоЗаработкаОкончание;
	Индексации = ДополнительныеПараметры.Индексации;
	
	КоэффициентыИндексацииПоЧастямИПериодам = КоэффициентыИндексацииПоЧастямИПериодам(Индексации);
	
	Для Каждого СтрокаНачислений Из Начисления Цикл
		Если СтрокаНачислений.Период < НачалоПериода 
			Или СтрокаНачислений.Период > ОкончаниеПериода Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффициентИндексации = 1;
		КоэффициентыИндексацииПоПериодам = КоэффициентыИндексацииПоЧастямИПериодам[СтрокаНачислений.СоставнаяЧасть];
		Если КоэффициентыИндексацииПоПериодам <> Неопределено Тогда
			Если КоэффициентыИндексацииПоПериодам[СтрокаНачислений.Период] <> Неопределено Тогда
				КоэффициентИндексации = КоэффициентыИндексацииПоПериодам[СтрокаНачислений.Период];	
			КонецЕсли;
		КонецЕсли;
				
		Отбор = ОтборЭлементаЗаработка();
		Отбор.Месяц = СтрокаНачислений.Период;
		Отбор.СоставнаяЧасть = СтрокаНачислений.СоставнаяЧасть;
		Отбор.КоэффициентИндексации = КоэффициентИндексации;
	
		СтрокаЗаработка 			= ЭлементЗаработкаПоОтбору(УчитываемыйЗаработок, Отбор);
		СтрокаЗаработка.Сумма 		= СтрокаЗаработка.Сумма 			+ СтрокаНачислений.Сумма;
		СтрокаЗаработка.Учтено 		= СтрокаЗаработка.Учтено 			+ Окр(СтрокаНачислений.Сумма * КоэффициентИндексации, 2);
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция СтруктураЗаработкаДляРасчетаСреднегоДенежногоДовольствия()
	
	ТипДата = Новый ОписаниеТипов("Дата");
	ПустаяДата = ТипДата.ПривестиЗначение();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ПустоеЧисло = ТипЧисло.ПривестиЗначение();  
	
	ТипСоставнаяЧастьЗаработка = Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим");
	ПустаяСоставнаяЧастьЗаработка = ТипСоставнаяЧастьЗаработка.ПривестиЗначение();
	
	Заработок = Новый Структура;
	Заработок.Вставить("Месяц", 					ПустаяДата);
	Заработок.Вставить("СоставнаяЧасть", 			ПустаяСоставнаяЧастьЗаработка);
	Заработок.Вставить("Сумма", 					ПустоеЧисло);
	Заработок.Вставить("КоэффициентИндексации", 	ПустоеЧисло);
	Заработок.Вставить("Учтено", 					ПустоеЧисло);
	
	Возврат Заработок;
	
КонецФункции

Функция СтруктураВремениДляРасчетаСреднегоДенежногоДовольствия()
	
	ТипДата = Новый ОписаниеТипов("Дата");
	ПустаяДата = ТипДата.ПривестиЗначение();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ПустоеЧисло = ТипЧисло.ПривестиЗначение();  
		
	ОтработанноеВремя = Новый Структура;
	ОтработанноеВремя.Вставить("Месяц", 					ПустаяДата);
	ОтработанноеВремя.Вставить("ОтработаноДнейКалендарных",	ПустоеЧисло);	
	ОтработанноеВремя.Вставить("Учтено", 					ПустоеЧисло);
	
	Возврат ОтработанноеВремя;
	
КонецФункции

Функция СоответствиеВидовИндексаций()
	
	СоответствиеВидовИндексаций = Новый Соответствие;
	СоответствиеВидовИндексаций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыИндексируемогоДенежногоСодержания.ОкладыПоДолжности"), ПредопределенноеЗначение("Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВД"));
	СоответствиеВидовИндексаций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыИндексируемогоДенежногоСодержания.ОкладыПоЗванию"), ПредопределенноеЗначение("Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВЗ"));
	СоответствиеВидовИндексаций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыИндексируемогоДенежногоСодержания.ОкладыДенежногоСодержания"), ПредопределенноеЗначение("Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОДС"));
	
	Возврат СоответствиеВидовИндексаций;
	
КонецФункции

Функция КоэффициентыИндексацииПоЧастямИПериодам(ДанныеОбИндексации)
	
	СоответствиеВидовИндексаций = СоответствиеВидовИндексаций();
	
	КоэффициентыИндексацииПоЧастямИПериодам = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеВидовИндексаций Цикл
		КоэффициентыИндексацииПоЧастямИПериодам.Вставить(КлючИЗначение.Значение, Новый Соответствие);	
	КонецЦикла;
	
	Для Каждого Индексация Из ДанныеОбИндексации Цикл
		
		СоответствиеВидаИндексации = СоответствиеВидовИндексаций.Получить(Индексация.ВидИндексации);
		
		Если СоответствиеВидаИндексации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффициентыИндексацииПоЧастямИПериодам[СоответствиеВидаИндексации].Вставить(Индексация.Период, Индексация.КоэффициентИндексации);
		
	КонецЦикла;
	
	Возврат КоэффициентыИндексацииПоЧастямИПериодам;
	
КонецФункции

Функция ОтборЭлементаЗаработка()
	
	ОтборЭлементаЗаработка = Новый Структура(
		"Месяц, 
		|СоставнаяЧасть,
		|КоэффициентИндексации");
	
	Возврат ОтборЭлементаЗаработка;
	
КонецФункции

Функция ОтборЭлементаВремени(Месяц)
	
	ОтборЭлементаВремени = Новый Структура;
	ОтборЭлементаВремени.Вставить("Месяц", Месяц);
	
	Возврат ОтборЭлементаВремени;
	
КонецФункции 

Функция ЭлементЗаработкаПоОтбору(Коллекция, Отбор)
	
	ПодходящийЭлемент = ЭлементКоллекцииПоОтбору(Коллекция, Отбор);
	
	Если ПодходящийЭлемент = Неопределено Тогда
		ПодходящийЭлемент = СтруктураЗаработкаДляРасчетаСреднегоДенежногоДовольствия();
		ЗаполнитьЭлементКоллекцииПоОтбору(ПодходящийЭлемент, Отбор);
		
		Коллекция.Добавить(ПодходящийЭлемент);
	КонецЕсли;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Функция ЭлементВремениПоОтбору(Коллекция, Отбор)
	
	ПодходящийЭлемент = ЭлементКоллекцииПоОтбору(Коллекция, Отбор);
	
	Если ПодходящийЭлемент = Неопределено Тогда
		ПодходящийЭлемент = СтруктураВремениДляРасчетаСреднегоДенежногоДовольствия();
		ЗаполнитьЭлементКоллекцииПоОтбору(ПодходящийЭлемент, Отбор);
		
		Коллекция.Добавить(ПодходящийЭлемент);
	КонецЕсли;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Процедура ЗаполнитьЭлементКоллекцииПоОтбору(Элемент, Отбор) Экспорт
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Значение <> Неопределено Тогда
			Элемент[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЭлементКоллекцииПоОтбору(Коллекция, Отбор) Экспорт
	
	ПодходящийЭлемент = Неопределено;
	
	Для каждого Элемент Из Коллекция Цикл
		ЭтоПодходящийЭлемент = Истина;
		
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ЭлементОтбора.Значение <> Неопределено
				И Элемент[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение  Тогда
				ЭтоПодходящийЭлемент = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПодходящийЭлемент Тогда
			ПодходящийЭлемент = Элемент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Функция ДанныеРасчетаСреднегоДенежногоДовольствия(Начисления, Время, ДополнительныеПараметры) Экспорт
		
	ДанныеДляРасчета = Новый Структура(
		"Заработок, 
		|ОтработанноеВремя");
	
	ДанныеДляРасчета.ОтработанноеВремя = Новый Массив;
	РассчитатьУчитываемоеВремя(Время, ДанныеДляРасчета.ОтработанноеВремя, ДополнительныеПараметры);
	
	ДанныеДляРасчета.Заработок = Новый Массив;
	РассчитатьУчитываемыйЗаработок(Начисления, ДанныеДляРасчета.Заработок, ДополнительныеПараметры);
						
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция ПараметрыРасчетаСреднегоДневногоЗаработкаДенежногоДовольствия() Экспорт
	
	Параметры = Новый Структура(
		"ДатаНачалаСобытия, 
		|ПериодРасчетаСреднегоЗаработкаНачало, 
		|ПериодРасчетаСреднегоЗаработкаОкончание,  
		|ДанныеНачислений, 
		|ДанныеВремени, 
		|Индексации,
		|ПрименятьПредельнуюВеличину, 
		|РайонныйКоэффициентРФ, 
		|Сотрудник");
	
	Параметры.ПрименятьПредельнуюВеличину 				= Истина;
	Параметры.РайонныйКоэффициентРФ 					= 1;
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти