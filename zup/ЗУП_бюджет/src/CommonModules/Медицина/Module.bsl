////////////////////////////////////////////////////////////////////////////////
// Подсистема "Медицина".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗащитаПерсональныхДанных

// Процедура обеспечивает сбор сведений о хранении данных,
// относящихся к персональным.
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации,
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа.
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	 ЗаполнитьСведенияОПерсональныхДанныхДокументаСведенияОРаботникахДляМедРегистра(ТаблицаСведений);
	 ЗаполнитьСведенияОПерсональныхДанныхРегистраСведенийСертификатыПоСпециальностиФизическихЛиц(ТаблицаСведений);
КонецПроцедуры

Процедура ЗаполнитьСведенияОПерсональныхДанныхДокументаСведенияОРаботникахДляМедРегистра(ТаблицаСведений)
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СведенияОРаботникахДляМедРегистра";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,Сотрудники.ФизическоеЛицо,Образование.ФизическоеЛицо,Сертификаты.ФизическоеЛицо,Переподготовка.ФизическоеЛицо,ПовышениеКвалификации.ФизическоеЛицо,"
		+ "ПослевузовскоеОбразование.ФизическоеЛицо,КвалификационныеКатегории.ФизическоеЛицо,Награды.ФизическоеЛицо,ЛичноеДело.Сотрудник,Неявки.Сотрудник,Невыходы.Сотрудник,ФактическиОтработанноеВремя.Сотрудник";
	НовыеСведения.ПоляДоступа		= "";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	ПоляДоступа = "";
	ПоляИсключаемыеИзПерсональныхДанных = "Сотрудник,ФизическоеЛицо,";
	ТабличныеЧасти = Метаданные.Документы.СведенияОРаботникахДляМедРегистра.ТабличныеЧасти;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя+".";
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			
			ИмяРеквизита = Реквизит.Имя;
			Если СтрНайти(ПоляИсключаемыеИзПерсональныхДанных,ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			ПоляДоступа = ПоляДоступа + "," + ИмяТабличнойЧасти+ИмяРеквизита;
			
		КонецЦикла;
	КонецЦикла;
	
	ПоляДоступа = Сред(ПоляДоступа,2);
	НовыеСведения.ПоляДоступа = ПоляДоступа;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПерсональныхДанныхРегистраСведенийСертификатыПоСпециальностиФизическихЛиц(ТаблицаСведений)
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.СертификатыПоСпециальностиФизическихЛиц";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Специальность,ДатаПолучения,ДействуетПо,Серия,Номер,КемВыдан";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
КонецПроцедуры

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.30";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("117d3329-ab49-4626-8812-e85c44a5f0f2");
	Обработчик.Процедура = "Документы.СведенияОРаботникахДляМедРегистра.ЗаполнитьТабличныеЧастиДокументов";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых табличных частей документа ""Сведения о медицинских работниках"".'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.106";
		Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("117d3329-ab49-4626-8812-e85c44a5f0f3");
		Обработчик.Процедура = "Медицина.ЗаполнитьПодключаемыеХарактеристики";
		Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "Медицина.УстановитьПараметрыНабораСвойствСправочниковДоступКНаркотическимСредствам";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("caf482e6-c48c-4f7c-9fb9-dc434f85b74f");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников медицины. Дополнительные реквизиты временно недоступны..'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "Медицина.УстановитьПараметрыНабораСвойствКлассификаторыМедРегистра";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ae16e4d0-9eed-4f9b-aa3c-d59b6b4b7a49");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников.'");
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСправочниковДоступКНаркотическимСредствам(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ДоступКНаркотическимСредствам") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДоступКНаркотическимСредствам");
		Модуль.УстановитьПараметрыНабораСвойствСправочников();
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствКлассификаторыМедРегистра(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников") Тогда
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		ПараметрыНабора.Используется = Константы.ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников.Получить();
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_КлассификаторыМедРегистра", ПараметрыНабора);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПодключаемыеХарактеристики(ПараметрыОбновления = Неопределено) Экспорт
	
	ИспользуетсяФРМР = Константы.ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников.Получить();
	РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.ОбновитьПодключаемыеХарактеристики(ИспользуетсяФРМР, , , ПараметрыОбновления);
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	Типы.Добавить(Метаданные.Справочники.КлассификаторыМедРегистра);
	Типы.Добавить(Метаданные.Справочники.ЭлементыКлассификаторовМедРегистра);
	
КонецПроцедуры

Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаМедрегистраОбщиеДанные.Имя);

КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СведенияОРаботникахДляМедРегистра",			"Дата", "КадровыйУчет", "Организация");
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СведенияОШтатномРасписанииДляМедРегистра",	"Дата", "КадровыйУчет", "Организация");
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиПрограммыБюджетногоУчреждения(НастройкиПрограммы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКонстант = "ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников,ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА,ИспользоватьДоступКНаркотическимСредствам";
	Настройка = Константы.СоздатьНабор(СтрокаКонстант);
	Настройка.Прочитать();
	ЗаполнитьЗначенияСвойств(НастройкиПрограммы, Настройка, СтрокаКонстант);
	
КонецФункции

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников.Установить(Параметры.ПараметрыПрограммы.ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников);
	Константы.ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА.Установить(Параметры.ПараметрыПрограммы.ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА);
	Константы.ИспользоватьДоступКНаркотическимСредствам.Установить(Параметры.ПараметрыПрограммы.ИспользоватьДоступКНаркотическимСредствам);
	
КонецПроцедуры

Функция ЗапросПоПредставлению(ИмяПредставления, ПараметрыЗапросаКомпоновки) Экспорт
	
	Запрос = Неопределено;
	
	Если ВРег(ИмяПредставления) = ВРег("СертификатыПоСпециальностиФизическихЛиц") Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыПоСпециальностиФизическихЛиц.ФизическоеЛицо,
		|	СертификатыПоСпециальностиФизическихЛиц.Специальность,
		|	СертификатыПоСпециальностиФизическихЛиц.ДатаПолучения,
		|	СертификатыПоСпециальностиФизическихЛиц.ДействуетПо,
		|	СертификатыПоСпециальностиФизическихЛиц.Серия,
		|	СертификатыПоСпециальностиФизическихЛиц.Номер,
		|	СертификатыПоСпециальностиФизическихЛиц.КемВыдан,
		|	ВТСотрудники.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ Представления_СертификатыПоСпециальностиФизическихЛиц
		|ИЗ
		|	ВТОсновныеСотрудники КАК ВТСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыПоСпециальностиФизическихЛиц КАК СертификатыПоСпециальностиФизическихЛиц
		|		ПО ВТСотрудники.ФизическоеЛицо = СертификатыПоСпециальностиФизическихЛиц.ФизическоеЛицо";
	КонецЕсли;
	
	Возврат Запрос;	
	
КонецФункции

Процедура ЗаписатьНастройкиМедицинскогоУчреждения(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.РаботаВМедицинскомУчреждении.Установить(НастройкиПрограммы.РаботаВМедицинскомУчреждении);
	Константы.ИспользоватьПодработки.Установить(НастройкиПрограммы.ИспользоватьПодработки);
	Константы.ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников.Установить(НастройкиПрограммы.ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников);
	Константы.ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА.Установить(НастройкиПрограммы.ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА);
	Константы.ИспользоватьДоступКНаркотическимСредствам.Установить(НастройкиПрограммы.ИспользоватьДоступКНаркотическимСредствам);
	
КонецПроцедуры

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.СведенияОРаботникахДляМедРегистра);
	СписокОбъектов.Добавить(Документы.СведенияОШтатномРасписанииДляМедРегистра);
	СписокОбъектов.Добавить(Документы.ДопускКНаркотическимВеществам);
	СписокОбъектов.Добавить(Документы.ЗапросВФСКН); 
	СписокОбъектов.Добавить(Документы.ОтветФСКН); 
	
КонецПроцедуры

Функция РаботаВМедицинскомУчреждении() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("РаботаВМедицинскомУчреждении");
	
КонецФункции

Функция НовоеОписаниеПоказателя(ПараметрыПланаВидовРасчета) 
	
	ОписаниеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеПоказателя();
	ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
	ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
	ОписаниеПоказателя.Предопределенный = Ложь;
	ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
	ОписаниеПоказателя.Точность = 2;
	ОписаниеПоказателя.НачальнаяНастройка = ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы;

	Возврат ОписаниеПоказателя;

КонецФункции

Процедура СоздатьПоказателиМедицинскихУчреждений(НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета) Экспорт 
	
	СоздаватьПоказатели = РаботаВМедицинскомУчреждении();
	
	ПоказателиРасчетаЗарплатыМенеджер = Справочники.ПоказателиРасчетаЗарплаты;

	ПараметрыПоказателей = ПараметрыПланаВидовРасчета.ПараметрыПоказателей;
	СозданныеЭлементы    = ПараметрыПланаВидовРасчета.СсылкиПоказателиРасчетаЗарплаты;
	
	Если СоздаватьПоказатели И НастройкиРасчетаЗарплаты.ИспользоватьКвалификационнуюНадбавку Тогда 
		
		// Процент надбавки за квалификационную категорию
		ОписаниеПоказателя = НовоеОписаниеПоказателя(ПараметрыПланаВидовРасчета);
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаКатегорию";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за квалификационную категорию'");
		ОписаниеПоказателя.Предопределенный = Истина;
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
	Иначе 
		ПоказателиРасчетаЗарплатыМенеджер.ОтключитьИспользованиеПредопределенногоЭлемента("ПроцентНадбавкиЗаКатегорию");
	КонецЕсли;
	
	Если СоздаватьПоказатели Тогда 
		
		// Процент надбавки за ученую степень
		ОписаниеПоказателя = НовоеОписаниеПоказателя(ПараметрыПланаВидовРасчета);
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаУченуюСтепень";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за ученую степень'");
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
		// Процент надбавки за почетное звание
		ОписаниеПоказателя = НовоеОписаниеПоказателя(ПараметрыПланаВидовРасчета);
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаПочетноеЗвание";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за почетное звание'");
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
				
		// Процент надбавки за классность и езду водителей
		ОписаниеПоказателя = НовоеОписаниеПоказателя(ПараметрыПланаВидовРасчета);
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаЕзду";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за классность и езду'");
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
		// Понижающий процент к окладу
		ОписаниеПоказателя = НовоеОписаниеПоказателя(ПараметрыПланаВидовРасчета);
		ОписаниеПоказателя.Идентификатор = "ПроцентСниженияОклада";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент снижения оклада'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% сниж.'");
		ПоказателиРасчетаЗарплатыМенеджер.ЗаписатьПоказатель(ОписаниеПоказателя, СозданныеЭлементы);
		
		РегистрыСведений.НастройкаПоказателейТарификацииМедРаботников.ОбновитьДанныеРегистра();
		
	Иначе 
		
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаУченуюСтепень");
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаПочетноеЗвание");
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентНадбавкиЗаЕзду");
		ПоказателиРасчетаЗарплатыМенеджер.НачальнаяНастройкаОтключитьИспользованиеПоказателя(СозданныеЭлементы, "ПроцентСниженияОклада");
		
	КонецЕсли;

КонецПроцедуры

Функция НовоеОписаниеНачисления(СвойстваНачислений, ЗависимоеВторогоУровня = Ложь) 
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);

	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы);
	ВидыВремени.Добавить(Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы);

	ОтборБазовых = Новый Структура;
	ОтборБазовых.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Категории);
	ОтборБазовых.Вставить("ВидВремени", ВидыВремени);
	ОтборБазовых.Вставить("ТребуетсяРасчетБазы", ЗависимоеВторогоУровня);	

	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.ОтборБазовых 			= ОтборБазовых;
	Описание.КлючевыеСвойства 		= "Ссылка";

	Возврат Описание;

КонецФункции

Процедура СоздатьНачисленияМедицинскихУчреждений(НастройкиРасчетаЗарплаты, КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета) Экспорт 
	
	СоздаватьНачисления = РаботаВМедицинскомУчреждении();
	
	НачисленияМенеджер = ПланыВидовРасчета.Начисления;
	
	// Надбавка за квалификационную категорию (процентом)
	ИмяНачисленияПриНачальнойНастройке = "НадбавкаЗаКвалификационнуюКатегориюПроцентом";
	
	Описание = НовоеОписаниеНачисления(СвойстваНачислений);
	Описание.Код					= НСтр("ru = 'НККП'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за квалификационную категорию'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Квалиф. категория'");
	Описание.ФормулаРасчета 		= "РасчетнаяБаза * ПроцентНадбавкиЗаКатегорию / 100";
	Описание.ЗапрашиваемыеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаКатегорию");
	Описание.СсылкаНаОбъект 		 = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний[ИмяНачисленияПриНачальнойНастройке];
	
	Если СоздаватьНачисления И НастройкиРасчетаЗарплаты.ИспользоватьКвалификационнуюНадбавку Тогда
		НачисленияМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний[ИмяНачисленияПриНачальнойНастройке] = Описание.СсылкаНаОбъект;
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		НачисленияМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;

	// Надбавка за ученую степень (процентом)
	ИмяНачисленияПриНачальнойНастройке = "НадбавкаЗаУченуюСтепеньПроцентом";
	
	Описание = НовоеОписаниеНачисления(СвойстваНачислений);
	Описание.Код					= НСтр("ru = 'НУСП'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за ученую степень'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Ученая степень'");
	Описание.ФормулаРасчета 		= "РасчетнаяБаза * ПроцентНадбавкиЗаУченуюСтепень / 100";
	Описание.ЗапрашиваемыеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаУченуюСтепень");
	Описание.СсылкаНаОбъект 		 = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний[ИмяНачисленияПриНачальнойНастройке];
	
	Если СоздаватьНачисления Тогда
		НачисленияМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний[ИмяНачисленияПриНачальнойНастройке] = Описание.СсылкаНаОбъект;
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		НачисленияМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;

	// Надбавка за почетное звание (процентом)
	ИмяНачисленияПриНачальнойНастройке = "НадбавкаЗаПочетноеЗваниеПроцентом";

	Описание = НовоеОписаниеНачисления(СвойстваНачислений);
	Описание.Код					= НСтр("ru = 'НПЗП'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за почетное звание'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Почетное звание'");
	Описание.ФормулаРасчета 		= "РасчетнаяБаза * ПроцентНадбавкиЗаПочетноеЗвание / 100";
	Описание.ЗапрашиваемыеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентНадбавкиЗаПочетноеЗвание");
	Описание.СсылкаНаОбъект 		 = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний[ИмяНачисленияПриНачальнойНастройке];
	
	Если СоздаватьНачисления Тогда
		НачисленияМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний[ИмяНачисленияПриНачальнойНастройке] = Описание.СсылкаНаОбъект;
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		НачисленияМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
				
	// Надбавка за классность и езду
	ИмяНачисленияПриНачальнойНастройке = "НадбавкаЗаЕзду";

	Описание = НовоеОписаниеНачисления(СвойстваНачислений, Истина);
	Описание.Код					= НСтр("ru = 'НКЕП'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за классность и езду'");
	Описание.КраткоеНаименование	= НСтр("ru = 'Езда'");
	Описание.ФормулаРасчета 		= "РасчетнаяБаза * ПроцентНадбавкиЗаЕзду / 100";
	Описание.СсылкаНаОбъект 		= ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний[ИмяНачисленияПриНачальнойНастройке];
	
	Если СоздаватьНачисления Тогда
		НачисленияМенеджер.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний[ИмяНачисленияПриНачальнойНастройке] = Описание.СсылкаНаОбъект;
	Иначе
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		НачисленияМенеджер.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;

КонецПроцедуры

#Область События

Процедура ДокументыМедРегистраПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = Источник.Метаданные().Имя;
	
	Если Не Источник.ПометкаУдаления Тогда
		
		Документы[ИмяДокумента].ОбработкаФормированияФайла(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодтверждениеКвалификацииМедицинскихРаботников

Функция ЭтоАттестацияМедицинскихРаботников(ВидАттестации) Экспорт
	Возврат ВидАттестации = ВидАттестацииМедицинскихРаботников();
КонецФункции 

Функция ВидАттестацииМедицинскихРаботников() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыАттестацийСотрудников.ПодтверждениеКвалификацииМедицинскихРаботников");
КонецФункции

Процедура СоздатьВидАттестацииМедицинскихРаботников() Экспорт
	
	Если РаботаВМедицинскомУчреждении() Тогда
		
		ВидАттестацииСсылка = ВидАттестацииМедицинскихРаботников();
		
		Если ЗначениеЗаполнено(ВидАттестацииСсылка) Тогда
			ВидАттестации =  ВидАттестацииСсылка.ПолучитьОбъект();
		Иначе
			ВидАттестации = Справочники.ВидыАттестацийСотрудников.СоздатьЭлемент();
			ВидАттестации.ИмяПредопределенныхДанных = "ПодтверждениеКвалификацииМедицинскихРаботников";
		КонецЕсли;
		
		ВидАттестации.Наименование = НСтр("ru = 'Подтверждение квалификации медицинских работников'");
		ВидАттестации.ЭтоВнешняяАттестация = Истина;
		ВидАттестации.ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности;
		ВидАттестации.Периодичность = Перечисления.Периодичность.Год;
		ВидАттестации.КоличествоПериодов = 5;
		ВидАттестации.ИспользоватьОграничениеПоМаксимальномуВозрасту = Ложь;
		ВидАттестации.ИспользоватьОграничениеПоМинимальномуСрокуРаботы = Ложь;
		ВидАттестации.Записать();
		
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаОписанияАттестаций(ТекстЗапроса) Экспорт
	
	Если ВидАттестацииМедицинскихРаботников() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапросаОписанияАттестаций();
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаДолжностиВидовАттестаций(ТекстЗапроса) Экспорт
	
	Если ВидАттестацииМедицинскихРаботников() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапросаДолжностиВидовАттестаций();
	
КонецПроцедуры

Функция АттестационныеЛистыСотрудников(ПриказыОбАттестации, ОбъектыПечати) Экспорт
	
	Возврат Обработки.ПечатьКадровыхПриказовМедицинскихОрганизаций.АттестационныеЛистыМедицинскихРаботников(ПриказыОбАттестации, ОбъектыПечати);

КонецФункции

Процедура ДобавитьКомандыПечатиПриказаОбАттестации(КомандыПечати) Экспорт
	Если РаботаВМедицинскомУчреждении() Тогда 
		ДобавитьКомандуПечатиОтчетаОПрофессиональнойДеятельности(КомандыПечати);
		ДобавитьКомандуПечатиЗаявленияОПодтвержденииКвалификации(КомандыПечати);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКомандуПечатиОтчетаОПрофессиональнойДеятельности(КомандыПечати)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовМедицинскихОрганизаций";
	КомандаПечати.Идентификатор = "ПФ_MXL_ОтчетОПрофессиональнойДеятельности";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о профессиональной деятельности (титульный лист)'");
	КомандаПечати.СписокФорм = "ФормаДокумента";
КонецПроцедуры

Процедура ДобавитьКомандуПечатиЗаявленияОПодтвержденииКвалификации(КомандыПечати)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовМедицинскихОрганизаций";
	КомандаПечати.Идентификатор = "ПФ_MXL_ЗаявлениеОПодтвержденииКвалификации";
	КомандаПечати.Представление = НСтр("ru = 'Заявление на подтверждение квалификации по специальности'");
	КомандаПечати.СписокФорм = "ФормаДокумента";
КонецПроцедуры

Функция ТекстОписанияВидаАттестацииМедицинскихРаботников() Экспорт
	Возврат Нстр("ru = 'Аттестации подлежат все сотрудники, работающие на должностях, являющихся должностями медицинских работников.'");
КонецФункции 

#КонецОбласти

#Область СправочникДолжности 

Процедура ДополнитьФормуЭлементаСправочникаДолжности(Форма, ИмяГруппыДляВставки = "ГруппаМедицинскаяДолжность") Экспорт
	
	Если Не РаботаВМедицинскомУчреждении() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СвойстваДолжностейМедицинскихРаботников", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.СвойстваДолжностейМедицинскихРаботников"),,,Истина));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	ГруппаФормы = Форма.Элементы.Найти(ИмяГруппыДляВставки); 
	ОписанияРесурсов = Метаданные.РегистрыСведений.СвойстваДолжностейМедицинскихРаботников.Ресурсы;
	ПрефиксПутиКДанным = "СвойстваДолжностейМедицинскихРаботников";
	
	ДобавитьПолеВвода(Форма, ГруппаФормы, ОписанияРесурсов.Найти("ЯвляетсяМедицинскойДолжностью"), ПрефиксПутиКДанным);
	
КонецПроцедуры

Процедура ДобавитьПолеВвода(Форма, ГруппаФормы, ОписаниеСвойства, ПрефиксПутиКДанным = Неопределено, ВариантОтображениеПодсказки = Неопределено)
	
	Если НЕ Форма.Элементы.Найти(ОписаниеСвойства.Имя) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеВвода 				= Форма.Элементы.Вставить(ОписаниеСвойства.Имя, Тип("ПолеФормы"), ГруппаФормы);
	ПолеВвода.ПутьКДанным 	= ПрефиксПутиКДанным + ?(ПрефиксПутиКДанным = Неопределено, "", ".") + ОписаниеСвойства.Имя;
	
	Если ОписаниеСвойства.Тип = Новый ОписаниеТипов("Булево") Тогда
		ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Иначе
		ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
		ПолеВвода.РастягиватьПоГоризонтали = Ложь;
	КонецЕсли;
	
	ПолеВвода.Заголовок = ОписаниеСвойства.Синоним;
	ПолеВвода.Подсказка = ОписаниеСвойства.Подсказка;
	
	Если НЕ ВариантОтображениеПодсказки = Неопределено Тогда
		ПолеВвода.ОтображениеПодсказки = ВариантОтображениеПодсказки;
	КонецЕсли;
	
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжности(Форма) Экспорт
	
	Если Не РаботаВМедицинскомУчреждении() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СвойстваДолжностейМедицинскихРаботников) Тогда
		Возврат;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.СвойстваДолжностейМедицинскихРаботников.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Должность = Форма.Объект.Ссылка;
	МенеджерЗаписи.Прочитать();
	
	ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СвойстваДолжностейМедицинскихРаботников);
КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеДолжности(Форма, Ссылка) Экспорт
	
	Если Не РаботаВМедицинскомУчреждении() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СвойстваДолжностейМедицинскихРаботников) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СвойстваДолжностейМедицинскихРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Должность.Установить(Ссылка);
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Форма.СвойстваДолжностейМедицинскихРаботников);
	Запись.Должность = Ссылка;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.УстановитьДополнительноеСвойствоПропуститьОбновлениеЗависимыхСтажей(НаборЗаписей.ДополнительныеСвойства);
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаОписанияАттестаций()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыАттестацийСотрудников.Ссылка КАК ВидАттестации,
	|	ВидыАттестацийСотрудников.ТипАттестации,
	|	ВидыАттестацийСотрудников.ЭтоВнешняяАттестация,
	|	ВидыАттестацийСотрудников.Периодичность,
	|	ВидыАттестацийСотрудников.КоличествоПериодов,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуВозрасту,
	|	ВидыАттестацийСотрудников.ВозрастДоКоторогоСотрудникНеПодлежитАттестации,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМаксимальномуВозрасту,
	|	ВидыАттестацийСотрудников.ВозрастПослеКоторогоСотрудникНеПодлежитАттестации,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуСрокуРаботы,
	|	ВидыАттестацийСотрудников.ПериодичностьМинимальногоСрокаРаботы,
	|	ВидыАттестацийСотрудников.КоличествоПериодовМинимальногоСрокаРаботы,
	|	ВидыАттестацийСотрудников.АттестовыватьВсеДолжностиСпециальности,
	|	ИСТИНА КАК ОтборПоДолжности
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников КАК ВидыАттестацийСотрудников
	|ГДЕ
	|	ВидыАттестацийСотрудников.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыАттестацийСотрудников.ПодтверждениеКвалификацииМедицинскихРаботников)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДолжностиВидовАттестаций()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыАттестацийСотрудников.Ссылка КАК ВидАттестации,
	|	Должности.Ссылка КАК Должность
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников КАК ВидыАттестацийСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейМедицинскихРаботников КАК СвойстваДолжностейМедицинскихРаботников
	|			ПО Должности.Ссылка = СвойстваДолжностейМедицинскихРаботников.Должность
	|				И (СвойстваДолжностейМедицинскихРаботников.ЯвляетсяМедицинскойДолжностью)
	|		ПО (ВидыАттестацийСотрудников.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыАттестацийСотрудников.ПодтверждениеКвалификацииМедицинскихРаботников))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Сведения о стаже

Функция НеобходимыСведенияОМедицинскомСтаже(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("МедицинскийСтажВид")
		ИЛИ ИмяПоля = ВРег("МедицинскийСтажПериодРегистрации")
		ИЛИ ИмяПоля = ВРег("МедицинскийСтажРазмерМесяцев")
		ИЛИ ИмяПоля = ВРег("МедицинскийСтажРазмерДней")
		ИЛИ ИмяПоля = ВРег("МедицинскийСтажДней")
		ИЛИ	ИмяПоля = ВРег("МедицинскийСтажМесяцев")
		ИЛИ	ИмяПоля = ВРег("МедицинскийСтажЛет");
		
КонецФункции

Функция ПутьКДаннымСведенийОСтаже(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ИмяТаблицы = КадровыйУчетРасширенный.ИмяТаблицыПоКатегорииСтажа(Перечисления.КатегорииСтажа.Медицинский);
	
	Если ИмяПоля = ВРег("МедицинскийСтажВид") Тогда
		Возврат ИмяТаблицы + ".ВидСтажа";
	ИначеЕсли ИмяПоля = ВРег("МедицинскийСтажПериодРегистрации") Тогда
		Возврат ИмяТаблицы + ".ПериодРегистрации";
	ИначеЕсли ИмяПоля = ВРег("МедицинскийСтажРазмерМесяцев") Тогда
		Возврат ИмяТаблицы + ".РазмерМесяцев";
	ИначеЕсли ИмяПоля = ВРег("МедицинскийСтажРазмерДней") Тогда
		Возврат ИмяТаблицы + ".РазмерДней";
	ИначеЕсли ИмяПоля = ВРег("МедицинскийСтажДней") Тогда
		Возврат ИмяТаблицы + ".Дней";
	ИначеЕсли ИмяПоля = ВРег("МедицинскийСтажМесяцев") Тогда
		Возврат ИмяТаблицы + ".Месяцев";
	ИначеЕсли ИмяПоля = ВРег("МедицинскийСтажЛет") Тогда
		Возврат ИмяТаблицы + ".Лет";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОписаниеСтажаДляОпределенияКритериевПоискаСотрудников() Экспорт
	
	Возврат Новый Структура("КатегорияСтажа,Идентификатор", Перечисления.КатегорииСтажа.Медицинский, "МедицинскийСтаж");
	
КонецФункции

Процедура ДополнитьТаблицуДополнительныхПолейПредставленийОтчетовПоСотрудникам(ДополнительныеПоляПредставлений) Экспорт
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МедицинскийСтажДней";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Медицинский стаж (дней)'");
	СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.МедицинскийСтажДней";
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МедицинскийСтажМесяцев";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Медицинский стаж (месяцев)'");
	СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.МедицинскийСтажМесяцев";
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МедицинскийСтажЛет";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "0";
	СтрокаДополнительногоПоля.ЗаголовокПоляСКД = НСтр("ru='Медицинский стаж (лет)'");
	СтрокаДополнительногоПоля.ПутьПоляСКД = "ЛичныеДанные.Стажи.МедицинскийСтажЛет";
	
КонецПроцедуры

Функция СвойстваОбъектаМетаданных(Тип) Экспорт

	СвойстваОбъекта = Новый Структура("ТипОбъекта,ПолноеИмя,ПолныйСиноним,ПредставлениеОбъекта,ЭтоСправочник,Иерархический,ИерархияГрупп,ЕстьВладелец,ТипВладельца");
	СвойстваОбъекта.ЭтоСправочник = Истина;
	СвойстваОбъекта.ИерархияГрупп = Ложь;
	СвойстваОбъекта.Иерархический = Ложь;
	СвойстваОбъекта.ЕстьВладелец  = Ложь;
	
	СвойстваОбъекта.ПолныйСиноним = "";
	
	Если Не ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
	СвойстваОбъекта.ПолноеИмя = МетаданныеТипа.ПолноеИмя();
	
	ЧастиПолногоИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваОбъекта.ПолноеИмя, ".");

	Если ЧастиПолногоИмени[0] = "Справочник" Тогда
		
		СвойстваОбъекта.ТипОбъекта = "СправочникСсылка." + ЧастиПолногоИмени[1];
		СвойстваОбъекта.ПолныйСиноним = МетаданныеТипа.Представление();
		СвойстваОбъекта.ПредставлениеОбъекта = МетаданныеТипа.ПредставлениеОбъекта;
		
		Если МетаданныеТипа.Иерархический Тогда
			 СвойстваОбъекта.Иерархический = Истина;
			 СвойстваОбъекта.ИерархияГрупп = (МетаданныеТипа.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов);
		КонецЕсли;
		 
		Если МетаданныеТипа.Владельцы.Количество() Тогда
		    СвойстваОбъекта.ЕстьВладелец = Истина;
			Если ЧастиПолногоИмени[1] = "ОбразованиеФизическихЛиц" Тогда
				СвойстваОбъекта.ТипВладельца = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
			Иначе
				СвойстваОбъекта.ТипВладельца = Новый ОписаниеТипов("СправочникСсылка.Организации");
			КонецЕсли;
		КонецЕсли;
		 
	ИначеЕсли ЧастиПолногоИмени[0] = "Перечисление" Тогда
		
		СвойстваОбъекта.ТипОбъекта = "ПеречислениеСсылка." + ЧастиПолногоИмени[1];
		СвойстваОбъекта.ПолныйСиноним = МетаданныеТипа.Представление();
		СвойстваОбъекта.ПредставлениеОбъекта = МетаданныеТипа.Синоним;
		СвойстваОбъекта.ЭтоСправочник = Ложь;
		
	КонецЕсли;
	
	Если ПустаяСтрока(СвойстваОбъекта.ПредставлениеОбъекта) Тогда
		СвойстваОбъекта.ПредставлениеОбъекта = СвойстваОбъекта.ПолныйСиноним;
	КонецЕсли;
	
	Возврат СвойстваОбъекта;

КонецФункции 

Процедура ДополнитьВидамиСтажаДолжностей(Должность, ВидыСтажаДолжностей) Экспорт
	
	Если РаботаВМедицинскомУчреждении() Тогда
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(Должность) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			Запрос.УстановитьПараметр("Должность", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должность, "Должность"));
		Иначе
			Запрос.УстановитьПараметр("Должность", Должность);
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СвойстваДолжностейМедицинскихРаботников.ЯвляетсяМедицинскойДолжностью КАК ЯвляетсяМедицинскойДолжностью
			|ИЗ
			|	РегистрСведений.СвойстваДолжностейМедицинскихРаботников КАК СвойстваДолжностейМедицинскихРаботников
			|ГДЕ
			|	СвойстваДолжностейМедицинскихРаботников.Должность = &Должность
			|	И СвойстваДолжностейМедицинскихРаботников.ЯвляетсяМедицинскойДолжностью";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСтажаДолжностей, ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДолжностиСАвтоматическимУчетомПрерыванияСтажей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвойстваДолжностейМедицинскихРаботников.Должность КАК Должность
		|ИЗ
		|	РегистрСведений.СвойстваДолжностейМедицинскихРаботников КАК СвойстваДолжностейМедицинскихРаботников
		|ГДЕ
		|	СвойстваДолжностейМедицинскихРаботников.ЯвляетсяМедицинскойДолжностью";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Должность");
	
КонецФункции

Функция ВидыСтажейПоСвойствамДолжностиФормы(Форма) Экспорт
	
	Если Не РаботаВМедицинскомУчреждении() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ВидыСтажейПоСвойствамДолжностей(Форма.СвойстваДолжностейМедицинскихРаботников);
	
КонецФункции

Функция ВидыСтажейПоСвойствамДолжностей(СвойствамДолжностей) Экспорт
	
	Если СвойствамДолжностей.ЯвляетсяМедицинскойДолжностью Тогда
		ВидыСтажаДолжностей = ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста();
	Иначе
		ВидыСтажаДолжностей = Новый Массив;
	КонецЕсли;
	
	Возврат ВидыСтажаДолжностей;
	
КонецФункции

Функция ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста() Экспорт
	
	Возврат Справочники.ВидыСтажа.ВидыСтажаПоКатегории(Перечисления.КатегорииСтажа.Медицинский);
	
КонецФункции

#КонецОбласти