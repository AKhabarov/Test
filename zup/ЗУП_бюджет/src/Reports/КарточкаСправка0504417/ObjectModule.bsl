#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет();

	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	Если КлючВарианта = "КарточкаСправка0504417" ИЛИ КлючВарианта = "КарточкаСправка0504417с2015" Тогда
		
		Попытка
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КарточкаСправка0504417";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			ПараметрПериод = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
			ПериодаДатаНачала = ПараметрПериод.Значение.ДатаНачала;
			ПериодаДатаОкончания = ПараметрПериод.Значение.ДатаОкончания;
			
			ДанныеОтчета = Новый ДеревоЗначений;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			// Создадим и инициализируем процессор компоновки.
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			
			// Обозначим начало вывода
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
			// Вывод справок по годам, когда период разбит на несколько лет.
			Для ГодСправки = Год(ПериодаДатаНачала) По Год(ПериодаДатаОкончания) Цикл
				
				ДатаНачалаОтчета = Дата(ГодСправки, 1, 1);
				ДатаОкончанияОтчета = ?(ГодСправки < Год(ПериодаДатаОкончания), КонецДня(Дата(ГодСправки, 12, 31)), ПериодаДатаОкончания);
				
				ДанныеДляЗаполнения = Новый Структура(
				"КадровыеДанные,
				|КадроваяИстория,
				|ВидыОсновныхНачислений,
				|СведенияОбОтпусках,
				|СведенияОбУдержаниях,
				|ВсегоНачислено1,
				|НачисленоПоВидам1,
				|ВсегоУдержано1,
				|УдержаноПоВидам1,
				|Выплачено1,
				|КВыдаче1,
				|ВсегоНачислено2,
				|НачисленоПоВидам2,
				|ВсегоУдержано2,
				|УдержаноПоВидам2,
				|Выплачено2,
				|КВыдаче2");
				
				ДанныеДляЗаполненияКадровыхДанных(ДанныеДляЗаполнения, ДанныеОтчета);
				ДанныеДляЗаполненияКадровойИстории(ДанныеДляЗаполнения, НастройкиОтчета, ДатаНачалаОтчета, ДатаОкончанияОтчета);
				ДанныеДляЗаполненияСведенийОбОтпусках(ДанныеДляЗаполнения, НастройкиОтчета, ДатаНачалаОтчета, ДатаОкончанияОтчета);
				ДанныеДляЗаполненияСведенийОбУдержаниях(ДанныеДляЗаполнения, НастройкиОтчета, ДатаНачалаОтчета, ДатаОкончанияОтчета);
				ДанныеДляЗаполненияНачисленийИУдержаний(ДанныеДляЗаполнения, НастройкиОтчета, ДатаНачалаОтчета, ДатаОкончанияОтчета);
				
				ВывестиМакетКарточкаСправка0504417(ДокументРезультат,
				ДанныеОтчета.Строки.ВыгрузитьКолонку("Сотрудник"),
				ДанныеДляЗаполнения,
				ПериодаДатаОкончания,
				КлючВарианта);
				
			КонецЦикла;
		
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'В настройку отчета внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	Иначе
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету Форма0504417.

Процедура ВывестиМакетКарточкаСправка0504417(ДокументРезультат,
	Сотрудники,
	ДанныеДляЗаполнения,
	ДатаОтчета,
	КлючВарианта = "КарточкаСправка0504417с2015")
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Если КлючВарианта = "КарточкаСправка0504417с2015" Тогда
	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.КарточкаСправка0504417.ПФ_MXL_Форма0504417с2015");
	
	Иначе
	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.КарточкаСправка0504417.ПФ_MXL_Форма0504417");
	
	КонецЕсли;
	
	ОбластьШапкаКарточки = Макет.ПолучитьОбласть("ШапкаКарточки");
	ОбластьСтрокаКадровыхДокументов = Макет.ПолучитьОбласть("СтрокаКадровыхДокументов");
	ОбластьСтрокаКадровыхДокументовПустая = Макет.ПолучитьОбласть("СтрокаКадровыхДокументовПустая");
	ОбластьШапкаОтпуска = Макет.ПолучитьОбласть("ШапкаОтпуска");
	ОбластьСтрокаОтпуска = Макет.ПолучитьОбласть("СтрокаОтпуска");
	ОбластьСтрокаОтпускаПустая = Макет.ПолучитьОбласть("СтрокаОтпускаПустая");
	ОбластьПодчеркивание = Макет.ПолучитьОбласть("Подчеркивание");
	ОбластьШапкаНачислений = Макет.ПолучитьОбласть("ШапкаНачислений");
	ОбластьШапка3стр = Макет.ПолучитьОбласть("Шапка3стр");
	ОбластьДнейОтработано = Макет.ПолучитьОбласть("ДнейОтработано");
	ОбластьНачисление = Макет.ПолучитьОбласть("Начисление");
	ОбластьВсегоНачислений = Макет.ПолучитьОбласть("ВсегоНачислений");
	ОбластьВсегоУдержано = Макет.ПолучитьОбласть("ВсегоУдержано");
	ОбластьВтомЧисле = Макет.ПолучитьОбласть("ВтомЧисле");
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Если КлючВарианта = "КарточкаСправка0504417с2015" Тогда
		
		ОбластьШапкаКарточки.Параметры.Период = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 г.'"),
			Формат(Год(ДатаОтчета), "ЧГ=0"));
		
	КонецЕсли;		
	
	ЭтоПервыйСотрудник = Истина;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		
		Если ЭтоПервыйСотрудник Тогда
			ЭтоПервыйСотрудник = Ложь
		Иначе
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;		

		КадровыеДанныеСотрудника = ДанныеДляЗаполнения.КадровыеДанные.Получить(Сотрудник);
		
		// Кадровые данные
		ОбластьШапкаКарточки.Параметры.Организация = КадровыеДанныеСотрудника.Организация;
		
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(КадровыеДанныеСотрудника.Подразделение) Тогда
			ОбластьШапкаКарточки.Параметры.ПодразделениеОрганизации = КадровыеДанныеСотрудника.Подразделение.ПолноеНаименование();
		Иначе
			ОбластьШапкаКарточки.Параметры.ПодразделениеОрганизации = КадровыеДанныеСотрудника.Подразделение;
		КонецЕсли;
		
		ОбластьШапкаКарточки.Параметры.КодОКПО = КадровыеДанныеСотрудника.КодПоОКПО;
		ОбластьШапкаКарточки.Параметры.ФИО = КадровыеДанныеСотрудника.Сотрудник;
		
		Если КлючВарианта = "КарточкаСправка0504417с2015" Тогда
			
		Иначе
			
			ОбластьШапкаКарточки.Параметры.ТН = КадровыеДанныеСотрудника.ТабельныйНомер;
			
		КонецЕсли;		
		
		ОбластьШапкаКарточки.Параметры.Оклад = КадровыеДанныеСотрудника.ТарифнаяСтавка;
		ОбластьШапкаКарточки.Параметры.ДатаРождения = КадровыеДанныеСотрудника.ДатаРождения;
		ОбластьШапкаКарточки.Параметры.КвалификацияВТаблицу = КадровыеДанныеСотрудника.Образование1Квалификация;
		ОбластьШапкаКарточки.Параметры.ОбразованиеВТаблицу = КадровыеДанныеСотрудника.Образование;
		ОбластьШапкаКарточки.Параметры.КоличествоДетей = КадровыеДанныеСотрудника.КоличествоДетей;
		ОбластьШапкаКарточки.Параметры.КоличествоИждивенцев = КадровыеДанныеСотрудника.КоличествоИждивенцев;

		Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.УченоеЗвание) Тогда
			ОбластьШапкаКарточки.Параметры.УченоеЗваниеСтепень = КадровыеДанныеСотрудника.УченоеЗвание;
		ИначеЕсли ЗначениеЗаполнено(КадровыеДанныеСотрудника.УченаяСтепень) Тогда
			ОбластьШапкаКарточки.Параметры.УченоеЗваниеСтепень = КадровыеДанныеСотрудника.УченаяСтепень;
		Иначе
			ОбластьШапкаКарточки.Параметры.УченоеЗваниеСтепень = "";
		КонецЕсли;
		
		// Данные общего стажа
		Лет = КадровыеДанныеСотрудника.ОбщийСтажЛет;
		Месяцев = КадровыеДанныеСотрудника.ОбщийСтажМесяцев;
		Дней = КадровыеДанныеСотрудника.ОбщийСтажДней;
		
		ШаблонСтрокиСтажа = "";
		ПодписьЛет = "";
		Если ЗначениеЗаполнено(Лет) Тогда
			ШаблонСтрокиСтажа = ШаблонСтрокиСтажа + "%1 %2 ";
			ПодписьЛет = ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru='год'"), НСтр("ru='года'"), НСтр("ru='лет'"), Лет);
		КонецЕсли;
		Если ЗначениеЗаполнено(Месяцев) Тогда
			ШаблонСтрокиСтажа = ШаблонСтрокиСтажа + НСтр("ru='%3 мес. '");
		КонецЕсли;
		Если ЗначениеЗаполнено(Дней) Тогда
			ШаблонСтрокиСтажа = ШаблонСтрокиСтажа + НСтр("ru='%4 дн. '");
		КонецЕсли;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ШаблонСтрокиСтажа);
		
		ОбластьШапкаКарточки.Параметры.СтажВТаблицу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСтрокиСтажа, Лет, ПодписьЛет, Месяцев, Дней);
		
		// Виды основных начислений в шапке.
		ВидыОсновныхНачислений = ДанныеДляЗаполнения.ВидыОсновныхНачислений.Получить(Сотрудник);
		НомерВидаНачисления = 1;
		
		Если ВидыОсновныхНачислений <> Неопределено Тогда
			Для Каждого ВидОсновногоНачисления Из ВидыОсновныхНачислений Цикл
				Если НомерВидаНачисления > 8 Тогда
					Прервать;
				КонецЕсли;
				ОбластьШапкаКарточки.Параметры["ВидРасчета" + НомерВидаНачисления] = ВидОсновногоНачисления;
				НомерВидаНачисления = НомерВидаНачисления + 1;
			КонецЦикла;
		КонецЕсли;
		
		Пока НомерВидаНачисления <= 8 Цикл
			ОбластьШапкаКарточки.Параметры["ВидРасчета" + НомерВидаНачисления] = "";
			НомерВидаНачисления = НомерВидаНачисления + 1;
		КонецЦикла;
		
		ДокументРезультат.Вывести(ОбластьШапкаКарточки);

		// Кадровая история
		КоличествоСтрокКадровойИстории = 0;
		СтрокиКадровойИстории = ДанныеДляЗаполнения.КадроваяИстория.Получить(Сотрудник);
		
		Если СтрокиКадровойИстории <> Неопределено Тогда
			
			Для Каждого СтрокаКадровойИстории Из СтрокиКадровойИстории Цикл
				
				ОбластьСтрокаКадровыхДокументов.Параметры.Дата = СтрокаКадровойИстории.КадровыйПриказДата;
				
				Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
					
					ОбластьСтрокаКадровыхДокументов.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
						СтрокаКадровойИстории.КадровыйПриказНомер, Истина, Истина);
					
				Иначе
					ОбластьСтрокаКадровыхДокументов.Параметры.Номер = СтрокаКадровойИстории.КадровыйПриказНомер;
				КонецЕсли;
				
				ОбластьСтрокаКадровыхДокументов.Параметры.Должность = СтрокаКадровойИстории.Должность;
				
				Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(СтрокаКадровойИстории.Подразделение) Тогда
					ОбластьСтрокаКадровыхДокументов.Параметры.ПодразделениеОрганизации = СтрокаКадровойИстории.Подразделение.ПолноеНаименование();
				Иначе
					ОбластьСтрокаКадровыхДокументов.Параметры.ПодразделениеОрганизации = СтрокаКадровойИстории.Подразделение;
				КонецЕсли;
				
				ОбластьСтрокаКадровыхДокументов.Параметры.Оклад = 0;
				Для НомерНачисления = 1 По 8 Цикл
					ОбластьСтрокаКадровыхДокументов.Параметры["РазмерВР" + НомерНачисления] = 0;
				КонецЦикла;
				
				// Начисления, которые установил кадровый документ.
				ЗаработнаяПлата = 0;
				Для Каждого СтрокаНачисления Из СтрокаКадровойИстории.Строки Цикл
					ИндексСтроки = ВидыОсновныхНачислений.Найти(СтрокаНачисления.Начисление);
					Если ИндексСтроки <> Неопределено Тогда
						НомерНачисления = ИндексСтроки + 1;
						Если НомерНачисления <= 8 Тогда
							ОбластьСтрокаКадровыхДокументов.Параметры["РазмерВР" + НомерНачисления] = СтрокаНачисления.Размер;
							Если ЗначениеЗаполнено(СтрокаНачисления.Размер) Тогда 
								ЗаработнаяПлата = ЗаработнаяПлата + СтрокаНачисления.Размер;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ОбластьСтрокаКадровыхДокументов.Параметры.Оклад = ЗаработнаяПлата;
				
				ДокументРезультат.Вывести(ОбластьСтрокаКадровыхДокументов);
				КоличествоСтрокКадровойИстории = КоличествоСтрокКадровойИстории + 1;
			КонецЦикла;
		КонецЕсли;
		
		Пока КоличествоСтрокКадровойИстории < 6 Цикл
			ДокументРезультат.Вывести(ОбластьСтрокаКадровыхДокументовПустая);
			КоличествоСтрокКадровойИстории = КоличествоСтрокКадровойИстории + 1;
		КонецЦикла;
		
		// Отпуска и плановые удержания.
		КоличествоСтрокОтпускаИУдержаний = 0;
		СтрокиОтпуска = ДанныеДляЗаполнения.СведенияОбОтпусках.Получить(Сотрудник);
		СтрокиПлановыхУдержаний = ДанныеДляЗаполнения.СведенияОбУдержаниях.Получить(Сотрудник);
		
		КоличествоСтрокОтпуска = ?(СтрокиОтпуска = Неопределено, 0, СтрокиОтпуска.Количество());
		КоличествоСтрокУдержаний = ?(СтрокиПлановыхУдержаний = Неопределено, 0, СтрокиПлановыхУдержаний.Количество());

		ДокументРезультат.Вывести(ОбластьШапкаОтпуска);
		
		Для НомерСтроки = 0 По (Макс(КоличествоСтрокОтпуска, КоличествоСтрокУдержаний) - 1) Цикл
			
			ОчиститьПараметрыОбласти(ОбластьСтрокаОтпуска);
			
			Если НомерСтроки < КоличествоСтрокОтпуска Тогда
				
				СтрокаОтпуска = СтрокиОтпуска[НомерСтроки];
				
				ПериодС   = Формат(СтрокаОтпуска.РабочийПериодС,"ДЛФ=D");
				ПериодПо  = Формат(СтрокаОтпуска.РабочийПериодПо,"ДЛФ=D");
				Начало    = Формат(СтрокаОтпуска.ДатаНачала,"ДЛФ=D");
				Окончание = Формат(СтрокаОтпуска.ДатаОкончания,"ДЛФ=D");
				
				Если ЗначениеЗаполнено(СтрокаОтпуска.Регистратор) Тогда
					
					УстановитьПривилегированныйРежим(Истина);
					СвойстваРегистратора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОтпуска.Регистратор, "Номер,Дата");
					ОбластьСтрокаОтпуска.Параметры.Дата = СвойстваРегистратора.Дата;
					ОбластьСтрокаОтпуска.Параметры.Номер = СвойстваРегистратора.Номер;
					УстановитьПривилегированныйРежим(Ложь);
					
				КонецЕсли;
				
				ОбластьСтрокаОтпуска.Параметры.ОтпускЗаПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'с %1 по %2'"), ПериодС, ПериодПо);
				ОбластьСтрокаОтпуска.Параметры.ОтпускНачалоКонец = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'с %1 по %2'"), Начало, Окончание);
				ОбластьСтрокаОтпуска.Параметры.КоличествоДней = СтрокаОтпуска.КоличествоДней;
				
			КонецЕсли;
			
			Если НомерСтроки < КоличествоСтрокУдержаний Тогда
				
				СтрокаПлановыхУдержаний = СтрокиПлановыхУдержаний[НомерСтроки];
				
				УстановитьПривилегированныйРежим(Истина);
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПлановыхУдержаний.ДокументУдержания, "Номер,Дата");
				УстановитьПривилегированныйРежим(Ложь);
				
				СтрокаПодстановки = НСтр("ru = '№ %1 от %2 г.'");
				ОбластьСтрокаОтпуска.Параметры.ДатаНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СтрокаПодстановки, РеквизитыДокумента.Номер, Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
				
				ОбластьСтрокаОтпуска.Параметры.Документ = СтрокаПлановыхУдержаний.НаименованиеУдержания;
				ОбластьСтрокаОтпуска.Параметры.ВидРасчета = СтрокаПлановыхУдержаний.Удержание;
				ОбластьСтрокаОтпуска.Параметры.ДатаНачала = СтрокаПлановыхУдержаний.ДатаНачалаУдержания;
				ОбластьСтрокаОтпуска.Параметры.ДатаОкончания = СтрокаПлановыхУдержаний.ДатаОкончанияУдержания;
				ОбластьСтрокаОтпуска.Параметры.Размер = СтрокаПлановыхУдержаний.Значение;
				ОбластьСтрокаОтпуска.Параметры.Получатель = СтрокаПлановыхУдержаний.Контрагент;
				ОбластьСтрокаОтпуска.Параметры.АдресРасчетныйСчет = СтрокаПлановыхУдержаний.АдресПолучателя;
				
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьСтрокаОтпуска);
			
			КоличествоСтрокОтпускаИУдержаний = КоличествоСтрокОтпускаИУдержаний + 1;
			
		КонецЦикла;
		
		Пока КоличествоСтрокОтпускаИУдержаний < 5 Цикл
			ДокументРезультат.Вывести(ОбластьСтрокаОтпускаПустая);
			КоличествоСтрокОтпускаИУдержаний = КоличествоСтрокОтпускаИУдержаний + 1;
		КонецЦикла;		

		ДокументРезультат.Вывести(ОбластьПодчеркивание);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Начисления и удержания
		НомерТекущейСтроки = 1;
		
		Для ТекущийКвартал = 1 По 2 Цикл
			
			ПоказыватьСуммуКВыдаче = Новый Массив(6);
			
			Если ТекущийКвартал = 1 Тогда
				ДокументРезультат.Вывести(ОбластьШапкаНачислений);
			Иначе
				ДокументРезультат.Вывести(ОбластьПодчеркивание);
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьШапка3стр);
			КонецЕсли;
			
			// Отработано дней и всего начислено.
			СтрокиВсегоНачислено = ДанныеДляЗаполнения["ВсегоНачислено" + ТекущийКвартал].Получить(Сотрудник);
			СтрокиНачисленоПоВидам = ДанныеДляЗаполнения["НачисленоПоВидам" + ТекущийКвартал].Получить(Сотрудник);
			
			ОчиститьПараметрыОбласти(ОбластьДнейОтработано);
			ОчиститьПараметрыОбласти(ОбластьВсегоНачислений);
			
			УстановитьНомерТекущейСтроки(ОбластьДнейОтработано, НомерТекущейСтроки);
			УстановитьНомерТекущейСтроки(ОбластьВсегоНачислений, НомерТекущейСтроки);
			
			Если СтрокиВсегоНачислено <> Неопределено Тогда			
				
				ОтработаноДнейПоМесяцам = Новый Соответствие;
				Если СтрокиНачисленоПоВидам <> Неопределено Тогда
					Для Каждого СтрокаНачисленоПоВидам Из СтрокиНачисленоПоВидам Цикл
						Если ТипЗнч(СтрокаНачисленоПоВидам.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.Начисления") И СтрокаНачисленоПоВидам.ВидРасчетаЗачетОтработанногоВремени Тогда 
							ОтработаноДней = ОтработаноДнейПоМесяцам[СтрокаНачисленоПоВидам.МесяцНачисления];
							Если ОтработаноДней = Неопределено Тогда
								ОтработаноДней = 0;
							КонецЕсли;
							ОтработаноДнейПоМесяцам.Вставить(СтрокаНачисленоПоВидам.МесяцНачисления, ОтработаноДней + СтрокаНачисленоПоВидам.ОтработаноДней);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого СтрокаВсегоНачислено Из СтрокиВсегоНачислено Цикл				
					
					ОтработаноДней = ОтработаноДнейПоМесяцам[СтрокаВсегоНачислено.МесяцНачисления];
					ОтработаноДней = ?(ОтработаноДней = Неопределено, 0, ОтработаноДней);
					
					УстановитьПараметрПоМесяцу(ОбластьДнейОтработано, "ОтработаноДней",
						СтрокаВсегоНачислено.МесяцНачисления, ОтработаноДней);
					УстановитьПараметрПоМесяцу(ОбластьВсегоНачислений, "ВсегоНачислено",
						СтрокаВсегоНачислено.МесяцНачисления, СтрокаВсегоНачислено.Сумма);
						
					УстановитьПризнакОтображенияСуммКВыдаче(ПоказыватьСуммуКВыдаче, СтрокаВсегоНачислено.МесяцНачисления);
					
				КонецЦикла;
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьДнейОтработано);
			ДокументРезультат.Вывести(ОбластьВсегоНачислений);
			
			// Начисления по видам
			УстановитьНомерТекущейСтроки(ОбластьВтомЧисле, НомерТекущейСтроки);
			ДокументРезультат.Вывести(ОбластьВтомЧисле);
			
			КоличествоНачислений = 0;
			ТекущееНачисление = Неопределено;
			ОчиститьПараметрыОбласти(ОбластьНачисление);
			
			Если СтрокиНачисленоПоВидам <> Неопределено Тогда
				
				Для Каждого СтрокаНачисленоПоВидам Из СтрокиНачисленоПоВидам Цикл
					
					Если ТекущееНачисление <> СтрокаНачисленоПоВидам.ВидРасчета И ТекущееНачисление <> Неопределено Тогда						
						ОбластьНачисление.Параметры.ВидРасчета = ТекущееНачисление;
						ТекущееНачисление = СтрокаНачисленоПоВидам.ВидРасчета;
						УстановитьНомерТекущейСтроки(ОбластьНачисление, НомерТекущейСтроки);
						ДокументРезультат.Вывести(ОбластьНачисление);
						ОчиститьПараметрыОбласти(ОбластьНачисление);
						КоличествоНачислений = КоличествоНачислений + 1;
					ИначеЕсли ТекущееНачисление = Неопределено Тогда
						ТекущееНачисление = СтрокаНачисленоПоВидам.ВидРасчета;
					КонецЕсли;
					
					УстановитьПараметрПоМесяцу(ОбластьНачисление, "Сумма",
					СтрокаНачисленоПоВидам.МесяцНачисления, СтрокаНачисленоПоВидам.Сумма);
					
				КонецЦикла;
				
				Если ТекущееНачисление <> Неопределено Тогда						
					ОбластьНачисление.Параметры.ВидРасчета = ТекущееНачисление;
					ТекущееНачисление = СтрокаНачисленоПоВидам.ВидРасчета;
					УстановитьНомерТекущейСтроки(ОбластьНачисление, НомерТекущейСтроки);
					ДокументРезультат.Вывести(ОбластьНачисление);
					ОчиститьПараметрыОбласти(ОбластьНачисление);					
					КоличествоНачислений = КоличествоНачислений + 1;
				КонецЕсли;
				
			КонецЕсли;
			
			Пока КоличествоНачислений < 11 Цикл
				ОчиститьПараметрыОбласти(ОбластьНачисление);					
				УстановитьНомерТекущейСтроки(ОбластьНачисление, НомерТекущейСтроки);
				ДокументРезультат.Вывести(ОбластьНачисление);
				КоличествоНачислений = КоличествоНачислений + 1;
			КонецЦикла;		
			
			// Всего удержано
			СтрокиВсегоУдержано = ДанныеДляЗаполнения["ВсегоУдержано" + ТекущийКвартал].Получить(Сотрудник);
			
			ОчиститьПараметрыОбласти(ОбластьВсегоУдержано);
			
			УстановитьНомерТекущейСтроки(ОбластьВсегоУдержано, НомерТекущейСтроки);
			
			Если СтрокиВсегоУдержано <> Неопределено Тогда			
				
				Для Каждого СтрокаВсегоУдержано Из СтрокиВсегоУдержано Цикл				
					
					УстановитьПараметрПоМесяцу(ОбластьВсегоУдержано, "ВсегоУдержано",
						СтрокаВсегоУдержано.МесяцНачисления, СтрокаВсегоУдержано.Сумма);
						
					УстановитьПризнакОтображенияСуммКВыдаче(ПоказыватьСуммуКВыдаче, СтрокаВсегоУдержано.МесяцНачисления);
					
				КонецЦикла;
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьВсегоУдержано);
			
			// Удержания по видам
			СтрокиУдержаноПоВидам = ДанныеДляЗаполнения["УдержаноПоВидам" + ТекущийКвартал].Получить(Сотрудник);
			
			УстановитьНомерТекущейСтроки(ОбластьВтомЧисле, НомерТекущейСтроки);
			ДокументРезультат.Вывести(ОбластьВтомЧисле);
			
			КоличествоУдержаний = 0;
			ТекущееУдержание = Неопределено;
			ОчиститьПараметрыОбласти(ОбластьНачисление);
			
			Если СтрокиУдержаноПоВидам <> Неопределено Тогда
				
				Для Каждого СтрокаУдержаноПоВидам Из СтрокиУдержаноПоВидам Цикл
					
					Если ТекущееУдержание <> СтрокаУдержаноПоВидам.ВидРасчета И ТекущееУдержание <> Неопределено Тогда						
						ОбластьНачисление.Параметры.ВидРасчета = ТекущееУдержание;
						ТекущееУдержание = СтрокаУдержаноПоВидам.ВидРасчета;
						УстановитьНомерТекущейСтроки(ОбластьНачисление, НомерТекущейСтроки);
						ДокументРезультат.Вывести(ОбластьНачисление);
						ОчиститьПараметрыОбласти(ОбластьНачисление);
						КоличествоУдержаний = КоличествоУдержаний + 1;
					ИначеЕсли ТекущееУдержание = Неопределено Тогда
						ТекущееУдержание = СтрокаУдержаноПоВидам.ВидРасчета;
					КонецЕсли;
					
					УстановитьПараметрПоМесяцу(ОбластьНачисление, "Сумма",
					СтрокаУдержаноПоВидам.МесяцНачисления, СтрокаУдержаноПоВидам.Сумма);
					
				КонецЦикла;
				
				Если ТекущееУдержание <> Неопределено Тогда						
					ОбластьНачисление.Параметры.ВидРасчета = ТекущееУдержание;
					ТекущееУдержание = СтрокаУдержаноПоВидам.ВидРасчета;
					УстановитьНомерТекущейСтроки(ОбластьНачисление, НомерТекущейСтроки);
					ДокументРезультат.Вывести(ОбластьНачисление);
					ОчиститьПараметрыОбласти(ОбластьНачисление);					
					КоличествоУдержаний = КоличествоУдержаний + 1;
				КонецЕсли;
				
			КонецЕсли;
			
			// Всего выплачено
			СтрокиВыплачено = ДанныеДляЗаполнения["Выплачено" + ТекущийКвартал].Получить(Сотрудник);
			
			Если СтрокиВыплачено <> Неопределено И СтрокиВыплачено.Количество() > 0 Тогда			
			
				ОчиститьПараметрыОбласти(ОбластьНачисление);
			
				УстановитьНомерТекущейСтроки(ОбластьНачисление, НомерТекущейСтроки);
				
				Для Каждого СтрокаВыплачено Из СтрокиВыплачено Цикл				
					
					УстановитьПараметрПоМесяцу(ОбластьНачисление, "Сумма",
						СтрокаВыплачено.МесяцНачисления, СтрокаВыплачено.Сумма);
						
					УстановитьПризнакОтображенияСуммКВыдаче(ПоказыватьСуммуКВыдаче, СтрокаВыплачено.МесяцНачисления);
					
				КонецЦикла;
				
				ОбластьНачисление.Параметры.ВидРасчета = НСтр("ru = 'Выплачено заработной платы'");
				ДокументРезультат.Вывести(ОбластьНачисление);
				КоличествоУдержаний = КоличествоУдержаний + 1;
					
			КонецЕсли;
						
			Пока КоличествоУдержаний < 7 Цикл
				ОчиститьПараметрыОбласти(ОбластьНачисление);					
				УстановитьНомерТекущейСтроки(ОбластьНачисление, НомерТекущейСтроки);
				ДокументРезультат.Вывести(ОбластьНачисление);
				КоличествоУдержаний = КоличествоУдержаний + 1;
			КонецЦикла;		
			
			// Суммы к выдаче
			СтрокиКВыдаче = ДанныеДляЗаполнения["КВыдаче" + ТекущийКвартал].Получить(Сотрудник);
			
			ОчиститьПараметрыОбласти(ОбластьИтого);					
			УстановитьНомерТекущейСтроки(ОбластьИтого, НомерТекущейСтроки);			
			
			Если СтрокиКВыдаче <> Неопределено Тогда			
			
				Для Каждого СтрокаКВыдаче Из СтрокиКВыдаче Цикл				
					
					НомерПараметра = НомерПараметраПоМесяцу(СтрокаКВыдаче.МесяцНачисления);
					
					// Суммы к выдаче не отображаются в месяцах, которых нет начислений и удержаний.
					Если ПоказыватьСуммуКВыдаче[НомерПараметра - 1] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					УстановитьПараметрПоМесяцу(ОбластьИтого, "СуммаКВыдаче",
						СтрокаКВыдаче.МесяцНачисления, СтрокаКВыдаче.Сумма);					
				КонецЦикла;
			КонецЕсли;
			
			КоличествоУдержаний = КоличествоУдержаний + 1;
			ДокументРезультат.Вывести(ОбластьИтого);

		КонецЦикла;
		
		ЗаполнитьПодписантов(ОбластьПодвал, КадровыеДанныеСотрудника.Организация, ДатаОтчета);
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВыбранноеПолеВКомпоновщик(ВыбранныеПоляКомпоновщика, ЗаголовокПоля)
    НовоеПоле = ВыбранныеПоляКомпоновщика.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    НовоеПоле.Использование = Истина;
    НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЗаголовокПоля);
КонецПроцедуры

Процедура ДанныеДляЗаполненияКадровыхДанных(ДанныеДляЗаполнения, ДанныеОтчета)
	
	ДанныеДляЗаполнения.КадровыеДанные = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из ДанныеОтчета.Строки Цикл
		ДанныеДляЗаполнения.КадровыеДанные.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДанныеДляЗаполненияКадровойИстории(ДанныеДляЗаполнения, НастройкиОтчета, ПериодаДатаНачала, ПериодаДатаОкончания)
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ОтчетКадроваяИсторияСотрудников = Отчеты.КадроваяИсторияСотрудников.Создать();
	ОтчетКадроваяИсторияСотрудников.ИнициализироватьОтчет();
	
	ОтчетКадроваяИсторияСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетКадроваяИсторияСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек.КадроваяИсторияСотрудников.Настройки);
	
	ОтчетКадроваяИсторияСотрудников.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(
		"КлючВарианта", "КадроваяИсторияСотрудников");
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки);
	
	ПараметрПериод = ПолучитьПараметр(ОтчетКадроваяИсторияСотрудников.КомпоновщикНастроек, "Период");
	ПараметрПериод.Значение.ДатаНачала = ПериодаДатаНачала;
	ПараметрПериод.Значение.ДатаОкончания = ПериодаДатаОкончания;
	
	Отбор = ОтчетКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	Отбор.Элементы.Очистить();
	
	Для Каждого ОтборОтчета Из НастройкиОтчета.Отбор.Элементы Цикл
		
		Если ТипЗнч(ОтборОтчета) = Тип("ЭлементОтбораКомпоновкиДанных") И ОтборОтчета.Использование Тогда
			
			ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
				Отбор, ОтборОтчета.ЛевоеЗначение, ОтборОтчета.ВидСравнения, ОтборОтчета.ПравоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетКадроваяИсторияСотрудников.СхемаКомпоновкиДанных,
		ОтчетКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеРеестраПриказов = ЗарплатаКадрыОтчетыРасширенный.ДанныеРеестраКадровыхПриказовПоОтборамОтчета(
		ПериодаДатаНачала, ПериодаДатаОкончания, НастройкиОтчета.Отбор.Элементы);
	
	ДанныеДляЗаполнения.КадроваяИстория = Новый Соответствие;
	ДанныеДляЗаполнения.ВидыОсновныхНачислений = Новый Соответствие;
	
	УстановитьИменаКолонокДереваРезультата(СоответствиеПользовательскихПолей, ДанныеОтчета);
	
	Для Каждого СтрокаСотрудника Из ДанныеОтчета.Строки Цикл
		
		СтрокиКадровойИстории = ПустаяТаблицаКадровойИстории();
		ВидыНачислений = Новый Массив;
		
		СтрокаПредыдущегоПериода = Неопределено;
		
		// Добавление строк реестра приказов
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Сотрудник", СтрокаСотрудника.Сотрудник);
		СтрокиСотрудника = ДанныеРеестраПриказов.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаРеестра Из СтрокиСотрудника Цикл
			
			СтрокаТаблицыКадровойИстории = СтрокиКадровойИстории.Добавить();
			
			СтрокаТаблицыКадровойИстории.Подразделение = СтрокаРеестра.Подразделение;
			СтрокаТаблицыКадровойИстории.Должность = СтрокаРеестра.Должность;
			СтрокаТаблицыКадровойИстории.КадровыйПриказДата = СтрокаРеестра.ДатаПриказа;
			СтрокаТаблицыКадровойИстории.КадровыйПриказНомер = СтрокаРеестра.НомерПриказа;
			СтрокаТаблицыКадровойИстории.Регистратор = СтрокаРеестра.Регистратор;
			
			СтруктураСтрокиНачисления = ПустаяСтруктураСтрокиНачислений();
			СтруктураСтрокиНачисления.Размер = СтрокаРеестра.ТарифнаяСтавкаНадбавка;
			
			СтрокаТаблицыКадровойИстории.Строки.Добавить(СтруктураСтрокиНачисления);
			
			ДобавитьВКоллекциюНачисление(ВидыНачислений, СтруктураСтрокиНачисления.Начисление);
			
			Если СтрокаТаблицыКадровойИстории.КадровыйПриказДата <= ПериодаДатаНачала Тогда
				СтрокаПредыдущегоПериода = СтрокаТаблицыКадровойИстории;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаКадровойИстории Из СтрокаСотрудника.Строки Цикл
			
			Если СтрокаКадровойИстории.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные Тогда
				
				// Формируем начисления в последней строке из реестра отпусков
				Если СтрокаПредыдущегоПериода <> Неопределено Тогда
					
					СтрокаТаблицыКадровойИстории = СтрокаПредыдущегоПериода;
					ДобавитьСтруктуреКадровойИсторииСтрокиНачислений(СтрокаТаблицыКадровойИстории, СтрокаКадровойИстории.Строки, ВидыНачислений);
					
				КонецЕсли;
				
			Иначе
				
				СтруктураПоиска = Новый Структура("Регистратор", СтрокаКадровойИстории.Регистратор);
				СтрокиРегистратораВРеестре = СтрокиКадровойИстории.НайтиСтроки(СтруктураПоиска);
				Если СтрокиРегистратораВРеестре.Количество() > 0 Тогда
					
					СтрокаТаблицыКадровойИстории = СтрокиРегистратораВРеестре[0];
					ДобавитьСтруктуреКадровойИсторииСтрокиНачислений(СтрокаТаблицыКадровойИстории, СтрокаКадровойИстории.Строки, ВидыНачислений);
					
				Иначе
					
					СтрокаТаблицыКадровойИстории = СтрокиКадровойИстории.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыКадровойИстории, СтрокаКадровойИстории, , "Строки");
					
					ДобавитьСтруктуреКадровойИсторииСтрокиНачислений(СтрокаТаблицыКадровойИстории, СтрокаКадровойИстории.Строки, ВидыНачислений);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВидыНачислений.Количество() > 1
			И ВидыНачислений[0] = НСтр("ru='Оклад'") Тогда
			
			НайденОклад = Ложь;
			Для Каждого СтрокаКадровойИстории Из СтрокиКадровойИстории Цикл
				
				Для Каждого СтрокаНачисления Из СтрокаКадровойИстории.Строки Цикл
					
					Если СтрокаНачисления = НСтр("ru='Оклад'") Тогда
						НайденОклад = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если Не НайденОклад Тогда
				ВидыНачислений.Удалить(0);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеДляЗаполнения.КадроваяИстория.Вставить(СтрокаСотрудника.Сотрудник, СтрокиКадровойИстории);
		ДанныеДляЗаполнения.ВидыОсновныхНачислений.Вставить(СтрокаСотрудника.Сотрудник, ВидыНачислений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтруктуреКадровойИсторииСтрокиНачислений(СтрокаТаблицыКадровойИстории, СтрокиНачислений, ВидыНачислений)
	
	ОчиститьСуществующиеСтроки = Истина;
	Для Каждого СтрокаНачисления Из СтрокиНачислений Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОчиститьСуществующиеСтроки Тогда
			СтрокаТаблицыКадровойИстории.Строки.Очистить();
			ОчиститьСуществующиеСтроки = Ложь;
		КонецЕсли;
		
		СтруктураСтрокиНачисления = ПустаяСтруктураСтрокиНачислений();
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиНачисления, СтрокаНачисления);
		
		СтрокаТаблицыКадровойИстории.Строки.Добавить(СтруктураСтрокиНачисления);
		
		ДобавитьВКоллекциюНачисление(ВидыНачислений, СтруктураСтрокиНачисления.Начисление);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВКоллекциюНачисление(ВидыНачислений, Начисление)
	
	Если ВидыНачислений.Найти(Начисление) = Неопределено Тогда
		ВидыНачислений.Добавить(Начисление);
	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяТаблицаКадровойИстории()
	
	ТаблицаКадровойИстории = Новый ТаблицаЗначений;
	ТаблицаКадровойИстории.Колонки.Добавить("Строки", Новый ОписаниеТипов("Массив"));
	ТаблицаКадровойИстории.Колонки.Добавить("Подразделение");
	ТаблицаКадровойИстории.Колонки.Добавить("Должность");
	ТаблицаКадровойИстории.Колонки.Добавить("КадровыйПриказДата", Новый ОписаниеТипов("Дата"));
	ТаблицаКадровойИстории.Колонки.Добавить("КадровыйПриказНомер", Новый ОписаниеТипов("Строка"));
	ТаблицаКадровойИстории.Колонки.Добавить("Регистратор");
	
	Возврат ТаблицаКадровойИстории;
	
КонецФункции

Функция ПустаяСтруктураСтрокиНачислений()
	
	Возврат Новый Структура("Начисление,Размер", НСтр("ru='Оклад'"), 0);
	
КонецФункции

Процедура ДанныеДляЗаполненияСведенийОбОтпусках(ДанныеДляЗаполнения, НастройкиОтчета, ПериодаДатаНачала, ПериодаДатаОкончания)

	ДанныеОтчета = Новый ДеревоЗначений;
	
	ОтчетФактическиеОтпускаСотрудников = Отчеты.ФактическиеОтпускаСотрудников.Создать();
	ОтчетФактическиеОтпускаСотрудников.ИнициализироватьОтчет();
	
	ОтчетФактическиеОтпускаСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетФактическиеОтпускаСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек.ФактическиеОтпускаСотрудников.Настройки);
	ОтчетФактическиеОтпускаСотрудников.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(
		"КлючВарианта", "ФактическиеОтпускаСотрудников");
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки);
	
	ПараметрПериод = ПолучитьПараметр(ОтчетФактическиеОтпускаСотрудников.КомпоновщикНастроек, "Период");
	ПараметрПериод.Значение.ДатаНачала = ПериодаДатаНачала;
	ПараметрПериод.Значение.ДатаОкончания = ПериодаДатаОкончания;
	
	Отбор = ОтчетФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	Отбор.Элементы.Очистить();
	
	Для Каждого ОтборОтчета Из НастройкиОтчета.Отбор.Элементы Цикл
		Если ТипЗнч(ОтборОтчета) = Тип("ЭлементОтбораКомпоновкиДанных") И ОтборОтчета.Использование Тогда
			ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
				Отбор, ОтборОтчета.ЛевоеЗначение, ОтборОтчета.ВидСравнения, ОтборОтчета.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетФактическиеОтпускаСотрудников.СхемаКомпоновкиДанных,
		ОтчетФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеДляЗаполнения.СведенияОбОтпусках = Новый Соответствие;
	
	УстановитьИменаКолонокДереваРезультата(СоответствиеПользовательскихПолей, ДанныеОтчета);
	
	Для Каждого СтрокаСотрудника Из ДанныеОтчета.Строки Цикл
		ДанныеДляЗаполнения.СведенияОбОтпусках.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.Строки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДанныеДляЗаполненияСведенийОбУдержаниях(ДанныеДляЗаполнения, НастройкиОтчета, ПериодаДатаНачала, ПериодаДатаОкончания)
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ОтчетПлановыеУдержанияСотрудников = Отчеты.ПлановыеУдержанияСотрудников.Создать();
	ОтчетПлановыеУдержанияСотрудников.ИнициализироватьОтчет();
	
	ОтчетПлановыеУдержанияСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетПлановыеУдержанияСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек.ПлановыеУдержанияСотрудников.Настройки);
	ОтчетПлановыеУдержанияСотрудников.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(
		"КлючВарианта", "ПлановыеУдержанияСотрудников");
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки);
	
	ПараметрПериод = ПолучитьПараметр(ОтчетПлановыеУдержанияСотрудников.КомпоновщикНастроек, "Период");
	ПараметрПериод.Значение.ДатаНачала = ПериодаДатаНачала;
	ПараметрПериод.Значение.ДатаОкончания = ПериодаДатаОкончания;
	
	Отбор = ОтчетПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	Отбор.Элементы.Очистить();
	
	Для Каждого ОтборОтчета Из НастройкиОтчета.Отбор.Элементы Цикл
		Если ТипЗнч(ОтборОтчета) = Тип("ЭлементОтбораКомпоновкиДанных") И ОтборОтчета.Использование Тогда
			ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
				Отбор, ОтборОтчета.ЛевоеЗначение, ОтборОтчета.ВидСравнения, ОтборОтчета.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетПлановыеУдержанияСотрудников.СхемаКомпоновкиДанных,
		ОтчетПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеДляЗаполнения.СведенияОбУдержаниях = Новый Соответствие;
	
	УстановитьИменаКолонокДереваРезультата(СоответствиеПользовательскихПолей, ДанныеОтчета);
	
	Для Каждого СтрокаСотрудника Из ДанныеОтчета.Строки Цикл
		ДанныеДляЗаполнения.СведенияОбУдержаниях.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.Строки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДанныеДляЗаполненияНачисленийИУдержаний(ДанныеДляЗаполнения, НастройкиОтчета, ПериодаДатаНачала, ПериодаДатаОкончания)

	ДанныеОтчета = Новый ДеревоЗначений;
	
	ОтчетАнализНачисленийИУдержаний = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетАнализНачисленийИУдержаний.ИнициализироватьОтчет();
	
	НастройкиКомпоновщика = ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки;
	НастройкиКомпоновщика.Структура.Очистить();
	НастройкиКомпоновщика.Выбор.Элементы.Очистить();
	НастройкиКомпоновщика.Отбор.Элементы.Очистить();
	НастройкиКомпоновщика.Порядок.Элементы.Очистить();
	
	// Установка параметров
	ПараметрПериод = ПолучитьПараметр(ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек, "Период");
	ПараметрПериод.Значение.ДатаНачала = ПериодаДатаНачала;
	ПараметрПериод.Значение.ДатаОкончания = ПериодаДатаОкончания;
	
	// Добавление выбранных полей
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "Сотрудник");
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "Группа");
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "ВидРасчета");
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "ВидРасчета.ЗачетНормыВремени");
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "ВидРасчета.ЗачетОтработанногоВремени");
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "МесяцНачисления");
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "ОтработаноДней");
	ДобавитьВыбранноеПолеВКомпоновщик(НастройкиКомпоновщика.Выбор, "Сумма");
	
	// Добавление группировок 1-го уровня - Сотрудник.
    ГруппировкаУровня1 = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ПолеГруппировки = ГруппировкаУровня1.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
    ПолеГруппировки.Использование = Истина;
    ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Сотрудник");
    АвтоПоле = ГруппировкаУровня1.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    АвтоПоле.Использование = Истина;
	
	// Добавление группировок 2-го уровня - Группа.
    ГруппировкаУровня2 = ГруппировкаУровня1.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ПолеГруппировки = ГруппировкаУровня2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
    ПолеГруппировки.Использование = Истина;
    ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Группа");
    ПолеГруппировки = ГруппировкаУровня2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
    ПолеГруппировки.Использование = Истина;
    ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("МесяцНачисления");
    АвтоПоле = ГруппировкаУровня2.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    АвтоПоле.Использование = Истина;
	
	// Добавление группировок 2-го уровня - Группа, ВидРасчета, МесяцНачисления.
    ГруппировкаУровня2 = ГруппировкаУровня1.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ПолеГруппировки = ГруппировкаУровня2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
    ПолеГруппировки.Использование = Истина;
    ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Группа");
	ПолеГруппировки = ГруппировкаУровня2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ВидРасчета");
	ПолеГруппировки = ГруппировкаУровня2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("МесяцНачисления");
    АвтоПоле = ГруппировкаУровня2.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    АвтоПоле.Использование = Истина;
	
	// Добавление полей сортировки.
	ПолеУпорядочивания = НастройкиКомпоновщика.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ПолеУпорядочивания.Использование = Истина;
	ПолеУпорядочивания.Поле = Новый ПолеКомпоновкиДанных("Группа");
	ПолеУпорядочивания = НастройкиКомпоновщика.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ПолеУпорядочивания.Использование = Истина;
	ПолеУпорядочивания.Поле = Новый ПолеКомпоновкиДанных("ВидРасчета");
	ПолеУпорядочивания = НастройкиКомпоновщика.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ПолеУпорядочивания.Использование = Истина;
	ПолеУпорядочивания.Поле = Новый ПолеКомпоновкиДанных("МесяцНачисления");
	
	// Добавление отбора
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо);
	МассивГрупп.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно);
	
	ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
		НастройкиКомпоновщика.Отбор, "Группа", ВидСравненияКомпоновкиДанных.НеВСписке, МассивГрупп);

	Для Каждого ОтборОтчета Из НастройкиОтчета.Отбор.Элементы Цикл
		Если ТипЗнч(ОтборОтчета) = Тип("ЭлементОтбораКомпоновкиДанных") И ОтборОтчета.Использование Тогда
			ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
				НастройкиКомпоновщика.Отбор, ОтборОтчета.ЛевоеЗначение, ОтборОтчета.ВидСравнения, ОтборОтчета.ПравоеЗначение);
		КонецЕсли;			
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных,
		ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НаборыВнешнихДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеДляЗаполнения.ВсегоНачислено1 	= Новый Соответствие;
	ДанныеДляЗаполнения.НачисленоПоВидам1	= Новый Соответствие;
	ДанныеДляЗаполнения.ВсегоУдержано1		= Новый Соответствие;
	ДанныеДляЗаполнения.УдержаноПоВидам1	= Новый Соответствие;
	ДанныеДляЗаполнения.Выплачено1			= Новый Соответствие;
	ДанныеДляЗаполнения.КВыдаче1			= Новый Соответствие;
	ДанныеДляЗаполнения.ВсегоНачислено2		= Новый Соответствие;
	ДанныеДляЗаполнения.НачисленоПоВидам2	= Новый Соответствие;
	ДанныеДляЗаполнения.ВсегоУдержано2		= Новый Соответствие;
	ДанныеДляЗаполнения.УдержаноПоВидам2	= Новый Соответствие;
	ДанныеДляЗаполнения.Выплачено2			= Новый Соответствие;
	ДанныеДляЗаполнения.КВыдаче2			= Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из ДанныеОтчета.Строки Цикл
		
		ТекущийСотрудник = СтрокаСотрудника.Сотрудник;
		
		ДанныеДляЗаполнения.ВсегоНачислено1.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.НачисленоПоВидам1.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.ВсегоУдержано1.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.УдержаноПоВидам1.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.Выплачено1.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.КВыдаче1.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.ВсегоНачислено2.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.НачисленоПоВидам2.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.ВсегоУдержано2.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.УдержаноПоВидам2.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.Выплачено2.Вставить(ТекущийСотрудник, Новый Массив);
		ДанныеДляЗаполнения.КВыдаче2.Вставить(ТекущийСотрудник, Новый Массив);
		
		Для Каждого СтрокаНачисленияУдержания Из СтрокаСотрудника.Строки Цикл
			
			ЭтоПервоеПолугодие = Месяц(СтрокаНачисленияУдержания.МесяцНачисления) < 7;
			
			Если СтрокаНачисленияУдержания.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено
				И СтрокаНачисленияУдержания.ВидРасчета = Неопределено Тогда
				Если ЭтоПервоеПолугодие Тогда
					ДанныеДляЗаполнения.ВсегоНачислено1[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				Иначе
					ДанныеДляЗаполнения.ВсегоНачислено2[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаНачисленияУдержания.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано
				И СтрокаНачисленияУдержания.ВидРасчета = Неопределено Тогда
				Если ЭтоПервоеПолугодие Тогда
					ДанныеДляЗаполнения.ВсегоУдержано1[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				Иначе
					ДанныеДляЗаполнения.ВсегоУдержано2[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				КонецЕсли;				
			КонецЕсли;
			
			Если СтрокаНачисленияУдержания.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено
				И СтрокаНачисленияУдержания.ВидРасчета = Неопределено Тогда
				Если ЭтоПервоеПолугодие Тогда
					ДанныеДляЗаполнения.Выплачено1[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				Иначе
					ДанныеДляЗаполнения.Выплачено2[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				КонецЕсли;				
			КонецЕсли;
			
			Если СтрокаНачисленияУдержания.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо
				И СтрокаНачисленияУдержания.ВидРасчета = Неопределено Тогда
				Если ЭтоПервоеПолугодие Тогда
					ДанныеДляЗаполнения.КВыдаче1[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				Иначе
					ДанныеДляЗаполнения.КВыдаче2[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				КонецЕсли;				
			КонецЕсли;
			
			Если СтрокаНачисленияУдержания.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено
				И СтрокаНачисленияУдержания.ВидРасчета <> Неопределено Тогда
				Если ЭтоПервоеПолугодие Тогда
					ДанныеДляЗаполнения.НачисленоПоВидам1[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				Иначе
					ДанныеДляЗаполнения.НачисленоПоВидам2[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаНачисленияУдержания.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано
				И СтрокаНачисленияУдержания.ВидРасчета <> Неопределено Тогда
				Если ЭтоПервоеПолугодие Тогда
					ДанныеДляЗаполнения.УдержаноПоВидам1[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				Иначе
					ДанныеДляЗаполнения.УдержаноПоВидам2[ТекущийСотрудник].Добавить(СтрокаНачисленияУдержания);
				КонецЕсли;				
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПараметр(КомпоновщикНастроекКД, ИмяПараметра) Экспорт
	ПараметрКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	Возврат КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
КонецФункции

Процедура ОчиститьПараметрыОбласти(ОбластьСтроки)
	
	Для НомерПараметра = 0 По (ОбластьСтроки.Параметры.Количество() - 1) Цикл
		ОбластьСтроки.Параметры.Установить(НомерПараметра, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНомерТекущейСтроки(ОбластьСтроки, Номер)
	
	ОбластьСтроки.Параметры.НомерСтроки = Номер;
	Номер = Номер + 1;
	
КонецПроцедуры

Функция НомерПараметраПоМесяцу(ДатаЗначения)
	
	Если Месяц(ДатаЗначения) < 7 Тогда
		НомерПараметра = Месяц(ДатаЗначения);
	Иначе		
		НомерПараметра = Месяц(ДатаЗначения) - 6;
	КонецЕсли;
	
	Возврат НомерПараметра;
	
КонецФункции

Процедура УстановитьПараметрПоМесяцу(ОбластьСтроки, ИмяПараметра, ДатаЗначения, ЗначениеПараметра)
	
	НомерПараметра = НомерПараметраПоМесяцу(ДатаЗначения);	
	ОбластьСтроки.Параметры[ИмяПараметра + НомерПараметра] = ЗначениеПараметра;	
	
КонецПроцедуры

Процедура УстановитьПризнакОтображенияСуммКВыдаче(ПоказыватьСуммуКВыдаче, ДатаЗначения)
	
	НомерПараметра = НомерПараметраПоМесяцу(ДатаЗначения) - 1;	
	ПоказыватьСуммуКВыдаче[НомерПараметра] = Истина;	
	
КонецПроцедуры

Процедура УстановитьИменаКолонокДереваРезультата(СоответствиеПользовательскихПолей, ДанныеОтчета)
	
	Для Каждого ПользовательскоеПоле Из СоответствиеПользовательскихПолей Цикл
		
		КолонкаДерева = ДанныеОтчета.Колонки.Найти(ПользовательскоеПоле.Значение);
		
		Если КолонкаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КолонкаДерева.Имя = ПользовательскоеПоле.Ключ;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции.

Процедура ЗаполнитьПодписантов(Макет, Организация, ДатаОтчета)
	
	ПараметрыЗаполнения = Новый Структура("Исполнитель,ИсполнительРасшифровкаПодписи,ДолжностьИсполнителя");
	КлючиОтветственныхЛиц = "";
	
	НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрИсполнитель = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Исполнитель"));	
	Если ПараметрИсполнитель <> Неопределено И ПараметрИсполнитель.Использование Тогда
		Если ЗначениеЗаполнено(ПараметрИсполнитель.Значение) Тогда
			ПараметрыЗаполнения.Исполнитель = ПараметрИсполнитель.Значение;
		КонецЕсли; 
	Иначе
		КлючиОтветственныхЛиц = "Исполнитель";
	КонецЕсли;
	
	ПараметрДолжностьИсполнителя = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьИсполнителя"));	
	Если ПараметрДолжностьИсполнителя <> Неопределено И ПараметрДолжностьИсполнителя.Использование Тогда
		ПараметрыЗаполнения.ДолжностьИсполнителя = ПараметрДолжностьИсполнителя.Значение;
	Иначе
		КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "ДолжностьИсполнителя";
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючиОтветственныхЛиц) Тогда
		
		ОтветственныеЛица = Новый Структура("Организация," + КлючиОтветственныхЛиц, Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ОтветственныеЛица, ДатаОтчета);
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ОтветственныеЛица);
		
	КонецЕсли; 
	
	МассивФизЛиц = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Исполнитель) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.Исполнитель);
	КонецЕсли; 
		
	Если МассивФизЛиц.Количество() > 0 Тогда
		
		ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, МассивФизЛиц);
		ПараметрыЗаполнения.ИсполнительРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИОФизЛиц[ПараметрыЗаполнения.Исполнитель]);

	КонецЕсли; 
	
	Макет.Параметры.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли