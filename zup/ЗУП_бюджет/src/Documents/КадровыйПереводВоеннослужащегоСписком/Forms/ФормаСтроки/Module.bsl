#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		
		// СтандартныеПодсистемы.ВерсионированиеОбъектов
		ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;

	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Не Параметры.Свойство("Ключ") Или Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
			
			КадровыйУчетРасширенный.ПроверитьПравоИнтерактивногоСозданияКадровыхПриказовСотрудника();
			СсылкаНаОбъект = Документы.КадровыйПереводВоеннослужащего.ПолучитьСсылку();
			
		Иначе
			
			Параметры.Свойство("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников);
			
			РедактированиеСтрокиСписочногоДокумента = Истина;
			
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект = Документы.КадровыйПереводВоеннослужащего.СоздатьДокумент();
			УстановитьПривилегированныйРежим(Ложь);
			
			ДокументОбъект.Заполнить(Неопределено);
			
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
						
			СтрокаСписочногоДокумента = Параметры.СтрокаСписочногоДокумента;
			ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияЗаполненныхСвойств(Объект, СтрокаСписочногоДокумента);
			
			СсылкаНаОбъект = СтрокаСписочногоДокумента.СсылкаНаОбъект;
					
			ТабличныеЧастиОбъекта = СтрокаСписочногоДокумента.ТабличныеЧасти;
			Для каждого ОписаниеТабличнойЧасти Из ТабличныеЧастиОбъекта Цикл
				
				Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
					Продолжить;
				КонецЕсли; 
				
				Для каждого СтрокаТЧ Из ОписаниеТабличнойЧасти.Значение Цикл
					ЗаполнитьЗначенияСвойств(Объект[ОписаниеТабличнойЧасти.Ключ].Добавить(), СтрокаТЧ);
				КонецЦикла;
				
			КонецЦикла;
			
			ПриПолученииДанныхНаСервере();
			
			ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет; 
			АвтоЗаголовок = Ложь;
			
			Заголовок = НСтр("ru='Кадровый перевод военнослужащего'");			
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"Организация",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ДатаНомер",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПодвалДокументаГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КоманднаяПанельФормы",
				"Видимость",
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОК",
				"КнопкаПоУмолчанию",
				Истина);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаПеревода) Тогда
			Объект.ДатаПеревода = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Начисления.Очистить();
		КонецЕсли; 
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		
		Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
			
			УстановитьТекущиеДанныеСотрудника = ЗначениеЗаполнено(Объект.Сотрудник) И Не ЗначениеЗаполнено(Объект.ИсправленныйДокумент);			
			
			ПриПолученииДанныхНаСервере(УстановитьТекущиеДанныеСотрудника);
			
		КонецЕсли;
		
		Если Объект.ВидОперации <> Перечисления.ВидыКадровыхОперацийВоеннослужащих.КадровыйПеревод Тогда
			Объект.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность = Истина;
			Объект.ПеревестиНаДругойГрафик = Истина;
			Объект.ПеревестиНаДругуюТерриторию = Истина;
		КонецЕсли; 
					
		Если ЗначениеЗаполнено(Объект.Организация)
			И Не ЗначениеЗаполнено(Объект.ОбособленноеПодразделение) Тогда
			
			Объект.ОбособленноеПодразделение = Объект.Организация;
			
		КонецЕсли; 
				
	КонецЕсли;		 
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоКатегории(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(),
		КадровыйУчетРасширенный.ПараметрыВыбораКатегорииНачислений());
		
	РасчетДенежногоДовольствия.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(ЭтаФорма, ОписаниеТаблицыНачислений());	
	
	КадровыйУчетФормыРасширенный.УстановитьОтображениеКнопкиРедактироватьФОТ(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьЗначениеСевернойНадбавкиВФорме(ЭтаФорма, Объект.Сотрудник, Объект.ДатаПеревода, Объект.ФизическоеЛицо);
	
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПоПозицииВГруппеДобавитьОтменить",
		"Видимость",
		ФОИспользоватьШтатноеРасписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПоПозицииВГруппеКнопокДобавитьПродолжить",
		"Видимость",
		ФОИспользоватьШтатноеРасписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПоПозицииВГруппеКнопокДобавитьУдалить",
		"Видимость",
		ФОИспользоватьШтатноеРасписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПоПозицииВГруппеДобавитьОтменитьЕО",
		"Видимость",
		ФОИспользоватьШтатноеРасписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПоПозицииВГруппеКнопокДобавитьПродолжить1",
		"Видимость",
		ФОИспользоватьШтатноеРасписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПоПозицииВГруппеКнопокДобавитьУдалитьЕО",
		"Видимость",
		ФОИспользоватьШтатноеРасписание);
	
	КадровыйУчетФормыРасширенный.РазместитьКомандуПроверкиШтатномуРасписанию(ЭтаФорма);
	
	ПараметрыВыбораСотрудников = Новый Массив;
	Если Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.КадровыйПеревод Тогда
		
		ВидыДоговоров = Новый Массив;
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.ВоеннослужащийПоПризыву);
		
		ПараметрыВыбораСотрудников.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговоров)));
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ВступлениеВДолжность
		Или Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ОсвобождениеОтДолжности Тогда
		
		ПараметрыВыбораСотрудников.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Перечисления.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего));
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ПереводСтажераНаКонтракт Тогда
		ПараметрыВыбораСотрудников.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор));
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ПереводСПризываНаКонтракт Тогда
		ПараметрыВыбораСотрудников.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Перечисления.ВидыДоговоровССотрудниками.ВоеннослужащийПоПризыву));
	КонецЕсли; 
	
	Если Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ВступлениеВДолжность Тогда
		ЗаголовокДатаПеревода = НСтр("ru = 'Дата вступления в должность'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ОсвобождениеОтДолжности Тогда
		ЗаголовокДатаПеревода = НСтр("ru = 'Дата освобождения от должности'");
	Иначе
		ЗаголовокДатаПеревода = НСтр("ru = 'Дата перевода'");
	КонецЕсли;
	
	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаПеревода",
		"Заголовок",
		ЗаголовокДатаПеревода);
	
	ПараметрыВыбораСотрудников.Добавить(Новый ПараметрВыбора("НеОтключаемыеОтборы", "ВидДоговора"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Сотрудник",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(ПараметрыВыбораСотрудников));
	
	ЗарплатаКадрыРасширенный.СформироватьСписокВыбораПорядкаПересчета(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	Если Источник = Объект.ФизическоеЛицо Тогда
		Если ИмяСобытия = "РедактированиеПроцентаСевернойНадбавки" Тогда
			ПриИзмененииПроцентаСевернойНадбавки();
			ВыполнитьРасчетФОТ();
		КонецЕсли;
		
	КонецЕсли;
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ИсправлениеДокументовЗарплатаКадрыКлиент.ОбработкаОповещенияИсправленногоДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененСтажФизическогоЛица" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ПриИзмененииСтажа();
		ВыполнитьРасчетФОТ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураСОписаниемДокумента()
	
	РеквизитВДанные(Объект);

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным("Документ.КадровыйПереводВоеннослужащего");
	ЗарплатаКадрыРасширенный.ЗаполнитьОбъектПоОбразцу(ОписаниеДокумента, Объект);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитВДанные(ТекущийОбъект);
		
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаСтрокиСписочногоДокумента", Истина);
	КонецЕсли; 
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");	
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВДругоеПодразделениеИлиНаДругуюДолжностьПриИзменении(Элемент)
	
	УстановитьТекущиеДанныеРабочегоМеста(ЭтаФорма);
	УстановитьОтображениеДанныхРабочегоМестаСотрудника(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаДругуюТерриториюПриИзменении(Элемент)
	
	УстановитьТекущуюТерриторию(ЭтаФорма);
	УстановитьОтображениеПолейВводаТерритории(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	ОбособленноеПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ДолжностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПоШтатномуРасписаниюПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		ДолжностьПоШтатномуРасписаниюПриИзмененииНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаДругойГрафикПриИзменении(Элемент)
	
	УстановитьТекущийГрафикРаботы(ЭтаФорма);
	УстановитьОтображениеПолейВводаГрафикаРаботыСотрудников(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьДокументыВведенныеПозже(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.ДокументыВведенныеПозже);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРанееВведенныеДокументы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.РанееВведенныеДокументы);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийВыбор(
		ЭтаФорма, Элемент, Поле, СтандартнаяОбработка, 1, Объект.Сотрудник, Объект.ДатаПеревода);
	
КонецПроцедуры
	
&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийПриАктивизацииСтроки(ЭтаФорма, "Начисления", "НачисленияНачисление", 1, ОписаниеКоманднойПанелиНачислений());
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийОтменитьНачисление(ЭтаФорма, "Начисления", 1, ОписаниеКоманднойПанелиНачислений());	
	ВыполнитьРасчетФОТ();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийПриНачалеРедактирования(ЭтаФорма, "Начисления", 1, , НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийРассчитатьФОТПриОкончанииРедактирования(ЭтаФорма, Элемент, 1, ОписаниеТаблицыНачислений()) Тогда
		ВыполнитьРасчетФОТ();
	Иначе
		РассчитатьИтогиПоФОТ(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийНачислениеПриИзменении(
		ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.Сотрудник);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеПоказателяПриИзмененииНачисления(Элемент)
	
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(Элементы.Начисления.ТекущиеДанные,
		ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ЭтаФорма, ОписаниеТаблицыНачислений,, 1), 1, ОписаниеТаблицыНачислений, Объект.ДатаПеревода);		
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ПересчитатьФОТДокумента(Элемент)
	
	ВыполнитьРасчетФОТ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПересчитатьИтогиФОТДокумента(Элемент)
	
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(Объект.Ссылка, "КадровыйПереводВоеннослужащего");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "КадровыйПереводВоеннослужащего");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(Объект.ИсправленныйДокумент, "КадровыйПереводВоеннослужащего");
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура ЗаполнитьНачисленияПоПозиции(Команда)
	
	ЗаполнитьНачисленияПоПозицииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда) Экспорт
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)

	РассчитатьФОТНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ЗавершитьРедактированиеСтрокиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеСтрокиДокумента()
	
	Отказ = Ложь;
	Если Модифицированность Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		Иначе
			ОписаниеДокумента = СтруктураСОписаниемДокумента();
			Модифицированность = Ложь;
		КонецЕсли;
		
	Иначе
		ОписаниеДокумента = Неопределено;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть(ОписаниеДокумента);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСоответствиеШтатномуРасписанию(Команда)
	КадровыйУчетРасширенныйКлиент.ПроверитьНаСоответствиеШтатномуРасписанию(ЭтаФорма, Объект, Объект.ИсправленныйДокумент);	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФОТ(Команда)
	
	РедактироватьФОТ = НЕ Элементы.РедактироватьФОТ.Пометка;
	Элементы.РедактироватьФОТ.Пометка = РедактироватьФОТ;
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьВидимостьВкладаВФОТРНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма, РедактироватьФОТ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьЗначениеПоказателяСевернаяНадбавка(Команда)
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияПроцентаСевернойНадбавки(ЭтаФорма, Объект.Сотрудник, Объект.ДатаПеревода);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи", ЭтотОбъект, Команда);
	ЗарплатаКадрыРасширенныйКлиент.ПоказатьДиалогЗаписиОбъектаДляВыполненияПодключаемойКоманды(ЭтотОбъект, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи(РезультатВопроса, Команда) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудникаДокумента(Объект.Ссылка, Объект.Сотрудник, Объект.ДатаПеревода);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере(УстановитьТекущиеДанныеСотрудника = Ложь)
	
	Заголовок = Документы.КадровыйПереводВоеннослужащего.ПредставлениеСсылки(Объект.ВидОперации, Объект.Номер, Объект.Дата, Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих = ПолучитьФункциональнуюОпцию("НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих");
	
	ВидОперацииКадровыйПеревод = (Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.КадровыйПеревод);
	
	ПрочитатьВремяРегистрации();
	
	ДополнитьФорму();
		
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	ЗарплатаКадрыРасширенный.УстановитьТекущиеЗначенияНачисленийСотрудникаРедактируемыхВОтдельныхПолях(ЭтаФорма, Объект.Сотрудник, ВремяРегистрации, Объект.ИсправленныйДокумент);
	
	ЗарплатаКадрыРасширенный.УстановитьИзменениеСоставаПлановыхНачислений(ЭтаФорма, Истина);
	
	ТекущееОбособленноеПодразделение = Объект.ОбособленноеПодразделение;
	
	УстановитьОтображениеЭлементовФормы();
	
	НастроитьФормуПоОрганизации();
	ПрочитатьТекущиеДанныеСотрудника(УстановитьТекущиеДанныеСотрудника);
	ДанныеВРеквизит();
		
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	НастроитьФормуПоОрганизации();
	Объект.ОбособленноеПодразделение = Объект.Организация;
	ОбособленноеПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

&НаСервере
Процедура ОбособленноеПодразделениеПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьОтображениеПолейВводаРабочегоМеста(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ДанныеДолжности(Перезаполнить = Ложь)
	
	Данные = Неопределено;
	Если Перезаполнить Или ДанныеДолжности = Неопределено Тогда
		
		КадровыйУчетФормыРасширенный.УстановитьДанныеДолжностиВФорме(
			ЭтаФорма, ВремяРегистрации, Объект.Должность, Объект.ДолжностьПоШтатномуРасписанию, ТекущиеКадровыеДанные.ДолжностьПоШтатномуРасписанию);
		
	КонецЕсли;
	
	Если ДанныеДолжности <> Неопределено Тогда
		
		Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") Тогда
			Данные = ДанныеДолжности.Получить(Объект.ДолжностьПоШтатномуРасписанию);
		Иначе
			Данные = ДанныеДолжности.Получить(Объект.Должность);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура ДолжностьПоШтатномуРасписаниюПриИзмененииНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПозиции = ДанныеДолжности(Истина);
	Если РеквизитыПозиции <> Неопределено Тогда
		Объект.Подразделение = РеквизитыПозиции.Подразделение;
		Объект.Должность = РеквизитыПозиции.Должность;
	КонецЕсли;
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	
	ЗаполнитьНачисленияПоПозицииНаСервере(Истина, Истина);
	
	
	Если НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих
		И ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		ПредыдущийГрафик = Объект.ГрафикРаботы;
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("ДолжностьПоШтатномуРасписанию", "Объект.ДолжностьПоШтатномуРасписанию");
		ЗначенияДляЗаполнения.Вставить("ГрафикРаботы", "Объект.ГрафикРаботы");
				
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ДолжностьПоШтатномуРасписанию"));
		Если ПредыдущийГрафик <> Объект.ГрафикРаботы Тогда
			Объект.ПеревестиНаДругойГрафик = Истина;
		КонецЕсли; 
				
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОрганизации()
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	
	ПараметрыФО = Новый Структура("Организация", ГоловнаяОрганизация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
	ЕстьОбособленныеПодразделения = Ложь;
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ЕстьОбособленныеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация, "ЕстьОбособленныеПодразделения");
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОбособленноеПодразделение",
		"Видимость",
		ЕстьОбособленныеПодразделения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность",
		"Видимость",
		ВидОперацииКадровыйПеревод);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПеревестиНаДругойГрафик",
		"Видимость",
		ВидОперацииКадровыйПеревод);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПеревестиНаДругуюТерриторию",
		"Видимость",
		ВидОперацииКадровыйПеревод);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Территория",
		"ПоложениеЗаголовка",
		?(ВидОперацииКадровыйПеревод, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Авто));
	
	Если Объект.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ОсвобождениеОтДолжности Тогда
		ВидимостьПолейВыбораДолжности = Ложь;
	Иначе
		ВидимостьПолейВыбораДолжности = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДолжностьГруппа",
		"Видимость",
		ВидимостьПолейВыбораДолжности);
	
	УстановитьОтображениеДанныхРабочегоМестаСотрудника(ЭтаФорма);
	УстановитьОтображениеПолейВводаГрафикаРаботыСотрудников(ЭтаФорма);
	УстановитьОтображениеПолейВводаТерритории(ЭтаФорма);
	УстановитьОтображениеПолейВводаНачислений(ЭтаФорма);
	УстановитьОтображениеПолейВводаРабочегоМеста(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейПересчетаТарифнойСтавки(ЭтаФорма, ОписаниеТаблицыНачислений());
	ЗарплатаКадрыРасширенный.УстановитьТекстПоясненияКПорядкуПересчетаТарифныхСтавок(ЭтаФорма, "ПорядокРасчетаСтоимостиЕдиницыВремени");
	ЗарплатаКадрыРасширенный.УстановитьРазмерностьСовокупнойТарифнойСтавки(ЭтаФорма);
	ЗарплатаКадрыРасширенный.УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(ЭтаФорма, Объект.ВидТарифнойСтавки,"СовокупнаяТарифнаяСтавкаРазмерность");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеДанныхРабочегоМестаСотрудника(Форма)
	
	ДоступностьДанных = Форма.Объект.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность
		Или ЗначениеЗаполнено(Форма.Объект.Сотрудник) И Не Форма.ВидОперацииКадровыйПеревод;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПеревестиВДругоеПодразделениеИлиНаДругуюДолжностьГруппа",
		"Доступность",
		ДоступностьДанных);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПолейВводаГрафикаРаботыСотрудников(Форма)
	
	ДоступностьДанных = Форма.Объект.ПеревестиНаДругойГрафик
		Или ЗначениеЗаполнено(Форма.Объект.Сотрудник)И Не Форма.ВидОперацииКадровыйПеревод;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГрафикРаботы",
		"Доступность",
		ДоступностьДанных);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПолейВводаТерритории(Форма)
	
	ДоступностьДанных = Форма.Объект.ПеревестиНаДругуюТерриторию
		Или ЗначениеЗаполнено(Форма.Объект.Сотрудник)И Не Форма.ВидОперацииКадровыйПеревод;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Территория",
		"Доступность",
		ДоступностьДанных);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПолейВводаНачислений(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДенежноеДовольствиеСтраница",
		"ТолькоПросмотр",
		Не ЗначениеЗаполнено(Форма.Объект.Сотрудник));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ЗаполнитьПоПозицииВГруппеДобавитьОтменить",
		"Видимость",
		Не Форма.ТолькоПросмотр И ЗначениеЗаполнено(Форма.Объект.Сотрудник));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Рассчитать",
		"Видимость",
		Не Форма.ТолькоПросмотр И ЗначениеЗаполнено(Форма.Объект.Сотрудник));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПолейВводаРабочегоМеста(Форма)
	
	ДоступностьПодразделенияИДолжности = ЗначениеЗаполнено(Форма.Объект.ОбособленноеПодразделение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Подразделение",
		"Доступность",
		ДоступностьПодразделенияИДолжности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДолжностьПоШтатномуРасписанию",
		"Доступность",
		ДоступностьПодразделенияИДолжности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Должность",
		"Доступность",
		ДоступностьПодразделенияИДолжности);
	
КонецПроцедуры
	
&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Объект.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность = Ложь;
	Объект.ПеревестиНаДругойГрафик = Ложь;
	Объект.ПеревестиНаДругуюТерриторию = Ложь;
	
	ПрочитатьТекущиеДанныеСотрудника(Истина);
	
	УстановитьОтображениеДанныхРабочегоМестаСотрудника(ЭтаФорма);
	УстановитьОтображениеПолейВводаГрафикаРаботыСотрудников(ЭтаФорма);
	УстановитьОтображениеПолейВводаТерритории(ЭтаФорма);
	УстановитьОтображениеПолейВводаНачислений(ЭтаФорма);
	УстановитьОтображениеПолейВводаРабочегоМеста(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставленияКомандВводаСтажей()
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.УстановитьПредставленияКомандВводаСтажей(ЭтаФорма, ТаблицаСотрудников(), ОписаниеТаблицыВидовРасчета, 1);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтажа()
	
	УстановитьПредставленияКомандВводаСтажей();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроцентаСевернойНадбавки()
	
	ЗарплатаКадрыРасширенный.УстановитьЗначениеСевернойНадбавкиВФорме(ЭтаФорма, Объект.Сотрудник, Объект.ДатаПеревода, Объект.ФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекущиеДанныеСотрудника(УстановитьТекущиеДанныеСотрудника = Ложь)
	
	Поля = "Подразделение,Территория,Должность,ДолжностьПоШтатномуРасписанию,ГрафикРаботы,Организация,СпособОтраженияЗарплатыВБухучете,СтатьяФинансирования";
	СтруктураКадровыхДанных = Новый Структура(Поля);
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		СтруктураОтбораКадровыхДанных = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Регистратор", "<>", Объект.Ссылка);
		Отбор = Новый Массив;
		Отбор.Добавить(СтруктураОтбораКадровыхДанных);
		
		ПоляОтбораПериодическихДанных = Новый Структура;
		ПоляОтбораПериодическихДанных.Вставить("КадроваяИсторияСотрудников", Отбор);
		ПоляОтбораПериодическихДанных.Вставить("ГрафикРаботыСотрудников", Отбор);
		ПоляОтбораПериодическихДанных.Вставить("ТерриторииСотрудников", Отбор);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, Поля, ВремяРегистрации, ПоляОтбораПериодическихДанных, Ложь);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеСотрудников.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураКадровыхДанных, ДанныеСотрудников[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеКадровыеДанные = Новый ФиксированнаяСтруктура(СтруктураКадровыхДанных);
	
	ДанныеДолжности(Истина);
	
	Если УстановитьТекущиеДанныеСотрудника Тогда
		УстановитьТекущиеДанныеРабочегоМеста(ЭтаФорма);
		УстановитьТекущийГрафикРаботы(ЭтаФорма);
		УстановитьТекущуюТерриторию(ЭтаФорма);
		ПрочитатьСоставДействующихНачисленийСотрудника();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущиеДанныеРабочегоМеста(Форма)
	
	Если Не Форма.Объект.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность Или Не Форма.ВидОперацииКадровыйПеревод Тогда
		
		ИменаИсключаемыхПолей = "Организация,ГрафикРаботы,СпособОтраженияЗарплатыВБухучете,СтатьяФинансирования,Территория";
		Если Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыКадровыхОперацийВоеннослужащих.ОсвобождениеОтДолжности") Тогда
			ИменаИсключаемыхПолей = ИменаИсключаемыхПолей + ",Должность,ДолжностьПоШтатномуРасписанию";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма.Объект, Форма.ТекущиеКадровыеДанные, , ИменаИсключаемыхПолей);
		Форма.Объект.ОбособленноеПодразделение = Форма.ТекущиеКадровыеДанные.Организация;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.СпособОтраженияЗарплатыВБухучете) Тогда
		Форма.Объект.СпособОтраженияЗарплатыВБухучете = Форма.ТекущиеКадровыеДанные.СпособОтраженияЗарплатыВБухучете;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Форма.Объект.СтатьяФинансирования) Тогда
		Форма.Объект.СтатьяФинансирования = Форма.ТекущиеКадровыеДанные.СтатьяФинансирования;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущийГрафикРаботы(Форма)
	
	Если Не Форма.Объект.ПеревестиНаДругойГрафик Или Не Форма.ВидОперацииКадровыйПеревод Тогда
		Форма.Объект.ГрафикРаботы = Форма.ТекущиеКадровыеДанные.ГрафикРаботы;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюТерриторию(Форма)
	
	Если Не Форма.Объект.ПеревестиНаДругуюТерриторию Или Не Форма.ВидОперацииКадровыйПеревод Тогда
		Форма.Объект.Территория = Форма.ТекущиеКадровыеДанные.Территория;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСоставДействующихНачисленийСотрудника()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеНачисления = Объект.Начисления.Выгрузить();
	ТекущиеПоказатели = Объект.Показатели.Выгрузить();
	
	Объект.Начисления.Очистить();
	Объект.Показатели.Очистить();
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = ВремяРегистрации;
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) И НЕ Объект.Проведен Тогда
		ИсключаемыйРегистратор = Объект.ИсправленныйДокумент;
	Иначе
		ИсключаемыйРегистратор = Объект.Ссылка;
	КонецЕсли;
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДействующиеНачисленияВРеквизит(ИсключаемыйРегистратор, ТаблицаСотрудников, ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.ДатаПеревода);
	ЗарплатаКадрыРасширенный.УстановитьЗначениеСевернойНадбавкиВФорме(ЭтаФорма, Объект.Сотрудник, Объект.ДатаПеревода, Объект.ФизическоеЛицо);
	ЗарплатаКадрыРасширенный.УстановитьТекущееЗначениеПорядкаПересчетаТарифнойСтавки(ЭтаФорма, Объект.Сотрудник, ВремяРегистрации);
	ЗарплатаКадрыРасширенный.УстановитьТекущееЗначениеСовокупнойТарифнойСтавки(ЭтаФорма, Объект.Сотрудник, ВремяРегистрации);
	
	Если НЕ ИспользоватьШтатноеРасписание Тогда
		
		УстановитьКомментарииСтрок = Ложь;
		Для каждого СтрокаНачислений Из Объект.Начисления Цикл
			
			ПредыдущиеСтрокиНачислений = ТекущиеНачисления.НайтиСтроки(Новый Структура("Начисление", СтрокаНачислений.Начисление));
			Если ПредыдущиеСтрокиНачислений.Количество() > 0 Тогда
				
				ПредыдущаяСтрока = ПредыдущиеСтрокиНачислений[0];
				Если ПредыдущаяСтрока.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
					СтрокаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
				КонецЕсли;
				
				Для ИндексПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ЭтаФорма, ОписаниеТаблицыВидовРасчета,, 1) Цикл
					
					СтрокаНачислений["Показатель" + ИндексПоказателя] = ПредыдущаяСтрока["Показатель" + ИндексПоказателя];
					СтрокаНачислений["Значение" + ИндексПоказателя] = ПредыдущаяСтрока["Значение" + ИндексПоказателя];
					
				КонецЦикла;
				
				УстановитьКомментарииСтрок = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если УстановитьКомментарииСтрок Тогда
			ЗарплатаКадрыРасширенный.УстановитьКомментарииДействийСНачислениями(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.ДатаПеревода);
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьФОТНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоПозицииНаСервере(ПерезаполнениеПоПозиции = Ложь, ПерезаполнитьТекущиеНачисленияСотрудника = Истина)
	
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) И ПерезаполнениеПоПозиции Тогда
		
		Если ПерезаполнитьТекущиеНачисленияСотрудника Тогда
			ПрочитатьСоставДействующихНачисленийСотрудника();
		КонецЕсли; 
		
		ПараметрыЗаполнения = КадровыйУчетРасширенный.ПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания();
		
		ПараметрыЗаполнения.ДатаСобытия = Объект.ДатаПеревода;
		ПараметрыЗаполнения.Сотрудник = Объект.Сотрудник;
		ПараметрыЗаполнения.ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
		ПараметрыЗаполнения.СохранятьТекущиеЗначения = Истина;
		ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
		ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию = ТекущиеКадровыеДанные.ДолжностьПоШтатномуРасписанию;
		
		КадровыйУчетРасширенный.ЗаполнитьНачисленияПоПозиции(ЭтаФорма, ПараметрыЗаполнения);
		ЗарплатаКадрыРасширенный.УстановитьИзменениеСоставаПлановыхНачислений(ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыВидовРасчета, "Начисления", 1);
	
	УправлениеШтатнымРасписаниемФормы.ПроверкаШтатногоРасписанияПодготовитьТаблицуФормы(ЭтаФорма, РеквизитыПроверяемыеНаСоответствие(ЭтаФорма, ОписаниеТаблицыНачислений(), Истина));
	
	ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(ЭтотОбъект);
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(ЭтаФорма, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизит()
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	Если ТаблицаСотрудников.Количество() > 0 Тогда
		
		ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
		
		ОписанияТаблиц = Новый Массив;
		ОписанияТаблиц.Добавить(ОписаниеТаблицыВидовРасчета);
		
		ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДанныеВРеквизит(СсылкаНаОбъект, ТаблицаСотрудников, ЭтаФорма, ОписанияТаблиц, 1, , Объект.ДатаПеревода);
		
		ЗарплатаКадрыРасширенный.РедактированиеСоставаДополнительныхПоказателейДанныеВРеквизит(СсылкаНаОбъект, ТаблицаСотрудников, ЭтаФорма, ОписаниеТаблицыВидовРасчета);
		
	КонецЕсли;
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма, "ПериодическиеСведения");
		ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(ЭтаФорма, "ПериодическиеСведения");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 1);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьРасчетФОТ()
	
	ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьФОТНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФОТНаКлиенте()
	
	РассчитатьФОТНаСервере();
	ЗарплатаКадрыРасширенныйКлиентСервер.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьФОТНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	ОписаниеДанныхСовокупнойСтавки = ПлановыеНачисленияСотрудниковФормы.ОписаниеДанныхТарифныхСтавок("Объект.ВидТарифнойСтавки", "Объект.СовокупнаяТарифнаяСтавка");
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотруднику(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		ЭтотОбъект,
		Объект.Сотрудник,
		ГоловнаяОрганизация,
		ВремяРегистрации,
		ОписаниеТаблицыНачислений);

	КадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицуКадровыхДанныхПоСотруднику(
						Объект.Сотрудник, 
						ВремяРегистрации,
						Объект.Организация,
						Объект.Подразделение,
						1,
						Объект.ГрафикРаботы);
						
	РассчитанныеВторичныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, КадровыеДанные);
	
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникуВДанныеФормы(
		ЭтотОбъект, 
		РассчитанныеВторичныеДанные, 
		ГоловнаяОрганизация,
		ОписаниеТаблицыНачислений,
		ОписаниеДанныхСовокупнойСтавки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗарплатаКадрыРасширенный.УстановитьКомментарииДействийСНачислениями(ЭтаФорма, ОписаниеТаблицыНачислений(), 1, Объект.ДатаПеревода);
	
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейПересчетаТарифнойСтавки(ЭтаФорма, ОписаниеТаблицыНачислений());

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоФОТ(Форма)
	
	Форма.ФОТ = ЗарплатаКадрыРасширенныйКлиентСервер.ИтогиПоФОТ(Форма, ОписаниеТаблицыНачислений());
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		ЗавершитьРедактированиеСтрокиДокумента();
	Иначе
		
		РасчетЗарплатыРасширенныйКлиент.ВыполнитьРасчетСотрудникаПередЗаписьюДокумента(ЭтаФорма, "ЗаписатьНаКлиентеЗавершение", ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если РасчетНеобходимоВыполнить Тогда
			РассчитатьФОТНаКлиенте();
		КонецЕсли;
		
		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
		ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
		ЗакрытьПослеЗаписи = ДополнительныеПараметры.ЗакрытьПослеЗаписи;
		
		КадровыйУчетРасширенныйКлиент.ПередЗаписьюКадровогоДокументаВФорме(ЭтаФорма, Объект, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПередЗаписьюНаСервере(РезультатыПроверки, ДанныеОЗанятыхПозициях) Экспорт
	
	Возврат КадровыйУчетРасширенный.ПроверкаСоответствияШтатномуРасписанию(ДанныеОЗанятыхПозициях, Объект.Ссылка, Истина, РезультатыПроверки, Объект.ИсправленныйДокумент);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеОЗанятыхПозициях() Экспорт
	
	ДанныеОЗанятыхПозициях = Новый Массив;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыКадровыхОперацийВоеннослужащих.ОсвобождениеОтДолжности") Тогда
		
		ЭлементДанных = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(ОбщегоНазначенияКлиент.ДатаСеанса());
		ЭлементДанных.Период					= ВремяРегистрации;
		ЭлементДанных.Сотрудник					= Объект.Сотрудник;
		
		Если Объект.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность Тогда
			ЭлементДанных.ПозицияШтатногоРасписания	= ?(ИспользоватьШтатноеРасписание, Объект.ДолжностьПоШтатномуРасписанию, Объект.Должность);
		Иначе
			ЭлементДанных.ПозицияШтатногоРасписания	= ?(ИспользоватьШтатноеРасписание, ТекущиеКадровыеДанные.ДолжностьПоШтатномуРасписанию, ТекущиеКадровыеДанные.Должность);
		КонецЕсли;
		ЭлементДанных.КоличествоСтавок = 1;
		
		ДанныеОНачислениях = КадровыйУчетРасширенныйКлиентСервер.ДанныеОНачисленияхВФорме(
			ЭтаФорма,
			Объект.Начисления,
			Объект.Показатели,
			ОписаниеТаблицыНачислений());
		
		ЭлементДанных.ФОТ = ФОТ;
		
		ЭлементДанных.ДанныеОНачислениях = ДанныеОНачислениях;
		ДанныеОЗанятыхПозициях.Добавить(ЭлементДанных);
		
	КонецЕсли; 
		
	Возврат ДанныеОЗанятыхПозициях;
	
КонецФункции

&НаСервере
Функция ТаблицаСотрудников()
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		СтрокаСотрудник = ТаблицаСотрудников.Добавить();
		СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
		СтрокаСотрудник.Период = ВремяРегистрации;
		
	КонецЕсли; 
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях()
	
	Если ИспользоватьШтатноеРасписание Тогда
		ДолжностьСотрудника = Объект.ДолжностьПоШтатномуРасписанию;
	Иначе
		ДолжностьСотрудника = Объект.Должность;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях(
		ЭтаФорма, Объект.Сотрудник, ВремяРегистрации, Объект.Подразделение,
		?(ЗначениеЗаполнено(Объект.ОбособленноеПодразделение), Объект.ОбособленноеПодразделение, Объект.Организация),
		Объект.Территория, ДолжностьСотрудника);
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений(Истина, Истина);
	
	ОписаниеТаблицыВидовРасчета.Вставить("ЗапретитьИзменениеПоказателяТарифнойСетки", Истина);
	ОписаниеТаблицыВидовРасчета.Вставить("ПоказыватьВременноОтмененныеНачисления", Истина);
	ОписаниеТаблицыВидовРасчета.ИмяПоляДляВставкиПоказателей = "НачисленияДокументОснование";
	ОписаниеТаблицыВидовРасчета.СодержитПолеХарактерНачисления = Истина;
	
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции

&НаКлиенте
Функция ОписаниеКоманднойПанелиНачислений()
	ОписаниеКоманднойПанелиНачислений = ЗарплатаКадрыРасширенныйКлиент.ОписаниеКоманднойПанелиНачислений();
	Возврат ОписаниеКоманднойПанелиНачислений;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыПроверяемыеНаСоответствие(Форма, ОписаниеТаблицыВидовРасчета, ИнициализацияФормы = Ложь)
	
	РеквизитыПроверяемыеНаСоответствие = Новый Структура("РеквизитыШапки,ТабличныеЧасти", Новый Соответствие, Новый Соответствие);
	
	// Раскрашенностью реквизитов шапки документа, придется управлять программно.
	Если Форма.Объект.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность Тогда
		РеквизитыПроверяемыеНаСоответствие.РеквизитыШапки.Вставить("ДолжностьПоШтатномуРасписанию", "ДолжностьПоШтатномуРасписанию");
	КонецЕсли; 
	
	ОписаниеСоответствияПоказателей = Новый Соответствие;
	КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, 1);
	Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
		ОписаниеСоответствияПоказателей.Вставить("Показатель" + НомерПоказателя, "Показатель" + НомерПоказателя + "НеСоответствуетПозиции");
		ОписаниеСоответствияПоказателей.Вставить("Значение" + НомерПоказателя, "Значение" + НомерПоказателя + "НеСоответствуетПозиции");
	КонецЦикла;
	
	СтруктураОписанияТЧНачисления = УправлениеШтатнымРасписаниемКлиентСервер.ОписаниеРеквизитовПроверяемыхНаСоответствие();
	СтруктураОписанияТЧНачисления.СтруктураПоиска = Новый Структура("Начисление");
	РеквизитНесоответствияСтроки = Новый Структура("ИмяРеквизита,ИмяРеквизитаНесоответствия", "Начисление", "НачислениеНеСоответствуетПозиции");
	СтруктураОписанияТЧНачисления.РеквизитНесоответствияСтроки = РеквизитНесоответствияСтроки;
	СтруктураОписанияТЧНачисления.РасшифровкаНачислений = Истина;
	СтруктураОписанияТЧНачисления.ОписаниеСоответствияПоказателей = ОписаниеСоответствияПоказателей;
	СтруктураОписанияТЧНачисления.МаксимальноеКоличествоПоказателей = КоличествоПоказателей;
	
	РеквизитыПроверяемыеНаСоответствие.ТабличныеЧасти.Вставить("Начисления", СтруктураОписанияТЧНачисления);
		
	Возврат РеквизитыПроверяемыеНаСоответствие;
	
КонецФункции

&НаКлиенте
Функция РеквизитыПроверяемыеНаСоответствиеНаКлиенте() Экспорт
	
	Возврат РеквизитыПроверяемыеНаСоответствие(ЭтаФорма, ОписаниеТаблицыНачислений());
	
КонецФункции

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	
	ДанныеДолжности(Истина);
	
КонецПроцедуры

#КонецОбласти
