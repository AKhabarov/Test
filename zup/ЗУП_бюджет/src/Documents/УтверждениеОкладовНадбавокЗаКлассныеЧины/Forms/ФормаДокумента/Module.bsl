
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВступленияВСилу) Тогда
			Объект.ДатаВступленияВСилу = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), 1);
		КонецЕсли;
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	КлассныеЧиныРанги.Ссылка
		               |ИЗ
		               |	Справочник.КлассныеЧиныРанги КАК КлассныеЧиныРанги
		               |ГДЕ
		               |	НЕ КлассныеЧиныРанги.ВАрхиве
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	КлассныеЧиныРанги.Наименование";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = Объект.ОкладыНадбавки.Добавить();
			НоваяСтрока.КлассныйЧинРанг = Выборка.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
		
	ЗаполнитьДействующиеЗначенияОкладовНадбавок();
	УстановитьТочностьРазмераОкладаНадбавки();
	
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УтверждениеОкладовНадбавокЗаКлассныеЧины", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаВступленияВСилуПриИзменении(Элемент)
	
	ЗаполнитьДействующиеЗначенияОкладовНадбавок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОкладыНадбавки

&НаКлиенте
Процедура ОкладыНадбавкиКлассныйЧинРангПриИзменении(Элемент)
	
	ЗаполнитьДействующееЗначениеОкладаНадбавкиВСтроке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДействующиеЗначенияОкладовНадбавок()
	
	ИзмеренияДаты = КлассныеЧиныРанги.ИсходныеДанныеДляОпределенияОкладовНадбавокПоКласснымЧинамРангам();
	
	Для Каждого СтрокаОклада Из Объект.ОкладыНадбавки Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.КлассныйЧинРанг = СтрокаОклада.КлассныйЧинРанг;
		НоваяСтрока.Период = Объект.ДатаВступленияВСилу;
	КонецЦикла;
	
	ЗначенияОкладовНадбавок = КлассныеЧиныРанги.ЗначенияДействующихОкладовНадбавокПоКласснымЧинамРангам(ИзмеренияДаты, Объект.Ссылка);
	
	Для Каждого СтрокаОкладаНадбавки Из Объект.ОкладыНадбавки Цикл
		Отбор = Новый Структура("Период, КлассныйЧинРанг", Объект.ДатаВступленияВСилу, СтрокаОкладаНадбавки.КлассныйЧинРанг);
		НайденыеСтроки = ЗначенияОкладовНадбавок.НайтиСтроки(Отбор);
		СтрокаОкладаНадбавки.ТекущийРазмер = ?(НайденыеСтроки.Количество() > 0, НайденыеСтроки[0].Размер, Неопределено);
		СтрокаОкладаНадбавки.ТекущийРазмерПредставление = ПредставлениеДействующегоРазмераОкладаНадбавки(СтрокаОкладаНадбавки.ТекущийРазмер);
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ОкладыНадбавкиТекущийРазмерПредставление", "Видимость", ЗначенияОкладовНадбавок.Количество() > 0);
		
	Если ЗначенияОкладовНадбавок.Количество() > 0 Тогда 
		Объект.ОкладыНадбавки.Сортировать("ТекущийРазмер Убыв");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДействующееЗначениеОкладаНадбавкиВСтроке()
	
	ИдентификаторСтроки = Элементы.ОкладыНадбавки.ТекущаяСтрока;
	СтрокаОкладаНадбавки = Объект.ОкладыНадбавки.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаОкладаНадбавки.ТекущийРазмер = КлассныеЧиныРанги.ЗначениеОкладаНадбавкиПоКлассномуЧинуРангу(СтрокаОкладаНадбавки.КлассныйЧинРанг, Объект.ДатаВступленияВСилу, Объект.Ссылка);
	СтрокаОкладаНадбавки.ТекущийРазмерПредставление = ПредставлениеДействующегоРазмераОкладаНадбавки(СтрокаОкладаНадбавки.ТекущийРазмер);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДействующегоРазмераОкладаНадбавки(ТекущийРазмер)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), Формат(ТекущийРазмер, "ЧДЦ=2"));
	
КонецФункции

&НаСервере
Процедура УстановитьТочностьРазмераОкладаНадбавки()
	
	Показатель = КлассныеЧиныРанги.ПоказательОкладНадбавкаЗаКлассныйЧин();
		
	СведенияОПоказателе = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Показатель);
	ФорматЗначенияПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", СведенияОПоказателе.Точность);
	
	Элементы.ОкладыНадбавкиРазмер.Формат = ФорматЗначенияПоказателя;
	Элементы.ОкладыНадбавкиРазмер.ФорматРедактирования = ФорматЗначенияПоказателя;
	
КонецПроцедуры

#КонецОбласти
