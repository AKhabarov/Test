#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма); 
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, ДатаСобытия",
			"Объект.Организация",
			"Объект.Ответственный",
			"Объект.ДатаПрисвоения");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗаполнитьПоказатель();	
		
		ПриПолученииДанныхНаСервере();
		
		Объект.Дата = ТекущаяДатаСеанса();
		УстановитьОтветственныхЛиц();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РеквизитВДанные(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаПрисвоениеКлассногоЧинаРангаСписком");
	КонецЕсли;
	
	Оповестить("Запись_ПрисвоениеКлассногоЧинаРангаСписком", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеВРеквизит();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыНачисления" И Источник = ЭтаФорма Тогда
		ЗаполнитьНачисленияИзВременногоХранилища(Параметр.АдресВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ОткрытьДокументыВведенныеПозже(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.ДокументыВведенныеПозже);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРанееВведенныеДокументы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.РанееВведенныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказателиСотрудников

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		
		Если Поле.Имя = "ПоказателиСотрудниковФОТ" Тогда
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("АдресВХранилище", АдресВХранилищеНачисленийИУдержаний(Элемент.ТекущаяСтрока));
			ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
			
			ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ПараметрыОткрытия, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ПоказателиСотрудников.ТекущиеДанные = Неопределено Тогда
		ТекущийСотрудник = Элементы.ПоказателиСотрудников.ТекущиеДанные.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДополнитьПоказателиСотрудников(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковСотрудникПриИзменении(Элемент)
	ПоказателиСотрудниковСотрудникПриИзмененииНаСервере(Элементы.ПоказателиСотрудников.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ПоказателиСотрудников.ТекущиеДанные = Неопределено Тогда
		ТекущийСотрудник = Элементы.ПоказателиСотрудников.ТекущиеДанные.Сотрудник;
	КонецЕсли;
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = ПоказателиСотрудников.НайтиПоИдентификатору(Элементы.ПоказателиСотрудников.ТекущаяСтрока);
	Если ТекущиеДанные.Сотрудник = ТекущийСотрудник Тогда
		УдалитьНачисленияСотрудников(ТекущийСотрудник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи", ЭтотОбъект, Команда);
	ЗарплатаКадрыРасширенныйКлиент.ПоказатьДиалогЗаписиОбъектаДляВыполненияПодключаемойКоманды(ЭтотОбъект, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи(РезультатВопроса, Команда) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПодборСотрудникаВФормеДокументаПрисвоениеКлассногоЧинаРангаСписком");
	
	ПараметрыОткрытия = Новый Структура;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидДоговора", ОтборПоВидуДоговора());
	
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("НеОтключаемыеОтборы", "ВидДоговора");
		
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.ПоказателиСотрудников,
		Объект.Организация,
		,
		Объект.Дата,
		Истина,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	УстановитьДоступностьРегистрацииНачислений();
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
			
	ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(
		ЭтаФорма, НСтр("ru='Изменение звания утверждено'"), , "НачисленияУтверждены");
		
	ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(ЭтотОбъект);
	
	ЗарплатаКадрыРасширенный.УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(ЭтаФорма, "НачисленияУтверждены");
	
	Если ИспользуетсяРасчетЗарплаты И Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.НачисленияУтверждены Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ДанныеВРеквизит();
	
	ЗарплатаКадрыРасширенный.УстановитьРазмерностьСовокупнойТарифнойСтавки(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Показатель) Тогда 
		ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Объект.Показатель);
		ФорматРедактирования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
	    ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказателиСотрудниковПолеЗначениеПоказателя", "Формат", ФорматРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизит()
	
	ПрочитатьВремяРегистрации();
	
	ТаблицаСотрудников =  Объект.Сотрудники.Выгрузить(,"Сотрудник");
	
	ДополнитьФорму();
	ПоказателиСотрудников.Очистить();
	ПоказателиСотрудниковВРеквизитФормы(Объект.Сотрудники);
	ЗаполнитьФОТПоСотрудникам();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеЗначенияСовокупныхТарифныхСтавок = Документы.ПрисвоениеКлассногоЧинаРангаСписком.ТекущиеЗначенияСовокупныхТарифныхСтавокСотрудников(
		Объект.Ссылка, Объект.ДатаПрисвоения, ТаблицаСотрудников);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗначенияСовокупныхТарифныхСтавокВРеквизитФормы(Объект.Сотрудники, ТекущиеЗначенияСовокупныхТарифныхСтавок);
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения();
	
КонецПроцедуры

// Процедура заполняет таблицу формы в которой редактируются список сотрудников.
// Данные для заполнения берутся из Объект.Сотрудники.
&НаСервере
Процедура ПоказателиСотрудниковВРеквизитФормы(Сотрудники)
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	ДатаСобытия = НачалоДня(Объект.ДатаПрисвоения);
	
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Сотрудник 	= СтрокаСотрудника.Сотрудник;
		НоваяСтрока.ДатаСобытия = ДатаСобытия;
	КонецЦикла;	
	
	
	ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Объект.Ссылка, СотрудникиДаты);
	ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(ДатаСобытия);
	СотрудникиДаты.Колонки.Удалить("ДатаСобытия");
	
	Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл
		СтрокаСотрудника.Период = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиДаты.Период,
	               |	СотрудникиДаты.Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
	               |ИЗ
	               |	&СотрудникиДаты КАК СотрудникиДаты";
				   
	Запрос.Выполнить();			   
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыеДанные = "ДолжностьПоШтатномуРасписанию";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
																				   
	ПозицииШтатногоРасписания = Новый Соответствие;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыеДанныеСотрудников.Сотрудник,
	               |	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПозицииШтатногоРасписания.Вставить(Выборка.Сотрудник, Выборка.ДолжностьПоШтатномуРасписанию);
	КонецЦикла;
	
	Отбор = Новый Структура;
	
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		
		Отбор.Очистить();
		Отбор.Вставить("Сотрудник", СтрокаСотрудника.Сотрудник);
		Строки = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Строка = Строки[0];
		Иначе
			Строка = ЭтаФорма["ПоказателиСотрудников"].Добавить();
			//ЗаполнитьЗначенияСвойств(Строка,СтрокаСотрудника);
			//Строка["ВремяРегистрации"] 			= ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Строка,СтрокаСотрудника);
		Строка["ВремяРегистрации"] 			= ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);			
		Строка.ДолжностьПоШтатномуРасписанию = ПозицииШтатногоРасписания.Получить(СтрокаСотрудника.Сотрудник);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗначенияСовокупныхТарифныхСтавокВРеквизитФормы(ЗначенияСовокупныхТарифныхСтавок, ТекущиеЗначенияСовокупныхТарифныхСтавок);
	
	Отбор = Новый Структура;
	
	Для Каждого ДанныеСовокупныхТарифныхСтавок Из ЗначенияСовокупныхТарифныхСтавок Цикл 
		
		Отбор.Вставить("Сотрудник", ДанныеСовокупныхТарифныхСтавок.Сотрудник);
		ДанныеСотрудника = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Отбор);
		
		Если ДанныеСотрудника.Количество() > 0 Тогда 
			
			ТекущиеДанныеСовокупныхТарифныхСтавок = ТекущиеЗначенияСовокупныхТарифныхСтавок.НайтиСтроки(Отбор);
			
			Если ТекущиеДанныеСовокупныхТарифныхСтавок.Количество() > 0 Тогда 
				ДанныеСотрудника[0].СовокупнаяТарифнаяСтавкаТекущееЗначение = ТекущиеДанныеСовокупныхТарифныхСтавок[0].СовокупнаяТарифнаяСтавка;
				
				СуммаПодстановки = Строка(Формат(ТекущиеДанныеСовокупныхТарифныхСтавок[0].СовокупнаяТарифнаяСтавка, "ЧДЦ=2; ЧРГ="));
				СуммаПодстановки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СуммаПодстановки, 10, " ");
				
				ПредставлениеТекущего = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановки);
				ДанныеСотрудника[0].СовокупнаяТарифнаяСтавкаТекущееЗначениеПредставление = ПредставлениеТекущего;
			Иначе
				ДанныеСотрудника[0].СовокупнаяТарифнаяСтавкаТекущееЗначениеПредставление = "";	
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура переносит отредактированный пользователем список сотрудников в Объект.Сотрудники.
&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Сотрудники.Очистить();
	
	Для каждого ПоказателиСотрудника Из ЭтаФорма["ПоказателиСотрудников"] Цикл
		Строка = ТекущийОбъект.Сотрудники.Добавить();
		Строка.Сотрудник = ПоказателиСотрудника.Сотрудник;
		Строка.ФизическоеЛицо = ПоказателиСотрудника.Сотрудник.ФизическоеЛицо;
		Строка.ФиксСтрока = ПоказателиСотрудника.ФиксСтрока;
		Строка.СовокупнаяТарифнаяСтавка = ПоказателиСотрудника.СовокупнаяТарифнаяСтавка;
		Строка.ВидТарифнойСтавки = ПоказателиСотрудника.ВидТарифнойСтавки;
		Строка.ЗначениеПоказателя = ПоказателиСотрудника.ЗначениеПоказателя;
		Строка.КлассныйЧинРанг = ПоказателиСотрудника.КлассныйЧинРанг;
	КонецЦикла;
	
	СтрокиДляУдаления = Новый Массив;
	Для каждого СтрокаНачисленияСотрудника Из ТекущийОбъект.Начисления Цикл
		НайденныеСтроки = ТекущийОбъект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", СтрокаНачисленияСотрудника.Сотрудник));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрокаНачисленияСотрудника);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		ТекущийОбъект.Начисления.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

#Область ФОТ

&НаСервере
Процедура ЗаполнитьФОТПоСотрудникам()
	
	Для каждого СтрокаСотрудника Из ЭтаФорма["ПоказателиСотрудников"] Цикл
		СтрокаСотрудника.ФОТ = ФОТСотрудника(СтрокаСотрудника.Сотрудник);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ФОТСотрудника(Сотрудник)
	
	НачисленияСотрудника = Объект.Начисления.Выгрузить(Новый Структура("Сотрудник", Сотрудник));
	
	Возврат НачисленияСотрудника.Итог("Размер");
	
КонецФункции

&НаСервере
Функция АдресВХранилищеНачисленийИУдержаний(ИдентификаторСтроки)
	
	СтрокаСотрудника = ПоказателиСотрудников.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПараметрыОткрытия = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыРедактированияСоставаНачисленийИУдержаний();
	
	ПараметрыОткрытия.ВладелецНачисленийИУдержаний = СтрокаСотрудника.Сотрудник;
	ПараметрыОткрытия.ДатаРедактирования = СтрокаСотрудника.ВремяРегистрации;
	ПараметрыОткрытия.Организация = Объект.Организация;
	ПараметрыОткрытия.РежимРаботы = 3;
	ПараметрыОткрытия.ДополнитьНедостающиеЗначенияПоказателей = Истина;
	
	МассивНачислений = Новый Массив;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	СтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
	СтрокаТаблицыСотрудников.Период = СтрокаСотрудника.ВремяРегистрации;
	СтрокаТаблицыСотрудников.Организация = Объект.Организация;
	СтрокаТаблицыСотрудников.Сотрудник = СтрокаСотрудника.Сотрудник;
	
	СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник));
	Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
		
		СтруктураНачисления = Новый Структура("Начисление, ДокументОснование, Размер");
		ЗаполнитьЗначенияСвойств(СтруктураНачисления, СтрокаНачислений);
		МассивНачислений.Добавить(СтруктураНачисления);
		
	КонецЦикла;
	
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.Используется = Истина;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.Таблица = МассивНачислений;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ИзменятьСоставВидовРасчета = Ложь;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ИзменятьЗначенияПоказателей = Ложь;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.НомерТаблицы = 1;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ПоказатьФОТ = Истина;
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыОткрытия, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачисленияИзВременногоХранилища(АдресВХранилище);
	
	ДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
	
	УдалитьНачисленияСотрудников(Сотрудник, Ложь);
	ФОТИзменен = Ложь;
	НачисленияСотрудников = Новый Массив;
	Если ДанныеИзХранилища <> Неопределено Тогда
		Для каждого НачислениеСотрудника Из ДанныеИзХранилища.Начисления Цикл
			НоваяСтрокаНачислений = Объект.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, НачислениеСотрудника);
			НоваяСтрокаНачислений.Сотрудник = Сотрудник;
			НачисленияСотрудников.Добавить(НоваяСтрокаНачислений);
		КонецЦикла;
		ФОТИзменен = ДанныеИзХранилища.Модифицированность;
	КонецЕсли;
	
	НайденныеСтроки = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].ФОТ = ФОТСотрудника(Сотрудник);
		Если ФОТИзменен Тогда
			НайденныеСтроки[0].ФиксСтрока = Истина;
		КонецЕсли;
		КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения();
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].СовокупнаяТарифнаяСтавка = ДанныеИзХранилища.СовокупнаяТарифнаяСтавка;
		НайденныеСтроки[0].ВидТарифнойСтавки = ДанныеИзХранилища.ВидТарифнойСтавки;
	КонецЕсли;
	
	Модифицированность = ДанныеИзХранилища.Модифицированность;
	
КонецПроцедуры

#КонецОбласти

#Область Отрисовка_формы

&НаСервере
Процедура ДополнитьФорму()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ГруппаСотрудник = ЭтаФорма.Элементы.Найти("ГруппаСотрудник");
		ГруппаСотрудник.Заголовок = НСтр("ru = 'Сотрудник / Должность'");
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Серверные_обработчики_событий_формы

&НаСервере
Процедура ЗаполнитьПоказатель()
	
	Объект.Показатель = КлассныеЧиныРанги.ПоказательОкладНадбавкаЗаКлассныйЧин();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтветственныхЛиц();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтветственныхЛиц()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
		
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНачисленияСотрудников(Сотрудник, УдалитьСотрудников = Истина)
	
	СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
		Объект.Начисления.Удалить(СтрокаНачислений);
	КонецЦикла;
	
	Если УдалитьСотрудников Тогда
		СтрокиНачислений = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
			Объект.Сотрудники.Удалить(СтрокаНачислений);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПоказателиСотрудниковСотрудникПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ПоказателиСотрудников.НайтиПоИдентификатору(Идентификатор);
	НовыйСотрудник = ТекущиеДанные.Сотрудник;
	Если НовыйСотрудник <> ТекущийСотрудник Тогда
		УдалитьНачисленияСотрудников(ТекущийСотрудник);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйСотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудникаДокумента(Объект.Ссылка, ТекущиеДанные.Сотрудник, Объект.ДатаПрисвоения);
	
	ДополнитьПоказателиСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовыйСотрудник));
	
КонецПроцедуры

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("ПоказателиСотрудников");
	Массив.Добавить("Объект.Сотрудники");
	Массив.Добавить("Объект.Начисления");
	
	Возврат Массив;
	
КонецФункции

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",	НСтр("ru = 'организации'")));
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения()
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	УстановитьОтображениеНадписей();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтборПоВидуДоговора()

	ВидыДоговоров = Новый Массив;
			
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего);				
	
	Возврат ВидыДоговоров;

КонецФункции

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	СтруктураПоказателиСотрудников = Новый Структура("ФиксСтрока");
	КонтролируемыеПоля = Новый Структура("ПоказателиСотрудников", СтруктураПоказателиСотрудников);
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

// Контролируемые поля
&НаСервере
Функция ОписаниеТаблицыПоказателиСотрудников() Экспорт
	
	ОписаниеТаблицыПоказателиСотрудников = Новый Структура;	
	ОписаниеТаблицыПоказателиСотрудников.Вставить("ИмяТаблицы", 	"ПоказателиСотрудников");
	ОписаниеТаблицыПоказателиСотрудников.Вставить("ПутьКДанным", 	"ПоказателиСотрудников");
	ОписаниеТаблицыПоказателиСотрудников.Вставить("ЭтоПерерасчеты", Ложь);
	
	Возврат ОписаниеТаблицыПоказателиСотрудников;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаСотрудника Из ПоказателиСотрудников Цикл
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.ДатаСобытия = Объект.ДатаПрисвоения;
		НоваяСтрока.Сотрудник = СтрокаСотрудника.Сотрудник;
	КонецЦикла;
	
	ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Объект.Ссылка, СотрудникиДаты);
	ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(Объект.ДатаПрисвоения);
	
	Для Каждого СтрокаСотрудника Из ПоказателиСотрудников Цикл
		СтрокаСотрудника.ВремяРегистрации = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНадписей()
	
	УстановитьПривилегированныйРежим(Истина);
	СотрудникиДаты = ПоказателиСотрудников.Выгрузить(, "Сотрудник, ВремяРегистрации");							
	ЗарплатаКадрыРасширенный.УстановитьТекстНадписиОКонкурирующихДокументахПлановыхНачислений(ЭтотОбъект, СотрудникиДаты, Объект.Ссылка);
	
КонецПроцедуры

#Область ЗаписьДокумента

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено) Экспорт
	
	ПараметрыЗаписи.Вставить("ПроверкаПередЗаписьюВыполнена", Истина);
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, ПараметрыЗаписи);
	ИначеЕсли Записать(ПараметрыЗаписи) И ЗакрытьПослеЗаписи Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	Возврат ПоместитьВоВременноеХранилище(ПоказателиСотрудников.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ДополнитьПоказателиСотрудников(МассивСотрудников)
	
	ТаблицаНачисленийСотрудников = Документы.ПрисвоениеКлассногоЧинаРангаСписком.НачисленияСотрудников(
		Объект.Ссылка, Объект.ДатаПрисвоения, МассивСотрудников);
			
	Для каждого СотрудникМассива Из МассивСотрудников Цикл
		НайденныеСтроки = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник",СотрудникМассива));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.Начисления.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	Для каждого СтрокаНачисленияСотрудников Из ТаблицаНачисленийСотрудников Цикл
		НоваяСтрока = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисленияСотрудников);
	КонецЦикла;
	
	СоответствиеСтрокСотрудникам = Новый Соответствие();
	МассивДобавленныхСтрок = Новый Массив();
	
	Для каждого Сотрудник Из МассивСотрудников Цикл
		
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Сотрудники.Добавить();
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
			НоваяСтрока.КлассныйЧинРанг = Справочники.КлассныеЧиныРанги.ПустаяСсылка();
			НоваяСтрока.ЗначениеПоказателя = 0;
			НоваяСтрока.СовокупнаяТарифнаяСтавка = 0;
			НоваяСтрока.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ПустаяСсылка();
		КонецЕсли;
		
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ФизическоеЛицо = Сотрудник.ФизическоеЛицо;
		СоответствиеСтрокСотрудникам.Вставить(НоваяСтрока.Сотрудник,НоваяСтрока);
		МассивДобавленныхСтрок.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "<>", Объект.Ссылка));
	
	ПоляОтбора = Новый Структура("КлассныеЧиныРангиФизическихЛиц", Отбор);
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивСотрудников, "КлассныйЧинРанг", Объект.ДатаПрисвоения, ПоляОтбора, Ложь);  
	
	Для Каждого КадровыеДанныеСотрудника Из КадровыеДанные Цикл
		
		СтрокаСотрудника = СоответствиеСтрокСотрудникам[КадровыеДанныеСотрудника.Сотрудник];
		СтрокаСотрудника.КлассныйЧинРанг = КадровыеДанныеСотрудника.КлассныйЧинРанг;
		
		Если ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) И ЗначениеЗаполнено(Объект.ДатаПрисвоения) И ЗначениеЗаполнено(СтрокаСотрудника.КлассныйЧинРанг) Тогда 
			СтрокаСотрудника.ЗначениеПоказателя = КлассныеЧиныРанги.ЗначениеОкладаНадбавкиПоКлассномуЧинуРангу(СтрокаСотрудника.КлассныйЧинРанг,  Объект.ДатаПрисвоения);
		Иначе
			СтрокаСотрудника.ЗначениеПоказателя = 0;	
		КонецЕсли;
		
	КонецЦикла;	
					
	ТаблицаДобавленныхСотрудников = Объект.Сотрудники.Выгрузить(МассивДобавленныхСтрок);
	
	Менеджер = Документы.ПрисвоениеКлассногоЧинаРангаСписком;
	Менеджер.РассчитатьФОТ(Объект.Ссылка, Объект.Организация, Объект.ДатаПрисвоения, ТаблицаНачисленийСотрудников, ТаблицаДобавленныхСотрудников, Объект.Показатель);
	
	Для Каждого ЗначениеТарифнойСтавки Из ТаблицаДобавленныхСотрудников Цикл
		СтрокаСотрудника = СоответствиеСтрокСотрудникам[ЗначениеТарифнойСтавки.Сотрудник];
		СтрокаСотрудника.СовокупнаяТарифнаяСтавка = ЗначениеТарифнойСтавки.СовокупнаяТарифнаяСтавка;
		СтрокаСотрудника.ВидТарифнойСтавки = ЗначениеТарифнойСтавки.ВидТарифнойСтавки;
	КонецЦикла;
	
	
	ТекущиеЗначенияСовокупныхТарифныхСтавок = Документы.ПрисвоениеКлассногоЧинаРангаСписком.ТекущиеЗначенияСовокупныхТарифныхСтавокСотрудников(
		Объект.Ссылка, Объект.ДатаПрисвоения, МассивДобавленныхСтрок);
		
	ПоказателиСотрудниковВРеквизитФормы(МассивДобавленныхСтрок);
	
	ЗаполнитьФОТПоСотрудникам();
			
	ЗначенияСовокупныхТарифныхСтавокВРеквизитФормы(МассивДобавленныхСтрок, ТекущиеЗначенияСовокупныхТарифныхСтавок);
	
КонецПроцедуры

&НаСервере
Процедура ПоказателиСотрудниковКлассныйЧинРангПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ПоказателиСотрудников.НайтиПоИдентификатору(Идентификатор);
	
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник));
	
	Если НЕ НайденныеСтроки.Количество() = 0 Тогда		
		НайденныеСтроки[0].КлассныйЧинРанг = ТекущиеДанные.КлассныйЧинРанг;
	КонецЕсли;
	
	НужноПересчитатьФОТ = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) И ЗначениеЗаполнено(Объект.ДатаПрисвоения) И ЗначениеЗаполнено(ТекущиеДанные.КлассныйЧинРанг) Тогда 
		ТекущиеДанные.ЗначениеПоказателя = КлассныеЧиныРанги.ЗначениеОкладаНадбавкиПоКлассномуЧинуРангу(ТекущиеДанные.КлассныйЧинРанг, ТекущиеДанные.ВремяРегистрации);
		НужноПересчитатьФОТ = Истина;
	Иначе
		ТекущиеДанные.ЗначениеПоказателя = 0;	
	КонецЕсли;
	
	ОтборСотрудник = Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник);
	
	Если НужноПересчитатьФОТ Тогда
		
		ТаблицаНачисленийСотрудников = Объект.Начисления.НайтиСтроки(ОтборСотрудник);
		ТарифныеСтавки = ПоказателиСотрудников.Выгрузить(ОтборСотрудник);
		
		Менеджер = Документы.ПрисвоениеКлассногоЧинаРангаСписком;
		Менеджер.РассчитатьФОТ(Объект.Ссылка, Объект.Организация, Объект.ДатаПрисвоения, ТаблицаНачисленийСотрудников, ТарифныеСтавки, Объект.Показатель);
		
		Если ТарифныеСтавки.Количество() > 0 Тогда
			ТекущиеДанные.СовокупнаяТарифнаяСтавка 	= ТарифныеСтавки[0].СовокупнаяТарифнаяСтавка;	
			ТекущиеДанные.ВидТарифнойСтавки 		= ТарифныеСтавки[0].ВидТарифнойСтавки;	
		КонецЕсли;
		ЗаполнитьФОТПоСотрудникам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковКлассныйЧинРангПриИзменении(Элемент)
	ПоказателиСотрудниковКлассныйЧинРангПриИзмененииНаСервере(Элементы.ПоказателиСотрудников.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ДатаПрисвоенияПриИзмененииНаСервере()
	
	ПрочитатьВремяРегистрации();
	МассивСотрудников = Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");	
		
	ДополнитьПоказателиСотрудников(МассивСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПрисвоенияПриИзменении(Элемент)
	ДатаПрисвоенияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти
