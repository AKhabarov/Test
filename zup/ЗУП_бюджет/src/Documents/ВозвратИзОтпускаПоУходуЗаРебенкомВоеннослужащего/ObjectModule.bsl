#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора.
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИСотрудникам(ЭтотОбъект, Таблица, "Организация", "Сотрудник");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотруднику(ЭтотОбъект, Организация, Сотрудник, ДатаВозврата);
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ДатаОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДатаНачала");
	Если ЗначениеЗаполнено(ДатаВозврата) И ДатаВозврата < ДатаОтпуска Тогда
		
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаВозврата, "Объект.ДатаВозврата", Отказ,
			НСтр("ru='Дата возврата'"), ДатаОтпуска, НСтр("ru='даты ухода в отпуск'"));
		
	КонецЕсли;
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
	
	КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(ЭтотОбъект, ДатаВозврата, "Начисления", "Показатели", Отказ, Истина, "РабочееМесто");
		
	ИсключаемыеРеквизиты = Новый Массив;
	
	Если Не ИзменитьНачисления Тогда
		ИсключаемыеРеквизиты.Добавить("Начисления.РабочееМесто");
	КонецЕсли;
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СотрудникиДокумента = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "РабочееМесто", Истина);
	Для Каждого РабочееМесто Из СотрудникиДокумента Цикл 
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Сотрудник = РабочееМесто;
		НоваяСтрока.Период = ДатаВозврата;
	КонецЦикла;
	
	ЗарплатаКадрыРасширенный.ПроверитьНаличиеДокументовСФиксированнымСдвигомНаДату(СотрудникиДаты, Ссылка, Отказ, ИсправленныйДокумент);
	
	Если ИзменитьНачисления Тогда 
		РасчетЗарплатыРасширенный.ПроверитьМножественностьОплатыВремениУходЗаРебенком(ДатаВозврата, Начисления, Ссылка, Отказ, , , ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект, , , ЗначениеЗаполнено(ИсправленныйДокумент));
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения);
	
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(Ссылка, Движения, РежимПроведения, Отказ,,, ЭтотОбъект, "ДатаВозврата");
	
	// Начинаем состояние «Работа».
	ПараметрыСостояния = СостоянияСотрудников.ПараметрыСостоянияФизическогоЛица();
	ПараметрыСостояния.Состояние = Перечисления.СостоянияСотрудника.Работа; 
	ПараметрыСостояния.ДокументСсылка = Ссылка;
	ПараметрыСостояния.Организация = Организация;
	ПараметрыСостояния.Начало = ДатаВозврата; 
	СостоянияСотрудников.ЗарегистрироватьСостояниеФизическогоЛица(Движения, ФизическоеЛицо, ПараметрыСостояния);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация, , , Истина);
	
	// Проведение документа
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
	СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
	
	Если ДанныеДляПроведения.Свойство("ПрименениеДополнительныхПоказателей") Тогда
		СтруктураПлановыхНачислений.Вставить("ПрименениеДополнительныхПоказателей", ДанныеДляПроведения.ПрименениеДополнительныхПоказателей);
	КонецЕсли;
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений);
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияПримененияПлановыхНачислений(Движения, ДанныеДляПроведения.ПрименениеНачислений);
	РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);		
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация, , Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация, , , Истина);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКУдалениюПроведения(ЭтотОбъект, ЗначениеЗаполнено(ИсправленныйДокумент));
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ОбъектОснование = ДанныеЗаполнения;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Сотрудник") Тогда
		ОбъектОснование = ДанныеЗаполнения.Сотрудник;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектОснование) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ОбъектОснование);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник", ОбъектОснование);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОтпускПоУходуЗаРебенком.Ссылка,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенкомВоеннослужащего КАК ОтпускПоУходуЗаРебенком
		|ГДЕ
		|	ОтпускПоУходуЗаРебенком.Сотрудник = &Сотрудник
		|	И ОтпускПоУходуЗаРебенком.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Ссылка,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДатаИзменения
		|ИЗ
		|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
		|ГДЕ
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Сотрудник = &Сотрудник
		|	И ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала УБЫВ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ОбъектОснование = Выборка.Ссылка;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенкомВоеннослужащего") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектОснование, "Проведен, Организация, Сотрудник");
		Если НЕ ЗначенияРеквизитов.Проведен Тогда
			ВызватьИсключение НСтр("ru = 'Ввод на основании непроведенного документа невозможен.'");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Сотрудник"); 
			ДокументОснование  	= ОбъектОснование;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектОснование, "Проведен, Организация, Сотрудник, ДокументОснование");
		Если НЕ ЗначенияРеквизитов.Проведен Тогда
			ВызватьИсключение НСтр("ru = 'Ввод на основании непроведенного документа невозможен.'");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Сотрудник, ДокументОснование"); 
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("Структура") Тогда
		Если ОбъектОснование.Свойство("Действие") И ОбъектОснование.Действие = "Исправить" Тогда
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ОбъектОснование.Ссылка);
			ИсправленныйДокумент = ОбъектОснование.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьРеквизитыОснования(Реквизиты = "ВыплачиватьПособиеДоПолутораЛет,ДатаОкончанияПособияДоПолутораЛет,
	|КоличествоДетей,КоличествоПервыхДетей,
	|ВыплачиватьПособиеДоТрехЛет,ДатаОкончанияПособияДоТрехЛет") Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, Реквизиты);
	
КонецФункции

#Область ПолучитьДанныеДляПроведения

Функция ПолучитьДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура; 
	
	ЗаполнитьПлановыеНачисленияИПоказатели(ДанныеДляПроведения);
		
	ЗаполнитьПрименениеПлановыхНачислений(ДанныеДляПроведения);
	
	ЗаполнитьПрименениеДополнительныхПоказателей(ДанныеДляПроведения);
	
	ЗаполнитьПересчетТарифныхСтавок(ДанныеДляПроведения);
	
	ЗаполнитьСовокупныеТарифныеСтавки(ДанныеДляПроведения);
	
	ЗаполнитьДанныеВремениРегистрацииДокумента(ДанныеДляПроведения);
		
	Возврат ДанныеДляПроведения;
	
КонецФункции

#Область ПлановыеНачисленияИПоказатели

Процедура ЗаполнитьПлановыеНачисленияИПоказатели(ДанныеДляПроведения)
	
	ПлановыеНачисления = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииПлановыхНачислений();
	ПлановыеНачисления.Колонки.Добавить("ИспользуетсяПоОкончании", Новый ОписаниеТипов("Булево"));
	
	ЗначенияПоказателей = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииЗначенийПериодическихПоказателей();
	
	ДобавитьПособияПоУходу(ПлановыеНачисления);
	
	Если ИзменитьНачисления Тогда
		ДобавитьПлановыеНачисления(ПлановыеНачисления);
	КонецЕсли;
		
	ДобавитьПлановыеПоказатели(ЗначенияПоказателей, ИзменитьНачисления);
	
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
	
КонецПроцедуры

Процедура ДобавитьПособияПоУходу(ПлановыеНачисления)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПлановыеНачисленияСрезПоследних(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Период КАК ДатаСобытия,
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление,
	|	ВЫРАЗИТЬ(ПлановыеНачисления.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ПлановыеНачисления.ФизическоеЛицо,
	|	ЛОЖЬ КАК Используется
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПлановыеНачисления.Добавить(), Выборка);
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьПлановыеНачисления(ПлановыеНачисления)
	
	Запрос = ЗапросССсылкой();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата КАК ДатаСобытия,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Начисление,
	|	ВЫБОР
	|		КОГДА ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ДокументОснование,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Размер,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего КАК ВозвратИзОтпускаПоУходуЗаРебенком
	|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПлановыеНачисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПлановыеПоказатели(ЗначенияПоказателей, ИзменитьНачисления)
	
	Если Не ИзменитьНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = ЗапросССсылкой();
	
	Запрос.УстановитьПараметр("ИзменитьНачисления", ИзменитьНачисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация КАК Организация,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель КАК Показатель,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Значение) КАК Значение,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата КАК ДатаСобытия
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Показатели КАК ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
		|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка
		|			И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета = ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего КАК ВозвратИзОтпускаПоУходуЗаРебенком
		|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка
		|ГДЕ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка = &Ссылка
		|	И &ИзменитьНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ФизическоеЛицо,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ДокументОснование,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.Организация КАК Организация,
		|	Показатели.Сотрудник КАК Сотрудник,
		|	Показатели.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Показатели.Показатель КАК Показатель,
		|	Показатели.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(Показатели.Значение) КАК Значение,
		|	Показатели.ДатаСобытия КАК ДатаСобытия
		|ИЗ
		|	ВТПоказатели КАК Показатели
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.Организация,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	Показатели.ДатаСобытия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗначенияПоказателей.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТПлановыеНачисленияСрезПоследних(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ДатаВозврата КАК Период,
	|	&ОсновнойСотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТИзмеренияДаты";
	Запрос.УстановитьПараметр("ДатаВозврата", ДатаВозврата);
	Запрос.УстановитьПараметр("ОсновнойСотрудник", Сотрудник);
	
	Запрос.Выполнить();
	
	КатегорииПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "В", КатегорииПособий);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПлановыеНачисления", Запрос.МенеджерВременныхТаблиц,	Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты", "Сотрудник"), ПараметрыПостроения);
		
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьПрименениеПлановыхНачислений(ДанныеДляПроведения)
	
	ПрименениеНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииПримененияПлановыхНачислений();
	
	Запрос = ЗапросССсылкой();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата КАК ДатаСобытия,
	|	МАКСИМУМ(ИСТИНА) КАК Применение
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего КАК ВозвратИзОтпускаПоУходуЗаРебенком
	|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПрименениеНачислений.Добавить(), Выборка);
	КонецЦикла;

	ДанныеДляПроведения.Вставить("ПрименениеНачислений", ПрименениеНачислений);
	
КонецПроцедуры

Процедура ЗаполнитьПрименениеДополнительныхПоказателей(ДанныеДляПроведения)
	
	Если ИзменитьНачисления Тогда
		
		ПрименениеДополнительныхПоказателей = Неопределено;
		
		Запрос = ЗапросССсылкой();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.РабочееМесто
			|ПОМЕСТИТЬ ВТПоказателиНачислений
			|ИЗ
			|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Показатели КАК ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели
			|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка
			|			И ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто = ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.РабочееМесто
			|			И ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета = ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета
			|ГДЕ
			|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = &Ссылка
			|	И ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.ДатаВозврата КАК ДатаСобытия,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.Организация КАК Организация,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.РабочееМесто КАК Сотрудник,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель КАК Показатель,
			|	ВЫБОР
			|		КОГДА ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Применение
			|ИЗ
			|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Показатели КАК ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиНачислений КАК ПоказателиНачислений
			|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = ПоказателиНачислений.Ссылка
			|			И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.РабочееМесто = ПоказателиНачислений.РабочееМесто
			|			И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель = ПоказателиНачислений.Показатель
			|ГДЕ
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = &Ссылка
			|	И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета = 0
			|	И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|	И ПоказателиНачислений.Показатель ЕСТЬ NULL ";
		
		ПрименениеДополнительныхПоказателей = Запрос.Выполнить().Выгрузить();
		
		ДанныеДляПроведения.Вставить("ПрименениеДополнительныхПоказателей", ПрименениеДополнительныхПоказателей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПересчетТарифныхСтавок(ДанныеДляПроведения)
	
	ПорядокПересчетаТарифнойСтавки = Неопределено;
	
	Если ИзменитьНачисления Тогда
		Запрос = ЗапросССсылкой();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПересчетТарифныхСтавок.Ссылка.ДатаВозврата КАК ДатаСобытия,
		|	ПересчетТарифныхСтавок.РабочееМесто КАК Сотрудник,
		|	ПересчетТарифныхСтавок.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПересчетТарифныхСтавок.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.ПересчетТарифныхСтавок КАК ПересчетТарифныхСтавок
		|ГДЕ
		|	ПересчетТарифныхСтавок.Ссылка = &Ссылка";
		ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
	
КонецПроцедуры

Процедура ЗаполнитьСовокупныеТарифныеСтавки(ДанныеДляПроведения)
	
	ДанныеСовокупныхТарифныхСтавок = Неопределено;
	
	Если ИзменитьНачисления Тогда
		Запрос = ЗапросССсылкой();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПересчетТарифныхСтавок.Ссылка.ДатаВозврата КАК ДатаСобытия,
		|	ПересчетТарифныхСтавок.РабочееМесто КАК Сотрудник,
		|	ПересчетТарифныхСтавок.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА ПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ ПересчетТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.ПересчетТарифныхСтавок КАК ПересчетТарифныхСтавок
		|ГДЕ
		|	ПересчетТарифныхСтавок.Ссылка = &Ссылка";
		ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВремениРегистрацииДокумента(ДанныеДляПроведения)
	
	Запрос = ЗапросССсылкой();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка.ДатаВозврата КАК ДатаСобытия
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = &Ссылка";
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
КонецПроцедуры

Функция ЗапросССсылкой()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос;
КонецФункции 

#КонецОбласти

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.РабочееМесто КАК Сотрудник,
		|	ТаблицаДокумента.Ссылка.ДатаВозврата КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Начисления КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
