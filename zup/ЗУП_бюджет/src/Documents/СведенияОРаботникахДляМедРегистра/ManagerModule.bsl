#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СведенияОРаботникахДляМедРегистра;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьТабличныеЧастиДокументов(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сведения.Ссылка,
	|	ИСТИНА КАК ПеренестиДанныеОбОбразовании,
	|	ЛОЖЬ КАК ПеренестиДанныеОНеявкахИНевыходах,
	|	Сведения.Дата
	|ПОМЕСТИТЬ ВТСведенияОРаботниках
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра КАК Сведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.УдалитьОбразованиеФизическихЛиц КАК СведенияОРаботникахДляМедРегистраУдалитьОбразованиеФизическихЛиц
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраУдалитьОбразованиеФизическихЛиц.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.КвалификационныеКатегории КАК СведенияОРаботникахДляМедРегистраКвалификационныеКатегории
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.Образование КАК СведенияОРаботникахДляМедРегистраОбразование
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраОбразование.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.Сертификаты КАК СведенияОРаботникахДляМедРегистраСертификаты
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраСертификаты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.Переподготовка КАК СведенияОРаботникахДляМедРегистраПереподготовка
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраПереподготовка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.ПовышениеКвалификации КАК СведенияОРаботникахДляМедРегистраПовышениеКвалификации
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраПовышениеКвалификации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.ПослевузовскоеОбразование КАК СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.Ссылка
	|ГДЕ
	|	НЕ Сведения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Сведения.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраУдалитьОбразованиеФизическихЛиц.НомерСтроки, 0)) > 0 И
	|	МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.НомерСтроки, 0)) + МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраОбразование.НомерСтроки, 0)) + МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраПереподготовка.НомерСтроки, 0)) + МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраПовышениеКвалификации.НомерСтроки, 0)) + МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.НомерСтроки, 0)) + МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраСертификаты.НомерСтроки, 0)) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сведения.Ссылка,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	Сведения.Дата
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра КАК Сведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.УдалитьНеявки КАК СведенияОРаботникахДляМедРегистраУдалитьНеявки
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраУдалитьНеявки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.Невыходы КАК СведенияОРаботникахДляМедРегистраНевыходы
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраНевыходы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОРаботникахДляМедРегистра.Неявки КАК СведенияОРаботникахДляМедРегистраНеявки
	|		ПО Сведения.Ссылка = СведенияОРаботникахДляМедРегистраНеявки.Ссылка
	|ГДЕ
	|	НЕ Сведения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Сведения.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраУдалитьНеявки.НомерСтроки, 0)) > 0 И
	|	МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраНевыходы.НомерСтроки, 0)) + МАКСИМУМ(ЕСТЬNULL(СведенияОРаботникахДляМедРегистраНеявки.НомерСтроки, 0)) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ВТСведенияОРаботниках.Ссылка КАК Ссылка,
	|	ВТСведенияОРаботниках.Дата
	|ИЗ
	|	ВТСведенияОРаботниках КАК ВТСведенияОРаботниках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТСведенияОРаботниках.Дата УБЫВ";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 100", "");
	КонецЕсли;
		
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если МассивДокументов.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	НеявкиИНевыходы.Ссылка,
		|	НеявкиИНевыходы.Сотрудник,
		|	НеявкиИНевыходы.ДатаНачала,
		|	НеявкиИНевыходы.ДатаОкончания,
		|	НеявкиИНевыходы.СостояниеНеявкиХарактеристика,
		|	НеявкиИНевыходы.СостояниеОтпускаИКомандировкиХарактеристика
		|ПОМЕСТИТЬ ВТНеявкиИНевыходы
		|ИЗ
		|	Документ.СведенияОРаботникахДляМедРегистра.УдалитьНеявки КАК НеявкиИНевыходы
		|ГДЕ
		|	НеявкиИНевыходы.Ссылка В
		|			(ВЫБРАТЬ
		|				СведенияОРаботниках.Ссылка
		|			ИЗ
		|				ВТСведенияОРаботниках КАК СведенияОРаботниках
		|			ГДЕ
		|				СведенияОРаботниках.ПеренестиДанныеОНеявкахИНевыходах
		|				И СведенияОРаботниках.Ссылка В (&МассивДокументов))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Неявки.Ссылка КАК Ссылка,
		|	Неявки.Сотрудник КАК Сотрудник,
		|	Неявки.ДатаНачала КАК ДатаНачала,
		|	Неявки.ДатаОкончания КАК ДатаОкончания,
		|	Неявки.СостояниеНеявкиХарактеристика КАК СостояниеХарактеристика
		|ИЗ
		|	ВТНеявкиИНевыходы КАК Неявки
		|ГДЕ
		|	Неявки.СостояниеОтпускаИКомандировкиХарактеристика = &ПустаяХарактеристика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник,
		|	ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Невыходы.Ссылка КАК Ссылка,
		|	Невыходы.Сотрудник КАК Сотрудник,
		|	Невыходы.ДатаНачала КАК ДатаНачала,
		|	Невыходы.ДатаОкончания КАК ДатаОкончания,
		|	Невыходы.СостояниеОтпускаИКомандировкиХарактеристика КАК СостояниеХарактеристика
		|ИЗ
		|	ВТНеявкиИНевыходы КАК Невыходы
		|ГДЕ
		|	Невыходы.СостояниеОтпускаИКомандировкиХарактеристика <> &ПустаяХарактеристика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник,
		|	ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНеявкиИНевыходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Образование.Ссылка,
		|	Образование.ФизическоеЛицо,
		|	Образование.УчебноеЗаведениеХарактеристика,
		|	Образование.ВидОбразованияХарактеристика,
		|	Образование.СпециальностьХарактеристика,
		|	Образование.Серия,
		|	Образование.Номер,
		|	Образование.СубъектРФЦелевогоНабораХарактеристика,
		|	Образование.ВидОбразованияМедРаботника,
		|	Образование.ВидПослевузовскогоОбразованияХарактеристика,
		|	Образование.ДатаВыдачи,
		|	Образование.Квалификация,
		|	Образование.КоличествоЧасов,
		|	Образование.НаименованиеКурса,
		|	Образование.Начало,
		|	Образование.Окончание,
		|	Образование.СпециальностьСертификатаХарактеристика
		|ПОМЕСТИТЬ ВТОбразование
		|ИЗ
		|	Документ.СведенияОРаботникахДляМедРегистра.УдалитьОбразованиеФизическихЛиц КАК Образование
		|ГДЕ
		|	Образование.Ссылка В
		|			(ВЫБРАТЬ
		|				СведенияОРаботниках.Ссылка
		|			ИЗ
		|				ВТСведенияОРаботниках КАК СведенияОРаботниках
		|			ГДЕ
		|				СведенияОРаботниках.ПеренестиДанныеОбОбразовании
		|				И СведенияОРаботниках.Ссылка В (&МассивДокументов))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Образование.Ссылка КАК Ссылка,
		|	Образование.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Образование.УчебноеЗаведениеХарактеристика,
		|	Образование.ВидОбразованияХарактеристика,
		|	Образование.СпециальностьХарактеристика,
		|	ГОД(Образование.Окончание) КАК ГодОкончания,
		|	Образование.Серия,
		|	Образование.Номер,
		|	Образование.СубъектРФЦелевогоНабораХарактеристика
		|ИЗ
		|	ВТОбразование КАК Образование
		|ГДЕ
		|	Образование.ВидОбразованияМедРаботника = 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ФизическоеЛицо,
		|	ГодОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПослевузовскоеОбразование.Ссылка КАК Ссылка,
		|	ПослевузовскоеОбразование.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПослевузовскоеОбразование.УчебноеЗаведениеХарактеристика,
		|	ПослевузовскоеОбразование.ВидПослевузовскогоОбразованияХарактеристика КАК ВидОбразованияХарактеристика,
		|	ПослевузовскоеОбразование.СпециальностьСертификатаХарактеристика КАК СпециальностьХарактеристика,
		|	ПослевузовскоеОбразование.Серия,
		|	ПослевузовскоеОбразование.Номер,
		|	ПослевузовскоеОбразование.Начало КАК Начало,
		|	ПослевузовскоеОбразование.Окончание КАК Окончание,
		|	ПослевузовскоеОбразование.ДатаВыдачи КАК ДатаПолучения,
		|	ПослевузовскоеОбразование.СубъектРФЦелевогоНабораХарактеристика
		|ИЗ
		|	ВТОбразование КАК ПослевузовскоеОбразование
		|ГДЕ
		|	ПослевузовскоеОбразование.ВидОбразованияМедРаботника = 2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ФизическоеЛицо,
		|	ДатаПолучения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПовышениеКвалификации.Ссылка КАК Ссылка,
		|	ПовышениеКвалификации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПовышениеКвалификации.УчебноеЗаведениеХарактеристика,
		|	ПовышениеКвалификации.НаименованиеКурса КАК НаименованиеКурса,
		|	ПовышениеКвалификации.СпециальностьСертификатаХарактеристика КАК СпециальностьХарактеристика,
		|	ГОД(ПовышениеКвалификации.Окончание) КАК ГодПрохождения,
		|	ПовышениеКвалификации.Серия,
		|	ПовышениеКвалификации.Номер,
		|	ПовышениеКвалификации.ДатаВыдачи КАК ДатаПолучения,
		|	ПовышениеКвалификации.КоличествоЧасов КАК КоличествоЧасов
		|ИЗ
		|	ВТОбразование КАК ПовышениеКвалификации
		|ГДЕ
		|	ПовышениеКвалификации.ВидОбразованияМедРаботника = 3
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ФизическоеЛицо,
		|	ДатаПолучения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Переподготовка.Ссылка КАК Ссылка,
		|	Переподготовка.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Переподготовка.УчебноеЗаведениеХарактеристика,
		|	Переподготовка.СпециальностьСертификатаХарактеристика КАК СпециальностьХарактеристика,
		|	ГОД(Переподготовка.Окончание) КАК ГодПрохождения,
		|	Переподготовка.Серия,
		|	Переподготовка.Номер,
		|	Переподготовка.КоличествоЧасов КАК КоличествоЧасов
		|ИЗ
		|	ВТОбразование КАК Переподготовка
		|ГДЕ
		|	Переподготовка.ВидОбразованияМедРаботника = 4
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ФизическоеЛицо,
		|	ГодПрохождения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	Сертификаты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сертификаты.УчебноеЗаведениеХарактеристика,
		|	Сертификаты.СпециальностьСертификатаХарактеристика КАК СпециальностьХарактеристика,
		|	Сертификаты.ДатаВыдачи КАК ДатаПолучения,
		|	Сертификаты.Серия,
		|	Сертификаты.Номер
		|ИЗ
		|	ВТОбразование КАК Сертификаты
		|ГДЕ
		|	Сертификаты.ВидОбразованияМедРаботника = 5
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ФизическоеЛицо,
		|	ДатаПолучения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОбразование";
		
		Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ЭлементыКлассификаторовМедРегистра.ПустаяСсылка());
		
		Результаты = Запрос.ВыполнитьПакет();
		ВсегоРезультатов = Результаты.Количество();
		
		ВыборкаНеявки = Результаты[ВсегоРезультатов - 10].Выбрать();
		ВыборкаНевыходы = Результаты[ВсегоРезультатов - 9].Выбрать();
		ВыборкаОбразование = Результаты[ВсегоРезультатов - 6].Выбрать();
		ВыборкаПослевузовскоеОбразование = Результаты[ВсегоРезультатов - 5].Выбрать();
		ВыборкаПовышениеКвалификации = Результаты[ВсегоРезультатов - 4].Выбрать();
		ВыборкаПереподготовка = Результаты[ВсегоРезультатов - 3].Выбрать();
		ВыборкаСертификаты = Результаты[ВсегоРезультатов - 2].Выбрать();
		
		Для каждого Документ Из МассивДокументов Цикл
			
			СтруктураПоиска = Новый Структура("Ссылка", Документ);
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияОРаботникахДляМедРегистра", "Ссылка", Документ) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Документ.ПолучитьОбъект();
			
			ВыборкаНеявки.Сбросить();
			Пока ВыборкаНеявки.НайтиСледующий(СтруктураПоиска) Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Неявки.Добавить(), ВыборкаНеявки);
			КонецЦикла;
			
			ВыборкаНевыходы.Сбросить();
			Пока ВыборкаНевыходы.НайтиСледующий(СтруктураПоиска) Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Невыходы.Добавить(), ВыборкаНевыходы);
			КонецЦикла;
			
			ВыборкаОбразование.Сбросить();
			Пока ВыборкаОбразование.НайтиСледующий(СтруктураПоиска) Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Образование.Добавить(), ВыборкаОбразование);
			КонецЦикла;
			
			ВыборкаПослевузовскоеОбразование.Сбросить();
			Пока ВыборкаПослевузовскоеОбразование.НайтиСледующий(СтруктураПоиска) Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.ПослевузовскоеОбразование.Добавить(), ВыборкаПослевузовскоеОбразование);
			КонецЦикла;
			
			ВыборкаПовышениеКвалификации.Сбросить();
			Пока ВыборкаПовышениеКвалификации.НайтиСледующий(СтруктураПоиска) Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.ПовышениеКвалификации.Добавить(), ВыборкаПовышениеКвалификации);
			КонецЦикла;
			
			ВыборкаПереподготовка.Сбросить();
			Пока ВыборкаПереподготовка.НайтиСледующий(СтруктураПоиска) Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Переподготовка.Добавить(), ВыборкаПереподготовка);
			КонецЦикла;
			
			ВыборкаСертификаты.Сбросить();
			Пока ВыборкаСертификаты.НайтиСледующий(СтруктураПоиска) Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Сертификаты.Добавить(), ВыборкаСертификаты);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура ПодготовитьДанныеДляЗаполнения(Параметры, АдресХранилища) Экспорт	
		
	Организация 		= Параметры.Организация;
	ДатаАктуальности 	= Параметры.ДатаАктуальности;
	ДанныеДляЗаполнения = Параметры.ДанныеДляЗаполнения;
	СписокСотрудников 	= Параметры.СписокСотрудников;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.СоздатьВТХарактеристикиОбъектовПоМедРегистру(МенеджерВременныхТаблиц);
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	Если СписокСотрудников = Неопределено Или СписокСотрудников.Количество()=0 Тогда
		
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
		ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода				= ДатаАктуальности;
		ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоТрудовымДоговорам 	= Истина;
		ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 		= Неопределено;

		ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные = "ТекущееПодразделение, ТекущаяДолжность, ДатаУвольнения";
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций, "ВТСотрудникиОрганизацииДляФильтра");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("КлассификаторДолжность",	Справочники.КлассификаторыМедРегистра.ArrayOfPost);
		Запрос.УстановитьПараметр("КлассификаторТипПодразделения", Справочники.КлассификаторыМедРегистра.ArrayOfSubdivision);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизацииДляФильтра.Сотрудник,
		|	СотрудникиОрганизацииДляФильтра.ФизическоеЛицо,
		|	СотрудникиОрганизацииДляФильтра.Период,
		|	СотрудникиОрганизацииДляФильтра.ДатаУвольнения,
		|	СотрудникиОрганизацииДляФильтра.ТекущееПодразделение,
		|	СотрудникиОрганизацииДляФильтра.ТекущаяДолжность
		|ПОМЕСТИТЬ ВТСотрудникиОрганизации
		|ИЗ
		|	ВТСотрудникиОрганизацииДляФильтра КАК СотрудникиОрганизацииДляФильтра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиДолжностьПоМедРегистру
		|		ПО СотрудникиОрганизацииДляФильтра.ТекущаяДолжность = ХарактеристикиДолжностьПоМедРегистру.Объект
		|			И (ХарактеристикиДолжностьПоМедРегистру.Классификатор = &КлассификаторДолжность)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиТипПодразделенияПоМедРегистру
		|		ПО СотрудникиОрганизацииДляФильтра.ТекущееПодразделение = ХарактеристикиТипПодразделенияПоМедРегистру.Объект
		|			И (ХарактеристикиТипПодразделенияПоМедРегистру.Классификатор = &КлассификаторТипПодразделения)
		|ГДЕ
		|	(СотрудникиОрганизацииДляФильтра.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ИЛИ СотрудникиОрганизацииДляФильтра.ДатаУвольнения >= НАЧАЛОПЕРИОДА(СотрудникиОрганизацииДляФильтра.Период, МЕСЯЦ))";
		
		Запрос.Выполнить();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&ДатаАктуальности КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиОрганизации
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)";
		
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
		Запрос.Выполнить();
		
	КонецЕсли;
	
#Область ДанныеСотрудников_ФизическихЛиц
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			"ВТСотрудникиОрганизации");
	
	ПереченьИнформацииОСотруднике = "Фамилия,Имя,Отчество,ДатаРождения,
	|ДокументВид,ДокументСерия,ДокументНомер,ДокументКемВыдан,ДокументДатаВыдачи,
	|Страна,СтраховойНомерПФР,ИНН,ТабельныйНомер,Пол,
	|АдресПоПропискеПредставление,АдресПоПрописке,ДатаРегистрации,
	|СостояниеВБраке,ТелефонДомашний,ТелефонДомашнийПредставление,ТелефонМобильный,ТелефонМобильныйПредставление";
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, ПереченьИнформацииОСотруднике);	
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	СотрудникиОрганизации.ФизическоеЛицо,
	|	СотрудникиОрганизации.ТабельныйНомер,
	|	СотрудникиОрганизации.Период КАК ДатаСоставления,
	|	СотрудникиОрганизации.Фамилия,
	|	СотрудникиОрганизации.Имя,
	|	СотрудникиОрганизации.Отчество,
	|	СотрудникиОрганизации.Пол,
	|	СотрудникиОрганизации.ДатаРождения,
	|	СотрудникиОрганизации.ДокументСерия,
	|	СотрудникиОрганизации.ДокументНомер,
	|	СотрудникиОрганизации.ДокументДатаВыдачи,
	|	СотрудникиОрганизации.ДокументКемВыдан,
	|	СотрудникиОрганизации.СтраховойНомерПФР,
	|	СотрудникиОрганизации.ИНН,
	|	ИСТИНА КАК IsRealPerson,
	|	ЛОЖЬ КАК НаличиеЛичногоАвтомобиля,
	|	ЕСТЬNULL(СотрудникиОрганизации.ТелефонМобильный, СотрудникиОрганизации.ТелефонДомашний) КАК Телефон,
	|	ЕСТЬNULL(СотрудникиОрганизации.ТелефонМобильныйПредставление, СотрудникиОрганизации.ТелефонДомашнийПредставление) КАК ТелефонПредставление,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаСДетьмиДо16.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаличиеДетейМладше16Лет,
	|	СотрудникиОрганизации.АдресПоПропискеПредставление,
	|	СотрудникиОрганизации.АдресПоПрописке,
	|	СотрудникиОрганизации.ДатаРегистрации,
	|	ХарактеристикиВидаДокументаПоМедРегистру.Характеристика КАК ДокументВидДокументаХарактеристика,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизации.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА &ГражданинРоссииВМедРегистре
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА &ЛицоБезГражданстваВМедРегистре
	|		ИНАЧЕ &ИностранныйГражданинВМедРегистре
	|	КОНЕЦ КАК ГражданствоХарактеристика,
	|	ХарактеристикиСемейногоПоложенияПоМедРегистру.Характеристика КАК СемейноеПоложениеХарактеристика
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			РодственникиФизическихЛиц.Владелец КАК ФизическоеЛицо
	|		ИЗ
	|			Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
	|		ГДЕ
	|			РодственникиФизическихЛиц.Владелец В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						КадровыеДанныеСотрудников.ФизическоеЛицо
	|					ИЗ
	|						ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников)
	|			И РодственникиФизическихЛиц.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И РАЗНОСТЬДАТ(РодственникиФизическихЛиц.ДатаРождения, &ДатаАктуальности, ГОД) < 16
	|			И РодственникиФизическихЛиц.СтепеньРодства.Код В(&Дети)) КАК ФизическиеЛицаСДетьмиДо16
	|		ПО СотрудникиОрганизации.ФизическоеЛицо = ФизическиеЛицаСДетьмиДо16.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиВидаДокументаПоМедРегистру
	|		ПО СотрудникиОрганизации.ДокументВид = ХарактеристикиВидаДокументаПоМедРегистру.Объект
	|			И (ХарактеристикиВидаДокументаПоМедРегистру.Классификатор = &КлассификаторВидДокумента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиСемейногоПоложенияПоМедРегистру
	|		ПО СотрудникиОрганизации.СостояниеВБраке = ХарактеристикиСемейногоПоложенияПоМедРегистру.Объект
	|			И (ХарактеристикиСемейногоПоложенияПоМедРегистру.Классификатор = &КлассификаторСемейноеПоложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	Запрос.УстановитьПараметр("ДатаАктуальности",ДатаАктуальности);
	
	СтепеньРодстваДети = Новый Массив;
	СтепеньРодстваДети.Добавить("05");
	СтепеньРодстваДети.Добавить("06");
	Запрос.УстановитьПараметр("Дети", СтепеньРодстваДети);
	
	Запрос.УстановитьПараметр("КлассификаторВидДокумента", Справочники.КлассификаторыМедРегистра.ArrayOfDocumentType);
	Запрос.УстановитьПараметр("КлассификаторСемейноеПоложение", Справочники.КлассификаторыМедРегистра.ArrayOfMarriage);
	
	// Гражданство
	ГражданствоМедРаботников = Справочники.ЭлементыКлассификаторовМедРегистра.ГражданствоМедицинскихРаботников();
	Запрос.УстановитьПараметр("ГражданинРоссииВМедРегистре", ГражданствоМедРаботников.ГражданинРоссии);
	Запрос.УстановитьПараметр("ЛицоБезГражданстваВМедРегистре", ГражданствоМедРаботников.БезГражданства);
	Запрос.УстановитьПараметр("ИностранныйГражданинВМедРегистре", ГражданствоМедРаботников.ИностранныйГражданин);
	
	ДанныеДляЗаполнения.Сотрудники = Запрос.Выполнить().Выгрузить();
			
#КонецОбласти // ДанныеСотрудников_ФизическихЛиц	

#Область Образование
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиОрганизации.Период КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО СотрудникиОрганизации.Сотрудник = Сотрудники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТФизическиеЛицаПериоды.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТФизическиеЛицаПериоды КАК ВТФизическиеЛицаПериоды";
	Запрос.Выполнить();
	
	ОписаниеВТОбразование = Новый Структура("ИмяВременнойТаблицыОтборовФизическихЛиц,ИмяПоляФизическоеЛицо", "ВТФизическиеЛица", "ФизическоеЛицо");
	Запрос = КадровыйУчетРасширенный.ЗапросВТОбразованияФизическихЛиц(Истина, ОписаниеВТОбразование);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ОписаниеВТКатегории = Новый Структура("ИмяВременнойТаблицыОтборовФизическихЛиц,ИмяПоляПериод,ИмяПоляФизическоеЛицо", "ВТФизическиеЛицаПериоды", "Период", "ФизическоеЛицо");
	Запрос = КадровыйУчетРасширенный.ЗапросВТСпециальностиФизическихЛиц(Истина, ОписаниеВТКатегории);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаОбразование.ФизическоеЛицо,
	|	ХарактеристикиВидаОбразованияПоМедРегистру.Характеристика КАК ВидОбразованияХарактеристика,
	|	ХарактеристикиВидаПослевузовскогоОбразованияПоМедРегистру.Характеристика КАК ВидПослевузовскогоОбразованияХарактеристика,
	|	ХарактеристикиУчебноеЗаведениеПоМедРегистру.Характеристика КАК УчебноеЗаведениеХарактеристика,
	|	ФизическиеЛицаОбразование.Начало,
	|	ФизическиеЛицаОбразование.Окончание,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&СпециальностиПоДиплому)
	|			ТОГДА ХарактеристикиСпециальностиПоМедРегистру.Характеристика
	|		ИНАЧЕ &ПустаяХарактеристика
	|	КОНЕЦ КАК СпециальностьХарактеристика,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&СпециальностиПоДиплому)
	|			ТОГДА &ПустаяХарактеристика
	|		ИНАЧЕ ХарактеристикиСпециальностиСертификатаПоМедРегистру.Характеристика
	|	КОНЕЦ КАК СпециальностьСертификатаХарактеристика,
	|	ФизическиеЛицаОбразование.Квалификация,
	|	ФизическиеЛицаОбразование.НаименованиеКурса,
	|	ФизическиеЛицаОбразование.КоличествоЧасов,
	|	ФизическиеЛицаОбразование.Серия,
	|	ФизическиеЛицаОбразование.Номер,
	|	ФизическиеЛицаОбразование.ДатаВыдачи,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&СпециальностиПоДиплому)
	|			ТОГДА 1
	|		КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&ПослевузовскоеОбразование)
	|				И ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования <> ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ФизическиеЛицаОбразование.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации)
	|			ТОГДА 3
	|		КОГДА ФизическиеЛицаОбразование.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.Переподготовка)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидОбразованияМедРаботника,
	|	ХарактеристикиСубъектРФЦелевогоНабораПоМедРегистру.Характеристика КАК СубъектРФЦелевогоНабораХарактеристика
	|ПОМЕСТИТЬ ВТОбразование
	|ИЗ
	|	ВТОбразованияФизическихЛиц КАК ФизическиеЛицаОбразование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиВидаОбразованияПоМедРегистру
	|		ПО ФизическиеЛицаОбразование.ВидОбразования = ХарактеристикиВидаОбразованияПоМедРегистру.Объект
	|			И (ХарактеристикиВидаОбразованияПоМедРегистру.Классификатор = &КлассификаторВидОбразования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиВидаПослевузовскогоОбразованияПоМедРегистру
	|		ПО ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования = ХарактеристикиВидаПослевузовскогоОбразованияПоМедРегистру.Объект
	|			И (ХарактеристикиВидаПослевузовскогоОбразованияПоМедРегистру.Классификатор = &КлассификаторВидПослевузовскогоОбразования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиУчебноеЗаведениеПоМедРегистру
	|		ПО ФизическиеЛицаОбразование.УчебноеЗаведение = ХарактеристикиУчебноеЗаведениеПоМедРегистру.Объект
	|			И (ХарактеристикиУчебноеЗаведениеПоМедРегистру.Классификатор = &КлассификаторУчебноеЗаведение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиСпециальностиПоМедРегистру
	|		ПО ФизическиеЛицаОбразование.Специальность = ХарактеристикиСпециальностиПоМедРегистру.Объект
	|			И (ХарактеристикиСпециальностиПоМедРегистру.Классификатор = &КлассификаторСпециальность)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиСпециальностиСертификатаПоМедРегистру
	|		ПО ФизическиеЛицаОбразование.Специальность = ХарактеристикиСпециальностиСертификатаПоМедРегистру.Объект
	|			И (ХарактеристикиСпециальностиСертификатаПоМедРегистру.Классификатор = &КлассификаторСпециальностьСертификата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиСубъектРФЦелевогоНабораПоМедРегистру
	|		ПО ФизическиеЛицаОбразование.Ссылка = ХарактеристикиСубъектРФЦелевогоНабораПоМедРегистру.Объект
	|			И (ХарактеристикиСубъектРФЦелевогоНабораПоМедРегистру.Классификатор = &КлассификаторСубъектРФЦелевогоНабора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Образование.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Образование.УчебноеЗаведениеХарактеристика КАК УчебноеЗаведениеХарактеристика,
	|	Образование.ВидОбразованияХарактеристика КАК ВидОбразованияХарактеристика,
	|	Образование.СпециальностьХарактеристика КАК СпециальностьХарактеристика,
	|	ГОД(Образование.Окончание) КАК ГодОкончания,
	|	Образование.Серия КАК Серия,
	|	Образование.Номер КАК Номер,
	|	Образование.СубъектРФЦелевогоНабораХарактеристика КАК СубъектРФЦелевогоНабораХарактеристика
	|ИЗ
	|	ВТОбразование КАК Образование
	|ГДЕ
	|	Образование.ВидОбразованияМедРаботника = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Переподготовка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Переподготовка.УчебноеЗаведениеХарактеристика КАК УчебноеЗаведениеХарактеристика,
	|	Переподготовка.СпециальностьСертификатаХарактеристика КАК СпециальностьХарактеристика,
	|	ГОД(Переподготовка.Окончание) КАК ГодПрохождения,
	|	Переподготовка.Серия КАК Серия,
	|	Переподготовка.Номер КАК Номер,
	|	Переподготовка.КоличествоЧасов
	|ИЗ
	|	ВТОбразование КАК Переподготовка
	|ГДЕ
	|	Переподготовка.ВидОбразованияМедРаботника = 4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПовышениеКвалификации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПовышениеКвалификации.УчебноеЗаведениеХарактеристика КАК УчебноеЗаведениеХарактеристика,
	|	ПовышениеКвалификации.НаименованиеКурса КАК НаименованиеКурса,
	|	ПовышениеКвалификации.СпециальностьСертификатаХарактеристика КАК СпециальностьХарактеристика,
	|	ГОД(ПовышениеКвалификации.Окончание) КАК ГодПрохождения,
	|	ПовышениеКвалификации.Серия КАК Серия,
	|	ПовышениеКвалификации.Номер КАК Номер,
	|	ПовышениеКвалификации.ДатаВыдачи КАК ДатаПолучения,
	|	ПовышениеКвалификации.КоличествоЧасов КАК КоличествоЧасов
	|ИЗ
	|	ВТОбразование КАК ПовышениеКвалификации
	|ГДЕ
	|	ПовышениеКвалификации.ВидОбразованияМедРаботника = 3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПослевузовскоеОбразование.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПослевузовскоеОбразование.УчебноеЗаведениеХарактеристика КАК УчебноеЗаведениеХарактеристика,
	|	ПослевузовскоеОбразование.ВидПослевузовскогоОбразованияХарактеристика КАК ВидОбразованияХарактеристика,
	|	ПослевузовскоеОбразование.СпециальностьСертификатаХарактеристика КАК СпециальностьХарактеристика,
	|	ПослевузовскоеОбразование.Начало КАК Начало,
	|	ПослевузовскоеОбразование.Окончание КАК Окончание,
	|	ГОД(ПослевузовскоеОбразование.Окончание) КАК ГодОкончания,
	|	ПослевузовскоеОбразование.Серия КАК Серия,
	|	ПослевузовскоеОбразование.Номер КАК Номер,
	|	ПослевузовскоеОбразование.ДатаВыдачи КАК ДатаПолучения,
	|	ПослевузовскоеОбразование.СубъектРФЦелевогоНабораХарактеристика КАК СубъектРФЦелевогоНабораХарактеристика
	|ИЗ
	|	ВТОбразование КАК ПослевузовскоеОбразование
	|ГДЕ
	|	ПослевузовскоеОбразование.ВидОбразованияМедРаботника = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыПоСпециальности.ФизическоеЛицо,
	|	ХарактеристикиУчебноеЗаведениеПоМедРегистру.Ссылка КАК УчебноеЗаведениеХарактеристика,
	|	ХарактеристикиСпециальностиСертификатаПоМедРегистру.Характеристика КАК СпециальностьХарактеристика,
	|	СертификатыПоСпециальности.Серия КАК Серия,
	|	СертификатыПоСпециальности.Номер КАК Номер,
	|	СертификатыПоСпециальности.ДатаПолучения КАК ДатаПолучения
	|ИЗ
	|	РегистрСведений.СертификатыПоСпециальностиФизическихЛиц КАК СертификатыПоСпециальности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ОтборФизическихЛиц
	|		ПО СертификатыПоСпециальности.ФизическоеЛицо = ОтборФизическихЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиСпециальностиСертификатаПоМедРегистру
	|		ПО СертификатыПоСпециальности.Специальность = ХарактеристикиСпециальностиСертификатаПоМедРегистру.Объект
	|			И (ХарактеристикиСпециальностиСертификатаПоМедРегистру.Классификатор = &КлассификаторСпециальностьСертификата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыКлассификаторовМедРегистра КАК ХарактеристикиУчебноеЗаведениеПоМедРегистру
	|		ПО ((ВЫРАЗИТЬ(СертификатыПоСпециальности.КемВыдан КАК СТРОКА(150))) = ХарактеристикиУчебноеЗаведениеПоМедРегистру.Наименование)
	|			И (ХарактеристикиУчебноеЗаведениеПоМедРегистру.Владелец = &КлассификаторУчебноеЗаведение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпециальностиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ХарактеристикиКатегорииПоМедРегистру.Характеристика КАК КвалификационнаяКатегорияХарактеристика,
	|	ХарактеристикиСпециальностиСертификатаПоМедРегистру.Характеристика КАК СпециальностьХарактеристика,
	|	СпециальностиФизическихЛиц.Период КАК ДатаПрисвоения
	|ИЗ
	|	ВТСпециальностиФизическихЛиц КАК СпециальностиФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиСпециальностиСертификатаПоМедРегистру
	|		ПО СпециальностиФизическихЛиц.Специальность = ХарактеристикиСпециальностиСертификатаПоМедРегистру.Объект
	|			И (ХарактеристикиСпециальностиСертификатаПоМедРегистру.Классификатор = &КлассификаторСпециальностьСертификата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиКатегорииПоМедРегистру
	|		ПО СпециальностиФизическихЛиц.РазрядКатегория = ХарактеристикиКатегорииПоМедРегистру.Объект
	|			И (ХарактеристикиКатегорииПоМедРегистру.Классификатор = &КлассификаторКатегория)";
	
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ЭлементыКлассификаторовМедРегистра.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустоеЧисло", 0);
	
	СпециальностиПоДиплому = Новый Массив;
	СпециальностиПоДиплому.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование);
	СпециальностиПоДиплому.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразование);
	СпециальностиПоДиплому.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат);
	СпециальностиПоДиплому.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации);
	СпециальностиПоДиплому.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура);
	Запрос.УстановитьПараметр("СпециальностиПоДиплому", СпециальностиПоДиплому);
	
	ПослевузовскоеОбразование = Новый Массив;
	ПослевузовскоеОбразование.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации);
	ПослевузовскоеОбразование.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование);
	Запрос.УстановитьПараметр("ПослевузовскоеОбразование", ПослевузовскоеОбразование);
	
	Запрос.УстановитьПараметр("КлассификаторВидОбразования", Справочники.КлассификаторыМедРегистра.ArrayOfEducationType);
	Запрос.УстановитьПараметр("КлассификаторВидПослевузовскогоОбразования", Справочники.КлассификаторыМедРегистра.ArrayOfPostGraduationEducationType);
	Запрос.УстановитьПараметр("КлассификаторУчебноеЗаведение", Справочники.КлассификаторыМедРегистра.ArrayOfEducationInstitution);
	Запрос.УстановитьПараметр("КлассификаторСпециальность", Справочники.КлассификаторыМедРегистра.ArrayOfSpeciality);
	Запрос.УстановитьПараметр("КлассификаторСпециальностьСертификата", Справочники.КлассификаторыМедРегистра.ArrayOfCertificateSpeciality);
	Запрос.УстановитьПараметр("КлассификаторСубъектРФЦелевогоНабора", Справочники.КлассификаторыМедРегистра.ArrayOfTerritory);
	Запрос.УстановитьПараметр("КлассификаторКатегория", Справочники.КлассификаторыМедРегистра.ArrayOfQualificationCategory);
	
	Результаты = Запрос.ВыполнитьПакет();
	ВсегоРезультатов = Результаты.Количество();
	
	ДанныеДляЗаполнения.Образование = Результаты[ВсегоРезультатов - 6].Выгрузить();
	ДанныеДляЗаполнения.Переподготовка = Результаты[ВсегоРезультатов - 5].Выгрузить();
	ДанныеДляЗаполнения.ПовышениеКвалификации = Результаты[ВсегоРезультатов - 4].Выгрузить();
	ДанныеДляЗаполнения.ПослевузовскоеОбразование = Результаты[ВсегоРезультатов - 3].Выгрузить();
	ДанныеДляЗаполнения.Сертификаты = Результаты[ВсегоРезультатов - 2].Выгрузить();
	ДанныеДляЗаполнения.КвалификационныеКатегории = Результаты[ВсегоРезультатов - 1].Выгрузить();
	
#КонецОбласти // Образование	

#Область Награды
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НаградыФизическихЛиц.ФизическоеЛицо,
	|	НаградыФизическихЛиц.Награда.Наименование КАК Наименование,
	|	НаградыФизическихЛиц.НомерПриказа,
	|	НаградыФизическихЛиц.ДатаПриказа,
	|	ХарактеристикиНаградПоМедРегистру.Характеристика КАК НаградаХарактеристика
	|ИЗ
	|	РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиНаградПоМедРегистру
	|		ПО НаградыФизическихЛиц.Награда = ХарактеристикиНаградПоМедРегистру.Объект
	|			И (ХарактеристикиНаградПоМедРегистру.Классификатор = &КлассификаторНаграды)
	|ГДЕ
	|	НаградыФизическихЛиц.ФизическоеЛицо В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СотрудникиОрганизации.Сотрудник.ФизическоеЛицо
	|			ИЗ
	|				ВТСотрудникиОрганизации КАК СотрудникиОрганизации)";
	
	Запрос.УстановитьПараметр("КлассификаторНаграды", Справочники.КлассификаторыМедРегистра.ArrayOfNomination);
	
	ДанныеДляЗаполнения.Награды = Запрос.Выполнить().Выгрузить();
	
#КонецОбласти // Награды

#Область ЛичноеДело

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Период КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТСотрудникиОрганизации КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрКадровыхПриказов.Регистратор КАК Регистратор,
	|	РеестрКадровыхПриказов.Сотрудник КАК Сотрудник,
	|	РеестрКадровыхПриказов.ДокументОснование КАК ДокументОснование,
	|	РеестрКадровыхПриказов.Дата КАК Дата,
	|	РеестрКадровыхПриказов.Подразделение КАК Подразделение,
	|	РеестрКадровыхПриказов.Должность КАК Должность,
	|	РеестрКадровыхПриказов.ВидСобытия КАК ВидСобытия,
	|	РеестрКадровыхПриказов.ДатаПриказа КАК ДатаПриказа,
	|	РеестрКадровыхПриказов.НомерПриказа КАК НомерПриказа,
	|	РеестрКадровыхПриказов.Основание КАК Основание
	|ПОМЕСТИТЬ ВТДанныеИзРеестра
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТСотрудники.Сотрудник
	|			ИЗ
	|				ВТСотрудники КАК ВТСотрудники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК Период,
	|	ВТДанныеИзРеестра.Сотрудник КАК Сотрудник,
	|	ВТДанныеИзРеестра.Дата КАК Дата
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыКадровойИстории
	|ИЗ
	|	ВТДанныеИзРеестра КАК ВТДанныеИзРеестра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|		ПО ВТДанныеИзРеестра.Дата <= КадроваяИсторияСотрудников.Период
	|			И ВТДанныеИзРеестра.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеИзРеестра.Сотрудник,
	|	ВТДанныеИзРеестра.Дата";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТМаксимальныеПериодыКадровойИстории", "Сотрудник"));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ВидыЗанятостиСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТМаксимальныеПериодыКадровойИстории", "Сотрудник"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
	|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	|	ВТМаксимальныеПериодыКадровойИстории.Дата КАК Дата,
	|	ВидыЗанятостиСотрудников.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТДополнительныеДанныеИзКадровойИстории
	|ИЗ
	|	ВТМаксимальныеПериодыКадровойИстории КАК ВТМаксимальныеПериодыКадровойИстории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудников
	|		ПО ВТМаксимальныеПериодыКадровойИстории.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
	|			И ВТМаксимальныеПериодыКадровойИстории.Период = КадроваяИсторияСотрудников.Период
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудниковСрезПоследних КАК ВидыЗанятостиСотрудников
	|		ПО ВТМаксимальныеПериодыКадровойИстории.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
	|			И ВТМаксимальныеПериодыКадровойИстории.Период = ВидыЗанятостиСотрудников.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеИзРеестра.Сотрудник КАК Сотрудник,
	|	ВТДополнительныеДанныеИзКадровойИстории.ВидЗанятости КАК ВидЗанятости,
	|	ВТДанныеИзРеестра.ВидСобытия КАК ВидСобытия,
	|	ВТДополнительныеДанныеИзКадровойИстории.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	|	ВЫБОР
	|		КОГДА НЕ ВТДанныеИзРеестра.Должность ССЫЛКА Справочник.Должности
	|			ТОГДА ЕСТЬNULL(Должности.Ссылка, ВТДанныеИзРеестра.Должность)
	|		ИНАЧЕ ВТДанныеИзРеестра.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА НЕ ВТДанныеИзРеестра.Подразделение ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЕСТЬNULL(ПодразделенияОрганизаций.Ссылка, ВТДанныеИзРеестра.Подразделение)
	|		ИНАЧЕ ВТДанныеИзРеестра.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВТДополнительныеДанныеИзКадровойИстории.КоличествоСтавок КАК КоличествоСтавок,
	|	ВТДанныеИзРеестра.ДокументОснование КАК ДокументОснование,
	|	ВТДанныеИзРеестра.НомерПриказа КАК НомерПриказаНачалаЗаписи,
	|	ВТДанныеИзРеестра.Дата КАК ПериодЗаписи,
	|	ВТДанныеИзРеестра.Основание КАК Основание
	|ИЗ
	|	ВТДанныеИзРеестра КАК ВТДанныеИзРеестра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеДанныеИзКадровойИстории КАК ВТДополнительныеДанныеИзКадровойИстории
	|		ПО ВТДанныеИзРеестра.Сотрудник = ВТДополнительныеДанныеИзКадровойИстории.Сотрудник
	|			И ВТДанныеИзРеестра.Дата = ВТДополнительныеДанныеИзКадровойИстории.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО ВТДанныеИзРеестра.Должность = Должности.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО ВТДанныеИзРеестра.Подразделение = ПодразделенияОрганизаций.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ПериодЗаписи";
	
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
	
	МетаданныеДокумента = Параметры.Ссылка.Метаданные();
	РеквизитыТЧ = МетаданныеДокумента.ТабличныеЧасти.ЛичноеДело.Реквизиты;
	
	ТаблицаПериодов.Колонки.Добавить("ДокументОснованиеОкончания", 	РеквизитыТЧ.ДокументОснованиеОкончанияЗаписи.Тип); 
	ТаблицаПериодов.Колонки.Добавить("НомерПриказаОкончанияЗаписи", РеквизитыТЧ.НомерПриказаОкончанияЗаписи.Тип); 
	ТаблицаПериодов.Колонки.Добавить("ПериодОкончания", 			Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ВидСобытияОкончания", 		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	
	ТекСотрудник = Неопределено;
	Для Каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
		
		Если СтрокаТаблицыПериодов.Сотрудник <> ТекСотрудник Тогда
			ТекСотрудник = СтрокаТаблицыПериодов.Сотрудник;
		Иначе
			
			ПредыдущаяСтрока = ТаблицаПериодов[ТаблицаПериодов.Индекс(СтрокаТаблицыПериодов) - 1];
			
			Если СтрокаТаблицыПериодов.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				ПредыдущаяСтрока.ПериодОкончания 				= СтрокаТаблицыПериодов.ПериодЗаписи;
			Иначе
				ПредыдущаяСтрока.ПериодОкончания 				= НачалоДня(СтрокаТаблицыПериодов.ПериодЗаписи) - 1;
			КонецЕсли;
			
			ПредыдущаяСтрока.ВидСобытияОкончания 			= СтрокаТаблицыПериодов.ВидСобытия;   				
			ПредыдущаяСтрока.ДокументОснованиеОкончания 	= СтрокаТаблицыПериодов.ДокументОснование;
			ПредыдущаяСтрока.НомерПриказаОкончанияЗаписи 	= СтрокаТаблицыПериодов.НомерПриказаНачалаЗаписи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПериодов.Сотрудник КАК Сотрудник,
	|	ТаблицаПериодов.ВидЗанятости КАК ВидЗанятости,
	|	ТаблицаПериодов.ВидСобытия КАК ВидСобытия,
	|	ТаблицаПериодов.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	|	ТаблицаПериодов.Подразделение КАК Подразделение,
	|	ТаблицаПериодов.Должность КАК Должность,
	|	ТаблицаПериодов.КоличествоСтавок КАК КоличествоСтавок,
	|	ТаблицаПериодов.ДокументОснование КАК ДокументОснование,
	|	ТаблицаПериодов.НомерПриказаНачалаЗаписи КАК НомерПриказаНачалаЗаписи,
	|	ТаблицаПериодов.ПериодЗаписи КАК ПериодЗаписи,
	|	ТаблицаПериодов.ПериодОкончания КАК ПериодОкончания,
	|	ТаблицаПериодов.ДокументОснованиеОкончания КАК ДокументОснованиеОкончания,
	|	ТаблицаПериодов.НомерПриказаОкончанияЗаписи КАК НомерПриказаОкончанияЗаписи,
	|	ТаблицаПериодов.ВидСобытияОкончания КАК ВидСобытияОкончания
	|ПОМЕСТИТЬ ВТКадровыеПериодыРаботы
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|ГДЕ
	|	ТаблицаПериодов.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТКадровыеПериодыРаботы.ПериодОкончания, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаАктуальности
	|		ИНАЧЕ ВТКадровыеПериодыРаботы.ПериодОкончания
	|	КОНЕЦ КАК Период,
	|	ВТКадровыеПериодыРаботы.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТОтборовСотрудников
	|ИЗ
	|	ВТКадровыеПериодыРаботы КАК ВТКадровыеПериодыРаботы
	|ГДЕ
	|	ВТКадровыеПериодыРаботы.ПериодЗаписи <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Выполнить();
	
	// Отношение сотрудников к воинской Службы по периодам + приказы об увольнении для получения СтатьиТКРФ.
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц,
			"ВТОтборовСотрудников",
			"Сотрудник,Период");
	
	ПереченьИнформацииОСотруднике = "ВоинскийУчетОтношениеКВоинскойОбязанности, ПриказОбУвольнении";
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, ПереченьИнформацииОСотруднике);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеПериодыРаботы.Сотрудник,
	|	КадровыеПериодыРаботы.ДокументОснование КАК ДокументОснованиеНачалаЗаписи,
	|	КадровыеПериодыРаботы.НомерПриказаНачалаЗаписи КАК НомерПриказаНачалаЗаписи,
	|	ВЫБОР
	|		КОГДА ХарактеристикаОснованийНачалаЗаписи.Сотрудник ЕСТЬ NULL 
	|				ИЛИ ХарактеристикаОснованийНачалаЗаписи.ТипНачалаЗаписи = ЗНАЧЕНИЕ(Справочник.ЭлементыКлассификаторовМедРегистра.ПустаяСсылка)
	|			ТОГДА ХарактеристикиТипНачалаЗаписиПоМедРегистру.Характеристика
	|		ИНАЧЕ ХарактеристикаОснованийНачалаЗаписи.ТипНачалаЗаписи
	|	КОНЕЦ КАК ТипНачалаЗаписиХарактеристика,
	|	ВЫБОР
	|		КОГДА ХарактеристикаОснованийНачалаЗаписи.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ХарактеристикиРежимРаботыПоМедРегистру.Характеристика
	|		ИНАЧЕ ХарактеристикаОснованийНачалаЗаписи.РежимРаботы
	|	КОНЕЦ КАК РежимРаботыХарактеристика,
	|	КадровыеПериодыРаботы.ДокументОснованиеОкончания КАК ДокументОснованиеОкончанияЗаписи,
	|	КадровыеПериодыРаботы.НомерПриказаОкончанияЗаписи КАК НомерПриказаОкончанияЗаписи,
	|	ВЫБОР
	|		КОГДА ХарактеристикаОснованийОкончаниеЗаписи.Сотрудник ЕСТЬ НЕ NULL 
	|			ТОГДА ХарактеристикаОснованийОкончаниеЗаписи.ТипОкончанияЗаписи
	|		КОГДА КадровыеПериодыРаботы.ВидСобытияОкончания = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И ХарактеристикиСтатьиТКРФ.Характеристика ЕСТЬ НЕ NULL 
	|			ТОГДА ХарактеристикиСтатьиТКРФ.Характеристика
	|		ИНАЧЕ ХарактеристикиТипОкончанияЗаписиПоМедРегистру.Характеристика
	|	КОНЕЦ КАК ТипОкончанияЗаписиХарактеристика,
	|	ХарактеристикиВидМППоМедРегистру.Характеристика КАК ВидМедицинскойПомощиХарактеристика,
	|	ХарактеристикиУсловияМППоМедРегистру.Характеристика КАК УсловияМедицинскойПомощиХарактеристика,
	|	ХарактеристикиВидДолжностиПоМедРегистру.Характеристика КАК ВидДолжностиХарактеристика,
	|	ХарактеристикиТипПодразделенияПоМедРегистру.Характеристика КАК ТипПодразделенияХарактеристика,
	|	ВЫРАЗИТЬ(КадроваяДанныеСотрудников.ПриказОбУвольнении КАК Документ.Увольнение).СтатьяТКРФ КАК СтатьяТКРФ,
	|	ХарактеристикиСтатьиТКРФ.Характеристика КАК ПричинаУвольненияПоМедРегистру,
	|	КадровыеПериодыРаботы.ВидСобытия КАК ВидСобытияДляПроверки,
	|	КадровыеПериодыРаботы.ПериодЗаписи КАК ДатаНачалаЗаписи,
	|	КадровыеПериодыРаботы.ПериодОкончания КАК ДатаОкончанияЗаписи,
	|	ПодразделенияОрганизаций.Наименование КАК НаименованиеПодразделения,
	|	ХарактеристикиОтношениеКВУПоМедРегистру.Характеристика КАК ОтношениеКВоеннойСлужбеХарактеристика,
	|	КадровыеПериодыРаботы.КоличествоСтавок КАК КоличествоСтавок,
	|	ХарактеристикиТипЗанятияДолжностиПоМедРегистру.Характеристика КАК ТипЗанятияДолжностиХарактеристика,
	|	ХарактеристикиДолжностьПоМедРегистру.Характеристика КАК ДолжностьХарактеристика,
	|	ВЫБОР
	|		КОГДА ХарактеристикаОснованийНачалаЗаписи.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ХарактеристикиТипНачалаЗаписиДопПоМедРегистру.Характеристика
	|		ИНАЧЕ ХарактеристикаОснованийНачалаЗаписи.Прибыл
	|	КОНЕЦ КАК ПрибылХарактеристика,
	|	ВЫБОР
	|		КОГДА ХарактеристикаОснованийНачалаЗаписи.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ХарактеристикиТипНачалаЗаписиВнутреннееПеремещениеПоМедРегистру.Характеристика
	|		ИНАЧЕ ХарактеристикаОснованийНачалаЗаписи.ДвижениеКадровНачало
	|	КОНЕЦ КАК ДвижениеКадровНачалоХарактеристика,
	|	ХарактеристикаОснованийНачалаЗаписи.ЦелевойНабор КАК ПрибылЦелевойНаборХарактеристика,
	|	ХарактеристикаОснованийНачалаЗаписи.ВидОбучения КАК ПрибылПослеОбученияХарактеристика,
	|	ХарактеристикаОснованийНачалаЗаписи.СубъектРФ КАК ПрибылИзДругогоСубъектаРФ,
	|	ХарактеристикаОснованийНачалаЗаписи.Страна КАК ПрибылИзСтраныХарактеристика,
	|	ВЫБОР
	|		КОГДА ХарактеристикаОснованийОкончаниеЗаписи.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ХарактеристикиТипОкончанияЗаписиВнутреннееПеремещение.Характеристика
	|		ИНАЧЕ ХарактеристикаОснованийОкончаниеЗаписи.ДвижениеКадровОкончание
	|	КОНЕЦ КАК ДвижениеКадровОкончаниеХарактеристика,
	|	ХарактеристикаОснованийОкончаниеЗаписи.ОснованиеУвольнения КАК ОснованиеУвольненияХарактеристика
	|ИЗ
	|	ВТКадровыеПериодыРаботы КАК КадровыеПериодыРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадроваяДанныеСотрудников
	|		ПО КадровыеПериодыРаботы.Сотрудник = КадроваяДанныеСотрудников.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(КадровыеПериодыРаботы.ПериодОкончания, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &ДатаАктуальности
	|				ИНАЧЕ КадровыеПериодыРаботы.ПериодОкончания
	|			КОНЕЦ = КадроваяДанныеСотрудников.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиВидМППоМедРегистру
	|		ПО КадровыеПериодыРаботы.Подразделение = ХарактеристикиВидМППоМедРегистру.Объект
	|			И (ХарактеристикиВидМППоМедРегистру.Классификатор = &КлассификаторВидМП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиУсловияМППоМедРегистру
	|		ПО КадровыеПериодыРаботы.Подразделение = ХарактеристикиУсловияМППоМедРегистру.Объект
	|			И (ХарактеристикиУсловияМППоМедРегистру.Классификатор = &КлассификаторУсловияМП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиВидДолжностиПоМедРегистру
	|		ПО КадровыеПериодыРаботы.Должность = ХарактеристикиВидДолжностиПоМедРегистру.Объект
	|			И (ХарактеристикиВидДолжностиПоМедРегистру.Классификатор = &КлассификаторВидДолжности)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиТипПодразделенияПоМедРегистру
	|		ПО КадровыеПериодыРаботы.Подразделение = ХарактеристикиТипПодразделенияПоМедРегистру.Объект
	|			И (ХарактеристикиТипПодразделенияПоМедРегистру.Классификатор = &КлассификаторТипПодразделения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиТипНачалаЗаписиПоМедРегистру
	|		ПО КадровыеПериодыРаботы.ВидСобытия = ХарактеристикиТипНачалаЗаписиПоМедРегистру.Объект
	|			И (ХарактеристикиТипНачалаЗаписиПоМедРегистру.Классификатор = &КлассификаторТипНачалаЗаписи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиТипОкончанияЗаписиПоМедРегистру
	|		ПО КадровыеПериодыРаботы.ВидСобытияОкончания = ХарактеристикиТипОкончанияЗаписиПоМедРегистру.Объект
	|			И (ХарактеристикиТипОкончанияЗаписиПоМедРегистру.Классификатор = &КлассификаторТипОкончанияЗаписи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиРежимРаботыПоМедРегистру
	|		ПО КадровыеПериодыРаботы.ВидЗанятости = ХарактеристикиРежимРаботыПоМедРегистру.Объект
	|			И (ХарактеристикиРежимРаботыПоМедРегистру.Классификатор = &КлассификаторРежимРаботы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО КадровыеПериодыРаботы.Подразделение = ПодразделенияОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиОтношениеКВУПоМедРегистру
	|		ПО (КадроваяДанныеСотрудников.ВоинскийУчетОтношениеКВоинскойОбязанности = ХарактеристикиОтношениеКВУПоМедРегистру.Объект)
	|			И (ХарактеристикиОтношениеКВУПоМедРегистру.Классификатор = &КлассификаторОтношениеКВоеннойСлужбе)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиСтатьиТКРФ
	|		ПО (ВЫРАЗИТЬ(КадроваяДанныеСотрудников.ПриказОбУвольнении КАК Документ.Увольнение).СтатьяТКРФ = ХарактеристикиСтатьиТКРФ.Объект)
	|			И (ХарактеристикиСтатьиТКРФ.Классификатор = &КлассификаторТипОкончанияЗаписи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиТипЗанятияДолжностиПоМедРегистру
	|		ПО КадровыеПериодыРаботы.ВидЗанятости = ХарактеристикиТипЗанятияДолжностиПоМедРегистру.Объект
	|			И (ХарактеристикиТипЗанятияДолжностиПоМедРегистру.Классификатор = &КлассификаторТипЗанятияДолжности)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиДолжностьПоМедРегистру
	|		ПО КадровыеПериодыРаботы.Должность = ХарактеристикиДолжностьПоМедРегистру.Объект
	|			И (ХарактеристикиДолжностьПоМедРегистру.Классификатор = &КлассификаторДолжность)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиКадровыхСобытийПоМедРегистру КАК ХарактеристикаОснованийНачалаЗаписи
	|		ПО КадровыеПериодыРаботы.ДокументОснование = ХарактеристикаОснованийНачалаЗаписи.ДокументОснование
	|			И КадровыеПериодыРаботы.Сотрудник = ХарактеристикаОснованийНачалаЗаписи.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиКадровыхСобытийПоМедРегистру КАК ХарактеристикаОснованийОкончаниеЗаписи
	|		ПО КадровыеПериодыРаботы.ДокументОснованиеОкончания = ХарактеристикаОснованийОкончаниеЗаписи.ДокументОснование
	|			И КадровыеПериодыРаботы.Сотрудник = ХарактеристикаОснованийОкончаниеЗаписи.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиТипНачалаЗаписиДопПоМедРегистру
	|		ПО КадровыеПериодыРаботы.ВидСобытия = ХарактеристикиТипНачалаЗаписиДопПоМедРегистру.Объект
	|			И (ХарактеристикиТипНачалаЗаписиПоМедРегистру.Классификатор = &КлассификаторТипНачалаЗаписиДоп)
	|			И (КадровыеПериодыРаботы.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиТипНачалаЗаписиВнутреннееПеремещениеПоМедРегистру
	|		ПО КадровыеПериодыРаботы.ВидСобытия = ХарактеристикиТипНачалаЗаписиВнутреннееПеремещениеПоМедРегистру.Объект
	|			И (ХарактеристикиТипНачалаЗаписиВнутреннееПеремещениеПоМедРегистру.Классификатор = &КлассификаторТипНачалаЗаписиВнутреннееПеремещение)
	|			И (КадровыеПериодыРаботы.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиТипОкончанияЗаписиВнутреннееПеремещение
	|		ПО КадровыеПериодыРаботы.ВидСобытияОкончания = ХарактеристикиТипОкончанияЗаписиВнутреннееПеремещение.Объект
	|			И (ХарактеристикиТипОкончанияЗаписиВнутреннееПеремещение.Классификатор = &КлассификаторТипОкончанияЗаписиВнутреннееПеремещение)";
	
	Запрос.УстановитьПараметр("КлассификаторВидМП",						Справочники.КлассификаторыМедРегистра.ArrayOfMedicalCare);
	Запрос.УстановитьПараметр("КлассификаторУсловияМП",					Справочники.КлассификаторыМедРегистра.ArrayOfMedicalCondition);
	Запрос.УстановитьПараметр("КлассификаторВидДолжности",				Справочники.КлассификаторыМедРегистра.ArrayOfPosition);
	Запрос.УстановитьПараметр("КлассификаторТипПодразделения",			Справочники.КлассификаторыМедРегистра.ArrayOfSubdivision);
	Запрос.УстановитьПараметр("КлассификаторТипНачалаЗаписи",			Справочники.КлассификаторыМедРегистра.ArrayOfRecordTypeIn);
	Запрос.УстановитьПараметр("КлассификаторТипОкончанияЗаписи",		Справочники.КлассификаторыМедРегистра.ArrayOfRecordTypeOut);
	Запрос.УстановитьПараметр("КлассификаторРежимРаботы",				Справочники.КлассификаторыМедРегистра.ArrayOfRegime);
	Запрос.УстановитьПараметр("КлассификаторОтношениеКВоеннойСлужбе", 	Справочники.КлассификаторыМедРегистра.ArrayOfMilitary);
	Запрос.УстановитьПараметр("КлассификаторТипЗанятияДолжности",		Справочники.КлассификаторыМедРегистра.ArrayOfPositionType);
	Запрос.УстановитьПараметр("КлассификаторДолжность",					Справочники.КлассификаторыМедРегистра.ArrayOfPost);
	Запрос.УстановитьПараметр("КлассификаторТипНачалаЗаписиДоп",		Справочники.КлассификаторыМедРегистра.ArrayOfRecordTypeInAdd);
	Запрос.УстановитьПараметр("КлассификаторТипНачалаЗаписиВнутреннееПеремещение",	  Справочники.КлассификаторыМедРегистра.ArrayOfRecordTypeMoveInOrg);
	Запрос.УстановитьПараметр("КлассификаторТипОкончанияЗаписиВнутреннееПеремещение", Справочники.КлассификаторыМедРегистра.ArrayOfRecordTypeMoveOutOrg);
	
	ДанныеДляЗаполнения.ЛичноеДело = Запрос.Выполнить().Выгрузить();

#КонецОбласти // ЛичноеДело

#Область Неявки_ОтпускаИКомандировки
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиПоМедРегистру.Объект КАК Состояние
	|ИЗ
	|	ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиПоМедРегистру
	|ГДЕ
	|	(ХарактеристикиПоМедРегистру.Классификатор = &КлассификаторНевыплаты
	|			ИЛИ ХарактеристикиПоМедРегистру.Классификатор = &КлассификаторОтпускаИКомандировки)
	|	И ТИПЗНАЧЕНИЯ(ХарактеристикиПоМедРегистру.Объект) = ТИП(Перечисление.СостоянияСотрудника)
	|	И НЕ ХарактеристикиПоМедРегистру.Объект В (&СостояниеРаботает)";
	
	Запрос.УстановитьПараметр("КлассификаторНевыплаты", Справочники.КлассификаторыМедРегистра.ArrayOfSkipPaymentReason);
	Запрос.УстановитьПараметр("КлассификаторОтпускаИКомандировки", Справочники.КлассификаторыМедРегистра.ArrayOfAbsenceType);
	
	СостоянияРабота = Новый Массив;
	СостоянияРабота.Добавить(Перечисления.СостоянияСотрудника.Работа);
	СостоянияРабота.Добавить(Перечисления.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком);
	Запрос.УстановитьПараметр("СостояниеРаботает", СостоянияРабота);
	
	Состояния = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Состояние");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Сотрудник
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
	
	СотрудникиДляСостояния = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"); 
	СостоянияСотрудников.СоздатьВТСостоянияСотрудников(МенеджерВременныхТаблиц, СотрудникиДляСостояния, Состояния, , ДатаАктуальности);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияСотрудников.Сотрудник,
	|	НеявкиХарактеристикиПоМедРегистру.Характеристика КАК СостояниеХарактеристика,
	|	СостоянияСотрудников.Начало КАК ДатаНачала,
	|	СостоянияСотрудников.Окончание КАК ДатаОкончания
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК НеявкиХарактеристикиПоМедРегистру
	|		ПО СостоянияСотрудников.Состояние = НеявкиХарактеристикиПоМедРегистру.Объект
	|			И (НеявкиХарактеристикиПоМедРегистру.Классификатор = &КлассификаторНевыплаты)
	|ГДЕ
	|	НЕ НеявкиХарактеристикиПоМедРегистру.Характеристика ЕСТЬ NULL
	|
	|;
	|
	|ВЫБРАТЬ
	|	СостоянияСотрудников.Сотрудник,
	|	ОтпускаИКомандировкиХарактеристикиПоМедРегистру.Характеристика КАК СостояниеХарактеристика,
	|	СостоянияСотрудников.Начало КАК ДатаНачала,
	|	СостоянияСотрудников.Окончание КАК ДатаОкончания
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ОтпускаИКомандировкиХарактеристикиПоМедРегистру
	|		ПО СостоянияСотрудников.Состояние = ОтпускаИКомандировкиХарактеристикиПоМедРегистру.Объект
	|			И (ОтпускаИКомандировкиХарактеристикиПоМедРегистру.Классификатор = &КлассификаторОтпускаИКомандировки)
	|ГДЕ
	|	НЕ ОтпускаИКомандировкиХарактеристикиПоМедРегистру.Характеристика ЕСТЬ NULL";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВсегоРезультатов = Результаты.Количество();
	
	ДанныеДляЗаполнения.Неявки = Результаты[ВсегоРезультатов - 2].Выгрузить();
	ДанныеДляЗаполнения.Невыходы = Результаты[ВсегоРезультатов - 1].Выгрузить();

#КонецОбласти

#Область ФактическиОтработаноЧасов
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры.Свойство("ДатаНачалаРасчетаФактическогоВремени") Тогда
		ДатаНачалаРасчетаФактическогоВремени = Параметры.ДатаНачалаРасчетаФактическогоВремени;
	Иначе
		ДатаНачалаРасчетаФактическогоВремени = '00010101000000';
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаОкончанияРасчетаФактическогоВремени") Тогда
		ДатаОкончанияРасчетаФактическогоВремени = Параметры.ДатаОкончанияРасчетаФактическогоВремени;
	Иначе
		ДатаОкончанияРасчетаФактическогоВремени = ДатаАктуальности;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтработанноеВремяПоСотрудникамОбороты.Сотрудник КАК Сотрудник,
	|	ОтработанноеВремяПоСотрудникамОбороты.Период КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ОтработанноеВремяПоСотрудникамОбороты.Период, МЕСЯЦ) КАК ДатаОкончания,
	|	ОтработанноеВремяПоСотрудникамОбороты.ОтработаноЧасовОборот КАК КоличествоЧасов
	|ИЗ
	|	РегистрНакопления.ОтработанноеВремяПоСотрудникам.Обороты(
	|			НАЧАЛОПЕРИОДА(&ДатаНачалаРасчетаФактическогоВремени, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&ДатаОкончанияРасчетаФактическогоВремени, ДЕНЬ),
	|			Месяц,
	|			Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СотрудникиОрганизации.Сотрудник
	|					ИЗ
	|						ВТСотрудникиОрганизации КАК СотрудникиОрганизации)
	|				И Начисление.ЗачетНормыВремени
	|				И Начисление.ЗачетОтработанногоВремени) КАК ОтработанноеВремяПоСотрудникамОбороты
	|ГДЕ
	|	ОтработанноеВремяПоСотрудникамОбороты.ОтработаноЧасовОборот > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачалаРасчетаФактическогоВремени", ДатаНачалаРасчетаФактическогоВремени);
	Запрос.УстановитьПараметр("ДатаОкончанияРасчетаФактическогоВремени", ДатаОкончанияРасчетаФактическогоВремени);
	
	ДанныеДляЗаполнения.ФактическиОтработанноеВремя = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
#КонецОбласти

	Параметры.ДанныеДляЗаполнения = ДанныеДляЗаполнения;
	ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);
	
КонецПроцедуры	

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт 
	
	ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
	ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
	
	ОписаниеВыгруженногоФайла.Владелец = Ссылка;
	ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
	ОписаниеВыгруженногоФайла.ПроверятьCheckXML = Ложь;
	ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Ложь;
	
	ВыгруженныеФайлы = Новый Массив;
	ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	
	Возврат ВыгруженныеФайлы;
	
КонецФункции

#Область ОбязательныеПоля

Функция ОписаниеПоля(Имя, Представление, ЭтоСтрока = Ложь, БезусловнаяОтметкаНезаполненого = Истина)
	
	ОписаниеПоля = Новый Структура();
	ОписаниеПоля.Вставить("Имя",						Имя);
	ОписаниеПоля.Вставить("Представление",				Представление);
	ОписаниеПоля.Вставить("ОпределяющееПоле",			ОписаниеОпределяющегоПоля("", ));
	ОписаниеПоля.Вставить("ЭтоСтрока",					ЭтоСтрока);
	ОписаниеПоля.Вставить("ОтметкаНезаполненного",		БезусловнаяОтметкаНезаполненого);
	
	Возврат ОписаниеПоля;
	
КонецФункции

Функция ОписаниеОпределяющегоПоля(Имя, Знач Значения = Неопределено)
	
	Если ТипЗнч(Значения) <> Тип("Массив") Тогда
		Значения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значения);
	КонецЕсли;
	
	Возврат Новый Структура("Имя, Значения", Имя, Значения)
	
КонецФункции

Функция ОписаниеПоляТипаСтрока(Имя, Представление)
	
	Возврат ОписаниеПоля(Имя, Представление, Истина)
	
КонецФункции

Функция ПоляПроверкиЛичногоДела()
	
	КлючевыеХарактеристики = Справочники.ЭлементыКлассификаторовМедРегистра.КлючевыеХарактеристикиКадровойИстории();
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("ВидДолжностиХарактеристика",	"Вид должности"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДолжностьХарактеристика",		"Должность"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаНачалаЗаписи",				"Дата начала записи"));
	ПоляПроверки.Добавить(ОписаниеПоля("ТипНачалаЗаписиХарактеристика",	"Тип начала записи"));
	
	ОписаниеПоля = ОписаниеПоля("ДвижениеКадровНачалоХарактеристика", "Вн. движение кадров (Начало)");
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ТипНачалаЗаписиХарактеристика", КлючевыеХарактеристики.НачалоВнутреннееПеремещение);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	ОписаниеПоля = ОписаниеПоля("ПрибылХарактеристика", "Прибыл");
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ТипНачалаЗаписиХарактеристика", КлючевыеХарактеристики.Прием);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	ОписаниеПоля = ОписаниеПоля("ПрибылПослеОбученияХарактеристика", "После");
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ПрибылХарактеристика", КлючевыеХарактеристики.ПриемПослеОбучения);
	ПоляПроверки.Добавить(ОписаниеПоля);

	ОписаниеПоля = ОписаниеПоля("ПрибылЦелевойНаборХарактеристика", "Целевой набор");
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ПрибылХарактеристика", КлючевыеХарактеристики.ПриемПослеОбучения);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	ОписаниеПоля = ОписаниеПоля("ПрибылИзДругогоСубъектаРФ", "Субъект РФ (тип начала записи)");
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ПрибылХарактеристика", КлючевыеХарактеристики.ПриемИзДругогоСубъектаРФ);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	ОписаниеПоля = ОписаниеПоля("ПрибылИзСтраныХарактеристика", "Страна (тип начала записи)");
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ПрибылХарактеристика", КлючевыеХарактеристики.ПриемИзДругойСтраны);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("НомерПриказаНачалаЗаписи", 	"№ приказа начала записи"));
	
	ПоляПроверки.Добавить(ОписаниеПоля("РежимРаботыХарактеристика", "Режим работы")); 
	ПоляПроверки.Добавить(ОписаниеПоля("ОтношениеКВоеннойСлужбеХарактеристика", "Отношение к военной службе"));
	ПоляПроверки.Добавить(ОписаниеПоля("ВидМедицинскойПомощиХарактеристика", "Вид МП"));
	ПоляПроверки.Добавить(ОписаниеПоля("УсловияМедицинскойПомощиХарактеристика", "Условия МП"));
	
	ПоляПроверки.Добавить(ОписаниеПоля("ТипЗанятияДолжностиХарактеристика", "Тип занятия должности"));
	ПоляПроверки.Добавить(ОписаниеПоля("КоличествоСтавок", "Ставка"));
	
	// Поля окончания записи
	ТипыОкончанияЗаписи = Новый Массив;
	ТипыОкончанияЗаписи.Добавить(КлючевыеХарактеристики.УволенПоУсловиямДоговора);
	ТипыОкончанияЗаписи.Добавить(КлючевыеХарактеристики.УволенПоСобственномуЖеланию);
	ТипыОкончанияЗаписи.Добавить(КлючевыеХарактеристики.ОкончаниеВнутреннееПеремещение);
	ТипыОкончанияЗаписи.Добавить(КлючевыеХарактеристики.ОкончаниеТрудовогоДоговора);
	
	ОписаниеПоля = ОписаниеПоля("ДатаОкончанияЗаписи",				"Дата окончания записи", , Ложь);
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ТипОкончанияЗаписиХарактеристика", ТипыОкончанияЗаписи);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	ОписаниеПоля = ОписаниеПоля("ДвижениеКадровОкончаниеХарактеристика",	"Вн. движение кадров (Окончание)", , Ложь);
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ТипОкончанияЗаписиХарактеристика", КлючевыеХарактеристики.ОкончаниеВнутреннееПеремещение);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	ОписаниеПоля = ОписаниеПоля("НомерПриказаОкончанияЗаписи",	"№ приказа окончания записи", Истина, Ложь);
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ТипОкончанияЗаписиХарактеристика", КлючевыеХарактеристики.ОкончаниеВнутреннееПеремещение);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	МассивОснований = Новый Массив();
	МассивОснований.Добавить(КлючевыеХарактеристики.УволенПоУсловиямДоговора);
	МассивОснований.Добавить(КлючевыеХарактеристики.УволенПоСобственномуЖеланию);
	
	ОписаниеПоля = ОписаниеПоля("ОснованиеУвольненияХарактеристика",	"Выбыл", , Ложь);
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ТипОкончанияЗаписиХарактеристика", МассивОснований);
	ПоляПроверки.Добавить(ОписаниеПоля);

	ОписаниеПоля = ОписаниеПоля("ВыбылВДругойСубъектРФ",	"Субъект РФ (тип окончания записи)", , Ложь);
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ОснованиеУвольненияХарактеристика", КлючевыеХарактеристики.ВыбылВДругойСубъектРФ);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	ОписаниеПоля = ОписаниеПоля("ВыбылВСтрануХарактеристика",	"Страна (тип окончания записи)", , Ложь);
	ОписаниеПоля.ОпределяющееПоле = ОписаниеОпределяющегоПоля("ОснованиеУвольненияХарактеристика", КлючевыеХарактеристики.ВыбылВДругуюСтрану);
	ПоляПроверки.Добавить(ОписаниеПоля);
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиОбразования()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("УчебноеЗаведениеХарактеристика","Учебное заведение"));
	ПоляПроверки.Добавить(ОписаниеПоля("СпециальностьХарактеристика",	"Специальность"));
	ПоляПроверки.Добавить(ОписаниеПоля("ВидОбразованияХарактеристика",	"Тип образования"));

	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиПереподготовки()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("УчебноеЗаведениеХарактеристика","Учебное заведение"));
	ПоляПроверки.Добавить(ОписаниеПоля("СпециальностьХарактеристика",	"Специальность"));
	ПоляПроверки.Добавить(ОписаниеПоля("КоличествоЧасов", 				"Количество часов"));
	ПоляПроверки.Добавить(ОписаниеПоля("ГодПрохождения", 				"Год прохождения"));
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиПовышенияКвалификации()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("УчебноеЗаведениеХарактеристика","Учебное заведение"));
	ПоляПроверки.Добавить(ОписаниеПоля("СпециальностьХарактеристика",	"Специальность"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("КоличествоЧасов", 	"Количество часов"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("НаименованиеКурса", 	"Цикл"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("Номер", 				"Номер удостоверения"));
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиПослевузовскогоОбразования()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("УчебноеЗаведениеХарактеристика","Базовая организация"));
	ПоляПроверки.Добавить(ОписаниеПоля("СпециальностьХарактеристика", 	"Специальность"));
	ПоляПроверки.Добавить(ОписаниеПоля("ВидОбразованияХарактеристика", 	"Тип образования"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаПолучения", 				"Дата получения документа"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("Номер", 				"Номер диплома"));
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиСертификатов()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("УчебноеЗаведениеХарактеристика","Учебное заведение"));
	ПоляПроверки.Добавить(ОписаниеПоля("СпециальностьХарактеристика", 	"Специальность"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаПолучения", 				"Дата получения"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("Номер", 				"Номер сертификата"));
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиКвалификационныхКатегорий()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("КвалификационнаяКатегорияХарактеристика","Категория"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаПрисвоения", "Дата присвоения"));
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиНеявкиНевыходы()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаНачала",	"Дата начала"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаОкончания", "Дата окончания"));
	ПоляПроверки.Добавить(ОписаниеПоля("СостояниеХарактеристика", "Состояние"));
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиОтработанногоВремени()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаНачала",	"Дата начала"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаОкончания", "Дата окончания"));
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ПоляПроверкиНаград()
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("НомерПриказа",	"Номер"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаПриказа",	"Дата"));
	ПоляПроверки.Добавить(ОписаниеПоля("НаградаХарактеристика",	"Номинация"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("Наименование","Название"));
	
	Возврат ПоляПроверки;
	
КонецФункции

Функция ОписанияОбязательныхПолейТаблиц() Экспорт
	
	ОписанияПолейТаблиц = Новый Структура();
	
	ОписанияПолейТаблиц.Вставить("КадроваяИстория", 			ПоляПроверкиЛичногоДела());
	ОписанияПолейТаблиц.Вставить("Образование", 				ПоляПроверкиОбразования());
	ОписанияПолейТаблиц.Вставить("Переподготовка", 				ПоляПроверкиПереподготовки());
	ОписанияПолейТаблиц.Вставить("ПовышениеКвалификации", 		ПоляПроверкиПовышенияКвалификации());
	ОписанияПолейТаблиц.Вставить("ПослевузовскоеОбразование", 	ПоляПроверкиПослевузовскогоОбразования());
	ОписанияПолейТаблиц.Вставить("Сертификаты", 				ПоляПроверкиСертификатов());
	ОписанияПолейТаблиц.Вставить("КвалификационныеКатегории", 	ПоляПроверкиКвалификационныхКатегорий());
	ОписанияПолейТаблиц.Вставить("Неявки", 						ПоляПроверкиНеявкиНевыходы());
	ОписанияПолейТаблиц.Вставить("Невыходы", 					ПоляПроверкиНеявкиНевыходы());
	ОписанияПолейТаблиц.Вставить("ФактическиОтработанноеВремя", ПоляПроверкиОтработанногоВремени());
	ОписанияПолейТаблиц.Вставить("Награды", 					ПоляПроверкиНаград());
	
	Возврат Новый ФиксированнаяСтруктура(ОписанияПолейТаблиц);
	
КонецФункции

Функция ТаблицыРедактируемыеВТекущихДанных() Экспорт
	
	МассивТаблиц = Новый Массив();
	
	МассивТаблиц.Добавить("КадроваяИстория");
	МассивТаблиц.Добавить("Образование");
	МассивТаблиц.Добавить("Переподготовка");
	МассивТаблиц.Добавить("ПовышениеКвалификации");
	МассивТаблиц.Добавить("ПослевузовскоеОбразование");
	МассивТаблиц.Добавить("Сертификаты");
	МассивТаблиц.Добавить("КвалификационныеКатегории");
	
	Возврат МассивТаблиц;
	
КонецФункции

Функция ОписанияОбязательныхПолей() Экспорт
	
	ПоляПроверки = Новый Массив();
	
	ПоляПроверки.Добавить(ОписаниеПоля("Пол",			"Пол"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДатаРождения", 	"ДатаРождения"));
	ПоляПроверки.Добавить(ОписаниеПоля("ДокументВидДокументаХарактеристика","Вид документа"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("ДокументСерия", 			"Серия"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("ДокументНомер", 			"Номер"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("ДокументКемВыдан", 		"Кем выдан"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("ДокументДатаВыдачи",		"Дата выдачи"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("ТабельныйНомер",			"Табельный номер"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("СтраховойНомерПФР",		"СНИЛС"));
	ПоляПроверки.Добавить(ОписаниеПоляТипаСтрока("АдресПоПропискеПредставление", "Адрес по прописке"));
	
	Возврат Новый ФиксированныйМассив(ПоляПроверки);
	
КонецФункции

#КонецОбласти

#Область ФормированиеXMLФайла

Процедура ОбработкаФормированияФайла(Объект) Экспорт
	
	ДанныеМедРаботников = ПолучитьДанныеМедРаботников(Объект);
	ТекстФайла = ТекстXMLМедРаботниковИзXDTO(ДанныеМедРаботников);
	ИмяФайлаДляМедРегистра =  Формат(ДанныеМедРаботников.ДатаДокумента, "ДФ='ддММгггг-ччмм'") + "-Employee.xml";
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Объект.Ссылка,ИмяФайлаДляМедРегистра, ТекстФайла, Ложь, "UTF-8");
	
КонецПроцедуры

Функция ПолучитьДанныеМедРаботников(Документ)

	ДанныеДляЗаполнения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	
#Область Сотрудники
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраСотрудники.Сотрудник,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ТабельныйНомер,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДатаСоставления,
	|	СведенияОРаботникахДляМедРегистраСотрудники.Фамилия,
	|	СведенияОРаботникахДляМедРегистраСотрудники.Имя,
	|	СведенияОРаботникахДляМедРегистраСотрудники.Отчество,
	|	СведенияОРаботникахДляМедРегистраСотрудники.Пол,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДатаРождения,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДатаСмерти,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДокументВидДокументаХарактеристика.Код КАК ДокументВидДокументаХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДокументВидДокументаХарактеристика.Наименование КАК ДокументВидДокументаХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДокументСерия,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДокументНомер,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДокументДатаВыдачи,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДокументКемВыдан,
	|	СведенияОРаботникахДляМедРегистраСотрудники.СтраховойНомерПФР,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ИНН,
	|	СведенияОРаботникахДляМедРегистраСотрудники.Телефон,
	|	СведенияОРаботникахДляМедРегистраСотрудники.СемейноеПоложениеХарактеристика.Код КАК СемейноеПоложениеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраСотрудники.СемейноеПоложениеХарактеристика.Наименование КАК СемейноеПоложениеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ГражданствоХарактеристика.Код КАК ГражданствоХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ГражданствоХарактеристика.Наименование КАК ГражданствоХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраСотрудники.IsRealPerson,
	|	СведенияОРаботникахДляМедРегистраСотрудники.НаличиеЛичногоАвтомобиля,
	|	СведенияОРаботникахДляМедРегистраСотрудники.НаличиеДетейМладше16Лет,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДатаРегистрации
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.Сотрудники КАК СведенияОРаботникахДляМедРегистраСотрудники
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраСотрудники.Ссылка = &Ссылка";
	
	ДанныеДляЗаполнения.Вставить("Сотрудники", Запрос.Выполнить().Выбрать());
		
#КонецОбласти
 	
#Область АдресаФизическихЛиц
	
	АдресаФизическихЛиц = Новый ТаблицаЗначений;
	АдресаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	АдресаФизическихЛиц.Колонки.Добавить("Страна", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("КодСтраны", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	АдресаФизическихЛиц.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(6)));
	АдресаФизическихЛиц.Колонки.Добавить("Регион", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("КодРегиона", Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(2)));
	АдресаФизическихЛиц.Колонки.Добавить("РегионСокращение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	АдресаФизическихЛиц.Колонки.Добавить("Район", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("РайонСокращение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	АдресаФизическихЛиц.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("ГородСокращение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	АдресаФизическихЛиц.Колонки.Добавить("НаселенныйПункт", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("НаселенныйПунктСокращение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	АдресаФизическихЛиц.Колонки.Добавить("Улица", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("УлицаСокращение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	АдресаФизическихЛиц.Колонки.Добавить("ТипДома", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("Дом", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	АдресаФизическихЛиц.Колонки.Добавить("ТипКорпуса", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("Корпус", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	АдресаФизическихЛиц.Колонки.Добавить("ТипКвартиры", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	АдресаФизическихЛиц.Колонки.Добавить("Квартира", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраСотрудники.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраСотрудники.АдресПоПрописке,
	|	СведенияОРаботникахДляМедРегистраСотрудники.ДатаРегистрации
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.Сотрудники КАК СведенияОРаботникахДляМедРегистраСотрудники
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраСотрудники.Ссылка = &Ссылка
	|	И НЕ СведенияОРаботникахДляМедРегистраСотрудники.АдресПоПрописке ПОДОБНО """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если АдресаФизическихЛиц.Найти(Выборка.ФизическоеЛицо, "ФизическоеЛицо") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КонтактнаяИнформация = ЗарплатаКадры.СтруктураАдресаИзXML(Выборка.АдресПоПрописке);
		НовыйАдрес = АдресаФизическихЛиц.Добавить();
		НовыйАдрес.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		ЗаполнитьЗначенияСвойств(НовыйАдрес, КонтактнаяИнформация);
		// Уберем Сокращения
		УберемСокращениеИзНаименования(НовыйАдрес, "Регион");
		УберемСокращениеИзНаименования(НовыйАдрес, "Район");
		УберемСокращениеИзНаименования(НовыйАдрес, "Город");
		УберемСокращениеИзНаименования(НовыйАдрес, "НаселенныйПункт");
		УберемСокращениеИзНаименования(НовыйАдрес, "Улица");
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Адреса", АдресаФизическихЛиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Адреса.ФизическоеЛицо,
	|	Адреса.Страна,
	|	Адреса.КодСтраны,
	|	Адреса.Индекс,
	|	Адреса.Регион,
	|	Адреса.КодРегиона,
	|	Адреса.РегионСокращение,
	|	Адреса.Район,
	|	Адреса.РайонСокращение,
	|	Адреса.Город,
	|	Адреса.ГородСокращение,
	|	Адреса.НаселенныйПункт,
	|	Адреса.НаселенныйПунктСокращение,
	|	Адреса.Улица,
	|	Адреса.УлицаСокращение,
	|	Адреса.ТипДома,
	|	Адреса.Дом,
	|	Адреса.ТипКорпуса,
	|	Адреса.Корпус,
	|	Адреса.ТипКвартиры,
	|	Адреса.Квартира
	|ПОМЕСТИТЬ ВТАдресаФизическихЛиц
	|ИЗ
	|	&Адреса КАК Адреса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТАдресаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТАдресаФизическихЛиц.Страна,
	|	ВТАдресаФизическихЛиц.КодСтраны,
	|	ВТАдресаФизическихЛиц.Индекс,
	|	ВТАдресаФизическихЛиц.Регион,
	|	ВТАдресаФизическихЛиц.КодРегиона,
	|	ВТАдресаФизическихЛиц.РегионСокращение,
	|	ВТАдресаФизическихЛиц.Район,
	|	ВТАдресаФизическихЛиц.РайонСокращение,
	|	ВТАдресаФизическихЛиц.Город,
	|	ВТАдресаФизическихЛиц.ГородСокращение,
	|	ВТАдресаФизическихЛиц.НаселенныйПункт,
	|	ВТАдресаФизическихЛиц.НаселенныйПунктСокращение,
	|	ВТАдресаФизическихЛиц.Улица,
	|	ВТАдресаФизическихЛиц.УлицаСокращение,
	|	ВТАдресаФизическихЛиц.ТипДома,
	|	ВТАдресаФизическихЛиц.Дом,
	|	ВТАдресаФизическихЛиц.ТипКорпуса,
	|	ВТАдресаФизическихЛиц.Корпус,
	|	ВТАдресаФизическихЛиц.ТипКвартиры,
	|	ВТАдресаФизическихЛиц.Квартира,
	|	КлассификаторРегион.КодКЛАДР КАК РегионКодКлассификатора,
	|	КлассификаторРайон.КодКЛАДР КАК РайонКодКлассификатора,
	|	КлассификаторГород.КодКЛАДР КАК ГородКодКлассификатора,
	|	КлассификаторНаселенныйПункт.КодКЛАДР КАК НаселенныйПунктКодКлассификатора
	|ИЗ
	|	ВТАдресаФизическихЛиц КАК ВТАдресаФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК КлассификаторРегион
	|		ПО (КлассификаторРегион.Уровень = 1)
	|			И (КлассификаторРегион.КодСубъектаРФ = ВТАдресаФизическихЛиц.КодРегиона)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК КлассификаторРайон
	|		ПО (КлассификаторРайон.Уровень = 3)
	|			И (КлассификаторРайон.КодСубъектаРФ = КлассификаторРегион.КодСубъектаРФ)
	|			И (КлассификаторРайон.Наименование = ВТАдресаФизическихЛиц.Район)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК КлассификаторГород
	|		ПО (КлассификаторГород.Уровень = 4)
	|			И (КлассификаторГород.КодСубъектаРФ = КлассификаторРегион.КодСубъектаРФ)
	|			И (КлассификаторГород.КодРайона = ЕСТЬNULL(КлассификаторРайон.КодРайона, 0))
	|			И (КлассификаторГород.Наименование = ВТАдресаФизическихЛиц.Город)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК КлассификаторНаселенныйПункт
	|		ПО (КлассификаторНаселенныйПункт.Уровень = 6)
	|			И (КлассификаторНаселенныйПункт.КодСубъектаРФ = КлассификаторРегион.КодСубъектаРФ)
	|			И (КлассификаторНаселенныйПункт.КодРайона = ЕСТЬNULL(КлассификаторРайон.КодРайона, 0))
	|			И (КлассификаторНаселенныйПункт.КодГорода = ЕСТЬNULL(КлассификаторГород.КодГорода, 0))
	|			И (КлассификаторНаселенныйПункт.Наименование = ВТАдресаФизическихЛиц.НаселенныйПункт)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо";
	
	ДанныеДляЗаполнения.Вставить("АдресаФизическихЛиц", Запрос.Выполнить().Выгрузить());
	
#КонецОбласти
	
#Область ЛичноеДело
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.Сотрудник,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.КоличествоСтавок,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДатаНачалаЗаписи,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДатаОкончанияЗаписи,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.НомерПриказаНачалаЗаписи,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.НомерПриказаОкончанияЗаписи,
	|	ВЫБОР
	|		КОГДА СведенияОРаботникахДляМедРегистраЛичноеДело.ДатаОкончанияЗаписи <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РАЗНОСТЬДАТ(СведенияОРаботникахДляМедРегистраЛичноеДело.ДатаНачалаЗаписи, СведенияОРаботникахДляМедРегистраЛичноеДело.ДатаОкончанияЗаписи, МЕСЯЦ)
	|		ИНАЧЕ РАЗНОСТЬДАТ(СведенияОРаботникахДляМедРегистраЛичноеДело.ДатаНачалаЗаписи, СведенияОРаботникахДляМедРегистраЛичноеДело.Ссылка.Дата, МЕСЯЦ)
	|	КОНЕЦ КАК ДлительностьТрудовыхОтношенийМесяцев,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ВидМедицинскойПомощиХарактеристика.Код КАК ВидМедицинскойПомощиХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ВидМедицинскойПомощиХарактеристика.Наименование КАК ВидМедицинскойПомощиХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.УсловияМедицинскойПомощиХарактеристика.Код КАК УсловияМедицинскойПомощиХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.УсловияМедицинскойПомощиХарактеристика.Наименование КАК УсловияМедицинскойПомощиХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ВидДолжностиХарактеристика.Код КАК ВидДолжностиХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ВидДолжностиХарактеристика.Наименование КАК ВидДолжностиХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипПодразделенияХарактеристика.Код КАК ТипПодразделенияХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипПодразделенияХарактеристика.Наименование КАК ТипПодразделенияХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипПодразделенияХарактеристика.Родитель.Код КАК ТипПодразделенияХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипНачалаЗаписиХарактеристика.Код КАК ТипНачалаЗаписиХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипНачалаЗаписиХарактеристика.Наименование КАК ТипНачалаЗаписиХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипОкончанияЗаписиХарактеристика.Код КАК ТипОкончанияЗаписиХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипОкончанияЗаписиХарактеристика.Наименование КАК ТипОкончанияЗаписиХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.РежимРаботыХарактеристика.Код КАК РежимРаботыХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.РежимРаботыХарактеристика.Наименование КАК РежимРаботыХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.НаименованиеПодразделения,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ОтношениеКВоеннойСлужбеХарактеристика.Код КАК ОтношениеКВоеннойСлужбеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ОтношениеКВоеннойСлужбеХарактеристика.Наименование КАК ОтношениеКВоеннойСлужбеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипЗанятияДолжностиХарактеристика.Код КАК ТипЗанятияДолжностиХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипЗанятияДолжностиХарактеристика.Наименование КАК ТипЗанятияДолжностиХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДолжностьХарактеристика.Код КАК ДолжностьХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДолжностьХарактеристика.Наименование КАК ДолжностьХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДолжностьХарактеристика.Родитель.Код КАК ДолжностьХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылХарактеристика.Код КАК ПрибылХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылХарактеристика.Наименование КАК ПрибылХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДвижениеКадровНачалоХарактеристика.Код КАК ДвижениеКадровНачалоХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДвижениеКадровНачалоХарактеристика.Наименование КАК ДвижениеКадровНачалоХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылПослеОбученияХарактеристика.Код КАК ПрибылПослеОбученияХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылПослеОбученияХарактеристика.Наименование КАК ПрибылПослеОбученияХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылЦелевойНаборХарактеристика.Код КАК ПрибылЦелевойНаборХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылЦелевойНаборХарактеристика.Наименование КАК ПрибылЦелевойНаборХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылИзСтраныХарактеристика.Код КАК ПрибылИзСтраныХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылИзСтраныХарактеристика.Наименование КАК ПрибылИзСтраныХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылИзДругогоСубъектаРФ.Код КАК ПрибылИзДругогоСубъектаРФКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылИзДругогоСубъектаРФ.Наименование КАК ПрибылИзДругогоСубъектаРФНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДвижениеКадровОкончаниеХарактеристика.Код КАК ДвижениеКадровОкончаниеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДвижениеКадровОкончаниеХарактеристика.Наименование КАК ДвижениеКадровОкончаниеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ОснованиеУвольненияХарактеристика.Код КАК ОснованиеУвольненияХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ОснованиеУвольненияХарактеристика.Наименование КАК ОснованиеУвольненияХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ВыбылВСтрануХарактеристика.Код КАК ВыбылВСтрануХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ВыбылВСтрануХарактеристика.Наименование КАК ВыбылВСтрануХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ВыбылВДругойСубъектРФ.Код КАК ВыбылВДругойСубъектРФКод,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ВыбылВДругойСубъектРФ.Наименование КАК ВыбылВДругойСубъектРФНаименование
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.ЛичноеДело КАК СведенияОРаботникахДляМедРегистраЛичноеДело
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.Ссылка = &Ссылка";
	
	ДанныеДляЗаполнения.Вставить("ЛичноеДело", Запрос.Выполнить().Выгрузить());
	
#КонецОбласти
	
#Область НаградыФизическихЛиц
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраНаграды.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраНаграды.Наименование,
	|	СведенияОРаботникахДляМедРегистраНаграды.НомерПриказа,
	|	СведенияОРаботникахДляМедРегистраНаграды.ДатаПриказа,
	|	СведенияОРаботникахДляМедРегистраНаграды.НаградаХарактеристика.Код КАК НаградаХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраНаграды.НаградаХарактеристика.Наименование КАК НаградаХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраНаграды.НаградаХарактеристика.Родитель.Код КАК НаградаХарактеристикаРодитель
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.Награды КАК СведенияОРаботникахДляМедРегистраНаграды
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраНаграды.Ссылка = &Ссылка";
	
	ДанныеДляЗаполнения.Вставить("Награды", Запрос.Выполнить().Выгрузить());
	
#КонецОбласти
	
#Область ОбразованиеФизическихЛиц
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраОбразование.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраОбразование.УчебноеЗаведениеХарактеристика.Код КАК УчебноеЗаведениеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраОбразование.УчебноеЗаведениеХарактеристика.Наименование КАК УчебноеЗаведениеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраОбразование.УчебноеЗаведениеХарактеристика.Родитель.Код КАК УчебноеЗаведениеХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраОбразование.ВидОбразованияХарактеристика.Код КАК ВидОбразованияХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраОбразование.ВидОбразованияХарактеристика.Наименование КАК ВидОбразованияХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраОбразование.СпециальностьХарактеристика.Код КАК СпециальностьХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраОбразование.СпециальностьХарактеристика.Наименование КАК СпециальностьХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраОбразование.СпециальностьХарактеристика.Родитель.Код КАК СпециальностьХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраОбразование.ГодОкончания,
	|	СведенияОРаботникахДляМедРегистраОбразование.Серия,
	|	СведенияОРаботникахДляМедРегистраОбразование.Номер,
	|	СведенияОРаботникахДляМедРегистраОбразование.СубъектРФЦелевогоНабораХарактеристика.Код КАК СубъектРФЦелевогоНабораХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраОбразование.СубъектРФЦелевогоНабораХарактеристика.Наименование КАК СубъектРФЦелевогоНабораХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраОбразование.СубъектРФЦелевогоНабораХарактеристика.Родитель.Код КАК СубъектРФЦелевогоНабораХарактеристикаРодитель,
	|	ВЫБОР
	|		КОГДА СведенияОРаботникахДляМедРегистраОбразование.СубъектРФЦелевогоНабораХарактеристика ЕСТЬ NULL 
	|				ИЛИ СведенияОРаботникахДляМедРегистраОбразование.СубъектРФЦелевогоНабораХарактеристика = ЗНАЧЕНИЕ(Справочник.ЭлементыКлассификаторовМедРегистра.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЦелевойНабор
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.Образование КАК СведенияОРаботникахДляМедРегистраОбразование
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраОбразование.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраПереподготовка.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.УчебноеЗаведениеХарактеристика.Код КАК УчебноеЗаведениеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.УчебноеЗаведениеХарактеристика.Наименование КАК УчебноеЗаведениеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.УчебноеЗаведениеХарактеристика.Родитель.Код КАК УчебноеЗаведениеХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.СпециальностьХарактеристика.Код КАК СпециальностьХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.СпециальностьХарактеристика.Наименование КАК СпециальностьХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.СпециальностьХарактеристика.Родитель.Код КАК СпециальностьХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.ГодПрохождения,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.Серия,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.Номер,
	|	СведенияОРаботникахДляМедРегистраПереподготовка.КоличествоЧасов
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.Переподготовка КАК СведенияОРаботникахДляМедРегистраПереподготовка
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраПереподготовка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.УчебноеЗаведениеХарактеристика.Код КАК УчебноеЗаведениеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.УчебноеЗаведениеХарактеристика.Наименование КАК УчебноеЗаведениеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.УчебноеЗаведениеХарактеристика.Родитель.Код КАК УчебноеЗаведениеХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.НаименованиеКурса,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.СпециальностьХарактеристика.Код КАК СпециальностьХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.СпециальностьХарактеристика.Наименование КАК СпециальностьХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.СпециальностьХарактеристика.Родитель.Код КАК СпециальностьХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.ГодПрохождения,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.Серия,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.Номер,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.ДатаПолучения,
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.КоличествоЧасов
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.ПовышениеКвалификации КАК СведенияОРаботникахДляМедРегистраПовышениеКвалификации
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраПовышениеКвалификации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.УчебноеЗаведениеХарактеристика.Код КАК УчебноеЗаведениеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.УчебноеЗаведениеХарактеристика.Наименование КАК УчебноеЗаведениеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.УчебноеЗаведениеХарактеристика.Родитель.Код КАК УчебноеЗаведениеХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.ВидОбразованияХарактеристика.Код КАК ВидОбразованияХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.ВидОбразованияХарактеристика.Наименование КАК ВидОбразованияХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.УченаяСтепеньХарактеристика.Код КАК УченаяСтепеньХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.УченаяСтепеньХарактеристика.Наименование КАК УченаяСтепеньХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.СпециальностьХарактеристика.Код КАК СпециальностьХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.СпециальностьХарактеристика.Наименование КАК СпециальностьХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.СпециальностьХарактеристика.Родитель.Код КАК СпециальностьХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.Начало,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.Окончание,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.Серия,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.Номер,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.ДатаПолучения,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.СубъектРФЦелевогоНабораХарактеристика.Код КАК СубъектРФЦелевогоНабораХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.СубъектРФЦелевогоНабораХарактеристика.Наименование КАК СубъектРФЦелевогоНабораХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.СубъектРФЦелевогоНабораХарактеристика.Родитель.Код КАК СубъектРФЦелевогоНабораХарактеристикаРодитель,
	|	ВЫБОР
	|		КОГДА СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.СубъектРФЦелевогоНабораХарактеристика ЕСТЬ NULL 
	|				ИЛИ СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.СубъектРФЦелевогоНабораХарактеристика = ЗНАЧЕНИЕ(Справочник.ЭлементыКлассификаторовМедРегистра.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЦелевойНабор
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.ПослевузовскоеОбразование КАК СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраПослевузовскоеОбразование.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраСертификаты.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраСертификаты.УчебноеЗаведениеХарактеристика.Код КАК УчебноеЗаведениеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраСертификаты.УчебноеЗаведениеХарактеристика.Наименование КАК УчебноеЗаведениеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраСертификаты.УчебноеЗаведениеХарактеристика.Родитель.Код КАК УчебноеЗаведениеХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраСертификаты.СпециальностьХарактеристика.Код КАК СпециальностьХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраСертификаты.СпециальностьХарактеристика.Наименование КАК СпециальностьХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраСертификаты.СпециальностьХарактеристика.Родитель.Код КАК СпециальностьХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраСертификаты.ДатаПолучения,
	|	СведенияОРаботникахДляМедРегистраСертификаты.Серия,
	|	СведенияОРаботникахДляМедРегистраСертификаты.Номер
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.Сертификаты КАК СведенияОРаботникахДляМедРегистраСертификаты
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраСертификаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.ФизическоеЛицо,
	|	СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.КвалификационнаяКатегорияХарактеристика.Код КАК КвалификационнаяКатегорияХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.КвалификационнаяКатегорияХарактеристика.Наименование КАК КвалификационнаяКатегорияХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.СпециальностьХарактеристика.Код КАК СпециальностьХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.СпециальностьХарактеристика.Наименование КАК СпециальностьХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.СпециальностьХарактеристика.Родитель.Код КАК СпециальностьХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.ДатаПрисвоения
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.КвалификационныеКатегории КАК СведенияОРаботникахДляМедРегистраКвалификационныеКатегории
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраКвалификационныеКатегории.Ссылка = &Ссылка";

	Результаты = Запрос.ВыполнитьПакет();
	ВсегоРезультатов = Результаты.Количество();
	
	ДанныеДляЗаполнения.Вставить("Образование", Результаты[ВсегоРезультатов - 6].Выгрузить());
	ДанныеДляЗаполнения.Вставить("Переподготовка", Результаты[ВсегоРезультатов - 5].Выгрузить());
	ДанныеДляЗаполнения.Вставить("ПовышениеКвалификации", Результаты[ВсегоРезультатов - 4].Выгрузить());
	ДанныеДляЗаполнения.Вставить("ПослевузовскоеОбразование", Результаты[ВсегоРезультатов - 3].Выгрузить());
	ДанныеДляЗаполнения.Вставить("Сертификаты", Результаты[ВсегоРезультатов - 2].Выгрузить());
	ДанныеДляЗаполнения.Вставить("КвалификационныеКатегории", Результаты[ВсегоРезультатов - 1].Выгрузить());
	
#КонецОбласти
	
#Область Неявки_Невыходы

	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраНеявки.Сотрудник,
	|	СведенияОРаботникахДляМедРегистраНеявки.СостояниеХарактеристика.Код КАК СостояниеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраНеявки.СостояниеХарактеристика.Наименование КАК СостояниеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраНеявки.ДатаНачала,
	|	СведенияОРаботникахДляМедРегистраНеявки.ДатаОкончания
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.Неявки КАК СведенияОРаботникахДляМедРегистраНеявки
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраНеявки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраНевыходы.Сотрудник,
	|	СведенияОРаботникахДляМедРегистраНевыходы.СостояниеХарактеристика.Код КАК СостояниеХарактеристикаКод,
	|	СведенияОРаботникахДляМедРегистраНевыходы.СостояниеХарактеристика.Наименование КАК СостояниеХарактеристикаНаименование,
	|	СведенияОРаботникахДляМедРегистраНевыходы.ДатаНачала,
	|	СведенияОРаботникахДляМедРегистраНевыходы.ДатаОкончания
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.Невыходы КАК СведенияОРаботникахДляМедРегистраНевыходы
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраНевыходы.Ссылка = &Ссылка";

	Результаты = Запрос.ВыполнитьПакет();
	ВсегоРезультатов = Результаты.Количество();
	
	ДанныеДляЗаполнения.Вставить("Неявки", Результаты[ВсегоРезультатов - 2].Выгрузить());
	ДанныеДляЗаполнения.Вставить("Невыходы", Результаты[ВсегоРезультатов - 1].Выгрузить());

#КонецОбласти

#Область ФактическиОтработанноеВремя

	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраФактическиОтработанноеВремя.Сотрудник,
	|	СведенияОРаботникахДляМедРегистраФактическиОтработанноеВремя.ДатаНачала,
	|	СведенияОРаботникахДляМедРегистраФактическиОтработанноеВремя.ДатаОкончания,
	|	СведенияОРаботникахДляМедРегистраФактическиОтработанноеВремя.КоличествоЧасов
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.ФактическиОтработанноеВремя КАК СведенияОРаботникахДляМедРегистраФактическиОтработанноеВремя
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраФактическиОтработанноеВремя.Ссылка = &Ссылка";
	
	ДанныеДляЗаполнения.Вставить("ФактическиОтработанноеВремя", Запрос.Выполнить().Выгрузить());
	
#КонецОбласти
	
#Область Организация

	РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.СоздатьВТХарактеристикиОбъектовПоМедРегистру(Запрос.МенеджерВременныхТаблиц, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ.Организация));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистра.Организация,
	|	СведенияОРаботникахДляМедРегистра.Организация.Наименование КАК Наименование,
	|	СведенияОРаботникахДляМедРегистра.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	ХарактеристикиОбъектовПоМедРегистру.Характеристика.Код КАК ХарактеристикаКод,
	|	ХарактеристикиОбъектовПоМедРегистру.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ХарактеристикиОбъектовПоМедРегистру.Характеристика.Родитель.Код КАК ХарактеристикаРодитель,
	|	СведенияОРаботникахДляМедРегистра.Дата,
	|	СведенияОРаботникахДляМедРегистра.УИНОрганизации
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра КАК СведенияОРаботникахДляМедРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиОбъектовПоМедРегистру
	|		ПО СведенияОРаботникахДляМедРегистра.Организация = ХарактеристикиОбъектовПоМедРегистру.Объект
	|			И (ХарактеристикиОбъектовПоМедРегистру.Классификатор = &КлассификаторРегион)
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистра.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("КлассификаторРегион", Справочники.КлассификаторыМедРегистра.ArrayOfTerritory);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеОрганизации = Новый Структура("OID,Name");
	ОписаниеРегиона     = Новый Структура("ID,Name");
	Если Выборка.Следующий() Тогда
		
		ОписаниеОрганизации.Вставить("Name", Выборка.Наименование);
		ОписаниеОрганизации.Вставить("OID", Выборка.УИНОрганизации);
		
		ОписаниеРегиона.Вставить("ID", Выборка.ХарактеристикаКод);
		ОписаниеРегиона.Вставить("Name", Выборка.ХарактеристикаНаименование);
		
		ДанныеДляЗаполнения.Вставить("ДатаДокумента", Выборка.Дата);
		
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ОписаниеОрганизации", ОписаниеОрганизации);
	ДанныеДляЗаполнения.Вставить("ОписаниеРегиона", ОписаниеРегиона);
	
#КонецОбласти

	Возврат ДанныеДляЗаполнения;
	
КонецФункции 

Процедура УберемСокращениеИзНаименования(СтрокаАдреса, ИмяПоля)
	
		Если Не (ПустаяСтрока(СтрокаАдреса[ИмяПоля]) Или ПустаяСтрока(СтрокаАдреса[ИмяПоля+"Сокращение"])) Тогда
			СтрокаАдреса[ИмяПоля] = СтрЗаменить(СтрокаАдреса[ИмяПоля]," "+СтрокаАдреса[ИмяПоля+"Сокращение"],"");
		КонецЕсли;
	
КонецПроцедуры

Функция ТекстXMLМедРаботниковИзXDTO(ДанныеМедРаботников) 
	
	Если ТипЗнч(ДанныеМедРаботников) <> Тип("Структура") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеОрганизации = ДанныеМедРаботников.ОписаниеОрганизации;
	ОписаниеРегиона     = ДанныеМедРаботников.ОписаниеРегиона;
	
	МедРаботники = ДанныеМедРаботников.Сотрудники;
	
	URIПространстваИмен = Метаданные.ПакетыXDTO.ФорматОбменаСотрудниковСМедРегистром.ПространствоИмен;
	ПакетXDTO			= ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
	ТипСписок = ПакетXDTO.КорневыеСвойства.Получить("ArrayOfEmployee").Тип;
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипСписок);
	ЗаписиСписка = ЗаголовокСписка["Employee"];
	
	// Типы
	ТипыОбъектовОбменаXDTO = Новый Структура;
	ЗаполнитьПереченьТиповОбъектовОбменаXDTO(ТипыОбъектовОбменаXDTO, ТипСписок);
	
	ВыборкаСотрудники = ДанныеМедРаботников.Сотрудники;
		
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		Сотрудник 	   = ВыборкаСотрудники.Сотрудник;
		ФизическоеЛицо = ВыборкаСотрудники.ФизическоеЛицо;
		
		МедРаботник = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee);
		
		МедРаботник.AddressList = ОбъектXDTOАдрес(ВыборкаСотрудники, ДанныеМедРаботников.АдресаФизическихЛиц, ТипыОбъектовОбменаXDTO);
		МедРаботник.AwardList  = ОбъектXDTOНаграды(ФизическоеЛицо, ДанныеМедРаботников.Награды, ТипыОбъектовОбменаXDTO);
		МедРаботник.CardRecordList = ОбъектXDTOЛичноеДело(Сотрудник, ДанныеМедРаботников.ЛичноеДело, ТипыОбъектовОбменаXDTO, ОписаниеОрганизации);
		МедРаботник.Document = ОбъектXDTOДокументФизическогоЛица(ВыборкаСотрудники, ТипыОбъектовОбменаXDTO);
		МедРаботник.Extended = ОбъектXDTOРасширенныеСведения(ВыборкаСотрудники, ТипыОбъектовОбменаXDTO);
		МедРаботник.General = ОбъектXDTOОсновныеСведения(ВыборкаСотрудники, ТипыОбъектовОбменаXDTO);
		МедРаботник.LastChange = ВыборкаСотрудники.ДатаСоставления;
		МедРаботник.Organization = ОбъектXDTOПоОписанию(ОписаниеОрганизации, ТипыОбъектовОбменаXDTO.Employee_Organization);
		
		МедРаботник.DiplomaEducationList  = ОбъектXDTOОбразование(ФизическоеЛицо, ДанныеМедРаботников.Образование, ТипыОбъектовОбменаXDTO);
		МедРаботник.CertificateEducationList  = ОбъектXDTOСертификаты(ФизическоеЛицо, ДанныеМедРаботников.Сертификаты, ТипыОбъектовОбменаXDTO);
		МедРаботник.RetrainmentList  = ОбъектXDTOПереподготовка(ФизическоеЛицо, ДанныеМедРаботников.Переподготовка, ТипыОбъектовОбменаXDTO);
		МедРаботник.SkillImprovementList  = ОбъектXDTOПовышениеКвалификации(ФизическоеЛицо, ДанныеМедРаботников.ПовышениеКвалификации, ТипыОбъектовОбменаXDTO);
		МедРаботник.PostGraduateEducationList  = ОбъектXDTOПослевузовскоеОбразование(ФизическоеЛицо, ДанныеМедРаботников.ПослевузовскоеОбразование, ТипыОбъектовОбменаXDTO);
		МедРаботник.QualificationList  = ОбъектXDTOКвалификационныеКатегории(ФизическоеЛицо, ДанныеМедРаботников.КвалификационныеКатегории, ТипыОбъектовОбменаXDTO);
		
		МедРаботник.SkipPaymentList = ОбъектXDTOНеявки(Сотрудник, ДанныеМедРаботников.Неявки, ТипыОбъектовОбменаXDTO);
		МедРаботник.VocationList = ОбъектXDTOНевыходы(Сотрудник, ДанныеМедРаботников.Невыходы, ТипыОбъектовОбменаXDTO);
		МедРаботник.TimeFactList = ОбъектXDTOФактическиОтработанноеВремя(ДанныеМедРаботников.ФактическиОтработанноеВремя, ТипыОбъектовОбменаXDTO);
		
		ЗаписиСписка.Добавить(МедРаботник);
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML.
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(,"UTF-8");
	
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, ЗаголовокСписка, "ArrayOfEmployee");
	
	// Получаем содержимое файла в виде строки.
	СтрокаXML = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	СтрокаXML = УдалитьПространствоИмен(СтрокаXML);
	
	Возврат СтрокаXML;
	
КонецФункции 

Процедура ЗаполнитьПереченьТиповОбъектовОбменаXDTO(ОписаниеТипов, Знач ТипОбъектаXTDO, Знач ИмяРодителя = "")
	
	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ИмяРодителя = ИмяРодителя + "_";
	КонецЕсли;
	
	Для Каждого СвойствоXTDO Из ТипОбъектаXTDO.Свойства Цикл
		
		Если ПустаяСтрока(СвойствоXTDO.Тип.Имя) Тогда
			
			ИмяСвойства = ИмяРодителя + СокрЛП(СвойствоXTDO.Имя);
			
			ОписаниеТипов.Вставить(ИмяСвойства, СвойствоXTDO.Тип);
			ЗаполнитьПереченьТиповОбъектовОбменаXDTO(ОписаниеТипов, СвойствоXTDO.Тип, ИмяСвойства);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектXDTOПоОписанию(Описание, Тип)
	
	 ОбъектXDTO = ФабрикаXDTO.Создать(Тип);
	 ЗаполнитьОбъектПоОписанию(ОбъектXDTO,Описание);
	 Возврат ОбъектXDTO;
	
КонецФункции 

Процедура ЗаполнитьОбъектПоОписанию(ОбъектXDTO, Описание)
	
	Для Каждого Свойство Из Описание Цикл
		Если Свойство.Значение = Null Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектXDTO[Свойство.Ключ] = Свойство.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектXDTOДокументФизическогоЛица(ИсточникДанных, ТипыОбъектовОбменаXDTO)
	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_Document);
	
	ОбъектXDTO.INN = ИсточникДанных.ИНН;
	ОбъектXDTO.IssueDate = ИсточникДанных.ДокументДатаВыдачи;
	ОбъектXDTO.Issued = ИсточникДанных.ДокументКемВыдан;
	ОбъектXDTO.Number = ИсточникДанных.ДокументНомер;
	ОбъектXDTO.SNILS = СтрЗаменить(СокрЛП(ИсточникДанных.СтраховойНомерПФР), " ", "-");
	ОбъектXDTO.Serie = ИсточникДанных.ДокументСерия;
	ОбъектXDTO.TabelNumber = ИсточникДанных.ТабельныйНомер;
	ОбъектXDTO.Type = ОбъектXDTOПоОписанию(Новый Структура("ID,Name", ИсточникДанных.ДокументВидДокументаХарактеристикаКод,
																	  ИсточникДанных.ДокументВидДокументаХарактеристикаНаименование),
											ТипыОбъектовОбменаXDTO.Employee_Document_Type);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ОбъектXDTOАдрес(Сотрудник, АдресаФизическихЛиц, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_AddressList);
	ЗаписиСписка = ЗаголовокСписка["Address"];
	
	Адрес = АдресаФизическихЛиц.Найти(Сотрудник.ФизическоеЛицо, "ФизическоеЛицо");
	Если Адрес = Неопределено Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	АдресXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_AddressList_Address);
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("Street",				Адрес.Улица);
	ОписаниеОбъекта.Вставить("House",				Адрес.Дом);
	ОписаниеОбъекта.Вставить("Building",			?(Адрес.ТипКорпуса<>"Строение", Адрес.Корпус, Null));
	ОписаниеОбъекта.Вставить("Housing",				?(Адрес.ТипКорпуса="Строение", Адрес.Корпус, Null));
	ОписаниеОбъекта.Вставить("Apartment",			Адрес.Квартира);
	ОписаниеОбъекта.Вставить("RegistrationDate",	Сотрудник.ДатаРегистрации);
	ОписаниеОбъекта.Вставить("PostIndex",			?( ЗначениеЗаполнено(Адрес.Индекс), Адрес.Индекс, 0));
	
	ЗаполнитьОбъектПоОписанию(АдресXDTO, ОписаниеОбъекта);
	
	// Location
	ОписаниеОбъекта.Очистить();
	КодКлассификатора = Null;
	КодРодителя = Null;
	УровеньКлассификатора = 0;
	ИмяМестаЖительства = "";
	Если ЗначениеЗаполнено(Адрес.НаселенныйПунктКодКлассификатора) Тогда
		УровеньКлассификатора = 4;
		КодКлассификатора = Адрес.НаселенныйПунктКодКлассификатора;
		ИмяМестаЖительства =Адрес.НаселенныйПункт; 
	ИначеЕсли ЗначениеЗаполнено(Адрес.ГородКодКлассификатора) Тогда  
		УровеньКлассификатора = 3;
		КодКлассификатора = Адрес.ГородКодКлассификатора;
		ИмяМестаЖительства =Адрес.Город;
	ИначеЕсли ЗначениеЗаполнено(Адрес.РайонКодКлассификатора) Тогда  
		УровеньКлассификатора = 2;
		КодКлассификатора = Адрес.РайонКодКлассификатора;
		ИмяМестаЖительства =Адрес.Район;
	ИначеЕсли ЗначениеЗаполнено(Адрес.РегионКодКлассификатора) Тогда  
		УровеньКлассификатора = 1 ;
		КодКлассификатора = Адрес.РегионКодКлассификатора;
		ИмяМестаЖительства =Адрес.Район;
	КонецЕсли;
	
	Если УровеньКлассификатора = 0 Тогда
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	КодКлассификатора = Формат(КодКлассификатора, "ЧГ=0");
	
	ОписаниеОбъекта.Вставить("ID", КодКлассификатора);
	ОписаниеОбъекта.Вставить("Name", ИмяМестаЖительства);
	
	ОбъектXDTOМестоПроживания = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_AddressList_Address_Location);
	
	ЗаполнитьОбъектПоОписанию(ОбъектXDTOМестоПроживания, ОписаниеОбъекта);
	
	АдресXDTO.Location = ОбъектXDTOМестоПроживания;
	
	// Регистрация
	ОписаниеОбъекта.Очистить();
	ОписаниеОбъекта.Вставить("ID", 1);
	ОписаниеОбъекта.Вставить("Name", "Постоянная регистрация");
	АдресXDTO.Registration = ОбъектXDTOПоОписанию(ОписаниеОбъекта, ТипыОбъектовОбменаXDTO.Employee_AddressList_Address_Registration);
	
	ЗаписиСписка.Добавить(АдресXDTO);
	
	Возврат ЗаголовокСписка;

КонецФункции

Функция ОбъектXDTOЛичноеДело(Сотрудник, ЛичноеДело, ТипыОбъектовОбменаXDTO, ОписаниеОрганизации)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_CardRecordList);
	ЗаписиСписка = ЗаголовокСписка["CardRecord"];
	
	КадроваяИсторияСотрудника = ЛичноеДело.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	Если КадроваяИсторияСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из КадроваяИсторияСотрудника Цикл
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Care", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ВидМедицинскойПомощиХарактеристикаКод,
																	Запись.ВидМедицинскойПомощиХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_Care));
		ОписаниеОбъекта.Вставить("Conditions", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																		Запись.УсловияМедицинскойПомощиХарактеристикаКод,
																		Запись.УсловияМедицинскойПомощиХарактеристикаНаименование),
																	ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_Conditions)); 
		ОписаниеОбъекта.Вставить("DateBegin", Запись.ДатаНачалаЗаписи);
		ОписаниеОбъекта.Вставить("DateEnd", ?(ЗначениеЗаполнено(Запись.ДатаОкончанияЗаписи), Запись.ДатаОкончанияЗаписи, Неопределено));
		ОписаниеОбъекта.Вставить("Military", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																		Запись.ОтношениеКВоеннойСлужбеХарактеристикаКод,
																		Запись.ОтношениеКВоеннойСлужбеХарактеристикаНаименование),
																	ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_Military));
		ОписаниеОбъекта.Вставить("OrderIn", Запись.НомерПриказаНачалаЗаписи);
		ОписаниеОбъекта.Вставить("OrderOut", Запись.НомерПриказаОкончанияЗаписи);
		ОписаниеОбъекта.Вставить("Organization", ОбъектXDTOПоОписанию(ОписаниеОрганизации, ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_Organization));
		ОписаниеОбъекта.Вставить("PositionType", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																			Запись.ТипЗанятияДолжностиХарактеристикаКод,
																			Запись.ТипЗанятияДолжностиХарактеристикаНаименование),
																		ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_PositionType));
		ОписаниеОбъекта.Вставить("Post", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ДолжностьХарактеристикаКод,
																	Запись.ДолжностьХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_Post));
		ОписаниеОбъекта.Вставить("PostType", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																		Запись.ВидДолжностиХарактеристикаКод,
																		Запись.ВидДолжностиХарактеристикаНаименование),
																	ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_PostType));
		ОписаниеОбъекта.Вставить("Regime", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.РежимРаботыХарактеристикаКод,
																	Запись.РежимРаботыХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_Regime));
		ОписаниеОбъекта.Вставить("SubdivisionName", Запись.НаименованиеПодразделения);
		ОписаниеОбъекта.Вставить("SubdivisionType", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																			Запись.ТипПодразделенияХарактеристикаКод,
																			Запись.ТипПодразделенияХарактеристикаНаименование),
																		ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_SubdivisionType));
		ОписаниеОбъекта.Вставить("TypeIn", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
															Запись.ТипНачалаЗаписиХарактеристикаКод,
															Запись.ТипНачалаЗаписиХарактеристикаНаименование),
													ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeIn));
		
		Если ПустаяСтрока(Запись.ТипОкончанияЗаписиХарактеристикаНаименование) Тогда
			ОписаниеОбъекта.Вставить("TypeOut", Неопределено);
		Иначе
			ОписаниеОбъекта.Вставить("TypeOut", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ТипОкончанияЗаписиХарактеристикаКод,
																	Запись.ТипОкончанияЗаписиХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeOut));
		КонецЕсли;
		
		ОписаниеОбъекта.Вставить("Wage", Запись.КоличествоСтавок);
		
		ОписаниеОбъекта.Вставить("TypeInAdd", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ПрибылХарактеристикаКод,
																	Запись.ПрибылХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeInAdd));
		ОписаниеОбъекта.Вставить("TypeInCountry", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ПрибылИзСтраныХарактеристикаКод,
																	Запись.ПрибылИзСтраныХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeInCountry));
		ОписаниеОбъекта.Вставить("TypeInGoIn", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ДвижениеКадровНачалоХарактеристикаКод,
																	Запись.ДвижениеКадровНачалоХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeInGoIn));
		ОписаниеОбъекта.Вставить("TypeInStudTarget", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ПрибылЦелевойНаборХарактеристикаКод,
																	Запись.ПрибылЦелевойНаборХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeInStudTarget));
		ОписаниеОбъекта.Вставить("TypeInStudType", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ПрибылПослеОбученияХарактеристикаКод,
																	Запись.ПрибылПослеОбученияХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeInStudType));
		ОписаниеОбъекта.Вставить("TypeInTerr", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ПрибылИзДругогоСубъектаРФКод,
																	Запись.ПрибылИзДругогоСубъектаРФНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeInTerr));
		ОписаниеОбъекта.Вставить("TypeOutDel", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ОснованиеУвольненияХарактеристикаКод,
																	Запись.ОснованиеУвольненияХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeOutDel));
		ОписаниеОбъекта.Вставить("TypeOutGoIn", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ДвижениеКадровОкончаниеХарактеристикаКод,
																	Запись.ДвижениеКадровОкончаниеХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeOutGoIn));
		ОписаниеОбъекта.Вставить("TypeOutCountry", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ВыбылВСтрануХарактеристикаКод,
																	Запись.ВыбылВСтрануХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeOutCountry));
		ОписаниеОбъекта.Вставить("TypeOutTerr", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.ВыбылВДругойСубъектРФКод,
																	Запись.ВыбылВДругойСубъектРФНаименование),
																ТипыОбъектовОбменаXDTO.Employee_CardRecordList_CardRecord_TypeOutTerr));
		
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
		
	КонецЦикла;
	
	Возврат ЗаголовокСписка;

КонецФункции 

Функция ОбъектXDTOНаграды(ФизическоеЛицо, Награды, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_AwardList);
	ЗаписиСписка = ЗаголовокСписка["Award"];
	
	НаградыСотрудника = Награды.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если НаградыСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из НаградыСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_AwardList_Award);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Number", Запись.НомерПриказа);
		ОписаниеОбъекта.Вставить("Name", Запись.Наименование);
		ОписаниеОбъекта.Вставить("Issued", Запись.ДатаПриказа);
		
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписьXDTO.AwardNomination = ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																Запись.НаградаХарактеристикаКод,
																Запись.НаградаХарактеристикаНаименование),
															ТипыОбъектовОбменаXDTO.Employee_AwardList_Award_AwardNomination);
		ЗаписиСписка.Добавить(ЗаписьXDTO);
		
	КонецЦикла;
	
	Возврат ЗаголовокСписка;

КонецФункции 

Функция ОбъектXDTOРасширенныеСведения(Сотрудник, ТипыОбъектовОбменаXDTO)
	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_Extended);
	
	ОбъектXDTO.CitezenshipState = ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
															Сотрудник.ГражданствоХарактеристикаКод,
															Сотрудник.ГражданствоХарактеристикаНаименование),
														ТипыОбъектовОбменаXDTO.Employee_Extended_CitezenshipState);
	ОбъектXDTO.HasAuto = ?(Сотрудник.НаличиеЛичногоАвтомобиля, "true", "false");
	ОбъектXDTO.HasChildren = ?(Сотрудник.НаличиеДетейМладше16Лет, "true", "false");
	ОбъектXDTO.MarriageState = ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
															Сотрудник.СемейноеПоложениеХарактеристикаКод,
															Сотрудник.СемейноеПоложениеХарактеристикаНаименование),
														ТипыОбъектовОбменаXDTO.Employee_Extended_MarriageState);
	ОбъектXDTO.Phone = Сотрудник.Телефон;
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ОбъектXDTOОсновныеСведения(Сотрудник, ТипыОбъектовОбменаXDTO)
	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_General);
	
	ОбъектXDTO.Birthdate = Сотрудник.ДатаРождения;
	ОбъектXDTO.Name = Сотрудник.Имя;
	ОбъектXDTO.Patroname = Сотрудник.Отчество;
	ОбъектXDTO.Sex = ?(Сотрудник.Пол = Перечисления.ПолФизическогоЛица.Мужской, "Male", "Female");
	ОбъектXDTO.Surname = Сотрудник.Фамилия;
	
	Возврат ОбъектXDTO;
	
КонецФункции 

Функция ОбъектXDTOОбразование(ФизическоеЛицо, Образование, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_DiplomaEducationList);
	ЗаписиСписка = ЗаголовокСписка["DiplomaEducation"];
	
	ОбразованиеСотрудника = Образование.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если ОбразованиеСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из ОбразованиеСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_DiplomaEducationList_DiplomaEducation);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Aim", Запись.ЦелевойНабор);
		ОписаниеОбъекта.Вставить("DiplomaNumber", Запись.Номер);
		ОписаниеОбъекта.Вставить("DiplomaSerie", Запись.Серия);
		ОписаниеОбъекта.Вставить("Institution", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.УчебноеЗаведениеХарактеристикаКод,
														Запись.УчебноеЗаведениеХарактеристикаНаименование),
													ТипыОбъектовОбменаXDTO.Employee_DiplomaEducationList_DiplomaEducation_Institution));
		ОписаниеОбъекта.Вставить("Speciality", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																Запись.СпециальностьХарактеристикаКод,
																Запись.СпециальностьХарактеристикаНаименование),
															ТипыОбъектовОбменаXDTO.Employee_DiplomaEducationList_DiplomaEducation_Speciality));
		ОписаниеОбъекта.Вставить("TerritoryRf", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
															Запись.СубъектРФЦелевогоНабораХарактеристикаКод,
															Запись.СубъектРФЦелевогоНабораХарактеристикаНаименование),
													ТипыОбъектовОбменаXDTO.Employee_DiplomaEducationList_DiplomaEducation_TerritoryRf));
		ОписаниеОбъекта.Вставить("Type", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.ВидОбразованияХарактеристикаКод,
														Запись.ВидОбразованияХарактеристикаНаименование),
											ТипыОбъектовОбменаXDTO.Employee_DiplomaEducationList_DiplomaEducation_Type));
		ОписаниеОбъекта.Вставить("YearGraduation", Запись.ГодОкончания);
		
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
	
		ЗаписиСписка.Добавить(ЗаписьXDTO);
		
	КонецЦикла;
	
	Возврат ЗаголовокСписка;
	
КонецФункции 

Функция ОбъектXDTOСертификаты(ФизическоеЛицо, Сертификаты, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_CertificateEducationList);
	ЗаписиСписка = ЗаголовокСписка["CertificateEducation"];
	
	СертификатыСотрудника = Сертификаты.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если СертификатыСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из СертификатыСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_CertificateEducationList_CertificateEducation);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("CertificateNumber", Запись.Номер);
		ОписаниеОбъекта.Вставить("CertificateSerie", Запись.Серия);
		ОписаниеОбъекта.Вставить("Institution",ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.УчебноеЗаведениеХарактеристикаКод,
														Запись.УчебноеЗаведениеХарактеристикаНаименование),
												ТипыОбъектовОбменаXDTO.Employee_CertificateEducationList_CertificateEducation_Institution));
		ОписаниеОбъекта.Вставить("IssueDate", Запись.ДатаПолучения);										
		ОписаниеОбъекта.Вставить("Speciality",ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
															Запись.СпециальностьХарактеристикаКод,
															Запись.СпециальностьХарактеристикаНаименование),
														ТипыОбъектовОбменаXDTO.Employee_CertificateEducationList_CertificateEducation_Speciality));
															
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
		
	КонецЦикла;
	
	Возврат ЗаголовокСписка;
	
КонецФункции 

Функция ОбъектXDTOПереподготовка(ФизическоеЛицо, Переподготовка, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_RetrainmentList);
	ЗаписиСписка = ЗаголовокСписка["Retrainment"];
	
	ПереподготовкаСотрудника = Переподготовка.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если ПереподготовкаСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из ПереподготовкаСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_RetrainmentList_Retrainment);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("DiplomaNumber", Запись.Номер);
		ОписаниеОбъекта.Вставить("DiplomaSerie", Запись.Серия);
		ОписаниеОбъекта.Вставить("Hours", Запись.КоличествоЧасов);
		ОписаниеОбъекта.Вставить("Institution", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.УчебноеЗаведениеХарактеристикаКод,
														Запись.УчебноеЗаведениеХарактеристикаНаименование),
													ТипыОбъектовОбменаXDTO.Employee_RetrainmentList_Retrainment_Institution));
		ОписаниеОбъекта.Вставить("Speciality", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
															Запись.СпециальностьХарактеристикаКод,
															Запись.СпециальностьХарактеристикаНаименование),
														 ТипыОбъектовОбменаXDTO.Employee_RetrainmentList_Retrainment_Speciality));
		ОписаниеОбъекта.Вставить("YearPassing", Запись.ГодПрохождения);
															
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
				
	КонецЦикла;
	
	Возврат ЗаголовокСписка;
	
КонецФункции 

Функция ОбъектXDTOПовышениеКвалификации(ФизическоеЛицо, ПовышениеКвалификации, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_SkillImprovementList);
	ЗаписиСписка = ЗаголовокСписка["SkillImprovement"];
	
	ПовышениеКвалификацииСотрудника = ПовышениеКвалификации.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если ПовышениеКвалификацииСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из ПовышениеКвалификацииСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_SkillImprovementList_SkillImprovement);
			
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Cycle", Запись.НаименованиеКурса);
		ОписаниеОбъекта.Вставить("DiplomaNumber", Запись.Номер);
		ОписаниеОбъекта.Вставить("DiplomaSerie", Запись.Серия);
		ОписаниеОбъекта.Вставить("Hours" ,Запись.КоличествоЧасов);
		ОписаниеОбъекта.Вставить("Institution", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.УчебноеЗаведениеХарактеристикаКод,
														Запись.УчебноеЗаведениеХарактеристикаНаименование),
													ТипыОбъектовОбменаXDTO.Employee_SkillImprovementList_SkillImprovement_Institution));
		ОписаниеОбъекта.Вставить("IssueDate", Запись.ДатаПолучения);
		ОписаниеОбъекта.Вставить("Speciality", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
															Запись.СпециальностьХарактеристикаКод,
															Запись.СпециальностьХарактеристикаНаименование),
														 ТипыОбъектовОбменаXDTO.Employee_SkillImprovementList_SkillImprovement_Speciality));
		ОписаниеОбъекта.Вставить("YearPassing", Запись.ГодПрохождения);
															
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
				
	КонецЦикла;
	
	Возврат ЗаголовокСписка;
	
КонецФункции 

Функция ОбъектXDTOПослевузовскоеОбразование(ФизическоеЛицо, ПослевузовскоеОбразование, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_PostGraduateEducationList);
	ЗаписиСписка = ЗаголовокСписка["PostGraduateEducation"];
	
	ПослевузовскоеОбразованиеСотрудника = ПослевузовскоеОбразование.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если ПослевузовскоеОбразованиеСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из ПослевузовскоеОбразованиеСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_PostGraduateEducationList_PostGraduateEducation);
			
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Aim", Запись.ЦелевойНабор);
		ОписаниеОбъекта.Вставить("DateBegin", Запись.Начало);
		ОписаниеОбъекта.Вставить("DateDocum", Запись.ДатаПолучения);
		ОписаниеОбъекта.Вставить("DateEnd", Запись.Окончание);
		ОписаниеОбъекта.Вставить("DiplomaNumber", Запись.Номер);
		ОписаниеОбъекта.Вставить("DiplomaSerie", Запись.Серия);
		ОписаниеОбъекта.Вставить("Institution", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.УчебноеЗаведениеХарактеристикаКод,
														Запись.УчебноеЗаведениеХарактеристикаНаименование),
												ТипыОбъектовОбменаXDTO.Employee_PostGraduateEducationList_PostGraduateEducation_Institution));
		ОписаниеОбъекта.Вставить("Speciality", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.СпециальностьХарактеристикаКод,
														Запись.СпециальностьХарактеристикаНаименование),
													ТипыОбъектовОбменаXDTO.Employee_PostGraduateEducationList_PostGraduateEducation_Speciality));
		ОписаниеОбъекта.Вставить("Degree", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.УченаяСтепеньХарактеристикаКод,
														Запись.УченаяСтепеньХарактеристикаНаименование),
												ТипыОбъектовОбменаXDTO.Employee_PostGraduateEducationList_PostGraduateEducation_Degree));
		ОписаниеОбъекта.Вставить("TerritoryRf", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
															Запись.СубъектРФЦелевогоНабораХарактеристикаКод,
															Запись.СубъектРФЦелевогоНабораХарактеристикаНаименование),
													ТипыОбъектовОбменаXDTO.Employee_PostGraduateEducationList_PostGraduateEducation_TerritoryRf));
		ОписаниеОбъекта.Вставить("Type", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
														Запись.ВидОбразованияХарактеристикаКод,
														Запись.ВидОбразованияХарактеристикаНаименование),
											ТипыОбъектовОбменаXDTO.Employee_PostGraduateEducationList_PostGraduateEducation_Type));
		
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
		
	КонецЦикла;
	
	Возврат ЗаголовокСписка;

КонецФункции 

Функция ОбъектXDTOКвалификационныеКатегории(ФизическоеЛицо, КвалификационныеКатегории, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_QualificationList);
	ЗаписиСписка = ЗаголовокСписка["Qualification"];
	
	КвалификационныеКатегорииСотрудника = КвалификационныеКатегории.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если КвалификационныеКатегорииСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из КвалификационныеКатегорииСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_QualificationList_Qualification);
			
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("DateGet", Запись.ДатаПрисвоения);
		ОписаниеОбъекта.Вставить("Category", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.КвалификационнаяКатегорияХарактеристикаКод,
																	Запись.КвалификационнаяКатегорияХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_QualificationList_Qualification_Category));
		ОписаниеОбъекта.Вставить("Speciality", ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.СпециальностьХарактеристикаКод,
																	Запись.СпециальностьХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_QualificationList_Qualification_Speciality));
		
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
		
	КонецЦикла;
	
	Возврат ЗаголовокСписка;

КонецФункции 

Функция ОбъектXDTOНеявки(Сотрудник, Неявки, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_SkipPaymentList);
	ЗаписиСписка = ЗаголовокСписка["SkipPayment"];
	
	НеявкиСотрудника = Неявки.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	Если НеявкиСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из НеявкиСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_SkipPaymentList_SkipPayment);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Reason",ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																	Запись.СостояниеХарактеристикаКод,
																	Запись.СостояниеХарактеристикаНаименование),
																ТипыОбъектовОбменаXDTO.Employee_SkipPaymentList_SkipPayment_Reason));
		ОписаниеОбъекта.Вставить("DateBegin", Запись.ДатаНачала);
		ОписаниеОбъекта.Вставить("DateEnd", Запись.ДатаОкончания);
		
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
		
	КонецЦикла;
	
	Возврат ЗаголовокСписка;
	
КонецФункции

Функция ОбъектXDTOНевыходы(Сотрудник, Невыходы, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_VocationList);
	ЗаписиСписка = ЗаголовокСписка["Vocation"];
	
	НевыходыСотрудника = Невыходы.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	Если НевыходыСотрудника.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из НевыходыСотрудника Цикл
		
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_VocationList_Vocation);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("AbsenceReason",ОбъектXDTOПоОписанию(Новый Структура("ID,Name",
																Запись.СостояниеХарактеристикаКод,
																Запись.СостояниеХарактеристикаНаименование),
															ТипыОбъектовОбменаXDTO.Employee_VocationList_Vocation_AbsenceReason));
		ОписаниеОбъекта.Вставить("DateBegin", Запись.ДатаНачала);
		ОписаниеОбъекта.Вставить("DateEnd", Запись.ДатаОкончания);
		
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
		
	КонецЦикла;
	
	Возврат ЗаголовокСписка;
	
КонецФункции 

Функция ОбъектXDTOФактическиОтработанноеВремя(ОтработанноеВремя, ТипыОбъектовОбменаXDTO)
	
	ЗаголовокСписка = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_TimeFactList);
	ЗаписиСписка = ЗаголовокСписка["TimeFact"];
	
	Если ОтработанноеВремя.Количество() = 0 Тогда 
		Возврат ЗаголовокСписка;
	КонецЕсли;
	
	Для Каждого Запись Из ОтработанноеВремя Цикл
		ЗаписьXDTO = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.Employee_TimeFactList_TimeFact);
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("DateBegin", Запись.ДатаНачала);
		ОписаниеОбъекта.Вставить("DateEnd", Запись.ДатаОкончания);
		ОписаниеОбъекта.Вставить("Hours", Запись.КоличествоЧасов);
		
		ЗаполнитьОбъектПоОписанию(ЗаписьXDTO, ОписаниеОбъекта);
		
		ЗаписиСписка.Добавить(ЗаписьXDTO);
	КонецЦикла;
	
	Возврат ЗаголовокСписка;
	
КонецФункции

Функция УдалитьПространствоИмен(ТекстXML, ИмяКорня = "ArrayOfEmployee", Кодировка="UTF-8")
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(Кодировка);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			ИмяУзла = ЧтениеXML.Имя;
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "xmlns"
						Или ЧтениеXML.Имя = "xmlns:xs"
						Или ЧтениеXML.Имя = "xmlns:xsi"
						Или ЧтениеXML.Имя = "xsi:type" Тогда  	
						Продолжить;
					КонецЕсли;
					
					Если ЧтениеXML.Имя = "xsi:nil" Тогда  	
						ЗаписьXML.ЗаписатьАтрибут("i:nil", "true");
						Продолжить;
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				КонецЦикла;
				
				Если ИмяУзла = ИмяКорня Тогда
					ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://service.rosminzdrav.ru/MedStaff");
					ЗаписьXML.ЗаписатьАтрибут("xmlns:i", "http://www.w3.org/2001/XMLSchema-instance");
					ЗаписьXML.ЗаписатьАтрибут("version", "2.0.10");
					ЗаписьXML.ЗаписатьАтрибут("formatVersion", "2.0");
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе
			ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли