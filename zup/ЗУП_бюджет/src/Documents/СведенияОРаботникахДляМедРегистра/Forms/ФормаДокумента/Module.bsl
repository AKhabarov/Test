#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ПараметрыУдаленияСотрудников;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
		ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
		ЗапрашиваемыеЗначения.Вставить("Месяц", "Объект.ДатаНачалаРасчетаФактическогоВремени");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения);
		
		Объект.ДатаОкончанияРасчетаФактическогоВремени = КонецМесяца(Объект.ДатаНачалаРасчетаФактическогоВремени);
		
		ЗаполнитьУИНОрганизацииНаСервере();
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьТекущиеПозицииСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СведенияОРаботникахДляМедРегистра", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаРасчетаФактическогоВремениПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияРасчетаФактическогоВремени) 
		И Объект.ДатаНачалаРасчетаФактическогоВремени > Объект.ДатаОкончанияРасчетаФактическогоВремени Тогда
		
	    Объект.ДатаОкончанияРасчетаФактическогоВремени = КонецМесяца(Объект.ДатаНачалаРасчетаФактическогоВремени);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияРасчетаФактическогоВремениПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаРасчетаФактическогоВремени > Объект.ДатаОкончанияРасчетаФактическогоВремени Тогда
		
	    Объект.ДатаНачалаРасчетаФактическогоВремени = НачалоМесяца(Объект.ДатаОкончанияРасчетаФактическогоВремени);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ЗаполнитьУИНОрганизацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УИНОрганизацииПриИзменении(Элемент)
	УИНОрганизацииПриИзмененииНаСервере(Объект.Организация,Объект.УИНОрганизации);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СотрудникиПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		
		Список = Новый массив;
		Список.Добавить(ТекущиеДанные.Сотрудник);
		
		ЗаполнитьНаКлиенте(Список);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьНаКлиенте(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	УдаляемыеСотрудники = Новый Массив;
	УдаляемыеСтроки = Элемент.ВыделенныеСтроки;
	Для Каждого Идентификатор Из УдаляемыеСтроки Цикл
		
		СтрокаСотрудник = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаСотрудник <> Неопределено Тогда 
			УдаляемыеСотрудники.Добавить(Новый Структура("Сотрудник,ФизическоеЛицо", СтрокаСотрудник.Сотрудник, СтрокаСотрудник.ФизическоеЛицо));
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыУдаленияСотрудников = УдаляемыеСотрудники; 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	
	Для Каждого Сотрудник Из ПараметрыУдаленияСотрудников Цикл
		
		ФизическоеЛицо = Сотрудник.ФизическоеЛицо;
		СтрокиСотрудников = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		
		Если СтрокиСотрудников.Количество() = 0 Тогда
			
			УдалитьСтрокиРаботника("Награды", "ФизическоеЛицо", ФизическоеЛицо);
			УдалитьСтрокиРаботника("Образование", "ФизическоеЛицо", ФизическоеЛицо);
			УдалитьСтрокиРаботника("Сертификаты", "ФизическоеЛицо", ФизическоеЛицо);
			УдалитьСтрокиРаботника("Переподготовка", "ФизическоеЛицо", ФизическоеЛицо);
			УдалитьСтрокиРаботника("ПовышениеКвалификации", "ФизическоеЛицо", ФизическоеЛицо);
			УдалитьСтрокиРаботника("ПослевузовскоеОбразование", "ФизическоеЛицо", ФизическоеЛицо);
			УдалитьСтрокиРаботника("КвалификационныеКатегории", "ФизическоеЛицо", ФизическоеЛицо);
			
		КонецЕсли;
		
		УдалитьСтрокиРаботника("ЛичноеДело", "Сотрудник", Сотрудник.Сотрудник);
		УдалитьСтрокиРаботника("Неявки", 	 "Сотрудник", Сотрудник.Сотрудник);
		УдалитьСтрокиРаботника("Невыходы", 	 "Сотрудник", Сотрудник.Сотрудник);
		УдалитьСтрокиРаботника("ФактическиОтработанноеВремя", "Сотрудник", Сотрудник.Сотрудник);
		
	КонецЦикла;
	
	ПараметрыУдаленияСотрудников.Очистить();
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СведенияМедицинскогоРаботника(Команды.Найти("СведенияМедицинскогоРаботника"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СведенияМедицинскогоРаботника(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущийСотрудник 	= ТекущиеДанные.Сотрудник;
	НовыйАдресХранилища = ДанныеМедицинскогоРаботника(ТекущийСотрудник);
	
	ПараметрыРедактированияМедРаботника = Новый Структура;
	ПараметрыРедактированияМедРаботника.Вставить("Дата",	Объект.Дата);
	ПараметрыРедактированияМедРаботника.Вставить("Ссылка",	Объект.Ссылка);
	ПараметрыРедактированияМедРаботника.Вставить("Сотрудник", ТекущийСотрудник);
	ПараметрыРедактированияМедРаботника.Вставить("Организация", Объект.Организация);
	ПараметрыРедактированияМедРаботника.Вставить("АдресХранилища", НовыйАдресХранилища);
	ПараметрыРедактированияМедРаботника.Вставить("НомерСтрокиСотрудника", Элементы.Сотрудники.ТекущаяСтрока);
	ПараметрыРедактированияМедРаботника.Вставить("ДатаНачалаРасчетаФактическогоВремени", Объект.ДатаНачалаРасчетаФактическогоВремени);
	ПараметрыРедактированияМедРаботника.Вставить("ДатаОкончанияРасчетаФактическогоВремени", Объект.ДатаОкончанияРасчетаФактическогоВремени);
	
	Оповещение = Новый ОписаниеОповещения("СведенияМедицинскогоРаботникаЗавершение", ЭтотОбъект, ПараметрыРедактированияМедРаботника);
	ОткрытьФорму("Документ.СведенияОРаботникахДляМедРегистра.Форма.ФормаСотрудника", ПараметрыРедактированияМедРаботника, ЭтаФорма, , , ,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СведенияМедицинскогоРаботникаЗавершение(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт

	Если ПустаяСтрока(РезультатОткрытияФормы) Тогда
		Возврат;
	КонецЕсли;

	ОбновитьДанныеРаботника(РезультатОткрытияФормы, ПараметрыОповещения.Сотрудник);
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		ЗаполнитьНаКлиенте();
		Возврат;
	КонецЕсли;
	
	// Если есть строки, то необходимо выяснить как именно заполнять: 
	// полным перезаполнением или обновлением.
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтаФорма);
	
	ТекстВопроса = НСтр("ru = 'Обновить данные сотрудников 
							|или перезаполнить документ?'");
						 
	КнопкиОтвета = Новый СписокЗначений;
	КнопкиОтвета.Добавить("Заполнить", НСтр("ru = 'Заполнить'"));
	КнопкиОтвета.Добавить("Обновить", НСтр("ru = 'Обновить'"));
	КнопкиОтвета.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиОтвета, , "Заполнить", НСтр("ru = 'Заполнение документа'"));
	
КонецПроцедуры

// Завершение процесса заполнения документа.
// Старт осуществляется методом Заполнить.
//
&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "Заполнить" Тогда
		
		ЗаполнитьНаКлиенте();
		
	ИначеЕсли Результат = "Обновить" Тогда
		
		СписокСотрудников = Новый Массив;
		Для Каждого Работник Из Объект.Сотрудники Цикл
			СписокСотрудников.Добавить(Работник.Сотрудник);
		КонецЦикла;
		
		ЗаполнитьНаКлиенте(СписокСотрудников);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники, 
		Объект.Организация,
		,
		Объект.Дата,
		,
		АдресСпискаПодобранныхСотрудников());

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьДокументСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Подключение универсальных механизмов.
&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	// КлючевыеРеквизитыЗаполненияФормы	
	ОписаниеКлючевыхРеквизитов = Неопределено;
	ТаблицыОчищаемыеПриИзменении = Неопределено;
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект, ОписаниеКлючевыхРеквизитов);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект, , ОписаниеКлючевыхРеквизитов, ТаблицыОчищаемыеПриИзменении);
	// КлючевыеРеквизитыЗаполненияФормы
	
	КлючевыеХарактеристикиКадровойИстории = ПолучитьКлючевыеХарактеристикиКадровойИстории();
	
	ЗаполнитьТекущиеПозицииСотрудников();
		
КонецПроцедуры

#Область ЗаполнениеДокумента

&НаКлиенте
Процедура ЗаполнитьНаКлиенте(Знач СписокСотрудников = Неопределено)

	Результат = РезультатЗаполненияВДлительнойОперации(СписокСотрудников);
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
	Иначе
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации(Знач СписокСотрудников = Неопределено)
	
	ПараметрыЗаполнения = Новый Структура("ДанныеДляЗаполнения,Ссылка,Организация,ДатаАктуальности,СписокСотрудников,ДатаНачалаРасчетаФактическогоВремени,ДатаОкончанияРасчетаФактическогоВремени");
	ПараметрыЗаполнения.ДанныеДляЗаполнения = Новый Структура("Сотрудники,ЛичноеДело,Награды,Образование,Сертификаты,Переподготовка,ПовышениеКвалификации,ПослевузовскоеОбразование,КвалификационныеКатегории,Неявки,Невыходы,ФактическиОтработанноеВремя");
	ПараметрыЗаполнения.Ссылка = Объект.Ссылка;
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.ДатаАктуальности = Объект.Дата;
	ПараметрыЗаполнения.ДатаНачалаРасчетаФактическогоВремени = Объект.ДатаНачалаРасчетаФактическогоВремени;
	ПараметрыЗаполнения.ДатаОкончанияРасчетаФактическогоВремени = Объект.ДатаОкончанияРасчетаФактическогоВремени;
	ПараметрыЗаполнения.СписокСотрудников = СписокСотрудников;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Сведения о медицинских работниках""'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.СведенияОРаботникахДляМедРегистра.ПодготовитьДанныеДляЗаполнения",
		ПараметрыЗаполнения,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗаполнениеПослеВыполненияДлительнойОперации();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для Каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьИзХранилища(АдресХранилища);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	ЗаполнитьТекущиеПозицииСотрудников();
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УИНОрганизацииПриИзмененииНаСервере(Организация, УИНОрганизации)
	
	Если Не ЗначениеЗаполнено(Организация) Или ПустаяСтрока(УИНОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	// Пустой Шаблон заполнения
	ПустойУИН = "----";
	Если УИНОрганизации = ПустойУИН Тогда
		УИНОрганизации = "";
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.СведенияОбОрганизацииДляМедРегистра.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		ДополнительныеСведения = Набор.Добавить();
		ДополнительныеСведения.Организация = Организация;
	Иначе
		ДополнительныеСведения = Набор[0];
	КонецЕсли;
	ДополнительныеСведения.УИН = УИНОрганизации;
	Набор.Записать();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУИНОрганизацииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.УИНОрганизации = УИНОрганизации(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьУИНОрганизацииНаКлиенте()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.УИНОрганизации = УИНОрганизации(Объект.Организация);
	КонецЕсли;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция УИНОрганизации(Организация)
	
	УИН = "";
	
	ДополнительныеСведенияОрганизации = РегистрыСведений.СведенияОбОрганизацииДляМедРегистра.Выбрать(Новый Структура("Организация", Организация));
	
	Если ДополнительныеСведенияОрганизации.Следующий() Тогда
		УИН = ДополнительныеСведенияОрганизации.УИН;
	КонецЕсли;
	
	Возврат УИН;
	
КонецФункции 

#КонецОбласти

#Область Редактирования

&НаКлиенте
Процедура УдалитьСтрокиРаботника(ИмяТабличнойЧасти, ИмяПоля, Работник)

	УдаляемыеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяПоля, Работник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект[ИмяТабличнойЧасти].Удалить(УдаляемаяСтрока);
	КонецЦикла;	

КонецПроцедуры 

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеРаботника(АдресДанныхРаботника, ТекущийСотрудник)

	Если Не ПустаяСтрока(АдресДанныхРаботника) Тогда 
				
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		
		ДокументОбъект.ОчиститьДанныеСотрудника(ТекущийСотрудник);
		
		ДокументОбъект.ЗаполнитьИзХранилища(АдресДанныхРаботника);
		
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ЗаполнитьТекущиеПозицииСотрудников();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеПозицииСотрудников()

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КадроваяИстория.Сотрудник,
	|	КадроваяИстория.НаименованиеПодразделения,
	|	КадроваяИстория.ДолжностьХарактеристика,
	|	КадроваяИстория.ДатаНачалаЗаписи
	|ПОМЕСТИТЬ ВТКадроваяИстория
	|ИЗ
	|	&ТЗ КАК КадроваяИстория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Сотрудник,
	|	КадроваяИстория.НаименованиеПодразделения КАК ТекущееПодразделение,
	|	КадроваяИстория.ДолжностьХарактеристика КАК ТекущаяДолжность
	|ИЗ
	|	(ВЫБРАТЬ
	|		КадроваяИстория.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(КадроваяИстория.ДатаНачалаЗаписи) КАК ДатаНачалаЗаписи
	|	ИЗ
	|		ВТКадроваяИстория КАК КадроваяИстория
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КадроваяИстория.Сотрудник) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИстория КАК КадроваяИстория
	|		ПО Периоды.Сотрудник = КадроваяИстория.Сотрудник
	|			И Периоды.ДатаНачалаЗаписи = КадроваяИстория.ДатаНачалаЗаписи";
	
	Запрос.УстановитьПараметр("ТЗ", Объект.ЛичноеДело.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Работники = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
		Для Каждого Работник Из Работники Цикл
			ЗаполнитьЗначенияСвойств(Работник, Выборка, "ТекущееПодразделение,ТекущаяДолжность");
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеМедицинскогоРаботника(Сотрудник)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыМедРаботника 	= Новый Структура;
	ДанныеДляЗаполнения 	= Новый Структура;
	
	МедРаботник 	= ДокументОбъект.Сотрудники.Выгрузить(Новый Структура("Сотрудник", Сотрудник));
	ФизическоеЛицо 	= МедРаботник[0].ФизическоеЛицо;
	
	СтруктураОтбораСотрудник 	= Новый Структура("Сотрудник", Сотрудник);
	СтруктураОтбораФизЛицо 		= Новый Структура("ФизическоеЛицо", ФизическоеЛицо);	

	ДанныеДляЗаполнения.Вставить("Награды", ДокументОбъект.Награды.Выгрузить(СтруктураОтбораФизЛицо));
	ДанныеДляЗаполнения.Вставить("Образование", ДокументОбъект.Образование.Выгрузить(СтруктураОтбораФизЛицо));
	ДанныеДляЗаполнения.Вставить("Сертификаты", ДокументОбъект.Сертификаты.Выгрузить(СтруктураОтбораФизЛицо));
	ДанныеДляЗаполнения.Вставить("Переподготовка", ДокументОбъект.Переподготовка.Выгрузить(СтруктураОтбораФизЛицо));
	ДанныеДляЗаполнения.Вставить("ПовышениеКвалификации", ДокументОбъект.ПовышениеКвалификации.Выгрузить(СтруктураОтбораФизЛицо));
	ДанныеДляЗаполнения.Вставить("ПослевузовскоеОбразование", ДокументОбъект.ПослевузовскоеОбразование.Выгрузить(СтруктураОтбораФизЛицо));
	ДанныеДляЗаполнения.Вставить("КвалификационныеКатегории", ДокументОбъект.КвалификационныеКатегории.Выгрузить(СтруктураОтбораФизЛицо));
	
	ДанныеДляЗаполнения.Вставить("Сотрудники", МедРаботник);
	ДанныеДляЗаполнения.Вставить("ЛичноеДело", ДокументОбъект.ЛичноеДело.Выгрузить(СтруктураОтбораСотрудник));
	ДанныеДляЗаполнения.Вставить("Неявки", ДокументОбъект.Неявки.Выгрузить(СтруктураОтбораСотрудник));
	ДанныеДляЗаполнения.Вставить("Невыходы", ДокументОбъект.Невыходы.Выгрузить(СтруктураОтбораСотрудник));
	ДанныеДляЗаполнения.Вставить("ФактическиОтработанноеВремя", ДокументОбъект.ФактическиОтработанноеВремя.Выгрузить(СтруктураОтбораСотрудник));

	ПараметрыМедРаботника.Вставить("ДанныеДляЗаполнения", ДанныеДляЗаполнения); 
	ПараметрыМедРаботника.Вставить("КлючевыеХарактеристикиКадровойИстории", КлючевыеХарактеристикиКадровойИстории); 

	Возврат ПоместитьВоВременноеХранилище(ПараметрыМедРаботника);

КонецФункции

&НаСервере
Функция ПолучитьКлючевыеХарактеристикиКадровойИстории()
	
	Возврат Справочники.ЭлементыКлассификаторовМедРегистра.КлючевыеХарактеристикиКадровойИстории();
	
КонецФункции

#КонецОбласти

#Область СохранениеФайла

&НаКлиенте
Процедура ПроверитьДокументСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	Отказ = Ложь;
	ЕстьОшибки = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Отказ Тогда 
		
		ТекстВопроса = НСтр("ru = 'В документа обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							 
		Оповещение = Новый ОписаниеОповещения("ПроверитьДокументСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
		
	Иначе 
		
		ПроверитьДокументСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьДокументСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)	
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Награды");
	Массив.Добавить("Объект.Образование");
	Массив.Добавить("Объект.Сертификаты");
	Массив.Добавить("Объект.Переподготовка");
	Массив.Добавить("Объект.ПовышениеКвалификации");
	Массив.Добавить("Объект.ПослевузовскоеОбразование");
	Массив.Добавить("Объект.КвалификационныеКатегории");
	Массив.Добавить("Объект.Сотрудники");
	Массив.Добавить("Объект.ЛичноеДело");
	Массив.Добавить("Объект.Неявки");
	Массив.Добавить("Объект.Невыходы");
	Массив.Добавить("Объект.ФактическиОтработанноеВремя");
	
	Возврат Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", Нстр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Дата", Нстр("ru = 'даты документа'")));
	
	Возврат Массив
	
КонецФункции

#КонецОбласти

#КонецОбласти



