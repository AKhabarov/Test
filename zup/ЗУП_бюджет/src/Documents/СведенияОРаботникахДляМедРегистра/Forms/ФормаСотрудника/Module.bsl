
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "Ссылка,Организация,Дата,ДатаНачалаРасчетаФактическогоВремени,
		|ДатаОкончанияРасчетаФактическогоВремени,НомерСтрокиСотрудника,АдресХранилища");
	
	ЗаполнитьДанныеФормы();
	
	ОписанияОбязательныхПолей = Документы.СведенияОРаботникахДляМедРегистра.ОписанияОбязательныхПолей();
	ОписанияОбязательныхПолейТаблиц = Документы.СведенияОРаботникахДляМедРегистра.ОписанияОбязательныхПолейТаблиц();
	
	УстановитьСвойствоПолейАвтоОтметкаНезаполненного();
	УстановитьПараметрыВыбораПолей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФормуКонтактнойИнформации("Телефон");
КонецПроцедуры

&НаКлиенте
Процедура АдресПоПропискеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФормуКонтактнойИнформации("Адрес");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыКадроваяИстория

&НаКлиенте
Процедура КадроваяИсторияПриАктивизацииСтроки(Элемент)
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура КадроваяИсторияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УстановитьАвтоОтметкуНезаполненногоПередНачаломДобавления(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КадроваяИсторияПередУдалением(Элемент, Отказ)
	СнятьАвтоОтметкуНезаполненногоПередУдалением(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КадроваяИсторияТипНачалаЗаписиХарактеристикаЗначениеПриИзменении(Элемент)
	
	ОчиститьСвязанныеПоляСПолемТипНачалаЗаписи();
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура КадроваяИсторияТипОкончанияЗаписиХарактеристикаЗначениеПриИзменении(Элемент)
	
	ОчиститьСвязанныеПоляСПолемТипОкончанияЗаписи();
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура КадроваяИсторияПрибылХарактеристикаЗначениеПриИзменении(Элемент)
	
	ОчиститьСвязанныеПоляСПолемПрибыл();
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура КадроваяИсторияОснованиеУвольненияХарактеристикаЗначениеПриИзменении(Элемент)
	
	ОчиститьСвязанныеПоляСПолемВыбыл();
	ОбновитьОтображение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОбразование

&НаКлиенте
Процедура ОбразованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УстановитьАвтоОтметкуНезаполненногоПередНачаломДобавления(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОбразованиеПередУдалением(Элемент, Отказ)
	СнятьАвтоОтметкуНезаполненногоПередУдалением(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСертификаты

&НаКлиенте
Процедура СертификатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УстановитьАвтоОтметкуНезаполненногоПередНачаломДобавления(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПередУдалением(Элемент, Отказ)
	СнятьАвтоОтметкуНезаполненногоПередУдалением(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПослевузовскоеОбразование

&НаКлиенте
Процедура ПослевузовскоеОбразованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УстановитьАвтоОтметкуНезаполненногоПередНачаломДобавления(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПослевузовскоеОбразованиеПередУдалением(Элемент, Отказ)
	СнятьАвтоОтметкуНезаполненногоПередУдалением(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПереподготовка

&НаКлиенте
Процедура ПереподготовкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УстановитьАвтоОтметкуНезаполненногоПередНачаломДобавления(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПереподготовкаПередУдалением(Элемент, Отказ)
	СнятьАвтоОтметкуНезаполненногоПередУдалением(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПовышениеКвалификации

&НаКлиенте
Процедура ПовышениеКвалификацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УстановитьАвтоОтметкуНезаполненногоПередНачаломДобавления(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПовышениеКвалификацииПередУдалением(Элемент, Отказ)
	СнятьАвтоОтметкуНезаполненногоПередУдалением(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыКвалификационныеКатегории

&НаКлиенте
Процедура КвалификационныеКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УстановитьАвтоОтметкуНезаполненногоПередНачаломДобавления(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КвалификационныеКатегорииПередУдалением(Элемент, Отказ)
	СнятьАвтоОтметкуНезаполненногоПередУдалением(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьФИО(Команда)
	
	ПараметрыФормы = Новый Структура("Фамилия,Имя,Отчество,ДатаИзменения");
	ПараметрыФормы.Фамилия = Фамилия;
	ПараметрыФормы.Имя = Имя;
	ПараметрыФормы.Отчество = Отчество;
	ПараметрыФормы.ДатаИзменения = '00010101';
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФИОЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.СменаФИО", ПараметрыФормы, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Фамилия = Результат.Фамилия;
		Имя = Результат.Имя;
		Отчество = Результат.Отчество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ОчиститьСообщения();
	
	Если Не Модифицированность Тогда
		АдресХранилища = "";
	ИначеЕсли ДанныеЗаполненыКорректно() Тогда
		АдресХранилища = ПоместитьСведенияВоВременноеХранилище();
	Иначе
		Возврат;
	КонецЕсли;
	
	Закрыть(АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть("");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтактнаяИнформация
	
&НаКлиенте
Функция ОткрытьФормуКонтактнойИнформации(ТипКонтактнойИнформации)
	
	ПараметрыКонтактнойИнформации = Новый Структура("ВидКонтактнойИнформации,ЗначенияПолей,Представление,ИмяПоля,ИмяПоляПредставления");
	
	Если ТипКонтактнойИнформации = "Телефон" Тогда
		ПараметрыКонтактнойИнформации.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
		ПараметрыКонтактнойИнформации.ЗначенияПолей = Телефон;
		ПараметрыКонтактнойИнформации.Представление = ТелефонПредставление;
		ПараметрыКонтактнойИнформации.ИмяПоля = "Телефон";
		ПараметрыКонтактнойИнформации.ИмяПоляПредставления = "ТелефонПредставление";
	Иначе
		ПараметрыКонтактнойИнформации.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица");
		ПараметрыКонтактнойИнформации.ЗначенияПолей = АдресПоПрописке;
		ПараметрыКонтактнойИнформации.Представление = АдресПоПропискеПредставление;
		ПараметрыКонтактнойИнформации.ИмяПоля = "АдресПоПрописке";
		ПараметрыКонтактнойИнформации.ИмяПоляПредставления = "АдресПоПропискеПредставление";
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтаФорма, ПараметрыКонтактнойИнформации);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыКонтактнойИнформации, ЭтаФорма, Оповещение);
	
КонецФункции

&НаКлиенте
Функция ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЭтаФорма[ДополнительныеПараметры.ИмяПоля] = Результат.КонтактнаяИнформация;
		ЭтаФорма[ДополнительныеПараметры.ИмяПоляПредставления] = Результат.Представление;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Заполнение

&НаСервере
Процедура ЗаполнитьДанныеФормы()
	
	ПараметрыЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДанныеДляЗаполнения = ПараметрыЗаполнения.ДанныеДляЗаполнения;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеДляЗаполнения.Сотрудники[0]);
	Награды.Загрузить(ДанныеДляЗаполнения.Награды);
	Образование.Загрузить(ДанныеДляЗаполнения.Образование);
	Сертификаты.Загрузить(ДанныеДляЗаполнения.Сертификаты);
	Переподготовка.Загрузить(ДанныеДляЗаполнения.Переподготовка);
	ПовышениеКвалификации.Загрузить(ДанныеДляЗаполнения.ПовышениеКвалификации);
	ПослевузовскоеОбразование.Загрузить(ДанныеДляЗаполнения.ПослевузовскоеОбразование);
	КвалификационныеКатегории.Загрузить(ДанныеДляЗаполнения.КвалификационныеКатегории);
	КадроваяИстория.Загрузить(ДанныеДляЗаполнения.ЛичноеДело);
	Неявки.Загрузить(ДанныеДляЗаполнения.Неявки);
	Невыходы.Загрузить(ДанныеДляЗаполнения.Невыходы);
	ФактическиОтработанноеВремя.Загрузить(ДанныеДляЗаполнения.ФактическиОтработанноеВремя);
	
	Если ПараметрыЗаполнения.Свойство("КлючевыеХарактеристикиКадровойИстории") Тогда 
		КлючевыеХарактеристикиКадровойИстории = ПараметрыЗаполнения.КлючевыеХарактеристикиКадровойИстории;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьПараметрыВыбораПолей()
	
	// Сотрудники
	УстановитьПараметрыВыбораХарактеристики("СемейноеПоложениеХарактеристика", "ArrayOfMarriage");
	УстановитьПараметрыВыбораХарактеристики("ГражданствоХарактеристика", "ArrayOfCitizenship");
	УстановитьПараметрыВыбораХарактеристики("ДокументВидДокументаХарактеристика", "ArrayOfDocumentType");
	
	// КадроваяИстория
	ИменаЭлементовФормы = Новый Массив;
	ИменаЭлементовФормы.Добавить("КадроваяИсторияПрибылИзДругогоСубъектаРФЗначение");
	ИменаЭлементовФормы.Добавить("КадроваяИсторияВыбылВДругойСубъектРФЗначение");
	
	УстановитьПараметрыВыбораХарактеристики(ИменаЭлементовФормы, "ArrayOfTerritory");
	
	ИменаЭлементовФормы.Очистить();
	ИменаЭлементовФормы.Добавить("КадроваяИсторияПрибылИзСтраныХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("КадроваяИсторияВыбылВСтрануХарактеристикаЗначение");
	
	УстановитьПараметрыВыбораХарактеристики(ИменаЭлементовФормы, "ArrayOfCountry");
	
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияВидМедицинскойПомощиХарактеристикаЗначение", "ArrayOfMedicalCare");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияУсловияМедицинскойПомощиХарактеристикаЗначение", "ArrayOfMedicalCondition");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияВидДолжностиХарактеристикаЗначение", "ArrayOfPosition");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияТипПодразделенияХарактеристикаЗначение", "ArrayOfSubdivision");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияТипНачалаЗаписиХарактеристикаЗначение", "ArrayOfRecordTypeIn");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияТипОкончанияЗаписиХарактеристикаЗначение", "ArrayOfRecordTypeOut");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияРежимРаботыХарактеристикаЗначение", "ArrayOfRegime");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияОтношениеКВоеннойСлужбеХарактеристикаЗначение", "ArrayOfMilitary");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияТипЗанятияДолжностиХарактеристикаЗначение", "ArrayOfPositionType");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияДолжностьХарактеристикаЗначение", "ArrayOfPost");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияПрибылХарактеристикаЗначение", "ArrayOfRecordTypeInAdd");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияПрибылПослеОбученияХарактеристикаЗначение", "ArrayOfRecordTypeInStudType");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияПрибылЦелевойНаборХарактеристикаЗначение", "ArrayOfYesNo");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияДвижениеКадровНачалоХарактеристикаЗначение", "ArrayOfRecordTypeMoveInOrg");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияДвижениеКадровОкончаниеХарактеристикаЗначение", "ArrayOfRecordTypeMoveOutOrg");
	УстановитьПараметрыВыбораХарактеристики("КадроваяИсторияОснованиеУвольненияХарактеристикаЗначение", "ArrayOfRecordTypeOutDel");
	
	// Образование
	// Учебное заведение
	ИменаЭлементовФормы.Очистить();
	ИменаЭлементовФормы.Добавить("ОбразованиеУчебноеЗаведениеХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("ПослевузовскоеОбразованиеУчебноеЗаведениеХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("ПереподготовкаУчебноеЗаведениеХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("ПовышениеКвалификацииУчебноеЗаведениеХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("СертификатыУчебноеЗаведениеХарактеристикаЗначение");
	
	УстановитьПараметрыВыбораХарактеристики(ИменаЭлементовФормы, "ArrayOfEducationInstitution");

	// Специальность по диплому
	УстановитьПараметрыВыбораХарактеристики("ОбразованиеСпециальностьХарактеристикаЗначение", "ArrayOfSpeciality");

	// Специальность по сертификату
	ИменаЭлементовФормы.Очистить();
	ИменаЭлементовФормы.Добавить("СертификатыСпециальностьХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("ПослевузовскоеОбразованиеСпециальностьХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("ПереподготовкаСпециальностьХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("ПовышениеКвалификацииСпециальностьХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("КвалификационныеКатегорииСпециальностьХарактеристикаЗначение");
	
	УстановитьПараметрыВыбораХарактеристики(ИменаЭлементовФормы, "ArrayOfCertificateSpeciality");
	
	// Вид образования
	УстановитьПараметрыВыбораХарактеристики("ОбразованиеВидОбразованияХарактеристикаЗначение", "ArrayOfEducationType");
	
	// Вид послевузовского образования
	УстановитьПараметрыВыбораХарактеристики("ПослевузовскоеОбразованиеВидОбразованияХарактеристикаЗначение", "ArrayOfPostGraduationEducationType");
	
	// Целевой набор
	ИменаЭлементовФормы.Очистить();
	ИменаЭлементовФормы.Добавить("ОбразованиеСубъектРФЦелевогоНабораХарактеристикаЗначение");
	ИменаЭлементовФормы.Добавить("ПослевузовскоеОбразованиеСубъектРФЦелевогоНабораХарактеристикаЗначение");
	
	УстановитьПараметрыВыбораХарактеристики(ИменаЭлементовФормы, "ArrayOfTerritory");
	
	// Ученая степень
	УстановитьПараметрыВыбораХарактеристики("ПослевузовскоеОбразованиеУченаяСтепеньХарактеристикаЗначение", "ArrayOfAcademicDegree");
	
	// Квалификационная категория
	УстановитьПараметрыВыбораХарактеристики("КвалификационныеКатегорииКвалификационнаяКатегорияХарактеристикаЗначение", "ArrayOfQualificationCategory");
	
	// Награды
	УстановитьПараметрыВыбораХарактеристики("НаградыНаградаХарактеристика", "ArrayOfNomination");
	
	// Неявки
	УстановитьПараметрыВыбораХарактеристики("НеявкиСостояниеХарактеристика", "ArrayOfSkipPaymentReason");
	УстановитьПараметрыВыбораХарактеристики("НевыходыСостояниеХарактеристика", "ArrayOfAbsenceType");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораХарактеристики(ИменаЭлементовФормы, ИмяКлассификатора, УчитыватьПоляТаблицы = Истина, УчитыватьПоляТекущихДанных = Ложь)
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.КлассификаторыМедРегистра." + ИмяКлассификатора));
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	
	ФиксированныйМассив = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	Если ТипЗнч(ИменаЭлементовФормы) <> Тип("Массив") Тогда
		ИменаЭлементовФормы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИменаЭлементовФормы);
	КонецЕсли;
	
	Для Каждого ИмяЭлементаФормы Из ИменаЭлементовФормы Цикл
		
		Если УчитыватьПоляТаблицы Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				ИмяЭлементаФормы,
				"ПараметрыВыбора",
				ФиксированныйМассив);
			
		КонецЕсли;
		
		Если УчитыватьПоляТекущихДанных Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				ИмяЭлементаФормы + "Значение",
				"ПараметрыВыбора",
				ФиксированныйМассив);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеПоляСПолемТипНачалаЗаписи()
	
	ТекущиеДанные = Элементы.КадроваяИстория.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПрибылХарактеристика = Неопределено;
	ТекущиеДанные.ДвижениеКадровНачалоХарактеристика = Неопределено;
	
	ОчиститьСвязанныеПоляСПолемПрибыл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеПоляСПолемТипОкончанияЗаписи()
	
	ТекущиеДанные = Элементы.КадроваяИстория.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОснованиеУвольненияХарактеристика = Неопределено;
	ТекущиеДанные.ДвижениеКадровОкончаниеХарактеристика = Неопределено;
	
	ОчиститьСвязанныеПоляСПолемВыбыл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеПоляСПолемПрибыл()
	
	ТекущиеДанные = Элементы.КадроваяИстория.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПрибылПослеОбученияХарактеристика	= Неопределено;
	ТекущиеДанные.ПрибылЦелевойНаборХарактеристика	= Неопределено;
	ТекущиеДанные.ПрибылИзДругогоСубъектаРФ			= Неопределено;
	ТекущиеДанные.ПрибылИзСтраныХарактеристика		= Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеПоляСПолемВыбыл()
	
	ТекущиеДанные = Элементы.КадроваяИстория.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВыбылВДругойСубъектРФ			= Неопределено;
	ТекущиеДанные.ВыбылВСтрануХарактеристика 	= Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображение()
	
	ТекущаяСтрока = Элементы.КадроваяИстория.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ТипНачалаЗаписиПрием 			= (ТекущаяСтрока.ТипНачалаЗаписиХарактеристика = КлючевыеХарактеристикиКадровойИстории.Прием);
		ПрибылПослеОбучения 			= (ТекущаяСтрока.ПрибылХарактеристика = КлючевыеХарактеристикиКадровойИстории.ПриемПослеОбучения);
		ПрибылИзДругогоСубъектаРФ		= (ТекущаяСтрока.ПрибылХарактеристика = КлючевыеХарактеристикиКадровойИстории.ПриемИзДругогоСубъектаРФ);
		ПрибылИзДругойСтраны			= (ТекущаяСтрока.ПрибылХарактеристика = КлючевыеХарактеристикиКадровойИстории.ПриемИзДругойСтраны);
		ТипОкончанияЗаписиПеремещение 	= (ТекущаяСтрока.ТипОкончанияЗаписиХарактеристика = КлючевыеХарактеристикиКадровойИстории.ОкончаниеВнутреннееПеремещение);
		ВыбылВДругойСубъектРФ			= (ТекущаяСтрока.ОснованиеУвольненияХарактеристика = КлючевыеХарактеристикиКадровойИстории.ВыбылВДругойСубъектРФ);
		ВыбылВДругуюСтрану				= (ТекущаяСтрока.ОснованиеУвольненияХарактеристика = КлючевыеХарактеристикиКадровойИстории.ВыбылВДругуюСтрану);
		
		Элементы.КадроваяИсторияПриемГруппа.Видимость 					= ТипНачалаЗаписиПрием;
		Элементы.КадроваяИсторияПеремещениеГруппа.Видимость 			= Не ТипНачалаЗаписиПрием;
		Элементы.ПослеОбученияГруппа.Видимость 							= ТипНачалаЗаписиПрием И ПрибылПослеОбучения;
		Элементы.ИзДругогоСубъектаРФГруппа.Видимость 					= ТипНачалаЗаписиПрием И ПрибылИзДругогоСубъектаРФ;
		Элементы.ИзДругойСтраныГруппа.Видимость 						= ТипНачалаЗаписиПрием И ПрибылИзДругойСтраны;
		Элементы.КадроваяИсторияВнутреннееПеремещениеГруппа.Видимость 	= ТипОкончанияЗаписиПеремещение;
		Элементы.КадроваяИсторияУвольнениеГруппа.Видимость 				= Не ТипОкончанияЗаписиПеремещение;
		Элементы.ВДругойСубъектРФГруппа.Видимость 						= Не ТипОкончанияЗаписиПеремещение И ВыбылВДругойСубъектРФ;
		Элементы.ВДругуюСтрануГруппа.Видимость 							= Не ТипОкончанияЗаписиПеремещение И ВыбылВДругуюСтрану;
		
		// Установим отметку незаполненного у полей окончания записи кадровой истории
		ОписанияПолей = ОписанияОбязательныхПолейТаблиц.КадроваяИстория;
		Для Каждого ОписаниеПоля Из ОписанияПолей Цикл
			Если ОписаниеПоля.ОтметкаНезаполненного = Истина Тогда 
				Продолжить;
			КонецЕсли;
			
			Элементы["КадроваяИстория" + ОписаниеПоля.Имя + "Значение"].ОтметкаНезаполненного = ЗначениеЗаполнено(ТекущаяСтрока[ОписаниеПоля.ОпределяющееПоле.Имя]) И Не ЗначениеЗаполнено(ТекущаяСтрока[ОписаниеПоля.Имя]);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДанныеТаблицыВМассив(ИмяТаблицы, ИмяПоляРаботник = "ФизическоеЛицо")
	
	Работник	= ЭтотОбъект[ИмяПоляРаботник];
	Таблица 	= ЭтотОбъект[ИмяТаблицы].Выгрузить();
	
	Таблица.Колонки.Добавить(ИмяПоляРаботник, Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Работник))));
	Таблица.ЗаполнитьЗначения(Работник, ИмяПоляРаботник);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
	 
КонецФункции

&НаСервере
Функция ПоместитьСведенияВоВременноеХранилище()
	
	СведенияОМедРаботнике = Новый Структура("Сотрудники,ЛичноеДело,Награды,Образование,ПослевузовскоеОбразование,Переподготовка,
		|ПовышениеКвалификации,Сертификаты,КвалификационныеКатегории,Неявки,Невыходы,ФактическиОтработанноеВремя");
	
	ПоляСотрудника = "Сотрудник,ФизическоеЛицо,ТабельныйНомер,
		|Фамилия,Имя,Отчество,Пол,ДатаРождения,ДатаСмерти,СтраховойНомерПФР,ИНН,
		|ДокументВидДокументаХарактеристика,ДокументСерия,ДокументНомер,ДокументДатаВыдачи,ДокументКемВыдан,
		|АдресПоПропискеПредставление,АдресПоПрописке,ДатаРегистрации,ТелефонПредставление,Телефон,
		|СемейноеПоложениеХарактеристика,ГражданствоХарактеристика,НаличиеЛичногоАвтомобиля,НаличиеДетейМладше16Лет,
		|ДатаСоставления";
	
	ДанныеСотрудника = Новый Структура(ПоляСотрудника);
	ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ЭтаФорма);
	
	СведенияОМедРаботнике.Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСотрудника);
	
	СведенияОМедРаботнике.Награды = ДанныеТаблицыВМассив("Награды");
	СведенияОМедРаботнике.Образование = ДанныеТаблицыВМассив("Образование");
	СведенияОМедРаботнике.Сертификаты = ДанныеТаблицыВМассив("Сертификаты");
	СведенияОМедРаботнике.Переподготовка = ДанныеТаблицыВМассив("Переподготовка");
	СведенияОМедРаботнике.ПовышениеКвалификации = ДанныеТаблицыВМассив("ПовышениеКвалификации");
	СведенияОМедРаботнике.ПослевузовскоеОбразование = ДанныеТаблицыВМассив("ПослевузовскоеОбразование");
	СведенияОМедРаботнике.КвалификационныеКатегории = ДанныеТаблицыВМассив("КвалификационныеКатегории");

	СведенияОМедРаботнике.ЛичноеДело = ДанныеТаблицыВМассив("КадроваяИстория", "Сотрудник"); 
	СведенияОМедРаботнике.Неявки = ДанныеТаблицыВМассив("Неявки", "Сотрудник");
	СведенияОМедРаботнике.Невыходы = ДанныеТаблицыВМассив("Невыходы", "Сотрудник");
	СведенияОМедРаботнике.ФактическиОтработанноеВремя = ДанныеТаблицыВМассив("ФактическиОтработанноеВремя", "Сотрудник");
	
	ПараметрыЗаполнения = Новый Структура("СписокСотрудников, ДанныеДляЗаполнения");
	ПараметрыЗаполнения.СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	ПараметрыЗаполнения.ДанныеДляЗаполнения = СведенияОМедРаботнике;
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыЗаполнения);
	
КонецФункции

&НаСервере
Процедура УстановитьСвойствоПолейАвтоОтметкаНезаполненного()
	
	РедактируемыеТаблицы = Документы.СведенияОРаботникахДляМедРегистра.ТаблицыРедактируемыеВТекущихДанных();
	
	Для Каждого ОписаниеТаблицы Из ОписанияОбязательныхПолейТаблиц Цикл
		
		Если РедактируемыеТаблицы.Найти(ОписаниеТаблицы.Ключ) <> Неопределено 
			И ЭтотОбъект[ОписаниеТаблицы.Ключ].Количество() > 0 Тогда
			
			Для Каждого ОписаниеПоля Из ОписаниеТаблицы.Значение Цикл
				Элементы[ОписаниеТаблицы.Ключ + ОписаниеПоля.Имя + "Значение"].АвтоОтметкаНезаполненного = ОписаниеПоля.ОтметкаНезаполненного;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОписаниеПоля Из ОписанияОбязательныхПолей Цикл
		Элементы[ОписаниеПоля.Имя].АвтоОтметкаНезаполненного = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтоОтметкуНезаполненногоПередНачаломДобавления(ИмяТаблицы)
	
	ОписаниеПолейТаблицы = ОписанияОбязательныхПолейТаблиц[ИмяТаблицы];
	АвтоОтметкаНеобходима = ЭтотОбъект[ИмяТаблицы].Количество() = 0;
	
	Если АвтоОтметкаНеобходима Тогда
		Для Каждого Поле Из ОписаниеПолейТаблицы Цикл
			ТекущееПоле = Элементы[ИмяТаблицы + Поле.Имя + "Значение"];
			ТекущееПоле.АвтоОтметкаНезаполненного = Поле.ОтметкаНезаполненного;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьАвтоОтметкуНезаполненногоПередУдалением(ИмяТаблицы)
	
	ОписаниеПолейТаблицы = ОписанияОбязательныхПолейТаблиц[ИмяТаблицы];
	АвтоОтметкаНеобходима = Не ЭтотОбъект[ИмяТаблицы].Количество() = 1;
	
	Если Не АвтоОтметкаНеобходима Тогда
		Для Каждого Поле Из ОписаниеПолейТаблицы Цикл
			ТекущееПоле = Элементы[ИмяТаблицы + Поле.Имя + "Значение"];
			ТекущееПоле.АвтоОтметкаНезаполненного = Ложь;
			ТекущееПоле.ОтметкаНезаполненного = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьСтрок(ИмяТаблицы, ОписаниеПолей, ОшибкиПользователю)
	
	Для Каждого Строка Из ЭтотОбъект[ИмяТаблицы] Цикл
		
		Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
			
			Если ЗначениеЗаполнено(Строка[ОписаниеПоля.Имя]) Тогда 
				Продолжить;
			КонецЕсли;
				
			ЗначенияОпределяющегоПоля = Неопределено;
			Если ЗначениеЗаполнено(ОписаниеПоля.ОпределяющееПоле.Имя) Тогда
				ЗначенияОпределяющегоПоля = ОписаниеПоля.ОпределяющееПоле.Значения;
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(ЗначенияОпределяющегоПоля) И ЗначенияОпределяющегоПоля.Найти(Строка[ОписаниеПоля.ОпределяющееПоле.Имя]) <> Неопределено)
				Или Не ЗначениеЗаполнено(ЗначенияОпределяющегоПоля) Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю,
					ИмяТаблицы + "[%1]." + ОписаниеПоля.Имя,
					СтрШаблон(НСтр("ru = 'Не заполнено обязательное поле ""%1"" в строке %2'"), ОписаниеПоля.Представление, ЭтотОбъект[ИмяТаблицы].Индекс(Строка) + 1), "",
					ЭтотОбъект[ИмяТаблицы].Индекс(Строка) + 1, "",
					ЭтотОбъект[ИмяТаблицы].Индекс(Строка));
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗаполненыКорректно()
	
	Отказ = Ложь;
	ОшибкиПользователю = Неопределено;
	
	Для Каждого ОписаниеТаблицы Из ОписанияОбязательныхПолейТаблиц Цикл
		ПроверитьКорректностьСтрок(ОписаниеТаблицы.Ключ, ОписаниеТаблицы.Значение, ОшибкиПользователю);
	КонецЦикла;
	
	Для Каждого ОписаниеПоля Из ОписанияОбязательныхПолей Цикл
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект[ОписаниеПоля.Имя]) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, ОписаниеПоля.Имя,
				СтрШаблон(НСтр("ru = 'Не заполнено обязательное поле ""%1""'"), ОписаниеПоля.Представление), "");
			
		КонецЕсли;
		
	КонецЦикла;

	Если НЕ ОшибкиПользователю = Неопределено Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю, Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти
