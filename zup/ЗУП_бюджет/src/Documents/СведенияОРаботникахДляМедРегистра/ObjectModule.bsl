#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачалаРасчетаФактическогоВремени, "Объект.ДатаНачалаРасчетаФактическогоВремени", Отказ, НСтр("ru='Дата начала'"), , , Ложь);
	
	ОшибкиПользователю = Неопределено;

	Если ПустаяСтрока(УИНОрганизации) Или УИНОрганизации = "........." Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПользователю, "Объект.УИНОрганизации",
			НСтр("ru ='Идентификатор учреждения должен быть заполнен'"), "");
			
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УИНОрганизации");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.Сотрудник,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДокументОснованиеНачалаЗаписи,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДокументОснованиеОкончанияЗаписи,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипНачалаЗаписиХарактеристика,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ТипОкончанияЗаписиХарактеристика,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.РежимРаботыХарактеристика,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылХарактеристика КАК Прибыл,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДвижениеКадровНачалоХарактеристика КАК ДвижениеКадровНачало,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылЦелевойНаборХарактеристика КАК ЦелевойНабор,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылПослеОбученияХарактеристика КАК ВидОбучения,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылИзСтраныХарактеристика КАК Страна,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ПрибылИзДругогоСубъектаРФ КАК СубъектРФ,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ДвижениеКадровОкончаниеХарактеристика КАК ДвижениеКадровОкончание,
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.ОснованиеУвольненияХарактеристика КАК ОснованиеУвольнения
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.СведенияОРаботникахДляМедРегистра.ЛичноеДело КАК СведенияОРаботникахДляМедРегистраЛичноеДело
	|ГДЕ
	|	СведенияОРаботникахДляМедРегистраЛичноеДело.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ЛичноеДелоНачалоЗаписи.Сотрудник, ЛичноеДелоОкончаниеЗаписи.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ЛичноеДелоНачалоЗаписи.ДокументОснованиеНачалаЗаписи, ЛичноеДелоОкончаниеЗаписи.ДокументОснованиеОкончанияЗаписи) КАК ДокументОснование,
	|	ЛичноеДелоНачалоЗаписи.ТипНачалаЗаписиХарактеристика КАК ТипНачалаЗаписи,
	|	ЛичноеДелоНачалоЗаписи.РежимРаботыХарактеристика КАК РежимРаботы,
	|	ЛичноеДелоОкончаниеЗаписи.ТипОкончанияЗаписиХарактеристика КАК ТипОкончанияЗаписи,
	|	ЛичноеДелоНачалоЗаписи.Прибыл,
	|	ЛичноеДелоНачалоЗаписи.ДвижениеКадровНачало,
	|	ЛичноеДелоНачалоЗаписи.ЦелевойНабор,
	|	ЛичноеДелоНачалоЗаписи.ВидОбучения,
	|	ЛичноеДелоНачалоЗаписи.Страна,
	|	ЛичноеДелоНачалоЗаписи.СубъектРФ,
	|	ЛичноеДелоОкончаниеЗаписи.ДвижениеКадровОкончание,
	|	ЛичноеДелоОкончаниеЗаписи.ОснованиеУвольнения
	|ИЗ
	|	ВТДанныеДокумента КАК ЛичноеДелоНачалоЗаписи
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ЛичноеДелоОкончаниеЗаписи
	|		ПО ЛичноеДелоНачалоЗаписи.Сотрудник = ЛичноеДелоОкончаниеЗаписи.Сотрудник
	|			И ЛичноеДелоНачалоЗаписи.ДокументОснованиеНачалаЗаписи = ЛичноеДелоОкончаниеЗаписи.ДокументОснованиеОкончанияЗаписи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ХарактеристикиКадровыхСобытийПоМедРегистру.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Очистить();
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("Сотрудники", "Сотрудник"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотрудникам(ЭтотОбъект, Организация, МассивПараметров, Дата);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет документ данными из хранилища.
//  Параметры: АдресХранилища - адрес временного хранилища.
Процедура ЗаполнитьИзХранилища(АдресХранилища) Экспорт

	ПараметрыЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	СписокСотрудников = ПараметрыЗаполнения.СписокСотрудников;
	ДанныеДляЗаполнения = ПараметрыЗаполнения.ДанныеДляЗаполнения;
	// 1 Скопом весь документ
	Если СписокСотрудников = Неопределено Или СписокСотрудников.Количество() = 0 Тогда 
		
		Для Каждого ТабличнаяЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
			
			ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить();
			Если ДанныеДляЗаполнения.Свойство(ТабличнаяЧасть.Имя) Тогда
				ЭтотОбъект[ТабличнаяЧасть.Имя].Загрузить(ДанныеДляЗаполнения[ТабличнаяЧасть.Имя]);
			КонецЕсли;	
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	// 2 Выбранным списком сотрудников.
	ТабличныеЧасти = ОписаниеТабличныхЧастей();
	Для Каждого ТабличнойЧасти Из ТабличныеЧасти Цикл
		
		Если ДанныеДляЗаполнения.Свойство(ТабличнойЧасти.Ключ) Тогда
			ЗагрузитьВТабличнуюЧастьДокумента(СписокСотрудников, ТабличнойЧасти.Ключ, ДанныеДляЗаполнения[ТабличнойЧасти.Ключ], ТабличнойЧасти.Значение)
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры

// Заполняет Табличную часть документа из коллекции данных.
// Параметры:
// - ИмяТабличнойЧасти -строка, Имя заполняемой табличной части.
// - ДанныеТабличнойЧасти - ТаблицаЗначений,Массив, Коллекция данных для заполнения.
// - ИмяПоляОтбора - строка, значения: "Сотрудник" или "ФизическоеЛицо". Имя поля по которому будет делаться поиск
//                   строк.
Процедура ЗагрузитьВТабличнуюЧастьДокумента(МассивСотрудников, ИмяТабличнойЧасти, ДанныеТабличнойЧасти, ИмяПоляОтбора)
	
	ТабличнаяЧастьДокумента = ЭтотОбъект[ИмяТабличнойЧасти];
	
	Если ТабличнаяЧастьДокумента.Количество() = 0 Тогда
		
		Если ТипЗнч(ДанныеТабличнойЧасти) = Тип("ТаблицаЗначений") Тогда
			ТабличнаяЧастьДокумента.Загрузить(ДанныеТабличнойЧасти);
		Иначе
			Для Каждого Данные Из ДанныеТабличнойЧасти Цикл
				ЗаполнитьЗначенияСвойств(ТабличнаяЧастьДокумента.Добавить(), Данные);
			КонецЦикла;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьМассивУникальнымиЗначениями(МассивСотрудников, ДанныеТабличнойЧасти, ИмяПоляОтбора);
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл 
		
		УдаляемыеСтроки = ТабличнаяЧастьДокумента.НайтиСтроки(Новый Структура(ИмяПоляОтбора, Сотрудник));
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			ТабличнаяЧастьДокумента.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого строка Из ДанныеТабличнойЧасти Цикл
		ЗаполнитьЗначенияСвойств(ТабличнаяЧастьДокумента.Добавить(), Строка);
	КонецЦикла;

КонецПроцедуры 

// Удаляет все строки Сотрудника во всех табличных частях документа.
Процедура ОчиститьДанныеСотрудника(Сотрудник) Экспорт

	СтрокаСотрудника = Сотрудники.НайтиСтроки(Новый Структура("Сотрудник",Сотрудник));
	
	Если СтрокаСотрудника = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицо = СтрокаСотрудника[0].ФизическоеЛицо;
	
	// Проверим можно ли очищать табличные части с данными физического лица.
	СтрокиПоФизическомуЛицу  = Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	
	ОчищатьТЧДанныеФизическогоЛица = ( СтрокаСотрудника.Количество() = СтрокиПоФизическомуЛицу.Количество() );
	
	ТабличныеЧасти = ОписаниеТабличныхЧастей();
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Значение = "Сотрудник" Тогда
			Отбор = Новый Структура("Сотрудник",Сотрудник);
		ИначеЕсли ТабличнаяЧасть.Значение = "ФизическоеЛицо" И ОчищатьТЧДанныеФизическогоЛица Тогда
			Отбор = Новый Структура("ФизическоеЛицо",ФизическоеЛицо);
		Иначе
			Продолжить;
		КонецЕсли;
		
		УдаляемыеСтроки = ЭтотОбъект[ТабличнаяЧасть.Ключ].НайтиСтроки(Отбор);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ЭтотОбъект[ТабличнаяЧасть.Ключ].Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция ОписаниеТабличныхЧастей()
	
	ТабличныеЧасти = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено Тогда 
			ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя,"ФизическоеЛицо");
		Иначе
			ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя,"Сотрудник");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныеЧасти;
	
КонецФункции

Процедура ЗаполнитьМассивУникальнымиЗначениями(МассивПриемник, Источник, ИмяПоля)
	
	УникальныеЗначения = Новый Соответствие;
	
	Для Каждого Значение Из МассивПриемник Цикл
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
	Для Каждого Значение Из Источник Цикл
		Если УникальныеЗначения[Значение[ИмяПоля]] = Неопределено Тогда
			МассивПриемник.Добавить(Значение[ИмяПоля]);
			УникальныеЗначения.Вставить(Значение[ИмяПоля], Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
