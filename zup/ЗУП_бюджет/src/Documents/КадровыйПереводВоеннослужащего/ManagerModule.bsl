#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
	
	Если ДополнительныеПараметры.ОтменаДокумента Тогда
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияПоВсемУчетам(Движения, ИсправленныйДокумент, Ложь, СтруктураВидовУчета);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.КадровыйПереводВоеннослужащего;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = Документы.КадровыйПереводВоеннослужащего.ПредставлениеСсылки(Данные.ВидОперации, Данные.Номер, Данные.Дата);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("ВидОперации");
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	
КонецПроцедуры

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект, , , ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(ДокументОбъект.Движения);
	
	ДанныеДляПроведения = ДанныеДляПроведения(ДокументОбъект.Ссылка);

	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(
		ДокументОбъект.Движения, ДанныеДляПроведения.СотрудникиДаты, ДокументОбъект.Ссылка);
	
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументОбъект.Ссылка, ДокументОбъект.Движения, РежимПроведения, Отказ,РеквизитыДляПроведения(ДокументОбъект),, ДокументОбъект, "ДатаПеревода");
	
	Если ДанныеДляПроведения.КадровыеДвижения.Количество() > 0 Тогда
		КадровыйУчет.СформироватьКадровыеДвижения(ДокументОбъект, ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
		КадровыйУчетРасширенный.ЗарегистрироватьВРеестреКадровыхПриказов(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеРеестраКадровыхПриказов, Отказ);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих")
 			И ДанныеДляПроведения.ГрафикРаботыСотрудников.Количество() Тогда
			
		КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(
			ДокументОбъект.Движения, ДанныеДляПроведения.ГрафикРаботыСотрудников);
			
	КонецЕсли;
	
	Если ДанныеДляПроведения.ПлановыеНачисления.Количество() > 0 Тогда
		
		СтруктураПлановыхНачислений = Новый Структура;
		СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
		СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
		
		РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ДокументОбъект, ДокументОбъект.Движения, СтруктураПлановыхНачислений);
		
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(ДокументОбъект.Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
	
	КадровыйУчетРасширенный.СформироватьДвиженияПоТерриториям(ДокументОбъект.Движения, ДанныеДляПроведения.ТерриторииСотрудников, ДокументОбъект.Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(ДокументОбъект.Движения, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКУдалениюПроведения(ДокументОбъект, ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаПеревода КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.КадровыйПереводВоеннослужащего КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПереводВоеннослужащего")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПереводВоеннослужащего", "Документ.КадровыйПереводВоеннослужащегоСписком.Сотрудники");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		
		ПредставлениеДокумента = Метаданные.Документы.КадровыйПереводВоеннослужащего.Представление();
		ВидыОпераций = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ДоступныеВидыОпераций();
		
		ПорядокВидовОпераций = 1;
		Для Каждого ВидОперации Из ВидыОпераций Цикл
			
			ОписаниеКоманды = ЗарплатаКадрыРасширенный.ОписаниеКомандыСозданияДокумента(
				"Документ.КадровыйПереводВоеннослужащего",
				Строка(ВидОперации),
				Строка(ВидОперации));
			
			Параметры = Новый Структура;
			Параметры.Вставить("ЗначенияЗаполнения", Новый Структура("ВидОперации", ВидОперации));

			ОписаниеКоманды.Параметры = Параметры; 
			
			ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокумента(
				КомандыСозданияДокументов, ОписаниеКоманды);
				
			ПорядокВидовОпераций = ПорядокВидовОпераций + 1;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецФункции

Процедура РассчитатьФОТПоДокументу(ДокументОбъект) Экспорт
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	ИзвестныеКадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицаКадровыхДанных();
	
	КадровыеДанныеСотрудника = ИзвестныеКадровыеДанные.Добавить();
	КадровыеДанныеСотрудника.Сотрудник = ДокументОбъект.Сотрудник;
	КадровыеДанныеСотрудника.Период = ДокументОбъект.ДатаПеревода;
	КадровыеДанныеСотрудника.Организация = ДокументОбъект.ОбособленноеПодразделение;
	
	Если ДокументОбъект.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность Тогда
		КадровыеДанныеСотрудника.Подразделение = ДокументОбъект.Подразделение;
		КадровыеДанныеСотрудника.КоличествоСтавок = 1;
	КонецЕсли;
	
	Если ДокументОбъект.ПеревестиНаДругойГрафик Тогда
		КадровыеДанныеСотрудника.ГрафикРаботы = ДокументОбъект.ГрафикРаботы;
	КонецЕсли; 
			
	СписокНачислений = Новый Массив;
	Для Каждого СтрокаНачисления Из ДокументОбъект.Начисления Цикл
		
		Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеНачисления = ТаблицаНачислений.Добавить();
		ДанныеНачисления.Сотрудник = ДокументОбъект.Сотрудник;
		ДанныеНачисления.Период = ДокументОбъект.ДатаПеревода;
		ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
		ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
		ДанныеНачисления.Размер = СтрокаНачисления.Размер;
		
		ПоказателиНачисления = ДокументОбъект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаНачисления.ИдентификаторСтрокиВидаРасчета));
		Для Каждого СтрокаПоказателя Из ПоказателиНачисления Цикл
			ДанныеПоказателя = ТаблицаПоказателей.Добавить();
			ДанныеПоказателя.Сотрудник = ДокументОбъект.Сотрудник;
			ДанныеПоказателя.Период = ДокументОбъект.ДатаПеревода;
			ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
			ДанныеПоказателя.ДокументОснование = СтрокаНачисления.ДокументОснование;
			ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, ИзвестныеКадровыеДанные);	
	
	Для Каждого ОписаниеНачисления Из РассчитанныеДанные.ПлановыйФОТ Цикл
		
		Отбор = Новый Структура("Начисление, ДокументОснование", ОписаниеНачисления.Начисление, ОписаниеНачисления.ДокументОснование);
		СтрокиДокумента = ДокументОбъект.Начисления.НайтиСтроки(Отбор);
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокиДокумента[0].Размер = ОписаниеНачисления.ВкладВФОТ;
		КонецЕсли; 
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДокументОбъект.Движения.ПлановыеНачисления, ДокументОбъект.Начисления);	
КонецПроцедуры

Функция ПредставлениеСсылки(ВидОперации, Номер, Дата, ЭтоНовый = Ложь, Списком = Ложь) Экспорт
	
	Представление = Строка(ВидОперации) +?(Списком," списком","");
	Если ЭтоНовый Тогда
		Представление = Представление + " (" + НСтр("ru='создание'") + ")";
	Иначе
		Представление = Представление + СтрШаблон(" %1 " + НСтр("ru = 'от'") + " %2", Номер, Формат(Дата, "ДЛФ=Д"));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#Область ПодготовкаДанныхДляПроведенияДокумента

Функция ДанныеДляПроведения(ДокументСсылка)
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Ссылка.Организация КАК Организация,
		|	Сотрудники.Ссылка.Дата КАК Дата,
		|	Сотрудники.Ссылка.Номер КАК Номер,
		|	Сотрудники.Подразделение КАК Подразделение,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА Сотрудники.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхОперацийВоеннослужащих.КадровыйПеревод)
		|			ТОГДА Сотрудники.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность,
		|	ВЫБОР
		|		КОГДА Сотрудники.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхОперацийВоеннослужащих.КадровыйПеревод)
		|			ТОГДА Сотрудники.ПеревестиНаДругойГрафик
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПеревестиНаДругойГрафик,
		|	ВЫБОР
		|		КОГДА Сотрудники.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхОперацийВоеннослужащих.КадровыйПеревод)
		|			ТОГДА Сотрудники.ПеревестиНаДругуюТерриторию
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПеревестиНаДругуюТерриторию,
		|	Сотрудники.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Сотрудники.ДатаПеревода КАК ДатаПеревода,
		|	Сотрудники.Ссылка.ВидОперации КАК ВидОперации,
		|	Сотрудники.Должность КАК Должность,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	1 КАК КоличествоСтавок,
		|	Сотрудники.Территория КАК Территория,
		|	Сотрудники.ГрафикРаботы КАК ГрафикРаботы,
		|	Сотрудники.Ссылка.ИсправленныйДокумент КАК ИсправленныйДокумент,
		|	Сотрудники.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Сотрудники.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Сотрудники.Ссылка.Руководитель КАК Руководитель,
		|	Сотрудники.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Сотрудники.Ссылка.Ответственный КАК Ответственный,
		|	Сотрудники.Ссылка.Комментарий КАК Комментарий,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
		|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	Сотрудники.СовокупнаяТарифнаяСтавка КАК СовокупнаяТарифнаяСтавка,
		|	Сотрудники.ВидТарифнойСтавки КАК ВидТарифнойСтавки
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.КадровыйПереводВоеннослужащего КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПереводВоеннослужащего")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПереводВоеннослужащего", "Документ.КадровыйПереводВоеннослужащегоСписком.Сотрудники");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Сотрудник,", "Сотрудники.Сотрудник, Сотрудники.ИдентификаторСтрокиСотрудника,");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПеревода КАК ДатаСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	Сотрудники.КоличествоСтавок,
		|	Сотрудники.ВидСобытия,
		|	Сотрудники.ГрафикРаботы,
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ПеревестиВДругоеПодразделениеИлиНаДругуюДолжность";
	
	// Таблица для формирования кадровых движений.
	КадровыеДвижения = Запрос.Выполнить().Выгрузить();
	Если ДокументСсылка.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ПереводСПризываНаКонтракт
		Или ДокументСсылка.ВидОперации = Перечисления.ВидыКадровыхОперацийВоеннослужащих.ПереводСтажераНаКонтракт Тогда
		КадровыеДвижения.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровССотрудниками"));
		КадровыеДвижения.ЗаполнитьЗначения(Перечисления.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего, "ВидДоговора");
	КонецЕсли; 
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПеревода КАК ДатаСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ГрафикРаботы,
		|	Сотрудники.ВидСобытия
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ПеревестиНаДругойГрафик";
	
	// Таблица для формирования истории графиков.
	ГрафикРаботыСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ГрафикРаботыСотрудников", ГрафикРаботыСотрудников);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ДатаПеревода КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.ДокументОснование,
		|	ВЫБОР
		|		КОГДА Начисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Начисления.ХарактерНачисления
		|ИЗ
		|	Документ.КадровыйПереводВоеннослужащего.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПереводВоеннослужащего.Начисления КАК КадровыйПереводВоеннослужащегоНачисленияНеОтмененные
		|		ПО Начисления.Ссылка = КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.Ссылка
		|			И Начисления.НомерСтроки <> КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.НомерСтроки
		|			И Начисления.Начисление = КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.Начисление
		|			И Начисления.ДокументОснование = КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.ДокументОснование
		|			И (КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|				ТОГДА ИСТИНА
		|			КОГДА КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.Начисление ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПереводВоеннослужащего")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПереводВоеннослужащего", "Документ.КадровыйПереводВоеннослужащегоСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.НомерСтроки <> КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.НомерСтроки", "И Начисления.НомерСтроки <> КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.НомерСтроки И Начисления.ИдентификаторСтрокиСотрудника = КадровыйПереводВоеннослужащегоНачисленияНеОтмененные.ИдентификаторСтрокиСотрудника");
	КонецЕсли;
	
	// Таблица для формирования плановых начислений.
	ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ДатаПеревода КАК ДатаСобытия,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация,
		|	Показатели.Показатель,
		|	Начисления.ДокументОснование,
		|	Показатели.Значение,
		|	Начисления.Действие,
		|	Сотрудники.ОбособленноеПодразделение,
		|	Начисления.ХарактерНачисления
		|ПОМЕСТИТЬ ВТПоказателиНачислений
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводВоеннослужащего.Показатели КАК Показатели
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводВоеннослужащего.Начисления КАК Начисления
		|			ПО Показатели.Ссылка = Начисления.Ссылка
		|				И Показатели.ИдентификаторСтрокиВидаРасчета = Начисления.ИдентификаторСтрокиВидаРасчета
		|		ПО Сотрудники.Ссылка = Показатели.Ссылка
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Организация,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	Показатели.Значение,
		|	Показатели.Действие,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.ХарактерНачисления
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	ВТПоказателиНачислений КАК Показатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Организация,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Показатели.Организация <> Показатели.ОбособленноеПодразделение
		|				ТОГДА 0
		|			ИНАЧЕ Показатели.Значение
		|		КОНЕЦ) КАК Значение,
		|	Показатели.Действие КАК Действие,
		|	Показатели.ОбособленноеПодразделение,
		|	NULL КАК ХарактерНачисления
		|ИЗ
		|	ВТПоказатели КАК Показатели
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.ДатаСобытия,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Организация,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	Показатели.Действие,
		|	Показатели.ОбособленноеПодразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	МАКСИМУМ(Показатели.Значение),
		|	Показатели.Действие,
		|	NULL,
		|	Показатели.ХарактерНачисления
		|ИЗ
		|	ВТПоказатели КАК Показатели
		|ГДЕ
		|	Показатели.Организация <> Показатели.ОбособленноеПодразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.ДатаСобытия,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.Показатель,
		|	Показатели.Действие,
		|	Показатели.ДокументОснование,
		|	Показатели.ХарактерНачисления";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПереводВоеннослужащего")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПереводВоеннослужащего", "Документ.КадровыйПереводВоеннослужащегоСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Сотрудник,", "Сотрудники.Сотрудник, Сотрудники.ИдентификаторСтрокиСотрудника,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Показатели.Сотрудник,", "Показатели.Сотрудник, Показатели.ИдентификаторСтрокиСотрудника,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Начисления.Ссылка", "ПО Показатели.Ссылка = Начисления.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Начисления.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Сотрудники.Ссылка = Показатели.Ссылка", "ПО Сотрудники.Ссылка = Показатели.Ссылка И Сотрудники.ИдентификаторСтрокиСотрудника = Показатели.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка", "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = ПоказателиНачислений.ИдентификаторСтрокиСотрудника");
	КонецЕсли;
	
	// Таблица для формирования значений показателей.
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПеревода КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПеревода КАК Период,
		|	Сотрудники.Сотрудник,
		|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.Территория,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ПеревестиНаДругуюТерриторию";
	
	// Набор сведений для проведения по территориям сотрудников
	СведенияОТерриторияхСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ТерриторииСотрудников", СведенияОТерриторияхСотрудников);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПеревода КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
		
	// Таблица для формирования значений порядка пересчета тарифной ставки.
	ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПеревода КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА Сотрудники.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ Сотрудники.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
		
	// Таблица для формирования значений совокупной тарифной ставки.
	ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
	// Данные для Реестра кадровых приказов
	ДанныеРеестраКадровыхПриказов = КадровыйУчетРасширенный.ТаблицаРеестраКадровыхПриказов();
	НомерПриказа = "";
	ДатаПриказа = Дата(1, 1, 1);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Организация КАК Организация,
	|	Сотрудники.Ссылка КАК ДокументОснование,
	|	Сотрудники.Номер КАК НомерПриказа,
	|	Сотрудники.Дата КАК ДатаПриказа,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
	|	ДОБАВИТЬКДАТЕ(Сотрудники.ДатаПеревода, ДЕНЬ, -1) КАК Дата
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхОперацийВоеннослужащих.ПереводСтажераНаКонтракт)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерСтр = 1;
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Номер = НомерСтр;
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.Дата);
		
		НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
		
		НомерПриказа = Выборка.НомерПриказа;
		ДатаПриказа = Выборка.ДатаПриказа;
		
	КонецЦикла;
	
	Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(ДатаПриказа, НомерПриказа);
	
	ДанныеРеестраКадровыхПриказов.ЗаполнитьЗначения(Основание, "Основание");
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраКадровыхПриказов", ДанныеРеестраКадровыхПриказов);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументОбъект)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КадровыйПереводВоеннослужащего") Тогда
		РеквизитыДляПроведения.ДатаПеревода = ДокументОбъект.ДатаПеревода;
	Иначе
		РеквизитыДляПроведения.ДатаПеревода = ДокументОбъект.ДатаСобытия;
	КонецЕсли;
	
	РеквизитыДляПроведения.Ссылка = ДокументСсылка;
	РеквизитыДляПроведения.ИсправленныйДокумент = ДокументОбъект.ИсправленныйДокумент;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, ИсправленныйДокумент, ДатаПеревода");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецЕсли
