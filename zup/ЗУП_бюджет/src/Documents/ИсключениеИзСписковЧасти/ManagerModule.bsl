#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.ИсключениеИзСписковЧасти - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.ИсключениеИзСписковЧасти - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ);
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
		
	ИсключаемыеРегистраторы = Новый Массив;
	ИсключаемыеРегистраторы.Добавить(РеквизитыДляПроведения.Ссылка);
	Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
		ИсключаемыеРегистраторы.Добавить(РеквизитыДляПроведения.ИсправленныйДокумент);
	КонецЕсли;
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения);
	КонецЕсли;
	
	ПроведениеСервер.ОтключитьПроверкуДатыЗапретаИзменения(Движения, ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент));
	
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументСсылка, Движения, РежимПроведения, Отказ, РеквизитыДляПроведения, СтруктураВидовУчета, Объект);
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		// Подготовка к регистрации перерасчетов
		ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Ссылка);
		ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		
		// Сбор сведений об увольняемых сотрудниках
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТКадровыеДанныеУвольняемыхСотрудников(МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
				
		ПеремещаемыеСовместители = КадровыйУчетРасширенный.ОсновныеСотрудникиВнутреннихСовместителей(
			РеквизитыДляПроведения.Организация, ДатыУвольненияСотрудников(РеквизитыДляПроведения.Ссылка), ИсключаемыеРегистраторы);
		
		// Кадровый учет
		КадровыеСобытия = КадровыеСобытияУвольнениеПоВременнойТаблице(МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
		
		КадровыйУчет.СформироватьКадровыеДвижения(РеквизитыДляПроведения.Ссылка, Движения, КадровыеСобытия, , Ложь);
		
		КадровыйУчет.СформироватьДвиженияВидовЗанятостиСотрудников(Движения, ПеремещаемыеСовместители);
		
		ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.Организация, СтруктураВидовУчета);
		
		// Прекращаем плановые начисления
		ПрекратитьПлановыеНачисления(
			Движения, ДанныеДляПроведения.ДанныеДляРегистрацииПрекращенияПлановыхНачислений);
		
		// Прекращаем плановые удержания
		РасчетЗарплатыРасширенный.ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(
			Движения, ДанныеДляПроведения.ДанныеДляРегистрацииПрекращенияПлановыхУдержаний);
				
		// Учет зарплаты
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
			Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(
			Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
		
		ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(
			Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			
		РасчетЗарплатыРасширенный.СформироватьДвиженияУдержанийДоПределаПоСотрудникам(
			Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияДоПределаПоСотрудникам);
			
		РасчетЗарплатыРасширенный.СформироватьЗадолженностьПоУдержаниямФизическихЛиц(Движения, ДанныеДляПроведения.ЗадолженностьПоУдержаниям);
			
		ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ);
		
#Область РегистрацияДоходовВУчетеНДФЛ
		
		// - Регистрация бухучета начислений и удержаний, выполняется до вызова регистрации доходов в учете НДФЛ.
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
					Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
					ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено);
					
		// - Регистрация бухучета займов.
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
					Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
					Неопределено, ДанныеДляПроведения.УдержанияЗаймов, Неопределено);
			
		// НДФЛ
		ДатаОперацииПоНалогам = УчетНДФЛРасширенный.ДатаОперацииПоДокументу(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации);
		
		// - Регистрация материальной выгоды в учете НДФЛ.
		УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(
			Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.МатериальнаяВыгода, Ложь, , ДокументСсылка);
		
		ДатыПолученияДоходовПоОплатеТруда = Новый Соответствие;
		Для каждого СобытияИсключения  Из КадровыеСобытия Цикл
			
			ДатаИсключения = НачалоДня(НачалоДня(СобытияИсключения.ДатаСобытия) - 1);
			Если НачалоМесяца(РеквизитыДляПроведения.ПериодРегистрации) = НачалоМесяца(ДатаИсключения) Тогда
				ДатаПолученияДоходаПоОплатеТруда = ДатаИсключения;
			Иначе
				ДатаПолученияДоходаПоОплатеТруда = КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации);
			КонецЕсли;
			ДатыПолученияДоходовПоОплатеТруда.Вставить(СобытияИсключения.Сотрудник, ДатаПолученияДоходаПоОплатеТруда);
			
		КонецЦикла;
		
		ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(РеквизитыДляПроведения, Движения, ДанныеДляПроведения, ДатаОперацииПоНалогам, ДатыПолученияДоходовПоОплатеТруда, Отказ);
#КонецОбласти		
		
		// КорректировкиВыплаты
		УчетНачисленнойЗарплаты.ЗарегистрироватьКорректировкиВыплаты(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПорядокВыплаты);
		
		// - Регистрация начислений и удержаний в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам,
			ДанныеДляПроведения.УдержанияПоСотрудникам,	Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
		
		// - Регистрация отработанного времени в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, РеквизитыДляПроведения.ПорядокВыплаты, Истина);
		
		// - Регистрация бухучета НДФЛ.
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
					Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
					Неопределено, Неопределено, ДанныеДляПроведения.НДФЛПоСотрудникам);
		
		// - Регистрация начислений в доходах для страховых взносов.
		УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
		
		УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СтраховыеВзносы);
			
		УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
		
		// Займы
		// - взаиморасчеты по займам
		ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(
			Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
		
		// - Регистрация займов в учете заработной платы.
		УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьПогашениеЗаймов(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияЗаймов, РеквизитыДляПроведения.ПорядокВыплаты);
		
		// - Регистрация материальной выгоды в учете НДФЛ.			
		УчетНДФЛ.СформироватьНалогиВычеты(
			Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПорядокВыплаты);
					
		// - Регистрация бухучета займов.
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
				Неопределено, Неопределено, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			
		СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(
			Движения, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.ДанныеДляРегистрацииСостоянийСотрудников);
			
		// Регистрация перерасчетов
		Если ЕстьПерерасчеты Тогда
			ПерерасчетЗарплаты.РегистрацияПерерасчетов(
				Движения, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Ссылка.Организация);
		КонецЕсли; 
			
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
		
КонецПроцедуры

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОтменаДокумента Тогда
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияПоВсемУчетам(Движения, ИсправленныйДокумент, Ложь, СтруктураВидовУчета);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧасти;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.ИсключениеИзСписковЧасти);
		
	КонецЕсли; 
	
КонецФункции

Функция КадровыеСобытияУвольнениеПоВременнойТаблице(МенеджерВременныхТаблиц, РеквизитыДляПроведения)
	
	КадровыеСобытия = КадровыйУчетРасширенный.ПустаяТаблицаКадровыхСобытийПриУвольнении();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.Период, ДЕНЬ, 1) КАК ДатаСобытия,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
		|	КадровыеДанныеСотрудников.ВидДоговора КАК ВидДоговора,
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(ИсключениеИзСписковЧасти.ДатаОсвобожденияОтДолжности, ДЕНЬ, 1),
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение),
		|	КадровыеДанныеСотрудников.ВидДоговора,
		|	ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка),
		|	КадровыеДанныеСотрудников.КоличествоСтавок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсключениеИзСписковЧасти КАК ИсключениеИзСписковЧасти
		|		ПО КадровыеДанныеСотрудников.Сотрудник = ИсключениеИзСписковЧасти.Сотрудник
		|ГДЕ
		|	ИсключениеИзСписковЧасти.ДатаОсвобожденияОтДолжности < ИсключениеИзСписковЧасти.ДатаИсключения
		|	И ИсключениеИзСписковЧасти.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия";
		
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) <> Тип("ДокументСсылка.ИсключениеИзСписковЧасти") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ИсключениеИзСписковЧасти", "Документ.ИсключениеИзСписковЧастиСписком.Сотрудники");
	КонецЕсли; 
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(КадровыеСобытия.Добавить(), Выборка);
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция КадровыеСобытияУвольнение(Сотрудник, ДатаИсключения, ВидДоговора) Экспорт
	
	// Создаем таблицу событий
	КадровыеСобытия = КадровыйУчетРасширенный.ПустаяТаблицаКадровыхСобытийПриУвольнении();
	
	// Заполняем таблицу
	НовоеСобытие = КадровыеСобытия.Добавить();
	НовоеСобытие.Сотрудник = Сотрудник;
	НовоеСобытие.ДатаСобытия = КонецДня(ДатаИсключения) + 1;
	НовоеСобытие.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	НовоеСобытие.ФизическоеЛицо = ФизическоеЛицо;
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция ДанныеДляПроведения(РеквизитыДляПроведения, МенеджерВременныхТаблиц, ПериодРегистрации, Организация, СтруктураВидовУчета) Экспорт
	
	Если СтруктураВидовУчета = Неопределено Тогда
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляПроведения = РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);

		ДобавитьДанныеДляРегистрацииПрекращенияПлановыхНачислений(ДанныеДляПроведения, МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
		ДобавитьДанныеДляРегистрацииПрекращенияПлановыхУдержаний(ДанныеДляПроведения, МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
		ДобавитьДанныеДляРегистрацииСостоянийСотрудников(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет", "Ссылка.ПериодРегистрации");
		РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления");
		РасчетЗарплатыРасширенный.ЗаполнитьПогашениеЗадолженностиПоУдержаниям(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ПериодРегистрации);
		
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
		
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплатыРасширенный.ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		
		ДобавитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка); 
		
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ	
	|	ИсключениеИзСписковЧасти.Ссылка,
	|	ИсключениеИзСписковЧасти.Организация,
	|	ИсключениеИзСписковЧасти.ИсправленныйДокумент,
	|	ИсключениеИзСписковЧасти.ПериодРегистрации,
	|	ИсключениеИзСписковЧасти.Дата,
	|	ИсключениеИзСписковЧасти.ПорядокВыплаты,
	|	ИсключениеИзСписковЧасти.Номер,
	|	ИсключениеИзСписковЧасти.ПланируемаяДатаВыплаты
	|ИЗ
	|	Документ.ИсключениеИзСписковЧасти КАК ИсключениеИзСписковЧасти
	|ГДЕ
	|	ИсключениеИзСписковЧасти.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсключениеИзСписковЧастиСписком.Ссылка,
	|	ИсключениеИзСписковЧастиСписком.Организация,
	|	ИсключениеИзСписковЧастиСписком.ИсправленныйДокумент,
	|	ИсключениеИзСписковЧастиСписком.ПериодРегистрации,
	|	ИсключениеИзСписковЧастиСписком.Дата,
	|	ИсключениеИзСписковЧастиСписком.ПорядокВыплаты,
	|	ИсключениеИзСписковЧастиСписком.Номер,
	|	ИсключениеИзСписковЧастиСписком.ПланируемаяДатаВыплаты
	|ИЗ
	|	Документ.ИсключениеИзСписковЧастиСписком КАК ИсключениеИзСписковЧастиСписком
	|ГДЕ
	|	ИсключениеИзСписковЧастиСписком.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.ИсключениеИзСписковЧасти.РаспределениеПоТерриториямУсловиямТруда КАК ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	ИсключениеИзСписковЧастиРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.ИсключениеИзСписковЧастиСписком.РаспределениеПоТерриториямУсловиямТруда КАК ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	ИсключениеИзСписковЧастиСпискомРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";	
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("
		|Ссылка,
		|Организация,
		|ПериодРегистрации,
		|Дата,
		|Сотрудник,
		|ПорядокВыплаты,
		|Номер,
		|ИсправленныйДокумент,
		|ДатаОсвобожденияОтДолжности,
		|ДатаУдовлетворенияДенежнымДовольствием,
		|ПланируемаяДатаВыплаты,
		|РаспределениеПоТерриториямУсловиямТруда");
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Процедура ДобавитьДанныеДляРегистрацииПрекращенияПлановыхНачислений(ДанныеДляПроведения, МенеджерВременныхТаблиц, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//Запрос.Текст = "Выбрать * из ВТДанныеДокументов КАК КадровыеДанныеСотрудников";
	//Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУдовлетворенияДенежнымДовольствием, ДЕНЬ, 1) КАК Период,
		|	КадровыеДанныеСотрудников.ДатаУдовлетворенияДенежнымДовольствием,
		|	КадровыеДанныеСотрудников.ДатаОсвобожденияОтДолжности,
		|	КадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	ВТДанныеДокументов КАК КадровыеДанныеСотрудников";
		
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииПрекращенияПлановыхНачислений", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРегистрацииПрекращенияПлановыхУдержаний(ДанныеДляПроведения, МенеджерВременныхТаблиц, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.ГоловнаяОрганизация КАК Организация
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)";
		
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииПрекращенияПлановыхУдержаний", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРегистрацииСостоянийСотрудников(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение) КАК Состояние,
		|	ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ДатаИсключения, ДЕНЬ, 1) КАК Начало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание,
		|	НЕОПРЕДЕЛЕНО КАК ВидВремени
		|ИЗ
		|	Документ.ИсключениеИзСписковЧасти КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) <> Тип("ДокументСсылка.ИсключениеИзСписковЧасти") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ИсключениеИзСписковЧасти", "Документ.ИсключениеИзСписковЧастиСписком.Сотрудники");
	КонецЕсли; 
	
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииСостоянийСотрудников", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура СоздатьВТКадровыеДанныеУвольняемыхСотрудников(МенеджерВременныхТаблиц, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаИсключения КАК Период,
		|	ТаблицаДокумента.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.ИсключениеИзСписковЧасти КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ИсключениеИзСписковЧасти") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ИсключениеИзСписковЧасти", "Документ.ИсключениеИзСписковЧастиСписком.Сотрудники");
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
		
	Отборы = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Регистратор", "<>", ДокументСсылка);
		
	ПоляОтбораПериодическихДанных = Новый Структура;
	ПоляОтбораПериодическихДанных.Вставить("КадроваяИсторияСотрудников", Отборы);
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "ВидДоговора,ВидЗанятости,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,ГоловнаяОрганизация", ПоляОтбораПериодическихДанных);
	
КонецПроцедуры

Процедура ДобавитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.ИсключениеИзСписковЧасти") Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПогашениеЗаймов.Ссылка КАК ДокументСсылка,
			|	ПогашениеЗаймов.ИдентификаторСтроки,
			|	ПогашениеЗаймов.НомерСтроки,
			|	ПогашениеЗаймов.ФизическоеЛицо,
			|	ПогашениеЗаймов.Ссылка.Организация КАК Организация,
			|	ПогашениеЗаймов.Подразделение,
			|	ПогашениеЗаймов.Ссылка.ПериодРегистрации КАК Месяц,
			|	ПогашениеЗаймов.ДоговорЗайма,
			|	ПогашениеЗаймов.НачисленоПроцентов,
			|	ПогашениеЗаймов.ПогашениеПроцентов,
			|	ПогашениеЗаймов.ПогашениеЗайма,
			|	ПогашениеЗаймов.МатериальнаяВыгода,
			|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду,
			|	ПогашениеЗаймов.Ссылка.ДатаИсключения КАК ДатаОперации
			|ПОМЕСТИТЬ ВТПогашениеЗаймов
			|ИЗ
			|	Документ.ИсключениеИзСписковЧасти.ПогашениеЗаймов КАК ПогашениеЗаймов
			|ГДЕ
			|	ПогашениеЗаймов.Ссылка = &Ссылка";
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПогашениеЗаймов.Ссылка КАК ДокументСсылка,
			|	ПогашениеЗаймов.ИдентификаторСтроки,
			|	ПогашениеЗаймов.НомерСтроки,
			|	ПогашениеЗаймов.ФизическоеЛицо,
			|	ПогашениеЗаймов.Ссылка.Организация КАК Организация,
			|	ПогашениеЗаймов.Подразделение,
			|	ПогашениеЗаймов.Ссылка.ПериодРегистрации КАК Месяц,
			|	ПогашениеЗаймов.ДоговорЗайма,
			|	ПогашениеЗаймов.НачисленоПроцентов,
			|	ПогашениеЗаймов.ПогашениеПроцентов,
			|	ПогашениеЗаймов.ПогашениеЗайма,
			|	ПогашениеЗаймов.МатериальнаяВыгода,
			|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду,
			|	Сотрудники.ДатаИсключения КАК ДатаОперации
			|ПОМЕСТИТЬ ВТПогашениеЗаймов
			|ИЗ
			|	Документ.ИсключениеИзСписковЧастиСписком.ПогашениеЗаймов КАК ПогашениеЗаймов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсключениеИзСписковЧастиСписком.Сотрудники КАК Сотрудники
			|		ПО ПогашениеЗаймов.Ссылка = Сотрудники.Ссылка
			|			И ПогашениеЗаймов.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника
			|ГДЕ
			|	ПогашениеЗаймов.Ссылка = &Ссылка";
			
	КонецЕсли;
		
	Запрос.Выполнить();
	
	ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймамПоВременнойТаблице(ДанныеДляПроведения, Запрос.МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(
		ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , , Истина);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКУдалениюПроведения(ДокументОбъект, ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(
			ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, Истина);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверкаСтрокиСписочногоДокумента = ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаСтрокиСписочногоДокумента");
	ПроверяетсяУвольнение = (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсключениеИзСписковЧасти"));
	ПолныеПраваНаДокумент = ПолныеПраваНаДокумент();
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		Если ПроверяетсяУвольнение Тогда
								
			ЗарплатаКадры.ПроверитьКорректностьДаты(ДокументОбъект.Ссылка, ДокументОбъект.ДатаИсключения, "Объект.ДатаИсключения", Отказ, НСтр("ru='Дата исключения'"), , , Ложь);
			ЗарплатаКадры.ПроверитьКорректностьДаты(ДокументОбъект.Ссылка, ДокументОбъект.ДатаОсвобожденияОтДолжности, "Объект.ДатаОсвобожденияОтДолжности", Отказ, НСтр("ru='Дата освобождения от должности'"), , , Ложь);
			ЗарплатаКадры.ПроверитьКорректностьДаты(ДокументОбъект.Ссылка, ДокументОбъект.ДатаУдовлетворенияДенежнымДовольствием, "Объект.ДатаУдовлетворенияДенежнымДовольствием", Отказ, НСтр("ru='Дата удовлетворения денежным довольствием'"), , , Ложь);
					
		КонецЕсли;
		
		ЗарплатаКадры.ПроверитьДатуВыплаты(ДокументОбъект, Отказ);
				
	КонецЕсли;
	
		
	Если ПроверяетсяУвольнение Тогда
		ПроверяемаяКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
	Иначе
		ПроверяемаяКоллекция = ДокументОбъект.Сотрудники;
	КонецЕсли;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		СотрудникиДокумента = Новый Соответствие;
		Для каждого ЭлементКоллекции Из ПроверяемаяКоллекция Цикл
				
			// Проверка дублирования строк по сотруднику списочного документа
			Если Не ПроверяетсяУвольнение Тогда
				
				НомерСтроки = СотрудникиДокумента.Получить(ЭлементКоллекции.Сотрудник);
				Если НомерСтроки <> Неопределено Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru='По сотруднику %1 уже оформлено увольнение в строке номер'") + " " + НомерСтроки,
						ЭлементКоллекции.Сотрудник);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "Объект.Сотрудники[" + (ЭлементКоллекции.НомерСтроки - 1) + "].Сотрудник", , Отказ);
					
				Иначе
					СотрудникиДокумента.Вставить(ЭлементКоллекции.Сотрудник, ЭлементКоллекции.НомерСтроки);
				КонецЕсли;
				
			КонецЕсли;
			
			// Проверка возможности проведения по кадровому учету
			ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
			ПараметрыПолученияСотрудниковОрганизаций.Организация 				= ДокументОбъект.Организация;
			ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= ЭлементКоллекции.ДатаИсключения;
			ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ЭлементКоллекции.ДатаИсключения;
			ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
			ПараметрыПолученияСотрудниковОрганизаций.ИсключаемыйРегистратор 	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Ссылка);
			
			Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
				ПараметрыПолученияСотрудниковОрганизаций.ИсключаемыйРегистратор.Добавить(ДокументОбъект.ИсправленныйДокумент);
			КонецЕсли; 
			
			КадровыйУчет.ПроверитьРаботающихСотрудников(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементКоллекции.Сотрудник),
				ПараметрыПолученияСотрудниковОрганизаций,
				Отказ,
				Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.Сотрудники"));
			
		КонецЦикла;
		
		СотрудникиДаты = Новый ТаблицаЗначений;
		СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		СотрудникиДаты.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
		
		Для Каждого ПроверяемаяСтруктура Из ПроверяемаяКоллекция Цикл
			СтрокаСотрудникиДаты = СотрудникиДаты.Добавить();
			СтрокаСотрудникиДаты.Сотрудник = ПроверяемаяСтруктура.Сотрудник;
			СтрокаСотрудникиДаты.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
			СтрокаСотрудникиДаты.ДатаСобытия = ПроверяемаяСтруктура.ДатаИсключения;
		КонецЦикла;
		
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(ДокументОбъект.Ссылка, СотрудникиДаты);
		
		Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаСотрудника.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				СтрокаСотрудника.ДатаСобытия = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник) + 86400;
			КонецЕсли;
		КонецЦикла;
		
		ДокументыДляИсключения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Ссылка);
		Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
			ДокументыДляИсключения.Добавить(ДокументОбъект.ИсправленныйДокумент);
		КонецЕсли;
		
		КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчетуТаблицыСотрудников(СотрудникиДаты, ДокументыДляИсключения, Отказ);
		
	КонецЕсли;
	
		
	Если ПолныеПраваНаДокумент И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
			
		ПроверитьПериодДействияНачислений(ДокументОбъект, Отказ);
			
		// Проверка корректности распределения по источникам финансирования и по территориям и условиям труда.
		ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет,Удержания,НДФЛ,ПогашениеЗаймов,КорректировкиВыплаты";
		ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет";
					
		ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
			ДокументОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
			
		РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
			ДокументОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрекратитьПлановыеНачисления(Движения, ДанныеДляРегистрацииПрекращенияПлановыхНачислений) Экспорт
	
	РасчетЗарплатыРасширенный.ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(
		Движения, ДанныеДляРегистрацииПрекращенияПлановыхНачислений.Скопировать(,"Период, Сотрудник"));
		
	СписокНачислений = Новый Массив;
	ОсновныеНачисления = РасчетДенежногоДовольствия.ОсновныеНачисленияДенежногоДовольствия(Истина);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНачислений, ОсновныеНачисления.ОкладыПоДолжности);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНачислений, ОсновныеНачисления.ОкладыЗаЗвание);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНачислений, ОсновныеНачисления.НадбавкиЗаВыслугуЛет);
	
	Если Движения.ПлановыеНачисления.Количество() > 0 Тогда
		Для Каждого СтрокаПН Из ДанныеДляРегистрацииПрекращенияПлановыхНачислений Цикл	
			Если СтрокаПН.ДатаОсвобожденияОтДолжности < СтрокаПН.ДатаУдовлетворенияДенежнымДовольствием Тогда
				НовыйПериод = КонецДня(СтрокаПН.ДатаОсвобожденияОтДолжности) + 1;
				Для каждого Запись Из Движения.ПлановыеНачисления Цикл
					Если Запись.Сотрудник <> СтрокаПН.Сотрудник Тогда 
						Продолжить;
					КонецЕсли;
					Если СписокНачислений.Найти(Запись.Начисление) = Неопределено Тогда
						Запись.Период = НовыйПериод;
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаИсключения КАК ПериодДействия,
		|	ТаблицаДокумента.ДатаОсвобожденияОтДолжности КАК ДатаОсвобожденияОтДолжности,
		|	ТаблицаДокумента.ДатаУдовлетворенияДенежнымДовольствием КАК ДатаУдовлетворенияДенежнымДовольствием,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ИсключениеИзСписковЧасти КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ИсключениеИзСписковЧасти") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ИсключениеИзСписковЧасти", "Документ.ИсключениеИзСписковЧастиСписком.Сотрудники");
	КонецЕсли; 
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ)
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ИменаРеквизитов = 
	"ПериодРегистрации,
	|Организация,
	|ИсправленныйДокумент";
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИменаРеквизитов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.*
	               |ИЗ
	               |	Документ.ИсключениеИзСписковЧасти.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Ссылка = &Ссылка";

	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ИсключениеИзСписковЧасти") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ИсключениеИзСписковЧасти", "Документ.ИсключениеИзСписковЧастиСписком");
	КонецЕсли; 
					   
	Начисления = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
	ПараметрыПроверки.Организация = РеквизитыДокумента.Организация;
	ПараметрыПроверки.ПериодРегистрации = РеквизитыДокумента.ПериодРегистрации;
	ПараметрыПроверки.Документ = ДокументСсылка;
	ПараметрыПроверки.Начисления = Начисления;
	ПараметрыПроверки.ИсправленныйДокумент = РеквизитыДокумента.ИсправленныйДокумент;
	
	РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
	
КонецПроцедуры

// Локально перепишем УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений()
// т.к. Увольнение требует особенной регистрации налогов.
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(РеквизитыДляПроведения, Движения, ДанныеДляПроведения, ДатаОперацииПоНалогам, ДатыПолученияДоходовПоОплатеТруда, Отказ)
	
	УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(
		Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПериодРегистрации, Ложь, Истина, , РеквизитыДляПроведения.Ссылка);
	
	ОплатаТруда = УчетНДФЛРасширенный.КодыДоходовОплатыТруда();
	Для каждого Движение Из Движения.СведенияОДоходахНДФЛ Цикл
		
		ДатаПолученияДоходаПоОплатеТруда = ДатыПолученияДоходовПоОплатеТруда.Получить(Движение.Сотрудник);
		Если ОплатаТруда.Найти(Движение.КодДохода) <> Неопределено Тогда
			Движение.ДатаПолученияДохода = ДатаПолученияДоходаПоОплатеТруда;
		КонецЕсли;
		
	КонецЦикла;
			
	ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьДоходыНДФЛСведениямиОРаспределенииПоСтатьямФинансирования(Движения);
	
	// Регистрация исчисленного налога.
	УчетНДФЛ.СформироватьНалогиВычеты(
		Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ,, Истина, РеквизитыДляПроведения.ПланируемаяДатаВыплаты);
		
	УчетНДФЛРасширенный.СформироватьСоциальныеВычетыПоУдержаниям(
		РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Удержания, , Истина);
	
	// Учет исчисленного налога в "зарплате".
	УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(
		Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НДФЛПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПорядокВыплаты);
	
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

#Область ОбработкаПроверкиЗаполнения

Функция ДатыУвольненияСотрудников(Ссылка)
	
	ПроверяемыеДаты = Новый Соответствие;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаИсключения КАК ДатаУвольнения
		|ИЗ
		|	Документ.ИсключениеИзСписковЧасти КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаУвольнения,
		|	Сотрудник";
	
	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ИсключениеИзСписковЧасти") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ИсключениеИзСписковЧасти", "Документ.ИсключениеИзСписковЧастиСписком.Сотрудники");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДатаУвольнения") Цикл
		
		СписокСотрудников = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокСотрудников.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		
		ПроверяемыеДаты.Вставить(Выборка.ДатаУвольнения, СписокСотрудников);;
		
	КонецЦикла;
	
	Возврат ПроверяемыеДаты;
	
КонецФункции

Процедура ПроверитьПериодДействияНачислений(ДокументОбъект, Отказ)
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = ДокументОбъект.Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Начисления", НСтр("ru='Начисления'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Пособия", НСтр("ru='Пособия'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Удержания", НСтр("ru='Удержания'"), "Удержание"));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru='Перерасчет прошлого периода'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ДокументОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
