#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.ИсключениеИзСписковЧастиСписком - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.ИсключениеИзСписковЧастиСписком - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Документы.ИсключениеИзСписковЧасти.ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов, Движения, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	Возврат Документы.ИсключениеИзСписковЧасти.СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ИсключениеИзСписковЧастиСписком;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.ИсключениеИзСписковЧастиСписком);
			
	КонецЕсли; 
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Объект.Сотрудники.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
	Если ФизическиеЛицаСотрудников.Количество() > 0 Тогда
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаСотрудников, "Значение");
	Иначе
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецЕсли;
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ФизическиеЛица;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Процедура УстановитьИдентификаторыСтрокНДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УвольнениеСпискомНДФЛ.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УвольнениеСпискомНДФЛ.НомерСтроки) КАК НомерСтроки,
		|	УвольнениеСпискомНДФЛ.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтрокиНДФЛ
		|ПОМЕСТИТЬ ВТДокументыСНеУникальнымиИдентификаторамиСтрокНДФЛ
		|ИЗ
		|	Документ.ИсключениеИзСписковЧастиСписком.НДФЛ КАК УвольнениеСпискомНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеСпискомНДФЛ.Ссылка,
		|	УвольнениеСпискомНДФЛ.ИдентификаторСтрокиНДФЛ
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УвольнениеСпискомНДФЛ.НомерСтроки) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыСНеУникальнымиИдентификаторамиСтрокНДФЛ.Ссылка
		|ИЗ
		|	ВТДокументыСНеУникальнымиИдентификаторамиСтрокНДФЛ КАК ДокументыСНеУникальнымиИдентификаторамиСтрокНДФЛ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СоответствиеИдентификаторовСотрудникам = Новый Соответствие;
			
			ИдентификаторСтрокиНДФЛ = 0;
			Для каждого СтрокаНДФЛ Из ДокументОбъект.НДФЛ Цикл
				
				ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ + 1;
				
				СоответствиеИдентификаторов = СоответствиеИдентификаторовСотрудникам.Получить(СтрокаНДФЛ.Сотрудник);
				Если СоответствиеИдентификаторов = Неопределено Тогда
					СоответствиеИдентификаторов = Новый Соответствие;
				КонецЕсли; 
				
				СоответствиеИдентификаторов.Вставить(СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ, ИдентификаторСтрокиНДФЛ);
				СоответствиеИдентификаторовСотрудникам.Вставить(СтрокаНДФЛ.Сотрудник, СоответствиеИдентификаторов);
				
				СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ;
				
			КонецЦикла;
			
			ФормироватьДвижения = Ложь;
			Для каждого СтрокаВычетов Из ДокументОбъект.ПримененныеВычетыНаДетейИИмущественные Цикл
				
				СоответствиеИдентификаторов = СоответствиеИдентификаторовСотрудникам.Получить(СтрокаВычетов.Сотрудник);
				Если СоответствиеИдентификаторов <> Неопределено Тогда
					
					ИдентификаторСтрокиНДФЛ = СоответствиеИдентификаторов.Получить(СтрокаВычетов.ИдентификаторСтрокиНДФЛ);
					Если ИдентификаторСтрокиНДФЛ <> Неопределено Тогда
						СтрокаВычетов.ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ;
						ФормироватьДвижения = Истина;
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Если ФормироватьДвижения Тогда
				
				ДокументОбъект.Движения.ИмущественныеВычетыНДФЛ.Очистить();
				ДокументОбъект.Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Очистить();
				
			    ДатаОперацииПоНалогам = УчетНДФЛРасширенный.ДатаОперацииПоДокументу(ДокументОбъект.Дата, ДокументОбъект.ПериодРегистрации);
				
				ДанныеДляПроведения = РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
				РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументОбъект.Ссылка);
				
				ДанныеДокумента = ДанныеДляПроведения.НДФЛ;
				КолонкиДанных = ДанныеДокумента.Колонки;
	
				// Определяем соответствие видов вычетов полям таблицы.
				ВидыВычетов = ВидыВычетовПоПолямТаблицы();
				
				// Вычеты на детей
				МассивВычетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыВычетовНаДетей());
				Для каждого ИмяРесурса Из МассивВычетов Цикл
					Если КолонкиДанных.Найти(ИмяРесурса) <> Неопределено Тогда
						УчетНДФЛ.СформироватьСтандартныеВычетыПоТаблицеЗначений(
							ДокументОбъект.Движения, Ложь, ДокументОбъект.Организация, ДатаОперацииПоНалогам, СтандартныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяРесурса, ВидыВычетов[ИмяРесурса]), , , , Истина);
					КонецЕсли;
				КонецЦикла;
				
				// Имущественные вычеты
				МассивВычетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыИмущественныхВычетов());
				Для каждого ИмяРесурса Из МассивВычетов Цикл
					Если КолонкиДанных.Найти(ИмяРесурса) <> Неопределено Тогда
						УчетНДФЛ.СформироватьПредоставленныеИмущественныеВычетыПоТаблицеЗначений(
							ДокументОбъект.Движения, Ложь, ДокументОбъект.Организация, ДатаОперацииПоНалогам, ИмущественныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяРесурса, ВидыВычетов[ИмяРесурса]), , , , Истина);
					КонецЕсли;
				КонецЦикла;

				// Запись документа с обновленными движениями
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Функция РассчитываемыеРесурсыВычетовНаДетей() 

	Возврат "ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой,ПримененныйВычетНаВторогоРебенка,ПримененныйВычетНаВторогоРебенкаДвойной,ПримененныйВычетНаВторогоРебенкаДвойнойВторой,ПримененныйВычетНаТретьегоРебенка,ПримененныйВычетНаТретьегоРебенкаДвойной,ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой";

КонецФункции 

Функция РассчитываемыеРесурсыИмущественныхВычетов() 

	Возврат "ПримененныйВычетИмущественныйРасходы,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании";

КонецФункции 

Функция ВидыВычетовПоПолямТаблицы()

	// Определяем соответствие видов вычетов полям таблицы.
	ВидыВычетов = Новый Соответствие;
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйПроцентыПоКредитам", Справочники.ВидыВычетовНДФЛ.Код312);
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйПроцентыПриПерекредитовании", Справочники.ВидыВычетовНДФЛ.Код318);
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйРасходы", Справочники.ВидыВычетовНДФЛ.Код311);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаДетей", Справочники.ВидыВычетовНДФЛ.Код108);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейДвойной", Справочники.ВидыВычетовНДФЛ.Код110);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код111);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенка", Справочники.ВидыВычетовНДФЛ.Код115);
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаДвойной", Справочники.ВидыВычетовНДФЛ.Код119);
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код123);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенка", Справочники.ВидыВычетовНДФЛ.Код116);
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаДвойной", Справочники.ВидыВычетовНДФЛ.Код120);
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код124);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидов", Справочники.ВидыВычетовНДФЛ.Код109);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовДвойной", Справочники.ВидыВычетовНДФЛ.Код112);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код113);
	
	Возврат ВидыВычетов	

КонецФункции

Функция ИмущественныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяКолонки, КодВычета)

	ИмущественныеВычеты = ДанныеДокумента.Скопировать(,"ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение, " + ИмяКолонки);
	ИмущественныеВычеты.Колонки[ИмяКолонки].Имя = "Сумма";
	ИмущественныеВычеты.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ИмущественныеВычеты.ЗаполнитьЗначения(КодВычета, "КодВычета");
	ИмущественныеВычеты.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	
	Для каждого СтрокаТЗ Из ИмущественныеВычеты Цикл
		СтрокаТЗ.Год = Год(СтрокаТЗ.МесяцНалоговогоПериода)
	КонецЦикла;
		
	Возврат ИмущественныеВычеты	

КонецФункции

Функция СтандартныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяКолонки, КодВычета)

	СтандартныеВычеты = ДанныеДокумента.Скопировать(,"ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение, " + ИмяКолонки);
	СтандартныеВычеты.Колонки[ИмяКолонки].Имя = "Сумма";
	СтандартныеВычеты.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	СтандартныеВычеты.ЗаполнитьЗначения(КодВычета, "КодВычета");
	
	Возврат СтандартныеВычеты	

КонецФункции

Процедура ЗаполнитьИдентификаторыСтрокСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ИсключениеИзСписковЧастиСписком.Сотрудники КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ИдентификаторСтрокиСотрудника = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ИдентификаторыСотрудников = Новый Соответствие;
			МаксимальныйИдентификаторСтрокиСотрудника = 1;
			Для каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл
				
				СтрокаСотрудника.ИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника;
				ИдентификаторыСотрудников.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ИдентификаторСтрокиСотрудника);
				
				МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника + 1;
				
			КонецЦикла;
						
			Для каждого СтрокаДокумента Из ДокументОбъект.Взносы Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.НДФЛ Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Начисления Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.НачисленияПерерасчет Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ПогашениеЗаймов Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Показатели Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Пособия Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ПособияПерерасчет Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ПримененныеВычетыНаДетейИИмущественные Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
						
			Для каждого СтрокаДокумента Из ДокументОбъект.Удержания Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.РаспределениеРезультатовНачислений Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.РаспределениеРезультатовУдержаний Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
									
			Для каждого СтрокаДокумента Из ДокументОбъект.РаспределениеПоТерриториямУсловиямТруда Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.КорректировкиВыплаты Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
