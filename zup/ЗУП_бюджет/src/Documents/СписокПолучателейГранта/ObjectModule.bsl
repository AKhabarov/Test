#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УникальныеЗначения = Новый Соответствие;
	ИндексСтроки = 0;
	
	ЗарплатаКадры.ПроверитьКорректностьМесяца(Ссылка, Месяц, "Объект.Месяц", Отказ, НСтр("ru='Месяц'"), '19800101');
	
	ДатаОкончанияГранта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Грант, "ДатаОкончания");
	
	Если ДатаОкончанияГранта < Месяц Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Месяц не может быть больше срока окончания периода, на который был предоставлен грант (%1).'"),
			Формат(ДатаОкончанияГранта, "ДФ='ММММ гггг'"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка, "Объект.Месяц", , Отказ);
		
	КонецЕсли;
	
	Для каждого ДанныеСотрудника Из Получатели Цикл
		
		Если УникальныеЗначения[ДанныеСотрудника.Сотрудник] = Неопределено Тогда
			УникальныеЗначения.Вставить(ДанныеСотрудника.Сотрудник, Истина);
		Иначе
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Информация о сотруднике %1 была введена в документе ранее.'"), 
				ДанныеСотрудника.Сотрудник);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка, 
				"Объект.Получатели[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", , Отказ);
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	Выборка = ВыборкаКонфликтующихРегистраторов(Ссылка, Месяц, Организация, Грант, Получатели.ВыгрузитьКолонку("Сотрудник"));
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В периоде %1 г. информация о сотруднике %2 была введена ранее документом %3.'"),
			Формат(Месяц, "ДФ='ММММ гггг'"), Выборка.Сотрудник, Выборка.Регистратор);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	СформироватьДвиженияПолучателейГрантов(Движения, ДанныеДляПроведения.ДанныеПолучателейГрантов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене.
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("Получатели", "Сотрудник"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотрудникам(ЭтотОбъект, Организация, МассивПараметров, Месяц);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыборкаКонфликтующихРегистраторов(Регистратор, Месяц, Организация, Грант, Сотрудники)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПолучателиГрантов.Регистратор КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПолучателиГрантов.Регистратор) КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПолучателиГрантов.Сотрудник) КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ПолучателиГрантов КАК ПолучателиГрантов
	|ГДЕ
	|	ПолучателиГрантов.Период = &Период
	|	И ПолучателиГрантов.Грант = &Грант
	|	И ПолучателиГрантов.Сотрудник В(&Сотрудники)
	|	И ПолучателиГрантов.Регистратор <> &Регистратор";
	
	Запрос.УстановитьПараметр("Период",			Месяц);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Грант",			Грант);
	Запрос.УстановитьПараметр("Сотрудники",		Сотрудники);
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СписокПолучателейГранта.Организация КАК Организация,
	|	СписокПолучателейГранта.Грант КАК Грант,
	|	СписокПолучателейГранта.Месяц КАК Период,
	|	ПолучателиГранта.Сотрудник,
	|	ВЫБОР
	|		КОГДА СписокПолучателейГранта.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСпискомПолучателейГрантов.Изменить)
	|				И ПолучателиГранта.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСПолучателямиГрантов.Исключить)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЯвляетсяПолучателем
	|ИЗ
	|	Документ.СписокПолучателейГранта КАК СписокПолучателейГранта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписокПолучателейГранта.Получатели КАК ПолучателиГранта
	|		ПО (ПолучателиГранта.Ссылка = СписокПолучателейГранта.Ссылка)
	|			И (СписокПолучателейГранта.Ссылка = &Ссылка)";
	
	ДанныеДляПроведения = Новый Структура;
	ДанныеДляПроведения.Вставить("ДанныеПолучателейГрантов", Запрос.Выполнить().Выгрузить());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура СформироватьДвиженияПолучателейГрантов(Движения, ДанныеПолучателейГрантов)
	
	Если ДанныеПолучателейГрантов.Количество() > 0 Тогда
		
		Движения.ПолучателиГрантов.Загрузить(ДанныеПолучателейГрантов);
		Движения.ПолучателиГрантов.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли