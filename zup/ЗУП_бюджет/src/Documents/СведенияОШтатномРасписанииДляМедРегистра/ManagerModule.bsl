#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура ПодготовитьДанныеДляЗаполнения(Параметры, АдресХранилища) Экспорт	
		
	Организация 		= Параметры.Организация;
	ДатаАктуальности 	= Параметры.ДатаАктуальности;
	СписокПозиций       = Параметры.СписокПозицийШтатногоРасписания;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.СоздатьВТХарактеристикиОбъектовПоМедРегистру(МенеджерВременныхТаблиц);
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	Если СписокПозиций = Неопределено Или СписокПозиций.Количество() = 0 Тогда
		
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(ДатаАктуальности, Организация);
		
		УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(
			МенеджерВременныхТаблиц,
			Истина,
			ПараметрыПостроения,
			"КоличествоСтавок,Должность,Подразделение,Описание");
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ШтатноеРасписание.ПозицияШтатногоРасписания,
		               |	ШтатноеРасписание.КоличествоСтавок,
		               |	ХарактеристикиПодразделенийПоМедРегистру.Характеристика КАК ПодразделениеХарактеристика,
		               |	ХарактеристикиДолжностиПоМедРегистру.Характеристика КАК ДолжностьХарактеристика,
		               |	ПодразделенияОрганизаций.Наименование КАК НаименованиеПодразделения,
		               |	ВЫРАЗИТЬ(ШтатноеРасписание.Описание КАК СТРОКА(1000)) КАК Описание
		               |ИЗ
		               |	ВТШтатноеРасписание КАК ШтатноеРасписание
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиДолжностиПоМедРегистру
		               |		ПО (ХарактеристикиДолжностиПоМедРегистру.Классификатор = ЗНАЧЕНИЕ(Справочник.КлассификаторыМедРегистра.ArrayOfPost))
		               |			И ШтатноеРасписание.Должность = ХарактеристикиДолжностиПоМедРегистру.Объект
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиПодразделенийПоМедРегистру
		               |		ПО (ХарактеристикиПодразделенийПоМедРегистру.Классификатор = ЗНАЧЕНИЕ(Справочник.КлассификаторыМедРегистра.ArrayOfSubdivision))
		               |			И ШтатноеРасписание.Подразделение = ХарактеристикиПодразделенийПоМедРегистру.Объект
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		               |		ПО ШтатноеРасписание.Подразделение = ПодразделенияОрганизаций.Ссылка
		               |ГДЕ
		               |	ХарактеристикиДолжностиПоМедРегистру.Характеристика ЕСТЬ НЕ NULL 
		               |	И ХарактеристикиПодразделенийПоМедРегистру.Характеристика ЕСТЬ НЕ NULL ";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
		               |	ШтатноеРасписание.КоличествоСтавок,
		               |	ХарактеристикиПодразделенийПоМедРегистру.Характеристика КАК ПодразделениеХарактеристика,
		               |	ХарактеристикиДолжностиПоМедРегистру.Характеристика КАК ДолжностьХарактеристика,
		               |	ШтатноеРасписание.Подразделение.Наименование КАК НаименованиеПодразделения,
		               |	ВЫРАЗИТЬ(ШтатноеРасписание.Описание КАК СТРОКА(1000)) КАК Описание
		               |ИЗ
		               |	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиДолжностиПоМедРегистру
		               |		ПО (ХарактеристикиДолжностиПоМедРегистру.Классификатор = ЗНАЧЕНИЕ(Справочник.КлассификаторыМедРегистра.ArrayOfPost))
		               |			И ШтатноеРасписание.Должность = ХарактеристикиДолжностиПоМедРегистру.Объект
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиОбъектовПоМедРегистру КАК ХарактеристикиПодразделенийПоМедРегистру
		               |		ПО (ХарактеристикиПодразделенийПоМедРегистру.Классификатор = ЗНАЧЕНИЕ(Справочник.КлассификаторыМедРегистра.ArrayOfSubdivision))
		               |			И ШтатноеРасписание.Подразделение = ХарактеристикиПодразделенийПоМедРегистру.Объект
		               |ГДЕ
		               |	ШтатноеРасписание.Ссылка В(&Список)";
					   
		Запрос.УстановитьПараметр("Список", СписокПозиций);			   
		
	КонецЕсли;

	Параметры.Вставить("ДанныеДляЗаполнения", Запрос.Выполнить().Выгрузить() );
	
	ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);
	
КонецПроцедуры	

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт 
	
	ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
	ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
	
	ОписаниеВыгруженногоФайла.Владелец = Ссылка;
	ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
	ОписаниеВыгруженногоФайла.ПроверятьCheckXML = Ложь;
	ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Ложь;
	
	ВыгруженныеФайлы = Новый Массив;
	ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	
	Возврат ВыгруженныеФайлы;
	
КонецФункции

#Область ФормированиеXMLФайла

Процедура ОбработкаФормированияФайла(Объект) Экспорт
	
	СведенияОШтатномРасписании = ПодготовитьСведенияОШтатномРасписании(Объект.Ссылка);
	
	ТекстФайла = ТекстXMLШтатногоРасписанияИзXDTO(СведенияОШтатномРасписании);
	
	ИмяФайлаДляМедРегистра =  Формат(СведенияОШтатномРасписании.ДатаДокумента, "ДФ='ддММгггг-ччмм'") + "-StaffEntry.xml";
	
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Объект.Ссылка, ИмяФайлаДляМедРегистра, ТекстФайла, Ложь, "UTF-8");
	
КонецПроцедуры

Функция ПодготовитьСведенияОШтатномРасписании(Документ)

	ДанныеДляЗаполнения = Новый Структура; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	#Область ПозицииШтатногоРасписания
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.НаименованиеПодразделения,
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.ПодразделениеХарактеристика.Код,
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.ПодразделениеХарактеристика.Наименование,
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.ПодразделениеХарактеристика.Родитель,
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.ДолжностьХарактеристика.Код,
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.ДолжностьХарактеристика.Наименование,
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.ДолжностьХарактеристика.Родитель,
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.КоличествоСтавок,
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.Описание КАК Описание
	               |ИЗ
	               |	Документ.СведенияОШтатномРасписанииДляМедРегистра.ШтатныеЕдиницы КАК СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы
	               |ГДЕ
	               |	СведенияОШтатномРасписанииДляМедРегистраШтатныеЕдиницы.Ссылка = &Ссылка";
	ДанныеДляЗаполнения.Вставить("ПозицииШтатногоРасписания", Запрос.Выполнить().Выбрать());			   
	#КонецОбласти
	
	#Область Организация
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОШтатномРасписанииДляМедРегистра.Ссылка КАК Организация,
	               |	СведенияОШтатномРасписанииДляМедРегистра.Организация.Наименование КАК Наименование,
	               |	СведенияОШтатномРасписанииДляМедРегистра.Организация.НаименованиеПолное КАК НаименованиеПолное,
	               |	СведенияОШтатномРасписанииДляМедРегистра.Дата,
	               |	СведенияОШтатномРасписанииДляМедРегистра.УИНОрганизации
	               |ИЗ
	               |	Документ.СведенияОШтатномРасписанииДляМедРегистра КАК СведенияОШтатномРасписанииДляМедРегистра
	               |ГДЕ
	               |	СведенияОШтатномРасписанииДляМедРегистра.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеОрганизации = Новый Структура("OID,Name");
	Если Выборка.Следующий() Тогда
		
		ОписаниеОрганизации.Вставить("Name", Выборка.Наименование);
		ОписаниеОрганизации.Вставить("OID", Выборка.УИНОрганизации);
		
		ДанныеДляЗаполнения.Вставить("ДатаДокумента", Выборка.Дата);
		
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ОписаниеОрганизации", ОписаниеОрганизации);
	
	#КонецОбласти

	Возврат ДанныеДляЗаполнения;
	
КонецФункции 

Функция ТекстXMLШтатногоРасписанияИзXDTO(ДанныеШтатногоРасписания)
	
	Если ТипЗнч(ДанныеШтатногоРасписания) <> Тип("Структура") Тогда 
		Возврат Неопределено;
	КонецЕсли;

	ОписаниеОрганизации = ДанныеШтатногоРасписания.ОписаниеОрганизации;
	ПозицияШР = ДанныеШтатногоРасписания.ПозицииШтатногоРасписания;
	
	URIПространстваИмен = Метаданные.ПакетыXDTO.ФорматОбменаШтатногоРасписанияСМедРегистром.ПространствоИмен;
	ПакетXDTO			= ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
	ТипСписокПозиций 	= ПакетXDTO.КорневыеСвойства.Получить("ArrayOfStaffEntry").Тип;
	ЗаголовокПозицийШР 	= ФабрикаXDTO.Создать(ТипСписокПозиций);
	
	// Типы
	ТипыОбъектовОбменаXDTO = Новый Структура;
	ЗаполнитьПереченьТиповОбъектовОбменаXDTO(ТипыОбъектовОбменаXDTO, ТипСписокПозиций);
	
	ЗаписиПозицийШР = ЗаголовокПозицийШР["StaffEntry"];
	
	Пока ПозицияШР.Следующий() Цикл
		
		ОбъектПозицияШР = ФабрикаXDTO.Создать(ТипыОбъектовОбменаXDTO.StaffEntry);
		
		ОбъектПозицияШР.Organization = ОбъектXDTOПоОписанию(ОписаниеОрганизации, ТипыОбъектовОбменаXDTO.StaffEntry_Organization);
		ОбъектПозицияШР.Post 	= ОбъектXDTOПоОписанию(Новый Структура("ID, Name",
																	ПозицияШР.ДолжностьХарактеристикаКод,
																	ПозицияШР.ДолжностьХарактеристикаНаименование),
															ТипыОбъектовОбменаXDTO.StaffEntry_Post);
		ОбъектПозицияШР.SubdivisionName	= ПозицияШР.НаименованиеПодразделения;
		ОбъектПозицияШР.SubdivisionType 	= ОбъектXDTOПоОписанию(Новый Структура("ID, Name",
																	ПозицияШР.ПодразделениеХарактеристикаКод,
																	ПозицияШР.ПодразделениеХарактеристикаНаименование),
															ТипыОбъектовОбменаXDTO.StaffEntry_SubdivisionType);
		ОбъектПозицияШР.TotalWage 	= ПозицияШР.КоличествоСтавок;
		ОбъектПозицияШР.Comment 	= ПозицияШР.Описание;
		
		ЗаписиПозицийШР.Добавить(ОбъектПозицияШР);
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML.
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, ЗаголовокПозицийШР , "ArrayOfStaffEntry");
	
	// Получаем содержимое файла в виде строки.
	СтрокаXML = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	СтрокаXML = УдалитьПространствоИмен(СтрокаXML);
	
    Возврат СтрокаXML;
	
КонецФункции 

Процедура ЗаполнитьПереченьТиповОбъектовОбменаXDTO(ОписаниеТипов, Знач ТипОбъектаXTDO, Знач ИмяРодителя = "")
	
	Если Не ПустаяСтрока(ИмяРодителя) Тогда
		ИмяРодителя = ИмяРодителя + "_";
	КонецЕсли;
	
	Для Каждого СвойствоXTDO Из ТипОбъектаXTDO.Свойства Цикл
		
		Если ПустаяСтрока(СвойствоXTDO.Тип.Имя) Тогда
			
			ИмяСвойства = ИмяРодителя + СокрЛП(СвойствоXTDO.Имя);
			
			ОписаниеТипов.Вставить(ИмяСвойства, СвойствоXTDO.Тип);
			ЗаполнитьПереченьТиповОбъектовОбменаXDTO(ОписаниеТипов, СвойствоXTDO.Тип, ИмяСвойства);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектXDTOПоОписанию(Описание, Тип)
	
	 ОбъектXDTO = ФабрикаXDTO.Создать(Тип);
	 ЗаполнитьОбъектПоОписанию(ОбъектXDTO, Описание);
	 
	 Возврат ОбъектXDTO;

КонецФункции 

Процедура ЗаполнитьОбъектПоОписанию(ОбъектXDTO, Описание)
	
	Для Каждого Свойство Из Описание Цикл
		
		Если Свойство.Значение = Null Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Свойство.Значение)=Тип("ОбъектXDTO") Тогда
			ОбъектXDTO[Свойство.Ключ] = Свойство.Значение;
		Иначе
			ОбъектXDTO[Свойство.Ключ] = XMLСтрока(Свойство.Значение);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция УдалитьПространствоИмен(ТекстXML, ИмяКорня = "ArrayOfStaffEntry", Кодировка = "UTF-8")
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(Кодировка);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			ИмяУзла = ЧтениеXML.Имя;
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "xmlns"
						Или ЧтениеXML.Имя = "xmlns:xs"
						Или ЧтениеXML.Имя = "xmlns:xsi"
						Или ЧтениеXML.Имя = "xsi:type" Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				КонецЦикла;
				
				Если ИмяУзла = ИмяКорня Тогда
					ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://service.rosminzdrav.ru/MedStaff");
					ЗаписьXML.ЗаписатьАтрибут("xmlns:i", "http://www.w3.org/2001/XMLSchema-instance");
					ЗаписьXML.ЗаписатьАтрибут("version", "2.0.10");
					ЗаписьXML.ЗаписатьАтрибут("formatVersion", "2.0");
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе
			ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли