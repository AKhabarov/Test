#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Организация = Параметры.Организация;
	Дата = Параметры.Дата;
	
	ДолжностьХарактеристика = Параметры.ДолжностьХарактеристика;
	КоличествоСтавок = Параметры.КоличествоСтавок;
	НаименованиеПодразделения = Параметры.НаименованиеПодразделения;
	Описание = Параметры.Описание;
	ПодразделениеХарактеристика = Параметры.ПодразделениеХарактеристика;
	ПозицияШтатногоРасписания = Параметры.ПозицияШтатногоРасписания;
	
	ПозицияШтатногоРасписанияПрежняя = ПозицияШтатногоРасписания;
	
	#Область Параметры_выбора

	УстановитьПараметрыВыбораХарактеристики("ПодразделениеХарактеристика", "ArrayOfSubdivision");
	УстановитьПараметрыВыбораХарактеристики("ДолжностьХарактеристика", "ArrayOfPost");
	
	#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПозицияШтатногоРасписанияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПозицияШтатногоРасписания) Тогда
		
		Позиции = Новый массив;
		Позиции.Добавить(ПозицияШтатногоРасписания);
		
		ЗаполнитьНаКлиенте(Позиции);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Модифицированность Тогда
		АдресХранилища = ПоместитьСведенияВоВременноеХранилищеНаКлиенте();
	Иначе
		АдресХранилища = "";
	КонецЕсли;
	
	Закрыть(АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть("");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПараметрыВыбораХарактеристики(ИменаЭлементовФормы, ИмяКлассификатора)
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.КлассификаторыМедРегистра." + ИмяКлассификатора));
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	ФиксированныйМассив = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	Если ТипЗнч(ИменаЭлементовФормы) = Тип("Массив") Тогда
		
		Для Каждого ИмяЭлементаФормы Из ИменаЭлементовФормы Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																ИмяЭлементаФормы,
																"ПараметрыВыбора",
																ФиксированныйМассив);
		КонецЦикла;
															
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																ИменаЭлементовФормы,
																"ПараметрыВыбора",
																ФиксированныйМассив);
	КонецЕсли;
															
КонецПроцедуры

&НаКлиенте
Функция ПоместитьСведенияВоВременноеХранилищеНаКлиенте()
	
	СведенияОПозиции = Новый Структура("ПозицияШтатногоРасписания,ДолжностьХарактеристика,КоличествоСтавок,
										|НаименованиеПодразделения,Описание,ПодразделениеХарактеристика");
	ЗаполнитьЗначенияСвойств(СведенияОПозиции, ЭтаФорма);
	
	СписокПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПозицияШтатногоРасписания);
	Если ПозицияШтатногоРасписания <> ПозицияШтатногоРасписанияПрежняя Тогда
		СписокПозиций.Добавить(ПозицияШтатногоРасписанияПрежняя);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("СписокПозицийШтатногоРасписания", СписокПозиций);
	ПараметрыЗаполнения.Вставить("ДанныеДляЗаполнения", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияОПозиции));
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыЗаполнения);
	
КонецФункции	

#Область ЗаполнениеДокументаВДлительнойОперации

&НаКлиенте
Процедура ЗаполнитьНаКлиенте(Знач СписокПозицийШтатногоРасписания = Неопределено)

	Результат = РезультатЗаполненияВДлительнойОперации(СписокПозицийШтатногоРасписания);
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации(Знач СписокПозицийШтатногоРасписания = Неопределено)
	
	ПараметрыЗаполнения = Новый Структура("ДанныеДляЗаполнения,Организация,ДатаАктуальности,СписокПозицийШтатногоРасписания");
	ПараметрыЗаполнения.Организация = Организация;
	ПараметрыЗаполнения.ДатаАктуальности = Дата;
	ПараметрыЗаполнения.СписокПозицийШтатногоРасписания = СписокПозицийШтатногоРасписания;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Штатное расписание медицинских работников""'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.СведенияОШтатномРасписанииДляМедРегистра.ПодготовитьДанныеДляЗаполнения",
		ПараметрыЗаполнения,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	ПараметрыЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДанныеДляЗаполнения = ПараметрыЗаполнения.ДанныеДляЗаполнения;

	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеДляЗаполнения[0]);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗаполнениеПослеВыполненияДлительнойОперации();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
				
		КонецЕсли;
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для Каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

#КонецОбласти

#КонецОбласти




