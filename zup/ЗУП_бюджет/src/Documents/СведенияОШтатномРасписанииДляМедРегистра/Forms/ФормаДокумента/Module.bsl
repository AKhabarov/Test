#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
		ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения);
		
		ЗаполнитьУИНОрганизацииНаСервере();
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения 
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СведенияОШтатномРасписанииДляМедРегистра", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ЗаполнитьУИНОрганизацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УИНОрганизацииПриИзменении(Элемент)
	УИНОрганизацииПриИзмененииНаСервере(Объект.Организация,Объект.УИНОрганизации);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ШтатныеЕдиницыПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПозицияШтатногоРасписания) Тогда
		
		Позиции = Новый массив;
		Позиции.Добавить(Элемент.ТекущиеДанные.ПозицияШтатногоРасписания);
		ЗаполнитьНаКлиенте(Позиции);
		
	КонецЕсли;
	
КонецПроцедуры
	      
&НаКлиенте
Процедура ШтатныеЕдиницыПослеУдаления(Элемент)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ШтатныеЕдиницыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СведенияПозицииШтатногоРасписания(Команды.Найти("СведенияПозицииШтатногоРасписания"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.ШтатныеЕдиницы.Количество() = 0 Тогда
		ЗаполнитьНаКлиенте();
		Возврат;
	КонецЕсли;
	
	// Если есть  строки, то необходимо выяснить как именно заполнять: 
	// полным перезаполнением или обновлением.
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтаФорма);
	
	ТекстВопроса = НСтр("ru = 'Обновить данные о Штатном Расписании 
							|или перезаполнить документ?'");
						 
	КнопкиОтвета = Новый СписокЗначений;
	КнопкиОтвета.Добавить("Заполнить", НСтр("ru = 'Заполнить'"));
	КнопкиОтвета.Добавить("Обновить", НСтр("ru = 'Обновить'"));
	КнопкиОтвета.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиОтвета, , "Заполнить", НСтр("ru = 'Заполнение документа'"));
	
КонецПроцедуры

// Завершение процесса заполнения документа.
// Старт осуществляется методом Заполнить.
//
&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "Заполнить" Тогда
		
		ЗаполнитьНаКлиенте();
		
	ИначеЕсли Результат = "Обновить" Тогда
		
		СписокПозиций = Новый Массив;
		Для Каждого Позиция Из Объект.ШтатныеЕдиницы Цикл
			СписокПозиций.Добавить(Позиция.ПозицияШтатногоРасписания);
		КонецЦикла;
		
		ЗаполнитьНаКлиенте(СписокПозиций);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьДокументСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СведенияПозицииШтатногоРасписания(Команда)
	
	ТекущиеДанные = Элементы.ШтатныеЕдиницы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактированияПозиции = Новый Структура("ПозицияШтатногоРасписания,ПодразделениеХарактеристика,Описание,НаименованиеПодразделения,КоличествоСтавок,ДолжностьХарактеристика");
	ЗаполнитьЗначенияСвойств(ПараметрыРедактированияПозиции, ТекущиеДанные);
	
	ПараметрыРедактированияПозиции.Вставить("Организация", Объект.Организация);
	ПараметрыРедактированияПозиции.Вставить("Дата", Объект.Дата);
	ПараметрыРедактированияПозиции.Вставить("НомерСтроки", Элементы.ШтатныеЕдиницы.ТекущаяСтрока);
	
	Оповещение = Новый ОписаниеОповещения("СведенияПозицииШтатногоРасписанияЗавершение", ЭтотОбъект, ПараметрыРедактированияПозиции);
	ОткрытьФорму("Документ.СведенияОШтатномРасписанииДляМедРегистра.Форма.ПозицияШтатногоРасписания", ПараметрыРедактированияПозиции, ЭтаФорма, , , ,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияПозицииШтатногоРасписанияЗавершение(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт

	Если ПустаяСтрока(РезультатОткрытияФормы) Тогда
		Возврат;
	КонецЕсли;

	АдресХранилища = РезультатОткрытияФормы;
	ЗаполнениеПослеВыполненияДлительнойОперации();
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокумента

&НаКлиенте
Процедура ЗаполнитьНаКлиенте(Знач СписокПозицийШтатногоРасписания = Неопределено)

	Результат = РезультатЗаполненияВДлительнойОперации(СписокПозицийШтатногоРасписания);
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
	Иначе
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации(Знач СписокПозицийШтатногоРасписания = Неопределено)
	
	ПараметрыЗаполнения = Новый Структура("ДанныеДляЗаполнения,Организация,ДатаАктуальности,СписокПозицийШтатногоРасписания");
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.ДатаАктуальности = Объект.Дата;
	ПараметрыЗаполнения.СписокПозицийШтатногоРасписания = СписокПозицийШтатногоРасписания;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Штатное расписание медицинских работников""'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.СведенияОШтатномРасписанииДляМедРегистра.ПодготовитьДанныеДляЗаполнения",
		ПараметрыЗаполнения,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьИзХранилища(АдресХранилища);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗаполнениеПослеВыполненияДлительнойОперации();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			
			Для Каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьУИНОрганизацииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.УИНОрганизации = УИНОрганизации(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьУИНОрганизацииНаКлиенте()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.УИНОрганизации = УИНОрганизации(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция УИНОрганизации(Организация)
	
	УИН = "";
	
	ДополнительныеСведенияОрганизации = РегистрыСведений.СведенияОбОрганизацииДляМедРегистра.Выбрать(Новый Структура("Организация", Организация));
	Если ДополнительныеСведенияОрганизации.Следующий() Тогда
		УИН = ДополнительныеСведенияОрганизации.УИН;
	КонецЕсли;
	
	Возврат УИН;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура УИНОрганизацииПриИзмененииНаСервере(Организация, УИНОрганизации)
	
	Если Не ЗначениеЗаполнено(Организация) Или ПустаяСтрока(УИНОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	// Пустой шаблон заполнения
	ПустойУИНОрганизации = ".........";
	Если УИНОрганизации = ПустойУИНОрганизации Тогда
		УИНОрганизации = "";
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.СведенияОбОрганизацииДляМедРегистра.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		ДополнительныеСведения = Набор.Добавить();
		ДополнительныеСведения.Организация = Организация;
	Иначе
		ДополнительныеСведения = Набор[0];
	КонецЕсли;
	ДополнительныеСведения.УИН = УИНОрганизации;
	
	Набор.Записать();

КонецПроцедуры 

#Область СохранениеФайла

&НаКлиенте
Процедура ПроверитьДокументСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	Отказ = Ложь;
	ЕстьОшибки = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Отказ Тогда 
		
		ТекстВопроса = НСтр("ru = 'В документа обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							 
		Оповещение = Новый ОписаниеОповещения("ПроверитьДокументСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
		
	Иначе 
		
		ПроверитьДокументСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьДокументСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)	
	Возврат  ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы
// Подключение универсальных механизмов.
&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ОписаниеКлючевыхРеквизитов = Неопределено;
	ТаблицыОчищаемыеПриИзменении = Неопределено;
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма, ОписаниеКлючевыхРеквизитов);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма, , ОписаниеКлючевыхРеквизитов, ТаблицыОчищаемыеПриИзменении);
	
КонецПроцедуры

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.ШтатныеЕдиницы");
	
	Возврат Массив
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", Нстр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Дата", Нстр("ru = 'даты документа'")));
	
	Возврат Массив
	
КонецФункции

#КонецОбласти

#КонецОбласти

