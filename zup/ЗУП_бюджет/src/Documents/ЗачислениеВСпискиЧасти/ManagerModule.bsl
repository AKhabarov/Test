#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
	
	Если ДополнительныеПараметры.ОтменаДокумента Тогда
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияПоВсемУчетам(Движения, ИсправленныйДокумент, Ложь, СтруктураВидовУчета);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
	
#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , , Истина);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект, , , ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(ДокументОбъект.Движения);

	ДанныеДляПроведения = ДанныеДляПроведения(ДокументОбъект.Ссылка);
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(
		ДокументОбъект.Движения, ДанныеДляПроведения.СотрудникиДаты, ДокументОбъект.Ссылка);
	
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументОбъект.Ссылка, ДокументОбъект.Движения, РежимПроведения, Отказ,РеквизитыДляПроведения(ДокументОбъект),, ДокументОбъект, "ДатаЗачисления");
	
	КадровыйУчет.СформироватьКадровыеДвижения(ДокументОбъект, ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
	
	КадровыйУчет.СформироватьДвиженияВидовЗанятостиСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ДвиженияВидовЗанятости);
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих") Тогда
		КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
	КонецЕсли;
				
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
	СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателейНачислений);
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ДокументОбъект, ДокументОбъект.Движения, СтруктураПлановыхНачислений, Ложь);
	РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(ДокументОбъект.Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
				
	СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(ДокументОбъект.Движения, ДокументОбъект.Ссылка, ДанныеДляПроведения.ДанныеСостояний);

	КадровыйУчетРасширенный.СформироватьДвиженияПоТерриториям(ДокументОбъект.Движения, ДанныеДляПроведения.ТерриторииСотрудников, ДокументОбъект.Организация);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗвания");
		Модуль.СформироватьДвиженияВоинскихСпециальныхЗванийФизическихЛиц(ДокументОбъект.Движения, ДанныеДляПроведения.ВоинскиеСпециальныеЗванияФизическихЛиц);
	КонецЕсли;
		
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(ДокументОбъект.Движения, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , Не ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКУдалениюПроведения(ДокументОбъект, ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ИсключаемыеРегистраторы = Новый Массив;
	ИсключаемыеРегистраторы.Добавить(ДокументОбъект.Ссылка);
	Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
		ИсключаемыеРегистраторы.Добавить(ДокументОбъект.ИсправленныйДокумент);
	КонецЕсли;
	
	ПроверкаСтрокиСписочногоДокумента = ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаСтрокиСписочногоДокумента");
	Если ПроверкаСтрокиСписочногоДокумента Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Дата");
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗачислениеВСпискиЧасти") Тогда
		ЭтоСписочныйДокумент = Ложь;
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Сотрудник);
		ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
	Иначе
		ЭтоСписочныйДокумент = Истина;
		Сотрудники = ДокументОбъект.Сотрудники.ВыгрузитьКолонку("Сотрудник");
		ПроверяемыеСтруктуры = ДокументОбъект.Сотрудники;
	КонецЕсли;
	
	Если ЭтоСписочныйДокумент ИЛИ 
		(ДокументОбъект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего
		И Не ДокументОбъект.ВступилВДолжность) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, ?(ЭтоСписочныйДокумент,"Сотрудники.Должность","Должность"));
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, ?(ЭтоСписочныйДокумент,"Сотрудники.ДолжностьПоШтатномуРасписанию","ДолжностьПоШтатномуРасписанию"));
			
	КонецЕсли;
	
	ПроверитьСоответствиеПозицииШРПодразделению(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
			
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		СотрудникиДаты = Новый ТаблицаЗначений;
		СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		СотрудникиДаты.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
		
		Для Каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
			СтрокаСотрудникиДаты = СотрудникиДаты.Добавить();
			СтрокаСотрудникиДаты.Сотрудник = ПроверяемаяСтруктура.Сотрудник;
			СтрокаСотрудникиДаты.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
			СтрокаСотрудникиДаты.ДатаСобытия = ПроверяемаяСтруктура.ДатаЗачисления;
		КонецЦикла;
		
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(ДокументОбъект.Ссылка, СотрудникиДаты);
		
		Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаСотрудника.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				СтрокаСотрудника.ДатаСобытия = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		ДокументыДляИсключения = Новый Массив;
		ДокументыДляИсключения.Добавить(ДокументОбъект.Ссылка);
		ДокументыДляИсключения.Добавить(ДокументОбъект.ИсправленныйДокумент);
		
		КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчетуТаблицыСотрудников(СотрудникиДаты, ДокументыДляИсключения, Отказ);
		
	КонецЕсли;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		СтруктурыПроверяемыхКонфликтовВидовЗанятости = Новый Массив;
		Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
			
			СтруктураПроверки = СотрудникиФормыРасширенный.ПустаяСтруктураДляПроверкиКонфликтовВидовЗанятостиСотрудников();
			ЗаполнитьЗначенияСвойств(СтруктураПроверки, ПроверяемаяСтруктура);
			СтруктураПроверки.ДатаСобытия = ПроверяемаяСтруктура.ДатаЗачисления;
			
			СтруктурыПроверяемыхКонфликтовВидовЗанятости.Добавить(СтруктураПроверки);
			
		КонецЦикла;
		
		ДокументыДляИсключения = Новый Массив;
		ДокументыДляИсключения.Добавить(ДокументОбъект.Ссылка);
		ДокументыДляИсключения.Добавить(ДокументОбъект.ИсправленныйДокумент);
		
		СообщениеОКонфликтах = СотрудникиФормыРасширенный.СообщениеОКонфликтахВидовЗанятостиСотрудников(
			СтруктурыПроверяемыхКонфликтовВидовЗанятости, ДокументОбъект.Организация, ДокументыДляИсключения);
		
		Для каждого КонфликтыСотрудника Из СообщениеОКонфликтах Цикл
			
			Если ЭтоСписочныйДокумент Тогда
				
				ИндексСтроки = "";
				СтрокаСотрудника = ДокументОбъект.Сотрудники.Найти(КонфликтыСотрудника.Ключ, "Сотрудник");
				Если СтрокаСотрудника <> Неопределено Тогда
					ИндексСтроки = СтрокаСотрудника.НомерСтроки - 1;
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КонфликтыСотрудника.Значение, ДокументОбъект.Ссылка, "Сотрудники[" + ИндексСтроки + "].ВидЗанятости", "Объект", Отказ);
				
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КонфликтыСотрудника.Значение, ДокументОбъект.Ссылка, "ВидЗанятости", "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		
		Если ЭтоСписочныйДокумент Тогда
			ИмяТЧСотрудники = "Сотрудники";
			ИмяРеквизитаРабочееМесто = "ИдентификаторСтрокиСотрудника";
			ДатаПроверки = ДокументОбъект.Дата;
			ДатаУдовлетворенияДД = ДокументОбъект.Дата;
		Иначе
			ИмяТЧСотрудники = "";
			ИмяРеквизитаРабочееМесто = "";
			ДатаПроверки = ДокументОбъект.ДатаЗачисления;
			ДатаУдовлетворенияДД = КонецДня(ДокументОбъект.ДатаУдовлетворенияДенежнымДовольствием);
		КонецЕсли;
		
		КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(
			ДокументОбъект, ДатаПроверки, "Начисления", "Показатели", Отказ, , ИмяРеквизитаРабочееМесто,,ИмяТЧСотрудники);

		КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(
			ДокументОбъект, ДатаУдовлетворенияДД, "НачисленияДоЗачисленияВСпискиЧасти", "Показатели", Отказ, , ИмяРеквизитаРабочееМесто,,ИмяТЧСотрудники);
			
		Если ЭтоСписочныйДокумент Тогда
			КадровыйУчетРасширенный.ПроверитьСоответствиеСотрудниковТабличнойЧастиОрганизации(ДокументОбъект.Организация, ПроверяемыеСтруктуры, Отказ);
		Иначе
			КадровыйУчет.ПроверитьСоответствиеСотрудниковОрганизации(ДокументОбъект.Организация, ДокументОбъект.Сотрудник, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ЭтоСписочныйДокумент Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.СовокупнаяТарифнаяСтавка");
	Иначе
		
		РасчетЗарплатыРасширенный.ПроверитьМножественностьОплатыВремениРаботникВШапке(
			ДокументОбъект.ДатаЗачисления, ДокументОбъект.Сотрудник, ДокументОбъект.Начисления, ДокументОбъект.Ссылка, Отказ, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить, ДокументОбъект.ИсправленныйДокумент);
		
	КонецЕсли;
		

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу") Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.ЗачислениеВСпискиЧасти);
		
	КонецЕсли; 
	
КонецФункции

Процедура РассчитатьФОТПоДокументу(ДокументОбъект) Экспорт
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	ИзвестныеКадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицаКадровыхДанных();
	
	КадровыеДанныеСотрудника = ИзвестныеКадровыеДанные.Добавить();
	КадровыеДанныеСотрудника.Сотрудник = ДокументОбъект.Сотрудник;
	КадровыеДанныеСотрудника.Период = ДокументОбъект.ДатаЗачисления;
	КадровыеДанныеСотрудника.Организация = ДокументОбъект.Организация;
	КадровыеДанныеСотрудника.Подразделение = ДокументОбъект.Подразделение;
	КадровыеДанныеСотрудника.ГрафикРаботы = ДокументОбъект.ГрафикРаботы;
	КадровыеДанныеСотрудника.КоличествоСтавок = 1;
	
	СписокНачислений = Новый Массив;
	Для Каждого СтрокаНачисления Из ДокументОбъект.Начисления Цикл
		ДанныеНачисления = ТаблицаНачислений.Добавить();
		ДанныеНачисления.Сотрудник = ДокументОбъект.Сотрудник;
		ДанныеНачисления.Период = ДокументОбъект.ДатаЗачисления;
		ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
		ДанныеНачисления.Размер = СтрокаНачисления.Размер;
	КонецЦикла;
	
	Для Каждого СтрокаПоказателя Из ДокументОбъект.Показатели Цикл
		ДанныеПоказателя = ТаблицаПоказателей.Добавить();
		ДанныеПоказателя.Сотрудник = ДокументОбъект.Сотрудник;
		ДанныеПоказателя.Период = ДокументОбъект.ДатаЗачисления;
		ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
		ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
	КонецЦикла;
	
	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, ИзвестныеКадровыеДанные);
	
	Для Каждого ОписаниеНачисления Из РассчитанныеДанные.ПлановыйФОТ Цикл
		
		СтрокиДокумента = ДокументОбъект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОписаниеНачисления.Начисление));
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокиДокумента[0].Размер = ОписаниеНачисления.ВкладВФОТ;
		КонецЕсли; 
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДокументОбъект.Движения.ПлановыеНачисления, ДокументОбъект.Начисления);
			
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаЗачисления КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаУдовлетворенияДенежнымДовольствием,
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ТаблицаДокумента.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗачислениеВСпискиЧасти")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗачислениеВСпискиЧасти", "Документ.ЗачислениеВСпискиЧастиСписком.Сотрудники");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьСоответствиеПозицииШРПодразделению(ДокументОбъект, Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Если ПроверяемыеРеквизиты.Найти("ДолжностьПоШтатномуРасписанию") <> Неопределено
			ИЛИ ПроверяемыеРеквизиты.Найти("Сотрудники.ДолжностьПоШтатномуРасписанию") <> Неопределено Тогда 
			
			Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗачислениеВСпискиЧасти") Тогда
				ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
				ПутьКДанным = "Объект.Подразделение";
			Иначе
				ПроверяемыеСтруктуры = ДокументОбъект.Сотрудники;
				ПутьКДанным = "Объект.Сотрудники";
			КонецЕсли;
			
			Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
				
				Если ЗначениеЗаполнено(ПроверяемаяСтруктура.ДолжностьПоШтатномуРасписанию) Тогда
					
					Если ПроверяемыеСтруктуры.Количество() = 1 Тогда
						ПутьКДаннымРеквизита = ПутьКДанным;
					Иначе
						ПутьКДаннымРеквизита = ПутьКДанным + "[" + ПроверяемаяСтруктура.НомерСтроки + "].Подразделение";
					КонецЕсли;
					
					ПодразделениеПоШтатномуРасписанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемаяСтруктура.ДолжностьПоШтатномуРасписанию, "Подразделение");
					Если ПодразделениеПоШтатномуРасписанию <> ПроверяемаяСтруктура.Подразделение Тогда
						ТекстСообщения = НСтр("ru = 'Значение поля ""Подразделение"" не соответствует позиции штатного расписания указанной в документе.'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, ПутьКДаннымРеквизита, , Отказ);
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры	

#Область ПодготовкаДанныхДляПроведенияДокумента

Функция ДанныеДляПроведения(ДокументСсылка)
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗачислениеВСпискиЧасти.Ссылка,
		|	ЗачислениеВСпискиЧасти.Ссылка.Номер КАК Номер,
		|	ЗачислениеВСпискиЧасти.Ссылка.Дата КАК Дата,
		|	ЗачислениеВСпискиЧасти.Ссылка.Организация КАК Организация,
		|	ЗачислениеВСпискиЧасти.Подразделение,
		|	ЗачислениеВСпискиЧасти.Сотрудник,
		|	ЗачислениеВСпискиЧасти.ФизическоеЛицо,
		|	ЗачислениеВСпискиЧасти.ДатаЗачисления,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	1 КАК КоличествоСтавок,
		|	ЗачислениеВСпискиЧасти.ВступилВДолжность,
		|	ЗачислениеВСпискиЧасти.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы,
		|	ВЫБОР
		|		КОГДА ЗачислениеВСпискиЧасти.ДатаУдовлетворенияДенежнымДовольствием = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ЗачислениеВСпискиЧасти.ДатаУдовлетворенияДенежнымДовольствием, ДЕНЬ, 1)
		|	КОНЕЦ КАК ДатаУдовлетворенияДенежнымДовольствием,
		|	ЗачислениеВСпискиЧасти.Должность,
		|	ЗачислениеВСпискиЧасти.ДолжностьПоШтатномуРасписанию,
		|	ЗачислениеВСпискиЧасти.Территория,
		|	ЗачислениеВСпискиЧасти.ВидЗанятости,
		|	ЗачислениеВСпискиЧасти.ГрафикРаботы,
		|	ЗачислениеВСпискиЧасти.Ссылка.ИсправленныйДокумент КАК ИсправленныйДокумент,
		|	ЗачислениеВСпискиЧасти.Ссылка.ВидДоговора КАК ВидДоговора,
		|	ЗачислениеВСпискиЧасти.СпособОтраженияЗарплатыВБухучете,
		|	ЗачислениеВСпискиЧасти.СтатьяФинансирования,
		|	ЗачислениеВСпискиЧасти.Ссылка.Руководитель КАК Руководитель,
		|	ЗачислениеВСпискиЧасти.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ЗачислениеВСпискиЧасти.Ссылка.Ответственный КАК Ответственный,
		|	ЗачислениеВСпискиЧасти.Ссылка.Комментарий КАК Комментарий,
		|	ЗачислениеВСпискиЧасти.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗачислениеВСпискиЧасти.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ЗачислениеВСпискиЧасти.СовокупнаяТарифнаяСтавка,
		|	ЗачислениеВСпискиЧасти.ВидТарифнойСтавки
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти КАК ЗачислениеВСпискиЧасти
		|ГДЕ
		|	ЗачислениеВСпискиЧасти.Ссылка = &Ссылка";

	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗачислениеВСпискиЧасти")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗачислениеВСпискиЧасти", "Документ.ЗачислениеВСпискиЧастиСписком.Сотрудники");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗачислениеВСпискиЧасти.Сотрудник,", "ЗачислениеВСпискиЧасти.Сотрудник, ЗачислениеВСпискиЧасти.ИдентификаторСтрокиСотрудника,");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаЗачисления КАК ДатаСобытия,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	ТаблицаДокумента.Подразделение КАК Подразделение,
		|	ТаблицаДокумента.Должность КАК Должность,
		|	ТаблицаДокумента.КоличествоСтавок КАК КоличествоСтавок,
		|	ТаблицаДокумента.ГрафикРаботы КАК ГрафикРаботы,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
		|	ТаблицаДокумента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаДокумента.ФизическоеЛицо,
		|	ТаблицаДокумента.Руководитель КАК Руководитель,
		|	ТаблицаДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя
		|ИЗ
		|	ВТСотрудники КАК ТаблицаДокумента";
		
	
	// Первый набор данных для проведения - таблица для формирования кадровых движений, истории графиков, авансов.
	КадровыеДвижения = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаЗачисления КАК Период,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТаблицаДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаДокумента.ВидЗанятости КАК ВидЗанятости,
		|	ТаблицаДокумента.ДействуетДо КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК ТаблицаДокумента";
	
	КадровыеДвижения = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДвиженияВидовЗанятости", КадровыеДвижения);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				И Сотрудники.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		|				И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием
		|		ИНАЧЕ Сотрудники.ДатаЗачисления
		|	КОНЕЦ КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИСТИНА КАК Используется,
		|	Начисления.ДокументОснование,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И НЕ Начисления.Начисление В (&СписокНачислений)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		|				И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием > Сотрудники.ДатаЗачисления
		|			ТОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием
		|		ИНАЧЕ Сотрудники.ДатаЗачисления
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИСТИНА,
		|	Начисления.ДокументОснование,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И Начисления.Начисление В(&СписокНачислений)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.ДатаУдовлетворенияДенежнымДовольствием,
		|	Сотрудники.Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо,
		|	ИСТИНА,
		|	Начисления.ДокументОснование,
		|	Сотрудники.ГоловнаяОрганизация
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти.НачисленияДоЗачисленияВСпискиЧасти КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И Сотрудники.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		|	И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием < Сотрудники.ДатаЗачисления
		|		
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		|				И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием > Сотрудники.ДатаЗачисления
		|			ТОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием
		|		ИНАЧЕ Сотрудники.ДатаЗачисления
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо,
		|	ЛОЖЬ,
		|	Начисления.ДокументОснование,
		|	Сотрудники.ГоловнаяОрганизация
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти.НачисленияДоЗачисленияВСпискиЧасти КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗачислениеВСпискиЧасти.Начисления КАК НачисленияПосле
		|		ПО НачисленияПосле.Ссылка = Начисления.Ссылка
		|		И НачисленияПосле.Начисление = Начисления.Начисление
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И Сотрудники.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		|	И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием < Сотрудники.ДатаЗачисления
		|	И НачисленияПосле.Начисление ЕСТЬ NULL";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗачислениеВСпискиЧасти")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗачислениеВСпискиЧасти", "Документ.ЗачислениеВСпискиЧастиСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
	КонецЕсли;
	СписокНачислений = Новый Массив;
	ОсновныеНачисления = РасчетДенежногоДовольствия.ОсновныеНачисленияДенежногоДовольствия(Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНачислений, ОсновныеНачисления.ОкладыПоДолжности);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНачислений, ОсновныеНачисления.ОкладыЗаЗвание);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНачислений, ОсновныеНачисления.НадбавкиЗаВыслугуЛет);
	
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
	
	// Второй набор данных для проведения - таблица для формирования плановых начислений.
	ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаЗачисления КАК ДатаСобытия,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Организация КАК Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Показатели.Показатель,
		|	МАКСИМУМ(Показатели.Значение) КАК Значение,
		|	Начисления.ДокументОснование
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗачислениеВСпискиЧасти.Показатели КАК Показатели
		|		ПО Показатели.Ссылка = Начисления.Ссылка
		|			И Показатели.ИдентификаторСтрокиВидаРасчета = Начисления.ИдентификаторСтрокиВидаРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Показатели.Ссылка = &Ссылка
		|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ДатаЗачисления,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Показатели.Показатель,
		|	Начисления.ДокументОснование
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием < Сотрудники.ДатаЗачисления
		|			ТОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием
		|		ИНАЧЕ Сотрудники.ДатаЗачисления
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Показатели.Показатель,
		|	МАКСИМУМ(Показатели.Значение),
		|	Начисления.ДокументОснование
		|ИЗ
		|	Документ.ЗачислениеВСпискиЧасти.НачисленияДоЗачисленияВСпискиЧасти КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗачислениеВСпискиЧасти.Показатели КАК Показатели
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|			ПО Показатели.Ссылка = Сотрудники.Ссылка
		|		ПО Показатели.Ссылка = Начисления.Ссылка
		|			И Начисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И Показатели.Ссылка = &Ссылка
		|	И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием < Сотрудники.ДатаЗачисления
		|			ТОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием
		|		ИНАЧЕ Сотрудники.ДатаЗачисления
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Показатели.Показатель,
		|	Начисления.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.ДатаСобытия,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.ФизическоеЛицо,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ДокументОснование,
		|	МАКСИМУМ(ЗначенияПоказателей.Значение) КАК Значение
		|ИЗ
		|	ВТЗначенияПоказателей КАК ЗначенияПоказателей
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателей.ДатаСобытия,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.ФизическоеЛицо,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ДокументОснование";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗачислениеВСпискиЧасти")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Сотрудник,", "Сотрудники.Сотрудник, Сотрудники.ИдентификаторСтрокиСотрудника,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияПоказателей.Сотрудник,", "ЗначенияПоказателей.Сотрудник, ЗначенияПоказателей.ИдентификаторСтрокиСотрудника,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗачислениеВСпискиЧасти", "Документ.ЗачислениеВСпискиЧастиСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Начисления.Ссылка", "ПО Показатели.Ссылка = Начисления.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Начисления.ИдентификаторСтрокиСотрудника");
	КонецЕсли;
	
	// Третий набор данных для проведения - таблица для формирования значений показателей начислений.
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ЗначенияПоказателейНачислений", ЗначенияПоказателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				И Сотрудники.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		|				И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием
		|		ИНАЧЕ Сотрудники.ДатаЗачисления
		|	КОНЕЦ КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Шестой набор данных для проведения - таблица для формирования значений порядка пересчета тарифной ставки.
	ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				И Сотрудники.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		|				И Сотрудники.ДатаУдовлетворенияДенежнымДовольствием <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Сотрудники.ДатаУдовлетворенияДенежнымДовольствием
		|		ИНАЧЕ Сотрудники.ДатаЗачисления
		|	КОНЕЦ КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА Сотрудники.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ Сотрудники.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Седьмой набор данных для проведения - таблица для формирования значений совокупной тарифной ставки.
	ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаЗачисления КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Девятый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа) КАК Состояние,
		|	Сотрудники.ДатаЗачисления КАК Начало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание,
		|	НЕОПРЕДЕЛЕНО КАК ВидВремени
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Данные состояний
	ДанныеСостояний = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСостояний", ДанныеСостояний);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаЗачисления КАК Период,
		|	Сотрудники.Сотрудник,
		|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Территория
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";
	
	// Набор сведений для проведения по территориям сотрудников
	СведенияОТерриторияхСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ТерриторииСотрудников", СведенияОТерриторияхСотрудников);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗвания");
		ВоинскиеСпециальныеЗванияФизическихЛиц = Модуль.ЗачислениеВСпискиЧастиСведенияОВоинскихСпециальныхЗваниях(ДокументСсылка);
		ДанныеДляПроведения.Вставить("ВоинскиеСпециальныеЗванияФизическихЛиц", ВоинскиеСпециальныеЗванияФизическихЛиц);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументОбъект)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗачислениеВСпискиЧасти") Тогда
		РеквизитыДляПроведения.ДатаЗачисления = ДокументОбъект.ДатаЗачисления;
	Иначе
		РеквизитыДляПроведения.ДатаЗачисления = ДокументОбъект.ДатаСобытия;
	КонецЕсли;
	
	РеквизитыДляПроведения.Ссылка = ДокументСсылка;
	РеквизитыДляПроведения.ИсправленныйДокумент = ДокументОбъект.ИсправленныйДокумент;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, ИсправленныйДокумент, ДатаЗачисления");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции


#КонецОбласти

// См. ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокумента
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ЗачислениеВСпискиЧасти;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#КонецЕсли
