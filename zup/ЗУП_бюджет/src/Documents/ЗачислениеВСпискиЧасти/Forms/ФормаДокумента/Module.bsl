#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		
		// СтандартныеПодсистемы.ВерсионированиеОбъектов
		ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
		
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	
	Если Не Параметры.Свойство("Ключ") Или Параметры.Ключ.Пустая() Тогда
		
		Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
			КадровыйУчетРасширенный.ПроверитьПравоИнтерактивногоСозданияКадровыхПриказовСотрудника();
		Иначе
			Параметры.Свойство("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников);
			РедактированиеСтрокиСписочногоДокумента = Истина;
			
			УстановитьПривилегированныйРежим(Истина);			
			ДокументОбъект = Документы.ЗачислениеВСпискиЧасти.СоздатьДокумент();
			УстановитьПривилегированныйРежим(Ложь);
			
			ДокументОбъект.Заполнить(Неопределено);
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
						
			СтрокаСписочногоДокумента = Параметры.СтрокаСписочногоДокумента;
			ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияЗаполненныхСвойств(Объект, СтрокаСписочногоДокумента);
						
			ТабличныеЧастиОбъекта = СтрокаСписочногоДокумента.ТабличныеЧасти;
			Для каждого ОписаниеТабличнойЧасти Из ТабличныеЧастиОбъекта Цикл
				
				Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
					Продолжить;
				КонецЕсли; 
				
				Для каждого СтрокаТЧ Из ОписаниеТабличнойЧасти.Значение Цикл
					ЗаполнитьЗначенияСвойств(Объект[ОписаниеТабличнойЧасти.Ключ].Добавить(), СтрокаТЧ);
				КонецЦикла;
		
			КонецЦикла;			
			
			ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет; 
			АвтоЗаголовок = Ложь;
			
			Заголовок = НСтр("ru='Зачисление в списки части'");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"Организация",
				"Видимость",
				Ложь);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаНомерДатаПриказаОПриеме",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПодвалДокументаГруппа",
				"Видимость",
				Ложь);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КоманднаяПанельФормы",
				"Видимость",
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОК",
				"КнопкаПоУмолчанию",
				Истина);
		КонецЕсли;				
			
		Если Не ЗначениеЗаполнено(Объект.ДатаЗачисления) Тогда
			Объект.ДатаЗачисления = ТекущаяДатаСеанса();
		КонецЕсли;
		
		// Очистим реквизит Сотрудник, если он уже принят.
		Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Параметры.ЗначениеКопирования.Проведен Тогда
			Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
			Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 
		
		Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
			
			Если Параметры.ЗначенияЗаполнения.Свойство("Начисления") 
				И Параметры.ЗначенияЗаполнения.Начисления <> Неопределено 
				И Параметры.ЗначенияЗаполнения.Начисления.Количество() > 0 Тогда 
				Объект.Начисления.Загрузить(Параметры.ЗначенияЗаполнения.Начисления.Выгрузить());
			КонецЕсли;
			
			Если Параметры.ЗначенияЗаполнения.Свойство("Показатели") 
				И Параметры.ЗначенияЗаполнения.Показатели <> Неопределено 
				И Параметры.ЗначенияЗаполнения.Показатели.Количество() > 0 Тогда 
				Объект.Показатели.Загрузить(Параметры.ЗначенияЗаполнения.Показатели.Выгрузить());
			КонецЕсли;
			
		КонецЕсли;
				
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
		ЗапрашиваемыеЗначения.Вставить("Подразделение", "Объект.Подразделение");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьПоШтатномуРасписанию", "Объект.ДолжностьПоШтатномуРасписанию");

		Если Не ПолучитьФункциональнуюОпцию("НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих") Тогда
			ЗапрашиваемыеЗначения.Вставить("ГрафикРаботы", "Объект.ГрафикРаботы");
		КонецЕсли; 
			
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения);
		
		Если Не РедактированиеСтрокиСписочногоДокумента И ЗначениеЗаполнено(Объект.Сотрудник) И Не ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
			УстановитьВидЗанятостиНовогоСотрудника();
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
		
		Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
			ЗаполнитьДанныеФормыПоОрганизации();
		КонецЕсли;
		
		ЗаполнитьНачисленияДоЗачисленияВСпискиЧасти();
		
	КонецЕсли; 
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоКатегории(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(),
		КадровыйУчетРасширенный.ПараметрыВыбораКатегорииНачислений());
		
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоКатегории(
		ЭтаФорма,
		ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти(),
		КадровыйУчетРасширенный.ПараметрыВыбораКатегорииНачислений());	
		
	РасчетДенежногоДовольствия.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(ЭтаФорма, ОписаниеТаблицыНачислений());
	
	РасчетДенежногоДовольствия.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(ЭтаФорма, ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти());
	
	КадровыйУчетФормыРасширенный.УстановитьОтображениеКнопкиРедактироватьФОТ(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьЗначениеСевернойНадбавкиВФорме(ЭтаФорма, Объект.Сотрудник, Объект.ДатаЗачисления, Объект.ФизическоеЛицо);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияЗаполнитьПоПозиции",
		"Видимость",
		ИспользоватьШтатноеРасписание);
		
	КадровыйУчетФормыРасширенный.РазместитьКомандуПроверкиШтатномуРасписанию(ЭтаФорма);
	
	Если (Не Параметры.Свойство("Ключ") Или Параметры.Ключ.Пустая()) И Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		
		Если Объект.Начисления.Количество() > 0 Тогда
			РассчитатьФОТНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.СформироватьСписокВыбораПорядкаПересчета(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
		
	Если ИмяСобытия = "ИзмененСтажФизическогоЛица" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ПриИзмененииСтажа();
		ВыполнитьРасчетФОТ();
	КонецЕсли;
	
	Если Источник = Объект.ФизическоеЛицо Тогда
		
		Если ИмяСобытия = "РедактированиеПроцентаСевернойНадбавки" Тогда
			ПриИзмененииПроцентаСевернойНадбавки();
			ВыполнитьРасчетФОТ();
		Иначе
			ГосударственнаяСлужбаКлиент.ОбработкаРезультатовРедактированияИсторииВоинскогоЗвания(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ИсправлениеДокументовЗарплатаКадрыКлиент.ОбработкаОповещенияИсправленногоДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененоВоинскоеСпециальноеЗвание" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ВоинскоеСпециальноеЗваниеПриИзменении(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения
		И Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда
		
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РеквизитВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	КадровыйУчетФормыРасширенный.ОбновитьСтажиСотрудникаДокумента(ТекущийОбъект);
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Сотрудник", ЭтаФорма.Объект.Сотрудник);
	Оповестить("ДокументПриемНаРаботуПослеЗаписи", ПараметрыОповещения, ЭтаФорма);
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтаФорма);
	
	
	Оповестить("Запись_ЗачислениеВСпискиЧасти", ПараметрыЗаписи, Объект.Ссылка);
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ИсправлениеДокументовЗарплатаКадрыКлиент.ОповеститьОбИсправленииДокумента(Объект.Ссылка, Объект.ИсправленныйДокумент, ПараметрыЗаписи.РежимЗаписи, "ПериодическиеСведения");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли; 
		
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитВДанные(ТекущийОбъект);
		
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаСтрокиСписочногоДокумента", Истина);
	КонецЕсли;
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");	
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ЗаполнитьСведенияОВоинскомСпециальномЗванииСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	УстановитьОтображениеПолейВводаДолжности(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбыПриИзменении(Элемент)
	
	Если Не Объект.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы Тогда
		Объект.ДатаУдовлетворенияДенежнымДовольствием = '00010101';
		УстановитьОтображениеНачисленийДоЗачисленияВСпискиЧасти(ЭтаФорма);
	КонецЕсли; 
	
	УстановитьОтображениеДатыУдовлетворенияДенежнымДовольствием(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаУдовлетворенияДенежнымДовольствиемПриИзменении(Элемент)
	
	ДатаУдовлетворенияДенежнымДовольствиемПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗачисленияПриИзменении(Элемент)
	
	ДатаЗачисленияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВступилВДолжностьПриИзменении(Элемент)
	
	Если Не Объект.ВступилВДолжность Тогда
		
		Объект.Должность = ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка");
		Если ИспользоватьШтатноеРасписание Тогда
			Объект.ДолжностьПоШтатномуРасписанию = ПредопределенноеЗначение("Справочник.ШтатноеРасписание.ПустаяСсылка");
		КонецЕсли; 
		
	КонецЕсли; 
	
	УстановитьОтображениеПолейВводаДолжности(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ДолжностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПоШтатномуРасписаниюПриИзменении(Элемент)
	
	ЗаполнитьПоПозицииШтатногоРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьДокументыВведенныеПозже(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.ДокументыВведенныеПозже);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРанееВведенныеДокументы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.РанееВведенныеДокументы);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийВыбор(
		ЭтаФорма, Элемент, Поле, СтандартнаяОбработка, 1, Объект.Сотрудник, Объект.ДатаЗачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийПриНачалеРедактирования(ЭтаФорма, "Начисления", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийРассчитатьФОТПриОкончанииРедактирования(ЭтаФорма, Элемент, 1, ОписаниеТаблицыНачислений()) Тогда
		ВыполнитьРасчетФОТ();
	Иначе
		РассчитатьИтогиПоФОТ(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	ВыполнитьРасчетФОТ();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийНачислениеПриИзменении(
		ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.Сотрудник);
		
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		ЗаполнитьЗначениеОкладаПоВоинскомуСпециальномуЗваниюВСтрокеНачислений();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПересчитатьФОТДокумента(Элемент)
	
	ВыполнитьРасчетФОТ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПересчитатьИтогиФОТДокумента(Элемент)
	
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияДоЗачисленияВСпискиЧасти

&НаКлиенте
Процедура НачисленияДоЗачисленияВСпискиЧастиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийВыбор(
		ЭтаФорма, Элемент, Поле, СтандартнаяОбработка, 1, Объект.Сотрудник, Объект.ДатаЗачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДоЗачисленияВСпискиЧастиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийПриНачалеРедактирования(ЭтаФорма, "НачисленияДоЗачисленияВСпискиЧасти", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДоЗачисленияВСпискиЧастиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьФОТНачисленийДоЗачисленияВСпискиЧастиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДоЗачисленияВСпискиЧастиНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти();
	ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийНачислениеПриИзменении(
		ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.Сотрудник);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи", ЭтотОбъект, Команда);
	ЗарплатаКадрыРасширенныйКлиент.ПоказатьДиалогЗаписиОбъектаДляВыполненияПодключаемойКоманды(ЭтотОбъект, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи(РезультатВопроса, Команда) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(Объект.Ссылка, "ЗачислениеВСпискиЧасти");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "ЗачислениеВСпискиЧасти");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(Объект.ИсправленныйДокумент, "ЗачислениеВСпискиЧасти");
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура ЗаполнитьНачисленияПоПозиции(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьНачисленияПоПозицииЗавершение", ЭтотОбъект);
	ЗарплатаКадрыРасширенныйКлиент.ПроверитьВозможностьОчисткиТабличныхЧастей(ЭтаФорма, "Начисления", Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСоответствиеШтатномуРасписанию(Команда)
	КадровыйУчетРасширенныйКлиент.ПроверитьНаСоответствиеШтатномуРасписанию(ЭтаФорма, Объект, Объект.ИсправленныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	РассчитатьФОТНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФОТ(Команда)
	
	РедактироватьФОТ = НЕ Элементы.РедактироватьФОТ.Пометка;
	Элементы.РедактироватьФОТ.Пометка = РедактироватьФОТ;
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьВидимостьВкладаВФОТРНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма, РедактироватьФОТ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоФОТ(Форма)
	
	Форма.ФОТ = ЗарплатаКадрыРасширенныйКлиентСервер.ИтогиПоФОТ(Форма, ОписаниеТаблицыНачислений());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьЗначениеПоказателяСевернаяНадбавка(Команда)
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияПроцентаСевернойНадбавки(ЭтаФорма, Объект.Сотрудник, Объект.ДатаЗачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура ВоинскоеСпециальноеЗваниеИзменить(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ВоинскиеСпециальныеЗванияКлиент");
		Модуль.РедактироватьВоинскоеСпециальноеЗвание(ЭтаФорма, Объект.Сотрудник, Объект.ДатаПрисвоения, Объект.ВоинскоеСпециальноеЗвание);  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация",	"Объект.Организация");
		ЗначенияДляЗаполнения.Вставить("Подразделение",	"Объект.Подразделение");
		ЗначенияДляЗаполнения.Вставить("ГрафикРаботы",	"Объект.ГрафикРаботы");
		
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
		
	КонецЕсли; 
	
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьФункциональныеОпцииФормы();
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
		
КонецПроцедуры

&НаСервере
Процедура ДатаУдовлетворенияДенежнымДовольствиемПриИзмененииНаСервере()
	
	ЗаполнитьНачисленияДоЗачисленияВСпискиЧасти();
	УстановитьОтображениеНачисленийДоЗачисленияВСпискиЧасти(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаЗачисленияПриИзмененииНаСервере()
	
	ПрочитатьВремяРегистрации();
	
	Если ИспользоватьШтатноеРасписание И ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		Если Объект.ДатаЗачисления < ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДолжностьПоШтатномуРасписанию, "ДатаУтверждения") Тогда
			Объект.ДолжностьПоШтатномуРасписанию = Справочники.ШтатноеРасписание.ПустаяСсылка();
		КонецЕсли; 
		ЗаполнитьПоПозицииШтатногоРасписания();
		
	КонецЕсли;
	
	УстановитьПредставленияКомандВводаСтажей();
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	ЗарплатаКадрыРасширенный.УстановитьЗначениеСевернойНадбавкиВФорме(ЭтаФорма, Объект.Сотрудник, Объект.ДатаЗачисления, Объект.ФизическоеЛицо);
	
	УстановитьОтображениеНачисленийДоЗачисленияВСпискиЧасти(ЭтаФорма);
	
	ЗаполнитьСведенияОВоинскомСпециальномЗванииСотрудника();
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Должность) Тогда
		
		ДанныеДолжности(Истина);
		ЗаполнитьНачисленияПоУмолчанию(ОписаниеТаблицыНачислений(), Ложь)
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроцентаСевернойНадбавки()
	
	ЗарплатаКадрыРасширенный.УстановитьЗначениеСевернойНадбавкиВФорме(ЭтаФорма, Объект.Сотрудник, Объект.ДатаЗачисления, Объект.ФизическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		ЗавершитьРедактированиеСтрокиДокумента();
	Иначе
		РасчетЗарплатыРасширенныйКлиент.ВыполнитьРасчетСотрудникаПередЗаписьюДокумента(ЭтаФорма, "ЗаписатьНаКлиентеЗавершение", ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если РасчетНеобходимоВыполнить Тогда
			РассчитатьФОТНаКлиенте();
		КонецЕсли;
		
		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
		ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
		ЗакрытьПослеЗаписи = ДополнительныеПараметры.ЗакрытьПослеЗаписи;
		
		КадровыйУчетРасширенныйКлиент.ПередЗаписьюКадровогоДокументаВФорме(ЭтаФорма, Объект, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетФОТ(ЗаполнитьДанныеТарифнойСетки = Ложь, ЗаполнитьДанныеОкладаПоВоинскомуСпециальномуЗванию = Ложь)
	
	Если ЗаполнитьДанныеОкладаПоВоинскомуСпециальномуЗванию Тогда
		ПерезаполнитьДанныеОкладаПоВоинскомуСпециальномуЗванию = Истина;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьФОТНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФОТНаКлиенте()
	
	РассчитатьФОТНаСервере();
	ЗарплатаКадрыРасширенныйКлиентСервер.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьФОТНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПерезаполнитьДанныеОкладаПоВоинскомуСпециальномуЗванию Тогда 
		ЗаполнитьДанныеОкладаПоВоинскомуСпециальномуЗваниюНаСервере();
	КонецЕсли;
	
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	ОписаниеДанныхСовокупнойСтавки = ПлановыеНачисленияСотрудниковФормы.ОписаниеДанныхТарифныхСтавок("Объект.ВидТарифнойСтавки", "Объект.СовокупнаяТарифнаяСтавка");
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотруднику(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		ЭтотОбъект,
		Объект.Сотрудник,
		ГоловнаяОрганизация,
		ВремяРегистрации,
		ОписаниеТаблицыНачислений);

	КадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицуКадровыхДанныхПоСотруднику(
						Объект.Сотрудник, 
						ВремяРегистрации,
						Объект.Организация,
						Объект.Подразделение,
						1,
						Объект.ГрафикРаботы);
						
	РассчитанныеВторичныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, КадровыеДанные); 					
		
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникуВДанныеФормы(
		ЭтотОбъект, 
		РассчитанныеВторичныеДанные, 
		ГоловнаяОрганизация,
		ОписаниеТаблицыНачислений,
		ОписаниеДанныхСовокупнойСтавки);
		
	УстановитьПривилегированныйРежим(Ложь);	
	
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейПересчетаТарифнойСтавки(ЭтаФорма, ОписаниеТаблицыНачислений());
КонецПроцедуры

&НаСервере
Процедура РассчитатьФОТНачисленийДоЗачисленияВСпискиЧастиНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	ОписаниеДанныхСовокупнойСтавки = ПлановыеНачисленияСотрудниковФормы.ОписаниеДанныхТарифныхСтавок("Объект.ВидТарифнойСтавки", "Объект.СовокупнаяТарифнаяСтавка");
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотруднику(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		ЭтотОбъект,
		Объект.Сотрудник,
		ГоловнаяОрганизация,
		ВремяРегистрации,
		ОписаниеТаблицыНачислений);

	КадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицуКадровыхДанныхПоСотруднику(
						Объект.Сотрудник, 
						ВремяРегистрации,
						Объект.Организация,
						Объект.Подразделение,
						1,
						Объект.ГрафикРаботы);
						
	РассчитанныеВторичныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, КадровыеДанные); 					
		
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникуВДанныеФормы(
		ЭтотОбъект, 
		РассчитанныеВторичныеДанные, 
		ГоловнаяОрганизация,
		ОписаниеТаблицыНачислений,
		ОписаниеДанныхСовокупнойСтавки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих = ПолучитьФункциональнуюОпцию("НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих");
	
	ПрочитатьВремяРегистрации();
	
	ДополнитьФорму();
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	УстановитьФункциональныеОпцииФормы();
	
	ДанныеВРеквизит();
	УстановитьОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Функция СтруктураСОписаниемДокумента()
	
	РеквизитВДанные(Объект);

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным("Документ.ЗачислениеВСпискиЧасти");
	ЗарплатаКадрыРасширенный.ЗаполнитьОбъектПоОбразцу(ОписаниеДокумента, Объект);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

&НаСервере
Процедура УстановитьВидЗанятостиНовогоСотрудника()
	
	УстановитьВидЗанятостиНовогоСотрудника = Истина;
	
	Если РедактированиеСтрокиСписочногоДокумента
		И Не ПустаяСтрока(АдресСпискаПодобранныхСотрудников) Тогда
		
		УстановитьВидЗанятостиНовогоСотрудника = Ложь;
		
		ПодобранныеСотрудники = ПолучитьИзВременногоХранилища(АдресСпискаПодобранныхСотрудников);
		Если ПодобранныеСотрудники.Найти(Объект.Сотрудник) = Неопределено Тогда
			
			КадровыйУчетРасширенный.УстановитьВидЗанятостиНовогоСотрудникаВСтрокеПриемаНаРаботуСписком(
				Объект, ПодобранныеСотрудники);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если УстановитьВидЗанятостиНовогоСотрудника Тогда
		Объект.ВидЗанятости = СотрудникиВызовСервера.ПолучитьВидЗанятостиДляНовогоСотрудника(Объект.Сотрудник, Объект.Организация);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыВидовРасчета, "Начисления", 3);
	
	УправлениеШтатнымРасписаниемФормы.ПроверкаШтатногоРасписанияПодготовитьТаблицуФормы(ЭтаФорма, РеквизитыПроверяемыеНаСоответствие(
		ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ЭтаФорма, ОписаниеТаблицыВидовРасчета,, 3)));
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти();
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыВидовРасчета, "Начисления", 3);
	
	ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(ЭтотОбъект);
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(ЭтаФорма, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизит()
	
	ТекущаяДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти());
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписанияТаблиц, 1);
	
	УстановитьПредставленияКомандВводаСтажей();
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма, "ПериодическиеСведения");
		ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(ЭтаФорма, "ПериодическиеСведения");
	КонецЕсли;
	
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗванияКлиентСервер");
		ВоинскоеСпециальноеЗваниеПредставление = Модуль.ПредставлениеВоинскогоСпециальногоЗвания(Объект.ВоинскоеСпециальноеЗвание, Объект.ДатаПрисвоения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписанияТаблицРасчета = Новый Массив;
	ОписанияТаблицРасчета.Добавить(ОписаниеТаблицыНачислений());
	ОписанияТаблицРасчета.Добавить(ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти());
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицРасчета, 1);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтажа()
	
	УстановитьПредставленияКомандВводаСтажей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставленияКомандВводаСтажей()
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = Объект.ДатаЗачисления;
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.УстановитьПредставленияКомандВводаСтажей(ЭтаФорма, ТаблицаСотрудников, ОписаниеТаблицыВидовРасчета, 1);
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти();
	ЗарплатаКадрыРасширенный.УстановитьПредставленияКомандВводаСтажей(ЭтаФорма, ТаблицаСотрудников, ОписаниеТаблицыВидовРасчета, 1);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДолжности(Перезаполнить = Ложь)
	
	Данные = Неопределено;
	Если Перезаполнить Или ДанныеДолжности = Неопределено Тогда
		
		КадровыйУчетФормыРасширенный.УстановитьДанныеДолжностиВФорме(
			ЭтаФорма, Объект.ДатаЗачисления, Объект.Должность, Объект.ДолжностьПоШтатномуРасписанию);
		
	КонецЕсли;
	
	Если ДанныеДолжности <> Неопределено Тогда
		
		Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") Тогда
			Данные = ДанныеДолжности.Получить(Объект.ДолжностьПоШтатномуРасписанию);
		Иначе
			Данные = ДанныеДолжности.Получить(Объект.Должность);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях()
	
	Если ИспользоватьШтатноеРасписание Тогда
		ДолжностьСотрудника = Объект.ДолжностьПоШтатномуРасписанию;
	Иначе
		ДолжностьСотрудника = Объект.Должность;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях(
		ЭтаФорма, Объект.Сотрудник, ВремяРегистрации, Объект.Подразделение, Объект.Организация, Объект.Территория, ДолжностьСотрудника);
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудникаДокумента(Объект.Ссылка, Объект.Сотрудник, Объект.ДатаЗачисления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеЭлементовФормы()
	
	УстановитьОтображениеДатыУдовлетворенияДенежнымДовольствием(ЭтаФорма);
	УстановитьОтображениеНачисленийДоЗачисленияВСпискиЧасти(ЭтаФорма);
	УстановитьОтображениеПолейВводаДолжности(ЭтаФорма);
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		УстановитьОтображениеВидаДоговора(ЭтаФорма);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьВидимостьВкладаВФОТРНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма, Элементы.РедактироватьФОТ.Пометка);
	ЗарплатаКадрыРасширенный.УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма);
	ЗарплатаКадрыРасширенный.ВосстановитьОтображениеПроцентаСевернойНадбавки(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейПересчетаТарифнойСтавки(ЭтаФорма, ОписаниеТаблицыНачислений());
	ЗарплатаКадрыРасширенный.УстановитьТекстПоясненияКПорядкуПересчетаТарифныхСтавок(ЭтаФорма, "ПорядокРасчетаСтоимостиЕдиницыВремени");
	ЗарплатаКадрыРасширенный.УстановитьРазмерностьСовокупнойТарифнойСтавки(ЭтаФорма);
	ЗарплатаКадрыРасширенный.УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(ЭтаФорма, Объект.ВидТарифнойСтавки,"СовокупнаяТарифнаяСтавкаРазмерность");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеДатыУдовлетворенияДенежнымДовольствием(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаУдовлетворенияДенежнымДовольствием",
		"Доступность",
		Форма.Объект.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеВидаДоговора(Форма)
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ВидДоговора",
			"ТолькоПросмотр",
			Истина);
			
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеНачисленийДоЗачисленияВСпискиЧасти(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		И ЗначениеЗаполнено(Объект.ДатаУдовлетворенияДенежнымДовольствием) 
		И КонецДня(Объект.ДатаУдовлетворенияДенежнымДовольствием) + 1 < Объект.ДатаЗачисления Тогда
		
		ВидимостьНачисленийДоЗачисленияВСпискиЧасти = Истина;
		
	Иначе
		ВидимостьНачисленийДоЗачисленияВСпискиЧасти = Ложь;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДенежноеДовольствиеДоЗачисленияВСпискиЧастиСтраница",
		"Видимость",
		ВидимостьНачисленийДоЗачисленияВСпискиЧасти);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПолейВводаДолжности(Форма)
	
	Если Форма.Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего") Тогда
		
		ВидимостьПоляВступилВДолжность = Истина;
		ПоложениеЗаголовкаПолейДолжности = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		ДоступностьВводаДолжности = Форма.Объект.ВступилВДолжность;
		Если ДоступностьВводаДолжности Тогда
			
			АвтоОтметкаНезаполненногоДолжности = Истина;
			Если Форма.ИспользоватьШтатноеРасписание Тогда
				ОтметкаНезаполненногоДолжности = Не ЗначениеЗаполнено(Форма.Объект.ДолжностьПоШтатномуРасписанию);
			Иначе
				ОтметкаНезаполненногоДолжности = Не ЗначениеЗаполнено(Форма.Объект.Должность);
			КонецЕсли;
			
		Иначе
			АвтоОтметкаНезаполненногоДолжности = Ложь;
			ОтметкаНезаполненногоДолжности = Ложь;
		КонецЕсли;
		
	Иначе
		
		ВидимостьПоляВступилВДолжность = Ложь;
		ПоложениеЗаголовкаПолейДолжности = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ДоступностьВводаДолжности = Истина;
		АвтоОтметкаНезаполненногоДолжности = Истина;
		ОтметкаНезаполненногоДолжности  = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВступилВДолжность",
		"Видимость",
		ВидимостьПоляВступилВДолжность);
		
	Если Форма.ИспользоватьШтатноеРасписание Тогда
		ИмяЭлементаДолжность = "ДолжностьПоШтатномуРасписанию";
	Иначе
		ИмяЭлементаДолжность = "Должность";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяЭлементаДолжность,
		"ПоложениеЗаголовка",
		ПоложениеЗаголовкаПолейДолжности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяЭлементаДолжность,
		"Доступность",
		ДоступностьВводаДолжности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяЭлементаДолжность,
		"АвтоОтметкаНезаполненного",
		АвтоОтметкаНезаполненногоДолжности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяЭлементаДолжность,
		"ОтметкаНезаполненного",
		ОтметкаНезаполненногоДолжности);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений(Истина, Ложь);
	ОписаниеТаблицыВидовРасчета.Вставить("ЗапретитьИзменениеПоказателяТарифнойСетки", Истина);
	
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений(Ложь, Ложь);
	ОписаниеТаблицыВидовРасчета.ИмяТаблицы  = "НачисленияДоЗачисленияВСпискиЧасти";
	ОписаниеТаблицыВидовРасчета.ПутьКДанным  = "Объект.НачисленияДоЗачисленияВСпискиЧасти";
	ОписаниеТаблицыВидовРасчета.НомерТаблицы = 1;
	ОписаниеТаблицыВидовРасчета.Вставить("ЗапретитьИзменениеПоказателяТарифнойСетки", Истина);
	
	Возврат ОписаниеТаблицыВидовРасчета;	
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыПроверяемыеНаСоответствие(КоличествоПоказателей)
	
	РеквизитыПроверяемыеНаСоответствие = Новый Структура("РеквизитыШапки,ТабличныеЧасти", Новый Соответствие, Новый Соответствие);
	
	// Раскрашенностью реквизитов шапки документа, придется управлять программно.
	РеквизитыПроверяемыеНаСоответствие.РеквизитыШапки.Вставить("ДолжностьПоШтатномуРасписанию", "ДолжностьПоШтатномуРасписанию");
	
	ОписаниеСоответствияПоказателей = Новый Соответствие;
	Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
		ОписаниеСоответствияПоказателей.Вставить("Показатель" + НомерПоказателя, "Показатель" + НомерПоказателя + "НеСоответствуетПозиции");
		ОписаниеСоответствияПоказателей.Вставить("Значение" + НомерПоказателя, "Значение" + НомерПоказателя + "НеСоответствуетПозиции");
	КонецЦикла;
	
	СтруктураОписанияТЧНачисления = УправлениеШтатнымРасписаниемКлиентСервер.ОписаниеРеквизитовПроверяемыхНаСоответствие();
	СтруктураОписанияТЧНачисления.СтруктураПоиска = Новый Структура("Начисление");
	РеквизитНесоответствияСтроки = Новый Структура("ИмяРеквизита,ИмяРеквизитаНесоответствия", "Начисление", "НачислениеНеСоответствуетПозиции");
	СтруктураОписанияТЧНачисления.РеквизитНесоответствияСтроки = РеквизитНесоответствияСтроки;
	СтруктураОписанияТЧНачисления.РасшифровкаНачислений = Истина;
	СтруктураОписанияТЧНачисления.ОписаниеСоответствияПоказателей = ОписаниеСоответствияПоказателей;
	СтруктураОписанияТЧНачисления.МаксимальноеКоличествоПоказателей = КоличествоПоказателей;
	
	РеквизитыПроверяемыеНаСоответствие.ТабличныеЧасти.Вставить("Начисления", СтруктураОписанияТЧНачисления);
	
	Возврат РеквизитыПроверяемыеНаСоответствие;
	
КонецФункции

&НаКлиенте
Функция РеквизитыПроверяемыеНаСоответствиеНаКлиенте() Экспорт
	
	Возврат РеквизитыПроверяемыеНаСоответствие(
		ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ЭтаФорма, ОписаниеТаблицыНачислений(),, 3));
		
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПозицииШтатногоРасписания()
	
	РеквизитыПозиции = ДанныеДолжности(Истина);
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		Если РеквизитыПозиции <> Неопределено Тогда
			Объект.Подразделение = РеквизитыПозиции.Подразделение;
			Объект.Должность = РеквизитыПозиции.Должность;
		КонецЕсли;
				
		ЗаполнитьГрафикРаботыПоПозицииНаСервере();
		ЗаполнитьНачисленияПоПозицииНаСервере();
		
		РассчитатьФОТНаСервере();
		
	Иначе
		Объект.Должность = Справочники.Должности.ПустаяСсылка();
	КонецЕсли;
	
	ТекущаяДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисленияПоПозицииЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если Не Отказ Тогда
		
		Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
			ЗаполнитьНачисленияПоПозицииНаСервере();
		Иначе
			ЗаполнитьНачисленияПоУмолчанию(ОписаниеТаблицыНачислений(), Истина);
		КонецЕсли;
		ВыполнитьРасчетФОТ();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикРаботыПоПозицииНаСервере()
	
	Если НеИспользоватьРасчетДенежногоДовольствияВоеннослужащих
		И ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("ДолжностьПоШтатномуРасписанию", "Объект.ДолжностьПоШтатномуРасписанию");
		ЗначенияДляЗаполнения.Вставить("ГрафикРаботы", "Объект.ГрафикРаботы");
				
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ДолжностьПоШтатномуРасписанию"));
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоПозицииНаСервере()
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		ПараметрыЗаполнения = КадровыйУчетРасширенный.ПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания();
		
		ПараметрыЗаполнения.ДатаСобытия = Объект.ДатаЗачисления;
		ПараметрыЗаполнения.Сотрудник = Объект.Сотрудник;
		ПараметрыЗаполнения.ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
		ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
		ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию = ТекущаяДолжностьПоШтатномуРасписанию;
		
		КадровыйУчетРасширенный.ЗаполнитьНачисленияПоПозиции(ЭтаФорма, ПараметрыЗаполнения);
		УстановитьПредставленияКомандВводаСтажей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияДоЗачисленияВСпискиЧасти()
	
	Если Объект.УдовлетворенДенежнымДовольствиемНаПредыдущемМестеСлужбы
		И ЗначениеЗаполнено(Объект.ДатаУдовлетворенияДенежнымДовольствием) 
		И КонецДня(Объект.ДатаУдовлетворенияДенежнымДовольствием) + 1 < Объект.ДатаЗачисления Тогда
		
		ЗаполнитьНачисленияПоУмолчанию(ОписаниеТаблицыНачисленийДоЗачисленияВСпискиЧасти(), Ложь);
		РассчитатьФОТНачисленийДоЗачисленияВСпискиЧастиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоУмолчанию(ОписаниеТаблицыВидовРасчета, ОчищатьПередЗагрузкой)
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ОсновныеНачисления = РасчетДенежногоДовольствия.ОсновныеНачисленияДенежногоДовольствия();
	
	НужныОкладыПоДолжности = Истина;
	НужныОкладыЗаЗвание = Истина;
	НужныНадбавкиЗаВыслугуЛет = Истина;
	
	Если ОчищатьПередЗагрузкой Тогда
		Объект[ИмяТаблицы].Очистить();
	Иначе
		
		Для каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Начисление) Тогда
				
				Если НужныОкладыПоДолжности И ОсновныеНачисления.ОкладыПоДолжности.Найти(СтрокаТаблицы.Начисление) <> Неопределено Тогда
					НужныОкладыПоДолжности = Ложь;
				ИначеЕсли НужныОкладыЗаЗвание И ОсновныеНачисления.ОкладыЗаЗвание.Найти(СтрокаТаблицы.Начисление) <> Неопределено Тогда
					НужныОкладыЗаЗвание = Ложь;
				ИначеЕсли НужныНадбавкиЗаВыслугуЛет И ОсновныеНачисления.НадбавкиЗаВыслугуЛет.Найти(СтрокаТаблицы.Начисление) <> Неопределено Тогда
					НужныНадбавкиЗаВыслугуЛет = Ложь;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не НужныОкладыПоДолжности
				И Не НужныОкладыЗаЗвание 
				И Не НужныНадбавкиЗаВыслугуЛет Тогда
				
				Возврат;
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавленныеСтроки = Новый Массив;
	Если НужныОкладыПоДолжности И ОсновныеНачисления.ОкладыПоДолжности.Количество() = 1 Тогда
		СтрокаТаблицы = Объект[ИмяТаблицы].Вставить(0);
		СтрокаТаблицы.Начисление = ОсновныеНачисления.ОкладыПоДолжности[0];
		ДобавленныеСтроки.Добавить(СтрокаТаблицы);
	КонецЕсли; 
	
	Если НужныОкладыЗаЗвание И ОсновныеНачисления.ОкладыЗаЗвание.Количество() = 1 Тогда
		СтрокаТаблицы = Объект[ИмяТаблицы].Добавить();
		СтрокаТаблицы.Начисление = ОсновныеНачисления.ОкладыЗаЗвание[0];
		ДобавленныеСтроки.Добавить(СтрокаТаблицы);
	КонецЕсли; 
	
	Если НужныНадбавкиЗаВыслугуЛет И ОсновныеНачисления.НадбавкиЗаВыслугуЛет.Количество() = 1 Тогда
		СтрокаТаблицы = Объект[ИмяТаблицы].Добавить();
		СтрокаТаблицы.Начисление = ОсновныеНачисления.НадбавкиЗаВыслугуЛет[0];
		ДобавленныеСтроки.Добавить(СтрокаТаблицы);
	КонецЕсли; 
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ЗарплатаКадрыРасширенныйКлиентСервер.ВводНачисленийИнициализироватьСтрокиНачислений(
			ЭтаФорма, ДобавленныеСтроки, ОписаниеТаблицыВидовРасчета, 1, Объект.Сотрудник, Объект.ДатаЗачисления);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПередЗаписьюНаСервере(РезультатыПроверки, ДанныеОЗанятыхПозициях) Экспорт
	
	Возврат КадровыйУчетРасширенный.ПроверкаСоответствияШтатномуРасписанию(ДанныеОЗанятыхПозициях, Объект.Ссылка, Истина, РезультатыПроверки, Объект.ИсправленныйДокумент);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеОЗанятыхПозициях() Экспорт 
	
	ДанныеОЗанятыхПозициях = Новый Массив;
	
	ЭлементДанных = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(ОбщегоНазначенияКлиент.ДатаСеанса());
	ЭлементДанных.Период 					= ВремяРегистрации;
	ЭлементДанных.ПозицияШтатногоРасписания = ?(ИспользоватьШтатноеРасписание, Объект.ДолжностьПоШтатномуРасписанию, Объект.Должность);
	ЭлементДанных.Сотрудник					= Объект.Сотрудник;
	ЭлементДанных.КоличествоСтавок			= 1;
	
	ДанныеОНачислениях = КадровыйУчетРасширенныйКлиентСервер.ДанныеОНачисленияхВФорме(
		ЭтаФорма,
		Объект.Начисления,
		Объект.Показатели,
		ОписаниеТаблицыНачислений());
	ЭлементДанных.ФОТ = ФОТ;

	ЭлементДанных.ДанныеОНачислениях = ДанныеОНачислениях;
	ДанныеОЗанятыхПозициях.Добавить(ЭлементДанных);
	
	Возврат ДанныеОЗанятыхПозициях;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОВоинскомСпециальномЗванииСотрудника()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда 
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗвания");
		СведенияОВоинскомСпециальномЗвании = Модуль.СведенияОВоинскомСпециальномЗванииСотрудника(Объект.Сотрудник, ВремяРегистрации);
		ЗаполнитьЗначенияСвойств(Объект, СведенияОВоинскомСпециальномЗвании);
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗванияКлиентСервер");
		ВоинскоеСпециальноеЗваниеПредставление = Модуль.ПредставлениеВоинскогоСпециальногоЗвания(Объект.ВоинскоеСпециальноеЗвание, Объект.ДатаПрисвоения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВоинскоеСпециальноеЗваниеПриИзменении(СведенияОВоинскомСпециальномЗвании)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СведенияОВоинскомСпециальномЗвании);
		Модифицированность = Истина;
		
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ВоинскиеСпециальныеЗванияКлиентСервер");
		ВоинскоеСпециальноеЗваниеПредставление = Модуль.ПредставлениеВоинскогоСпециальногоЗвания(Объект.ВоинскоеСпециальноеЗвание, Объект.ДатаПрисвоения);
		
		ВыполнитьРасчетФОТ(, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОкладаПоВоинскомуСпециальномуЗваниюНаСервере()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗвания");
		Модуль.ЗаполнитьЗначениеОкладаПоВоинскомуСпециальномуЗванию(ЭтаФорма, Объект.Начисления, ОписаниеТаблицыНачислений(), 1, Объект.ВоинскоеСпециальноеЗвание, Объект.ДатаЗачисления);
	КонецЕсли;
	
	ПерезаполнитьДанныеОкладаПоВоинскомуСпециальномуЗванию = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеОкладаПоВоинскомуСпециальномуЗваниюВСтрокеНачислений()
	
	СтрокаНачислений = Объект.Начисления.НайтиПоИдентификатору(Элементы.Начисления.ТекущаяСтрока);
	КоллекцияСтрокНачислений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНачислений);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗвания");
		Модуль.ЗаполнитьЗначениеОкладаПоВоинскомуСпециальномуЗванию(ЭтаФорма, КоллекцияСтрокНачислений, ОписаниеТаблицыНачислений(), 1, Объект.ВоинскоеСпециальноеЗвание, Объект.ДатаЗачисления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ЗавершитьРедактированиеСтрокиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеСтрокиДокумента()
	
	Отказ = Ложь;
	Если Модифицированность Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		Иначе
			
			ОписаниеДокумента = СтруктураСОписаниемДокумента();

			Модифицированность = Ложь;
			
		КонецЕсли;
		
	Иначе
		ОписаниеДокумента = Неопределено;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть(ОписаниеДокумента);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
