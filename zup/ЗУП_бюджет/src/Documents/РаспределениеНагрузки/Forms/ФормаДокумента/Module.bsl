
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		ЗаполнитьПервоначальныеЗначения();
		
		ДополнитьФормуИзменяемымиПоказателями();
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "ПоказателиСотрудниковСотрудник");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ДополнитьФормуИзменяемымиПоказателями();
	
	ДанныеСотрудниковВРеквизитФормы();
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РеквизитФормыВДанныеСотрудников(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеСотрудниковВРеквизитФормы();
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РаспределениеНагрузки", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма Тогда
		
		Если ИмяСобытия = "ИзмененыНачисления" И Источник = ЭтаФорма Тогда
			
			ЗаполнитьДанныеСотрудникаИзВРеменногоХранилища(Параметр.АдресВХранилище);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.Найти("ПоказателиСотрудников") <> Неопределено Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитФормыВДанныеСотрудников(ТекущийОбъект);
		Отказ = Отказ Или Не ТекущийОбъект.ПроверитьЗаполнение();
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияПриИзменении(Элемент)
	ДатаИзмененияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьДокументыВведенныеПозже(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.ДокументыВведенныеПозже);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРанееВведенныеДокументы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.РанееВведенныеДокументы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказателиСотрудников

&НаКлиенте
Процедура ПоказателиСотрудниковПередНачаломИзменения(Элемент, Отказ)
	
	Строка = ПоказателиСотрудников.НайтиПоИдентификатору(Элементы.ПоказателиСотрудников.ТекущаяСтрока);
	Если НЕ Строка = Неопределено Тогда
		МассивУдаляемыхСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка.Сотрудник);
		ЗафиксироватьУдаляемыхСотрудников(МассивУдаляемыхСотрудников);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(Элемент.ТекущиеДанные.Сотрудник, Поле.Имя);		
			
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПередУдалением(Элемент, Отказ)
	
	МассивУдаляемыхСотрудников = Новый Массив;
	
	Для каждого ИдентификаторУдаляемойСтроки Из Элемент.ВыделенныеСтроки Цикл
		Строка = ПоказателиСотрудников.НайтиПоИдентификатору(ИдентификаторУдаляемойСтроки);
		Если НЕ Строка = Неопределено Тогда
			МассивУдаляемыхСотрудников.Добавить(Строка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьУдаляемыхСотрудников(МассивУдаляемыхСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПослеУдаления(Элемент)
	
	ПоказателиСотрудниковПослеУдаленияНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя <> "ПоказателиСотрудниковСовокупнаяТарифнаяСтавка"
		И Элемент.ТекущийЭлемент.Имя <> "ПоказателиСотрудниковСотрудник" Тогда
		Строка = Элементы.ПоказателиСотрудников.ТекущиеДанные;
		Если НЕ Строка = Неопределено 
			И ЗначениеЗаполнено(Строка.Сотрудник) Тогда
			ПоказателиСотрудниковПриОкончанииРедактированияНаСервере(Строка.Сотрудник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПоказателиСотрудниковОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковСотрудникПриИзменении(Элемент)
	ПоказателиСотрудниковСотрудникПриИзмененииНаСервере(Элементы.ПоказателиСотрудников.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеПоказателяПриИзменении(Элемент)
	
	ИдентификаторСтроки = Элементы.ПоказателиСотрудников.ТекущаяСтрока;
	Если ИдентификаторСтроки <> Неопределено Тогда 
		ЗначениеПоказателяПриИзмененииНаСервере(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Заполнить(Команда)
	ОчиститьСообщения();
	ЗаполнитьНачисленияПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
		
	КадровыйУчетРасширенныйКлиент.ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(
		ЭтаФорма, ПараметрыОткрытия);
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.ПоказателиСотрудников,
		Объект.Организация, 
		Объект.Подразделение,
		Объект.ДатаИзменения, 
		Объект.ДатаОкончания,
		Истина, 
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПервоначальныеЗначения()
	ЗначенияДляЗаполнения = Новый Структура;
	ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Организация") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация) Тогда
		Объект.Организация = Параметры.ЗначенияЗаполнения.Организация;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям")
		И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаИзменения) Тогда
		ЗначенияДляЗаполнения.Вставить("ДатаСобытия", "Объект.ДатаИзменения");
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
КонецПроцедуры

#Область СервернаяЧастьОбработчиковСобытийЭлементовФормы

&НаСервере
Процедура ПоказателиСотрудниковПриОкончанииРедактированияНаСервере(Сотрудник)
	
	РассчитатьФОТПоДокументу(Сотрудник);
	УстановитьОтображениеНадписей();
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПоказателиСотрудниковСотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
		
	ЗавершитьУдалениеСотрудников();
	
	ТекущаяСтрока = ЭтаФорма["ПоказателиСотрудников"].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока = Неопределено 
		Или НЕ ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиСотрудника = ПоказателиСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ТекущаяСтрока.Сотрудник));
	Если СтрокиСотрудника.Количество() > 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Информация о сотруднике %1 была введена в документе ранее.'"), ТекущаяСтрока.Сотрудник);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ТекущаяСтрока.Сотрудник = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНачисленияПоказателиСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСтрока.Сотрудник));
	
КонецПроцедуры

&НаСервере
Процедура ПоказателиСотрудниковОбработкаВыбораНаСервере(ВыбранноеЗначение)
	ЗаполнитьНачисленияПоказателиСотрудников(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ПоказателиСотрудниковПослеУдаленияНаСервере()
	
	Если НЕ ЕстьУдаляемыеСотрудники() Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьУдалениеСотрудников();
	
	РеквизитФормыВДанныеСотрудников(Объект);
	ДанныеСотрудниковВРеквизитФормы();
	
	УстановитьОтображениеНадписей();
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаИзмененияПриИзмененииНаСервере()
	
	ЗаполнитьНачисленияПоказатели( , ПоказателиСотрудников.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"));

	УстановитьОтображениеНадписей();
	
КонецПроцедуры
	
#КонецОбласти 

#Область ПриПолученииДанныхНаСервере

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();	
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыВидовРасчета, "Начисления", 1, Ложь);
	ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(ЭтотОбъект);	
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьОтображениеНадписей();
	
	ЗаполнитьДанныеСотрудников();
	ЗаполнитьДанныеПреподавательскихНачислений();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицыВидовРасчета.ПутьКДанным = "Объект.НачисленияСотрудников";
	ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей = "";
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	Возврат ОписаниеТаблицыВидовРасчета;	
	
КонецФункции	
	
#КонецОбласти

#Область ДанныеСотрудниковВРеквизитФормы

&НаСервере
Процедура ДанныеСотрудниковВРеквизитФормы()
	ПоказателиСотрудниковВРеквизитФормы();
	УстановитьПредставленияСтрокСотрудников();
	НачисленияФиксированнойСуммойВРеквизитФормы();	
	ЗаполнитьФОТПоСотрудникам();
	ЗначенияСовокупныхТарифныхСтавокВРеквизитФормы();
	ЗаполнитьДанныеСотрудников();
КонецПроцедуры

#Область ДополнитьФормуИзменяемымиПоказателями

&НаСервере
Процедура ДополнитьФормуИзменяемымиПоказателями()
	
	Запрос 							= ЗапросИзменяемыхНачислений();
	ИзменяемыеПоказатели 			= ИзменяемыеПоказатели(Запрос);
	НачисленияФиксированнойСуммой 	= НачисленияФиксированнойСуммой(Запрос);
	
	ДобавитьРеквизитыПоказателей(ИзменяемыеПоказатели, НачисленияФиксированнойСуммой);
	ДобавитьЭлементыПоказателей(ИзменяемыеПоказатели, НачисленияФиксированнойСуммой);
		
КонецПроцедуры

#Область ДобавитьРеквизитыПоказателей

&НаСервере
Процедура ДобавитьРеквизитыПоказателей(ИзменяемыеПоказатели, НачисленияФиксированнойСуммой)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавитьРеквизитыИзменяемыеПоказатели(ИзменяемыеПоказатели, ДобавляемыеРеквизиты);
	ДобавитьРеквизитыНачисленияФиксированнойСуммой(НачисленияФиксированнойСуммой, ДобавляемыеРеквизиты);
	
	СуществующиеРеквизиты = МассивИменРеквизитовФормы();
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтаФорма, ДобавляемыеРеквизиты, СуществующиеРеквизиты);

	ЗаполнитьСоответствиеРеквизитовИПоказателей(ИзменяемыеПоказатели, НачисленияФиксированнойСуммой);

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыИзменяемыеПоказатели(Показатели, ДобавляемыеРеквизиты)
	
	Для Каждого Показатель Из Показатели Цикл
		ДобавитьРеквизитыПоказателя(ДобавляемыеРеквизиты, Показатель.ПутьКДанным, Показатель.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыНачисленияФиксированнойСуммой(НачисленияФиксированнойСуммой, ДобавляемыеРеквизиты)
	
	Для Каждого Начисление Из НачисленияФиксированнойСуммой Цикл
		ИмяРеквизита = ИмяКолонкиНачисленияФиксированнойСуммой(Начисление.Начисление);
		ДобавитьРеквизитыПоказателя(ДобавляемыеРеквизиты, ИмяРеквизита, Начисление.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеРеквизитовИПоказателей(ТаблицаПоказателей, НачисленияФиксированнойСуммой)
	
	СтруктураКолонкиПоказателей = Новый Структура;
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		СтруктураКолонкиПоказателей.Вставить(СтрокаПоказателя.ПутьКДанным, СтрокаПоказателя.Показатель); 
	КонецЦикла;
	
	Для Каждого СтрокаНачисления Из НачисленияФиксированнойСуммой Цикл
		ИмяКолонки = ИмяКолонкиНачисленияФиксированнойСуммой(СтрокаНачисления.Начисление);
		СтруктураКолонкиПоказателей.Вставить(ИмяКолонки, СтрокаНачисления.Начисление); 
	КонецЦикла;
	
	ЭтотОбъект.КолонкиПоказателей  = Новый ФиксированнаяСтруктура(СтруктураКолонкиПоказателей);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыПоказателя(ДобавляемыеРеквизиты, ИмяРеквизита, Заголовок)
	
	ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизита, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты(), Заголовок);
	ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизитаПоказательИспользуется(ИмяРеквизита), Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ПутьКДанным, ТипЗначения, Заголовок = Неопределено)
	ИмяТаблицы = ИмяТаблицыПоказатели();
	НовыйПоказатель = Новый РеквизитФормы(ПутьКДанным, ТипЗначения, ИмяТаблицы, Заголовок);
	ДобавляемыеРеквизиты.Добавить(НовыйПоказатель);
КонецПроцедуры

&НаСервере
Функция МассивИменРеквизитовФормы()
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы, "ПоказателиСотрудников");
	Возврат МассивИменРеквизитовФормы;
КонецФункции 
	
#КонецОбласти

#Область ДобавитьЭлементыПоказателей

&НаСервере
Процедура ДобавитьЭлементыПоказателей(ИзменяемыеПоказатели, НачисленияФиксированнойСуммой)
	
	УдалитьЭлементыИзменяемыхПоказателей();
	
	ДобавитьЭлементыИзменяемыеПоказатели(ИзменяемыеПоказатели);
	ДобавитьЭлементыНачисленияФиксированнойСуммой(НачисленияФиксированнойСуммой);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыИзменяемыхПоказателей()
	ГруппаПоказателиСотрудников = ГруппаПоказателиСотрудников();
	ЗарплатаКадры.УдалитьПодчиненныеЭлементыГруппы(ЭтаФорма, ГруппаПоказателиСотрудников);
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыИзменяемыеПоказатели(ТаблицаПоказателей)
	
	ГруппаПоказатели = ГруппаПоказателиСотрудников();
	
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		НовыйЭлемент = НовыйЭлементФормыИзменяемыйПоказатель(СтрокаПоказателя.ПутьКДанным, ГруппаПоказатели, СтрокаПоказателя.Заголовок);
		УстановитьФорматИзменяемогоПоказателя(НовыйЭлемент, СтрокаПоказателя.Показатель); 
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыНачисленияФиксированнойСуммой(НачисленияФиксированнойСуммой)
	
	ГруппаПоказатели = ГруппаПоказателиСотрудников();
	
	Для Каждого СтрокаНачисления Из НачисленияФиксированнойСуммой Цикл
		ИмяРеквизита = ИмяКолонкиНачисленияФиксированнойСуммой(СтрокаНачисления.Начисление);
		НовыйЭлемент = НовыйЭлементФормыИзменяемыйПоказатель(ИмяРеквизита, ГруппаПоказатели, СтрокаНачисления.Заголовок);
		УстановитьФорматНачисленияФиксированнойСуммой(НовыйЭлемент); 
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция НовыйЭлементФормыИзменяемыйПоказатель(ПутьКДанным, Группа, Заголовок)
	ЭлементПоказатель = ЭтаФорма.Элементы.Добавить("ПоказателиСотрудников" + ПутьКДанным, Тип("ПолеФормы"), Группа);
	ЭлементПоказатель.ПутьКДанным = "ПоказателиСотрудников." + ПутьКДанным;
	ЭлементПоказатель.Заголовок = Заголовок;
	ЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПоказатель.ОтображатьВШапке = Истина;
	ЭлементПоказатель.РастягиватьПоГоризонтали = Истина;
	ЭлементПоказатель.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении");
	
	Возврат ЭлементПоказатель;	
КонецФункции

&НаСервере
Процедура УстановитьФорматИзменяемогоПоказателя(ЭлементПоказатель, Показатель)
	ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Показатель);
	ЭлементПоказатель.ОграничениеТипа = ПоказательИнфо.ТипПоказателя;
	ЭлементПоказатель.Формат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматНачисленияФиксированнойСуммой(ЭлементПоказатель)
	ЭлементПоказатель.ОграничениеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ЭлементПоказатель.Формат = "ЧДЦ=2";
КонецПроцедуры

&НаСервере
Функция ГруппаПоказателиСотрудников()
	Возврат ЭтаФорма.Элементы.Найти("ГруппаПоказателиСотрудников");
КонецФункции 
	
#КонецОбласти

&НаСервере
Функция ЗапросИзменяемыхНачислений()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТИзменяемыеНачисления(Запрос);
	
	Возврат Запрос;	
	
КонецФункции

&НаСервере
Процедура СоздатьВТИзменяемыеНачисления(Запрос)
	
	НачисленияСотрудников = Объект.НачисленияСотрудников.Выгрузить(,"Начисление, Действие");
	НачисленияСотрудников.Свернуть("Начисление, Действие");
	
	Запрос.УстановитьПараметр("Начисления", НачисленияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Начисление
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрСведений.НачисленияРаспределенияНагрузки КАК Начисления";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ИзменяемыеПоказатели(Запрос)
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияПоказатели.Показатель,
	|	ПоказателиРасчетаЗарплаты.Идентификатор КАК ПутьКДанным,
	|	ПоказателиРасчетаЗарплаты.КраткоеНаименование КАК Заголовок
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|			ПО НачисленияПоказатели.Показатель = ПоказателиРасчетаЗарплаты.Ссылка
	|		ПО (НачисленияПоказатели.Ссылка = Начисления.Начисление)
	|ГДЕ
	|	НачисленияПоказатели.ЗапрашиватьПриВводе";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

&НаСервере
Функция НачисленияФиксированнойСуммой(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Начисление,
	|	ВЫБОР
	|		КОГДА ПВРНачисления.КраткоеНаименование = """"
	|			ТОГДА ПВРНачисления.Наименование
	|		ИНАЧЕ ПВРНачисления.КраткоеНаименование
	|	КОНЕЦ КАК Заголовок,
	|	ПВРНачисления.РеквизитДопУпорядочивания
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
	|		ПО Начисления.Начисление = ПВРНачисления.Ссылка
	|ГДЕ
	|	НЕ ПВРНачисления.Рассчитывается
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПВРНачисления.РеквизитДопУпорядочивания";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

&НаСервере
Функция ИмяРеквизитаПоказательИспользуется(ИмяРеквизита)
	Возврат ИмяРеквизита + "Используется";
КонецФункции 

&НаСервере
Функция ИмяТаблицыПоказатели()
	Возврат "ПоказателиСотрудников";
КонецФункции 
	
#КонецОбласти 

&НаСервере
Процедура ПоказателиСотрудниковВРеквизитФормы()
	
	Форма = ЭтотОбъект;	
	
	Форма.ПоказателиСотрудников.Очистить();
	
	Для каждого ПоказательСотрудника Из Объект.ПоказателиСотрудников Цикл
		
		Если НЕ ЗначениеЗаполнено(ПоказательСотрудника.Показатель) Тогда
			СтрокаРеквизитаФормыПоСотруднику(ПоказательСотрудника.Сотрудник);
			Продолжить;	
		КонецЕсли;
		
		КолонкаПоказателя = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(ПоказательСотрудника.Показатель).Идентификатор;
		
		УстановитьЗначениеПоказателяСотрудникаВРеквизитеФормы(ПоказательСотрудника.Сотрудник, КолонкаПоказателя, ПоказательСотрудника.Значение)
		
	КонецЦикла;
	
	Объект.ПоказателиСотрудников.Очистить();
	
КонецПроцедуры	

#Область НачисленияФиксированнойСуммойВРеквизитФормы

&НаСервере
Процедура НачисленияФиксированнойСуммойВРеквизитФормы()
	
	НачисленияФиксированнойСуммой = НачисленияДокументаФиксированнойСуммой();
	
	Для Каждого СтрокаНачисления Из Объект.НачисленияСотрудников Цикл
		Если ЭтоНачислениеФиксированнойСуммой(СтрокаНачисления.Начисление, НачисленияФиксированнойСуммой) Тогда
			КолонкаПоказателя = ИмяКолонкиНачисленияФиксированнойСуммой(СтрокаНачисления.Начисление);
			УстановитьЗначениеПоказателяСотрудникаВРеквизитеФормы(СтрокаНачисления.Сотрудник, КолонкаПоказателя, СтрокаНачисления.Размер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НачисленияДокументаФиксированнойСуммой()
	
	НачисленияФиксированнойСуммой = Новый Массив;
	
	МассивНачислений = ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияСотрудников, "Начисление", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	
	ЗначенияРеквизитаРассчитывается = Новый Соответствие;
	Если МассивНачислений.Количество() > 0 Тогда 
		ЗначенияРеквизитаРассчитывается = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНачислений, "Рассчитывается");
		
		Для каждого Начисление Из МассивНачислений Цикл
			Если ЗначенияРеквизитаРассчитывается[Начисление] Тогда
				НачисленияФиксированнойСуммой.Добавить(Начисление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НачисленияФиксированнойСуммой;

КонецФункции

&НаСервере
Функция ЭтоНачислениеФиксированнойСуммой(Начисление, НачисленияФиксированнойСуммой)
	Возврат Не ЗначениеЗаполнено(Начисление) Или НачисленияФиксированнойСуммой.Найти(Начисление) <> Неопределено;
КонецФункции 
	
#КонецОбласти

&НаСервере
Процедура УстановитьЗначениеПоказателяСотрудникаВРеквизитеФормы(Сотрудник, Показатель, Размер)
	Строка = СтрокаРеквизитаФормыПоСотруднику(Сотрудник);			
	УстановитьЗначениеПоказателяВСтрокеРеквизитаФормы(Строка, Показатель, Размер)
КонецПроцедуры

&НаСервере
Функция СтрокаРеквизитаФормыПоСотруднику(Сотрудник)
	
	Форма = ЭтотОбъект;	

	Отбор = Новый Структура("Сотрудник", Сотрудник);

	Строки = Форма.ПоказателиСотрудников.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Строка = Строки[0];
	Иначе
		Строка = Форма.ПоказателиСотрудников.Добавить();
		Строка.Сотрудник = Сотрудник;
	КонецЕсли;
	
	Возврат	Строка;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПоказателяВСтрокеРеквизитаФормы(Строка, Показатель, Размер)
	
	Форма = ЭтотОбъект;
	
	Если Форма.КолонкиПоказателей.Свойство(Показатель) Тогда
		
		ПоказательИспользуется 			= ИмяРеквизитаПоказательИспользуется(Показатель);	
		
		Строка[Показатель] 				= Размер;
		Строка[ПоказательИспользуется] 	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область РеквизитФормыВДанныеСотрудников

&НаСервере
Процедура РеквизитФормыВДанныеСотрудников(Объект)
	
	Если ЕстьРедактируемыеПоказатели() Тогда
		РеквизитФормыВПоказателиСотрудников(Объект); 
		РеквизитФормыВПересчетТарифныхСтавок(Объект);
	Иначе	
		ПеренестиСотрудниковБезПоказателей(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСотрудниковБезПоказателей(Объект)
	Для каждого ПоказателиСотрудника Из ПоказателиСотрудников Цикл
		Строка 				= Объект.ПоказателиСотрудников.Добавить();
		Строка.Сотрудник 	= ПоказателиСотрудника.Сотрудник; 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РеквизитФормыВПоказателиСотрудников(Объект)
	Для каждого ПоказателиСотрудника Из ПоказателиСотрудников Цикл
		РеквизитФормыВПоказателиСотрудника(Объект, ПоказателиСотрудника);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РеквизитФормыВПоказателиСотрудника(Объект, ПоказателиСотрудника)
	Для каждого КолонкаПоказатель Из КолонкиПоказателей Цикл
		Если ПоказательИспользуется(ПоказателиСотрудника, КолонкаПоказатель.Ключ) Тогда	
			Строка 				= Объект.ПоказателиСотрудников.Добавить();
			Строка.Сотрудник 	= ПоказателиСотрудника.Сотрудник;
			Строка.Показатель 	= КолонкаПоказатель.Значение;
			Строка.Значение 	= ПоказателиСотрудника[КолонкаПоказатель.Ключ];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РеквизитФормыВПересчетТарифныхСтавок(Объект)
	
	ОчиститьПересчетТарифныхСтавок(Объект);

	Для каждого ПоказателиСотрудника Из ПоказателиСотрудников Цикл		
		Строка 							= Объект.ПересчетТарифныхСтавок.Добавить();
		Строка.Сотрудник 				= ПоказателиСотрудника.Сотрудник;
		Строка.СовокупнаяТарифнаяСтавка = ПоказателиСотрудника.СовокупнаяТарифнаяСтавка;
		Строка.ВидТарифнойСтавки 		= ПоказателиСотрудника.ВидТарифнойСтавки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПересчетТарифныхСтавок(Объект)
	Объект.ПересчетТарифныхСтавок.Очистить();
КонецПроцедуры

&НаСервере
Функция ЕстьРедактируемыеПоказатели()
	Возврат НЕ КолонкиПоказателей = Неопределено И КолонкиПоказателей.Количество() > 0;
КонецФункции

&НаСервере
Функция ПоказательИспользуется(ПоказателиСотрудника, Показатель)
	ИмяРеквизитаПоказательИспользуется = ИмяРеквизитаПоказательИспользуется(Показатель);
	Возврат ПоказателиСотрудника[ИмяРеквизитаПоказательИспользуется];
КонецФункции

#КонецОбласти

#Область ЗаполнитьНачисленияПоказатели

&НаСервере
Процедура ЗаполнитьНачисленияПоказатели(СообщатьПользователю = Ложь, Сотрудники = Неопределено)
	
	Если ФормаДокументаГотоваДляЗаполнения(СообщатьПользователю) Тогда
		ЗаполнитьДокумент(Сотрудники);
	КонецЕсли;
	
	ДанныеСотрудниковВРеквизитФормы();
	
	РассчитатьФОТПоДокументу();

	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	ЗаполнитьДанныеСотрудников(Сотрудники);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоказателиСотрудников(Сотрудники)
	
	РеквизитФормыВДанныеСотрудников(Объект);
		
	ЗаполнитьНачисленияПоказатели(Истина, Сотрудники);
		
КонецПроцедуры

&НаСервере
Функция ФормаДокументаГотоваДляЗаполнения(СообщатьПользователю = Ложь)
	
	ФормаДокументаГотова = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда		
		ФормаДокументаГотова = Ложь;		
		Если СообщатьПользователю Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле Организация не заполнено.'"), , "Организация");
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ФормаДокументаГотова;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокумент(Сотрудники)	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьДокумент(Сотрудники);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры
	
#КонецОбласти

#Область ФормаРедактированияСоставаНачисленийИУдержаний

&НаКлиенте
Процедура ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(Сотрудник, Поле)
	
	Если Поле = "ПоказателиСотрудниковФОТ"
		Или Поле = "ПоказателиСотрудниковПредставлениеНачислений" Тогда
		
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			
			РедактироватьСоставНачислений = Поле = "ПоказателиСотрудниковПредставлениеНачислений";
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("АдресВХранилище", АдресВХранилищеНачисленийИУдержаний(Сотрудник, РедактироватьСоставНачислений));
			ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
			
			ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ПараметрыОткрытия, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция АдресВХранилищеНачисленийИУдержаний(Сотрудник, РедактироватьСоставНачислений)
	
	ПараметрыОткрытия = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыРедактированияСоставаНачисленийИУдержаний();
	
	ПараметрыОткрытия.ВладелецНачисленийИУдержаний = Сотрудник;
	ПараметрыОткрытия.ДатаРедактирования = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудникаДокумента(Объект.Ссылка, Сотрудник, Объект.ДатаИзменения);
	ПараметрыОткрытия.Организация = Объект.Организация;
	ПараметрыОткрытия.РежимРаботы = 3;
	
	ДополнитьСтруктуруНачислениямиИПоказателями(ПараметрыОткрытия, Сотрудник, РедактироватьСоставНачислений);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыОткрытия, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруНачислениямиИПоказателями(ПараметрыОткрытия, Сотрудник, РедактироватьСоставНачислений)
	
	МассивНачислений = Новый Массив;
	МассивПоказателей = Новый Массив;
	
	ИдентификаторСтрокиВидаРасчета = 1;
	
	ТаблицаНачислений = Объект.НачисленияСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	ТаблицаПоказателей = ЗначенияПоказателейНачислений(Сотрудник, ТаблицаНачислений);
	
	// Добавление всех начислений сотрудника.
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		
		СтруктураНачисления = Новый Структура("Начисление,ДокументОснование,ИдентификаторСтрокиВидаРасчета,Размер,Действие");
		ЗаполнитьЗначенияСвойств(СтруктураНачисления, СтрокаНачислений);
		СтруктураНачисления.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		МассивНачислений.Добавить(СтруктураНачисления);
		
		// Добавление показателей начислений.
		
		СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Начисление,ДокументОснование", СтрокаНачислений.Начисление, СтрокаНачислений.ДокументОснование));
		Если СтрокиПоказателей.Количество() = 0 Тогда
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
			СтруктураПоказателя = Новый Структура("Показатель,ИдентификаторСтрокиВидаРасчета,Значение");
			СтруктураПоказателя.Показатель = СтрокаПоказателей.Показатель;
			СтруктураПоказателя.Значение = СтрокаПоказателей.Значение;
			СтруктураПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			МассивПоказателей.Добавить(СтруктураПоказателя);
		КонецЦикла;
			
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
		
	КонецЦикла;
	
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.Используется = Истина;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.Таблица = МассивНачислений;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ИзменятьСоставВидовРасчета = Ложь;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ИзменятьЗначенияПоказателей = Ложь;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.НомерТаблицы = 1;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ПоказатьФОТ = НЕ РедактироватьСоставНачислений;
	
	ПараметрыОткрытия.Показатели = МассивПоказателей;
	
КонецПроцедуры

&НаСервере
Функция ЗначенияПоказателейНачислений(Сотрудник, ТаблицаНачисленийСотрудника)
	
	ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудникаДокумента(Объект.Ссылка, Сотрудник, Объект.ДатаИзменения);
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(НачалоМесяца(ВремяРегистрации), Объект.Организация);
	
	Начисления = МенеджерРасчета.ТаблицаНачислений();
	Для Каждого СтрокаНачисления Из ТаблицаНачисленийСотрудника Цикл
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Организация = Объект.Организация;
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		НоваяСтрока.ДокументОснование = СтрокаНачисления.ДокументОснование;
		НоваяСтрока.ДатаНачала = ВремяРегистрации;
		НоваяСтрока.ДатаОкончания = ВремяРегистрации;
	КонецЦикла;

	РеквизитФормыВДанныеСотрудников(Объект);
	
	МенеджерРасчета.ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	
	ОтборСтрок = Новый Структура(
		"Сотрудник,
		|Показатель,
		|ДокументОснование");
		
	//Показатели = МенеджерРасчета.ТаблицаПоказателей();
	Показатели = Объект.ПоказателиСотрудников.Выгрузить(Новый Массив);
	Показатели.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	// Применение значений, введенных пользователем.
	Для Каждого СтрокаНачисления Из Начисления Цикл
		Для Каждого СтрокаПоказателя Из СтрокаНачисления.Показатели Цикл
			ОтборСтрок.Сотрудник = Сотрудник;
			ОтборСтрок.Показатель = СтрокаПоказателя.Показатель;
			ОтборСтрок.ДокументОснование = СтрокаНачисления.ДокументОснование;
			ПоказателиФормы = Объект.ПоказателиСотрудников.НайтиСтроки(ОтборСтрок);
			Если ПоказателиФормы.Количество() > 0 Тогда
				СтрокаПоказателя.Значение = ПоказателиФормы[0].Значение;
			КонецЕсли;
			НоваяСтрокаПоказателей =  Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, СтрокаПоказателя);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, СтрокаНачисления, "Начисление, Сотрудник, ДокументОснование");
		КонецЦикла;
	КонецЦикла;
	
	Объект.ПоказателиСотрудников.Очистить();
	Объект.ПересчетТарифныхСтавок.Очистить();
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСотрудникаИзВРеменногоХранилища(АдресВХранилище)
	
	ДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если ДанныеИзХранилища <> Неопределено Тогда
		
		РеквизитФормыВДанныеСотрудников(Объект);
		
		ЗаполнитьНачисленияПоСотрудникуИзХранилища(ДанныеИзХранилища);
		
		ЗаполнитьПоказателиПоСотрудникуИзХранилища(ДанныеИзХранилища);
		
		ЗаполнитьЗначенияСовокупныхСтавокПоСотрудникуИзХранилища(ДанныеИзХранилища);
		
		ДанныеСотрудниковВРеквизитФормы();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоСотрудникуИзХранилища(ДанныеИзХранилища)
	
	Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
	
	УдалитьНачисленияПоСотруднику(Сотрудник);	
	
	НачисленияСотрудников = Новый Массив;
	Для каждого НачислениеСотрудника Из ДанныеИзХранилища.Начисления Цикл
		НоваяСтрока = Объект.НачисленияСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НачислениеСотрудника);
		НоваяСтрока.Сотрудник = Сотрудник;
		НачисленияСотрудников.Добавить(НоваяСтрока);
	КонецЦикла;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПоСотрудникуИзХранилища(ДанныеИзХранилища)
	
	Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
	
	УдалитьПоказателиПоСотруднику(Сотрудник);
	
	Для каждого ПоказательСотрудника Из ДанныеИзХранилища.Показатели Цикл
		НоваяСтрока = Объект.ПоказателиСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоказательСотрудника);
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФОТ

&НаСервере
Процедура РассчитатьФОТПоДокументу(РассчитываемыйСотрудник = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаИзменения) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка к расчету ФОТ
	РассчитываемыеОбъекты = Новый Соответствие;	
	Сотрудники = Новый Соответствие;
	
	Если РассчитываемыйСотрудник = Неопределено Тогда
		СписокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиСотрудников, "Сотрудник", Истина);
	Иначе
		СписокСотрудников = Новый Массив;
		СписокСотрудников.Добавить(РассчитываемыйСотрудник);
	КонецЕсли;
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотрудникам(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		ЭтотОбъект,
		СписокСотрудников,
		ГоловнаяОрганизация,
		Объект.ДатаИзменения,
		ОписаниеТаблицыНачислений);
		
	ВремяРегистрацииСотрудников = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудниковДокумента(Объект.Ссылка, СписокСотрудников, Объект.ДатаИзменения);
	
	// Уточним период по сотрудникам
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		СтрокаНачислений.Период = ВремяРегистрацииСотрудников[СтрокаНачислений.Сотрудник];	
	КонецЦикла;	
	
	Для Каждого СтрокаСотрудника Из ЭтаФорма["ПоказателиСотрудников"] Цикл
		Если РассчитываемыйСотрудник <> Неопределено
			И РассчитываемыйСотрудник <> СтрокаСотрудника.Сотрудник Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЭтаФорма["КолонкиПоказателей"].Количество() > 0 Тогда
			Для Каждого КолонкаПоказатель Из ЭтаФорма["КолонкиПоказателей"] Цикл
				Если ТипЗнч(КолонкаПоказатель.Значение) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
					Отбор = Новый Структура("Начисление", КолонкаПоказатель.Значение);
					СтрокиНачисленияСотрудника = ТаблицаНачислений.НайтиСтроки(Отбор);
					Для Каждого СтрокаНачисленияСотрудника Из СтрокиНачисленияСотрудника Цикл 
						СтрокаНачисленияСотрудника.Размер = СтрокаСотрудника[КолонкаПоказатель.Ключ];
					КонецЦикла;
				Иначе 
					ДанныеПоказателя = ТаблицаПоказателей.Добавить();
					ДанныеПоказателя.Сотрудник = СтрокаСотрудника.Сотрудник;
					ДанныеПоказателя.Период = ВремяРегистрацииСотрудников[СтрокаНачислений.Сотрудник];
					ДанныеПоказателя.ГоловнаяОрганизация = ГоловнаяОрганизация;
					ДанныеПоказателя.Показатель = КолонкаПоказатель.Значение;
					ДанныеПоказателя.Значение = СтрокаСотрудника[КолонкаПоказатель.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;	

	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей);

	ОписаниеТаблицыСовокупныхСтавок = ПлановыеНачисленияСотрудниковФормы.ОписаниеТаблицыТарифныхСтавок("ПоказателиСотрудников", "Сотрудник", "ВидТарифнойСтавки", "СовокупнаяТарифнаяСтавка");
	
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникамВДанныеФормы(
		ЭтотОбъект,
		РассчитанныеДанные,
		ГоловнаяОрганизация,
		ОписаниеТаблицыНачислений,
		ОписаниеТаблицыСовокупныхСтавок);
		
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьФОТПоСотрудникам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФОТПоСотрудникам()
	
	ФОТСотрудников = Новый Соответствие;
	Для каждого СтрокаНачисления Из Объект.НачисленияСотрудников Цикл
		
		Если СтрокаНачисления.Действие <> Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			
			ФОТСотрудника = ФОТСотрудников.Получить(СтрокаНачисления.Сотрудник);
			Если ФОТСотрудника = Неопределено Тогда
				ФОТСотрудника = 0;
			КонецЕсли; 
			
			ФОТСотрудника = ФОТСотрудника + СтрокаНачисления.Размер;
			ФОТСотрудников.Вставить(СтрокаНачисления.Сотрудник, ФОТСотрудника);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаСотрудника Из ЭтаФорма["ПоказателиСотрудников"] Цикл
		
		ФОТСотрудника = ФОТСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		Если ФОТСотрудника <> Неопределено Тогда
			СтрокаСотрудника.ФОТ = ФОТСотрудника;
		Иначе
			СтрокаСотрудника.ФОТ = 0;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СовокупнаяТарифнаяСтавка

&НаСервере
Процедура ЗаполнитьЗначенияСовокупныхСтавокПоСотрудникуИзХранилища(ДанныеИзХранилища)
	НайденныеСтроки = ПоказателиСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ДанныеИзХранилища.ВладелецНачисленийИУдержаний));
	
	// Удаление текущих данных
	Для Каждого Строка Из НайденныеСтроки Цикл 
		Строка.СовокупнаяТарифнаяСтавка = ДанныеИзХранилища.СовокупнаяТарифнаяСтавка;
		Строка.ВидТарифнойСтавки = ДанныеИзХранилища.ВидТарифнойСтавки;
	КонецЦикла;
	
	Для Каждого ДанныеСотрудника Из НайденныеСтроки Цикл 
		ДанныеСотрудника.СовокупнаяТарифнаяСтавка = ДанныеИзХранилища.СовокупнаяТарифнаяСтавка;
		ДанныеСотрудника.ВидТарифнойСтавки = ДанныеИзХранилища.ВидТарифнойСтавки;	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗначенияСовокупныхТарифныхСтавокВРеквизитФормы()
	
	Для Каждого ДанныеСотрудника Из Объект.ПересчетТарифныхСтавок Цикл 
		Отбор = Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник);
		НайденныеСтроки = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда  
			НайденныеСтроки[0].СовокупнаяТарифнаяСтавка = ДанныеСотрудника.СовокупнаяТарифнаяСтавка;
			НайденныеСтроки[0].ВидТарифнойСтавки = ДанныеСотрудника.ВидТарифнойСтавки;
		КонецЕсли;	
	КонецЦикла;
	
	Объект.ПересчетТарифныхСтавок.Очистить();
	
КонецПроцедуры
	
#КонецОбласти

#Область ПредставлениеНачислений

&НаСервере
Процедура УстановитьПредставленияСтрокСотрудников()
	Для каждого Строка Из ПоказателиСотрудников Цикл
		Строка.ПредставлениеНачислений = ПредставлениеНачислений(Строка.Сотрудник);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПредставлениеНачислений(Сотрудник)
	
	НачисленияПоСотруднику = НачисленияПоСотруднику(Сотрудник);	
	
	Если НачисленияПоСотрудникуЗаполнены(НачисленияПоСотруднику) Тогда
		ПредставлениеНачислений = ПредставлениеКоллекцииНачислений(НачисленияПоСотруднику);
	Иначе
		ПредставлениеНачислений = ПредставлениеПустойКоллекцииНачислений();
	КонецЕсли;
	
	Возврат ПредставлениеНачислений;
	
КонецФункции

&НаСервере
Функция НачисленияПоСотруднику(Сотрудник)
	
	НачисленияПоСотруднику = Новый ТаблицаЗначений;
	НачисленияПоСотруднику.Колонки.Добавить("Начисление");
	НачисленияПоСотруднику.Колонки.Добавить("Размер");
	НачисленияПоСотруднику.Колонки.Добавить("РеквизитДопУпорядочивания");
	
	СтрокиНачисленийСотрудника = Объект.НачисленияСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	РеквизитыДопУпорядочивания = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Объект.НачисленияСотрудников.Выгрузить(СтрокиНачисленийСотрудника, "Начисление").ВыгрузитьКолонку("Начисление"), "РеквизитДопУпорядочивания");
	
	Для каждого СтрокаНачисленийСотрудника Из СтрокиНачисленийСотрудника Цикл
		НовоеНачислениеПоСотруднику = НачисленияПоСотруднику.Добавить();
		НовоеНачислениеПоСотруднику.Начисление 					= СтрокаНачисленийСотрудника.Начисление;	
		НовоеНачислениеПоСотруднику.Размер						= СтрокаНачисленийСотрудника.Размер;	
		НовоеНачислениеПоСотруднику.РеквизитДопУпорядочивания 	= РеквизитыДопУпорядочивания.Получить(СтрокаНачисленийСотрудника.Начисление);	
	КонецЦикла;
	
	НачисленияПоСотруднику.Сортировать("РеквизитДопУпорядочивания");
	
	Возврат НачисленияПоСотруднику;	
	
КонецФункции

&НаСервере
Функция НачисленияПоСотрудникуЗаполнены(НачисленияПоСотруднику)
	
	Возврат НачисленияПоСотруднику.Количество() > 0;	
	
КонецФункции

&НаСервере
Функция ПредставлениеКоллекцииНачислений(НачисленияПоСотруднику) Экспорт
	
	ПредставлениеНачислений = "";
	
	ОбработанныеНачисления = Новый Массив;
	
	Для каждого НачислениеСотрудника Из НачисленияПоСотруднику Цикл
		Если НЕ НачислениеОбработано(ОбработанныеНачисления, НачислениеСотрудника.Начисление) Тогда
			ДобавитьРазделитель(ПредставлениеНачислений);
			ПредставлениеНачислений = ПредставлениеНачислений + ПредставлениеНачисления(НачислениеСотрудника);		
			ОбработанныеНачисления.Добавить(НачислениеСотрудника.Начисление);
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат ПредставлениеНачислений;
	
КонецФункции

&НаСервере
Функция НачислениеОбработано(ОбработанныеНачисления, Начисление)
	
	Возврат ОбработанныеНачисления.Найти(Начисление) <> Неопределено;	
	
КонецФункции

&НаСервере
Процедура ДобавитьРазделитель(ПредставлениеНачислений)
	Если НуженРазделитель(ПредставлениеНачислений) Тогда
		ПредставлениеНачислений = ПредставлениеНачислений + ", ";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НуженРазделитель(ПредставлениеНачислений)	
	НуженРазделитель = НЕ ПустаяСтрока(ПредставлениеНачислений);
	Возврат НуженРазделитель;
КонецФункции

&НаСервере
Функция ПредставлениеНачисления(НачислениеСотрудника)
	
	Если ЗначениеЗаполнено(НачислениеСотрудника.Размер) Тогда
		ПредставлениеНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2", НачислениеСотрудника.Начисление, НачислениеСотрудника.Размер);
	Иначе
		ПредставлениеНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", НачислениеСотрудника.Начисление);
	КонецЕсли;
	
	Возврат ПредставлениеНачисления;	
	
КонецФункции 

&НаСервере
Функция ПредставлениеПустойКоллекцииНачислений() Экспорт
	
	ПредставлениеНачислений = НСТр("ru='Нет'");
	
	Возврат ПредставлениеНачислений;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("ПоказателиСотрудников");
	Массив.Добавить("Объект.НачисленияСотрудников");
	Массив.Добавить("Объект.ПоказателиСотрудников");
	Массив.Добавить("Объект.ПересчетТарифныхСтавок");
	Массив.Добавить("Объект.ФизическиеЛица");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",					Нстр("ru = 'организации'")));
	Возврат Массив
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиНачисленияФиксированнойСуммой(Начисление)

	Возврат "а" + СтрЗаменить(Строка(Начисление.УникальныйИдентификатор()), "-", "");
	
КонецФункции

&НаСервере
Процедура УстановитьОтображениеНадписей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ЭтотОбъект.ПоказателиСотрудников, "Сотрудник", Истина);
	ВремяРегистрацииСотрудников = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудниковДокумента(Объект.Ссылка, СписокСотрудников, Объект.ДатаИзменения);
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("ВремяРегистрации", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл 
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ВремяРегистрации = ВремяРегистрацииСотрудников.Получить(Сотрудник);
	КонецЦикла;
	
	ЗарплатаКадрыРасширенный.УстановитьТекстНадписиОКонкурирующихДокументахПлановыхНачислений(ЭтотОбъект, СотрудникиДаты, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(ПоказателиСотрудников.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция УдалитьНачисленияПоСотруднику(Сотрудник)
	
	ОтборПоСотруднику = Новый Структура("Сотрудник", Сотрудник);
	
	СтрокиДляУдаления = Объект.НачисленияСотрудников.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.НачисленияСотрудников.Удалить(СтрокаДляУдаления);
	КонецЦикла;

КонецФункции 

&НаСервере
Функция УдалитьПоказателиПоСотруднику(Сотрудник)
	
	ОтборПоСотруднику = Новый Структура("Сотрудник", Сотрудник);
	
	СтрокиДляУдаления = Объект.ПоказателиСотрудников.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ПоказателиСотрудников.Удалить(СтрокаДляУдаления);
	КонецЦикла;

КонецФункции 

&НаСервере
Функция ЕстьУдаляемыеСотрудники()	
	Возврат НЕ (УдаляемыеСотрудники = Неопределено Или УдаляемыеСотрудники.Количество() = 0);
КонецФункции

&НаСервере
Процедура ЗавершитьУдалениеСотрудников()
	
	Если НЕ ЕстьУдаляемыеСотрудники() Тогда
		Возврат;
	КонецЕсли;

	Для каждого Сотрудник Из УдаляемыеСотрудники Цикл
		УдалитьНачисленияПоСотруднику(Сотрудник);
	КонецЦикла;
	
	ОчиститьУдаляемыхСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьУдаляемыхСотрудников(МассивУдаляемыхСотрудников)
	УдаляемыеСотрудники = Новый ФиксированныйМассив(МассивУдаляемыхСотрудников);	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУдаляемыхСотрудников()
	УдаляемыеСотрудники = Неопределено;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудников(МассивСотрудников = Неопределено)
	
	Если МассивСотрудников = Неопределено Тогда 
		МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиСотрудников, "Сотрудник");
	КонецЕсли;
	
	Если МассивСотрудников.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = "Должность,Образование1ВидОбразования,УченаяСтепень,УченоеЗвание";
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников, КадровыеДанные, Объект.ДатаИзменения);
	
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		Образование = "";
		Если ЗначениеЗаполнено(ДанныеСотрудника.Образование1ВидОбразования) Тогда 
			Образование = Образование + ДанныеСотрудника.Образование1ВидОбразования;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСотрудника.УченаяСтепень) Тогда
			Образование = Образование + ?(Образование = "", "", ", ") + ДанныеСотрудника.УченаяСтепень;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСотрудника.УченоеЗвание) Тогда
			Образование = Образование + ?(Образование = "", "", ", ") + ДанныеСотрудника.УченоеЗвание;
		КонецЕсли;
		СтрокиСотрудника = ПоказателиСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник));
		Если СтрокиСотрудника.Количество() > 0 Тогда 
			СтрокаСотрудника = СтрокиСотрудника[0];
			СтрокаСотрудника.Должность = ДанныеСотрудника.Должность;
			СтрокаСотрудника.Образование = Образование;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПреподавательскихНачислений()
	
	НачисленияПоПоказателям = Новый Соответствие;
	ПоказателиНачислений = Новый Соответствие;
	
	Запрос = ЗапросИзменяемыхНачислений();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияПоказатели.Ссылка КАК Начисление,
	               |	НачисленияПоказатели.Показатель
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |		ПО (НачисленияПоказатели.Ссылка = Начисления.Начисление)
	               |			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Начисления.Начисление,
	               |	Начисления.Начисление
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	НЕ Начисления.Начисление.Рассчитывается";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		МассивНачислений = НачисленияПоПоказателям[Выборка.Показатель];
		Если МассивНачислений = Неопределено Тогда 
			МассивНачислений = Новый Массив;
			НачисленияПоПоказателям.Вставить(Выборка.Показатель, МассивНачислений);
		КонецЕсли;
		МассивНачислений.Добавить(Выборка.Начисление);
		
		МассивПоказателей = ПоказателиНачислений[Выборка.Начисление];
		Если МассивПоказателей = Неопределено Тогда 
			МассивПоказателей = Новый Массив;
			НачисленияПоПоказателям.Вставить(Выборка.Начисление, МассивПоказателей);
		КонецЕсли;
	    МассивПоказателей.Добавить(Выборка.Показатель);
		
	КонецЦикла;
	
	ПреподавательскиеНачисления = Новый ФиксированноеСоответствие(НачисленияПоПоказателям);
	ПоказателиПреподавательскихНачислений = Новый ФиксированноеСоответствие(ПоказателиНачислений);
	
КонецПроцедуры

&НаСервере
Процедура ЗначениеПоказателяПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ИспользуемыеНачисления = Новый Массив;
	НеиспользуемыеНачисления = Новый Массив;
	
	ПоказателиСотрудника = ПоказателиСотрудников.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Для Каждого КолонкаПоказатель Из КолонкиПоказателей Цикл
		
		Показатель 			= КолонкаПоказатель.Значение;
		ЗначениеПоказателя 	= ПоказателиСотрудника[КолонкаПоказатель.Ключ];
		
		НачисленияПоПоказателю = ПреподавательскиеНачисления.Получить(Показатель);
		Если ЗначениеПоказателя <> 0 Или Показатель.ДопускаетсяНулевоеЗначение Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИспользуемыеНачисления, НачисленияПоПоказателю, Истина);
		Иначе 
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеиспользуемыеНачисления, НачисленияПоПоказателю, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	НеиспользуемыеНачисления = ОбщегоНазначенияКлиентСервер.СократитьМассив(НеиспользуемыеНачисления, ИспользуемыеНачисления);
	
	Для Каждого КолонкаПоказатель Из КолонкиПоказателей Цикл
		
		Показатель 				= КолонкаПоказатель.Значение;
		НачисленияПоПоказателю 	= ПреподавательскиеНачисления.Получить(Показатель);
		
		ПоказательИспользуется = Ложь;
		Для Каждого Начисление Из НачисленияПоПоказателю Цикл 
			Если ИспользуемыеНачисления.Найти(Начисление) <> Неопределено Тогда 
				ПоказательИспользуется = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ИмяРеквизитаПоказательИспользуется = ИмяРеквизитаПоказательИспользуется(КолонкаПоказатель.Ключ);
		ПоказателиСотрудника[ИмяРеквизитаПоказательИспользуется] = ПоказательИспользуется;
		
	КонецЦикла;
	
	Если ИспользуемыеНачисления.Количество() <> 0 Тогда 
		ДобавитьНачисленияСотруднику(ПоказателиСотрудника.Сотрудник, ИспользуемыеНачисления); 
	КонецЕсли;
	
	Если НеиспользуемыеНачисления.Количество() <> 0 Тогда
		УдалитьНачисленияСотрудника(ПоказателиСотрудника.Сотрудник, НеиспользуемыеНачисления);
	КонецЕсли;
	
	ПоказателиСотрудника.ПредставлениеНачислений = ПредставлениеНачислений(ПоказателиСотрудника.Сотрудник);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНачисленияСотруднику(Сотрудник, ИспользуемыеНачисления)
	
	Для Каждого Начисление Из ИспользуемыеНачисления Цикл
		
		Отбор = Новый Структура("Сотрудник, Начисление", Сотрудник, Начисление);
		НайденныеСтроки = Объект.НачисленияСотрудников.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если НайденныеСтроки[0].Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда 
				НайденныеСтроки[0].Действие = Неопределено;
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		НовоеНачисление = Объект.НачисленияСотрудников.Добавить();
		НовоеНачисление.Сотрудник 	= Сотрудник;
		НовоеНачисление.Начисление 	= Начисление;
		НовоеНачисление.Действие 	= Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНачисленияСотрудника(Сотрудник, НеиспользуемыеНачисления)
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого Начисление Из НеиспользуемыеНачисления Цикл
		Отбор = Новый Структура("Сотрудник, Начисление", Сотрудник, Начисление);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдаляемыеСтроки, Объект.НачисленияСотрудников.НайтиСтроки(Отбор));
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Если УдаляемаяСтрока.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить Тогда
			Объект.НачисленияСотрудников.Удалить(УдаляемаяСтрока);
		Иначе
			УдаляемаяСтрока.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
