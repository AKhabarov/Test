#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора.
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИСотрудникам(ЭтотОбъект, Таблица, "Организация", "ПоказателиСотрудников.Сотрудник");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("НачисленияСотрудников", "Сотрудник"));
	МассивПараметров.Добавить(Новый Структура("ПоказателиСотрудников", "Сотрудник"));
	МассивПараметров.Добавить(Новый Структура("ПересчетТарифныхСтавок", "Сотрудник"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотрудникам(ЭтотОбъект, Организация, МассивПараметров, ДатаИзменения);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения);
	
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
	СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаИзменения, "Объект.ДатаИзменения", Отказ, НСтр("ru='Дата изменения'"), , , Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаПлановыхНачислений();
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиСотрудников, "Сотрудник", Истина);
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= ДатаИзменения;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ДатаИзменения;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		Сотрудники,
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.ПоказателиСотрудников")
	);
		
	Для Каждого Строка Из НачисленияСотрудников Цикл 
		
		Если Строка.Действие <> Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 			= ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник 	= Строка.Сотрудник;
		НоваяСтрока.Период 		= ДатаИзменения;
		НоваяСтрока.Начисление 	= Строка.Начисление;
		НоваяСтрока.Действие 	= Строка.Действие;
		НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ПроверитьМножественностьОплатыВремени(ТаблицаНачислений, Ссылка, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает Структуру с полями.
//		ПлановыеНачисления - данные, необходимые для формирования истории плановых начислений.
//		(см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхНачислений)
//		ЗначенияПоказателей (см. там же).
//
Функция ПолучитьДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// Подготовка данных для проведения.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Ссылка.ДатаИзменения КАК ДатаСобытия,
		|	НачисленияСотрудников.Ссылка.ДатаОкончания КАК ДействуетДо,
		|	НачисленияСотрудников.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НачисленияСотрудников.Начисление КАК Начисление,
		|	НачисленияСотрудников.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА НачисленияСотрудников.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	ВЫБОР
		|		КОГДА НачисленияСотрудников.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ИСТИНА
		|		КОГДА НачисленияСотрудников.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяПоОкончании,
		|	НачисленияСотрудников.Размер КАК Размер
		|ИЗ
		|	Документ.РаспределениеНагрузки.НачисленияСотрудников КАК НачисленияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО НачисленияСотрудников.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	НачисленияСотрудников.Ссылка = &Ссылка";
	
	// Первый набор данных для проведения - таблица для формирования плановых начислений.
	ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиСотрудников.Ссылка.Организация,
		|	ПоказателиСотрудников.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	ПоказателиСотрудников.Ссылка.ДатаИзменения КАК ДатаСобытия,
		|	ПоказателиСотрудников.Ссылка.ДатаОкончания КАК ДействуетДо,
		|	ПоказателиСотрудников.Показатель,
		|	ПоказателиСотрудников.ДокументОснование,
		|	МАКСИМУМ(ПоказателиСотрудников.Значение) КАК Значение
		|ИЗ
		|	Документ.РаспределениеНагрузки.ПоказателиСотрудников КАК ПоказателиСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = ПоказателиСотрудников.Сотрудник)
		|ГДЕ
		|	ПоказателиСотрудников.Ссылка = &Ссылка
		|	И ПоказателиСотрудников.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиСотрудников.Ссылка.Организация,
		|	ПоказателиСотрудников.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	ПоказателиСотрудников.Ссылка.ДатаИзменения,
		|	ПоказателиСотрудников.Ссылка.ДатаОкончания,
		|	ПоказателиСотрудников.Показатель,
		|	ПоказателиСотрудников.ДокументОснование";
	
	// Второй набор данных для проведения - таблица для формирования значений показателей.
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПересчетТарифныхСтавок.Ссылка.ДатаИзменения КАК ДатаСобытия,
		|	ПересчетТарифныхСтавок.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА ПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ ПересчетТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ПересчетТарифныхСтавок.Ссылка.ДатаОкончания КАК ДействуетДо
		|ИЗ
		|	Документ.РаспределениеНагрузки.ПересчетТарифныхСтавок КАК ПересчетТарифныхСтавок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = ПересчетТарифныхСтавок.Сотрудник)
		|ГДЕ
		|	ПересчетТарифныхСтавок.Ссылка = &Ссылка";
	
	// Третий набор данных для проведения - таблица для формирования значений совокупных тарифных ставок.
	ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСотрудников.Ссылка.ДатаИзменения КАК ДатаСобытия,
		|	НачисленияСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.РаспределениеНагрузки.НачисленияСотрудников КАК НачисленияСотрудников
		|ГДЕ
		|	НачисленияСотрудников.Ссылка = &Ссылка";
	
	// Четвертый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#Область ЗаполнитьДокумент

Процедура ЗаполнитьДокумент(ОбрабатываемыеСотрудники = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПодготовитьВременныеТаблицыПоСотрудникам(Запрос, ОбрабатываемыеСотрудники);	
	
	ОчиститьДанные(ОбрабатываемыеСотрудники);
	
	НачисленияПоказатели = НачисленияПоказателиСотрудников(Запрос);
	
	ЗаполнитьДанные(НачисленияПоказатели.Начисления, НачисленияПоказатели.Показатели);
	
КонецПроцедуры

Процедура ОчиститьДанные(ОбрабатываемыеСотрудники)
	
	Если ОбрабатываемыеСотрудники = Неопределено Тогда
		НачисленияСотрудников.Очистить();
		ПоказателиСотрудников.Очистить();
	Иначе
		Для каждого Сотрудник Из ОбрабатываемыеСотрудники Цикл  
			ОчиститьДанныеПоСотруднику(Сотрудник);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчиститьДанныеПоСотруднику(Сотрудник)
	ОтборПоСотруднику = Новый Структура("Сотрудник", Сотрудник);
	
	СтрокиДляУдаления = НачисленияСотрудников.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		НачисленияСотрудников.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	СтрокиДляУдаления = ПоказателиСотрудников.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		ПоказателиСотрудников.Удалить(СтрокаДляУдаления);
	КонецЦикла;
КонецПроцедуры

#Область ПодготовитьВременныеТаблицыПоСотрудникам

Процедура ПодготовитьВременныеТаблицыПоСотрудникам(Запрос, ОбрабатываемыеСотрудники = Неопределено)
	
	Если ОбрабатываемыеСотрудники = Неопределено Тогда
		СоздатьВТСотрудникиПериоды(Запрос);
	Иначе
		СоздатьВТСотрудникиПериодыПоСотруднику(Запрос, ОбрабатываемыеСотрудники);	
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Ссылка);
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Период,Сотрудник");
	
	СоздатьВТПлановыеНачисленияСотрудников(Запрос, ПараметрыПостроения, ПараметрыПостроенияФОТ, ОписаниеФильтра);
	СоздатьВТЗначенияПоказателейСотрудников(Запрос, ПараметрыПостроения, ОписаниеФильтра);
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиПериоды(Запрос)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ПолеДолжность = "ДолжностьПоШтатномуРасписанию";
	Иначе
		ПолеДолжность = "Должность";
	КонецЕсли;
	
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(ПолеДолжность);
	
	Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Параметры.Организация 		= Организация;
	Параметры.Подразделение 	= Подразделение;
	Параметры.НачалоПериода 	= ДатаИзменения;
	Параметры.ОкончаниеПериода 	= ДатаИзменения;
	Параметры.КадровыеДанные 	= ПолеДолжность;
	
	КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(Параметры);
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, Параметры, "ВТСотрудникиПериоды");
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиПериодыПоСотруднику(Запрос, ОбрабатываемыеСотрудники)
	
	ТЗСотрудников = Новый ТаблицаЗначений;
	ТЗСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТЗСотрудников.Колонки.Добавить("Период", 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для каждого ОбрабатываемыйСотрудник Из ОбрабатываемыеСотрудники Цикл
		НоваяСтрока = ТЗСотрудников.Добавить();
		НоваяСтрока.Сотрудник 	= ОбрабатываемыйСотрудник;
		НоваяСтрока.Период 		= ДатаИзменения;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЗСотрудников.Период КАК Период,
	|	ТЗСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТОтборовСотрудники
	|ИЗ
	|	&ТЗСотрудников КАК ТЗСотрудников";
	
	Запрос.УстановитьПараметр("ТЗСотрудников", ТЗСотрудников);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТОтборовСотрудники");
	ОписательТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТСотрудникиПериоды";
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, КадровыеДанные);
	
КонецПроцедуры

Процедура СоздатьВТПлановыеНачисленияСотрудников(Запрос, ПараметрыПостроения, ПараметрыПостроенияФОТ, ОписаниеФильтра)
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроенияФОТ);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Период,
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление,
	|	ПлановыеНачисления.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
	|			ТОГДА ПлановыеНачисления.Размер
	|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
	|	КОНЕЦ КАК Размер
	|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудников
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
	|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
	|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&ИсключаемыеКатегории)
	|	И НЕ ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления).ЯвляетсяЛьготой
	|	И ПлановыеНачисления.Используется";
	
	ИсключаемыеКатегории = Новый СписокЗначений;
	ИсключаемыеКатегории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	ИсключаемыеКатегории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	
	Запрос.УстановитьПараметр("ИсключаемыеКатегории", ИсключаемыеКатегории);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗначенияПоказателейСотрудников(Запрос, ПараметрыПостроения, ОписаниеФильтра)
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПоказателейСотрудников");
	
КонецПроцедуры

#КонецОбласти

#Область НачисленияПоказателиСотрудников

Функция НачисленияПоказателиСотрудников(Запрос)
	
	Начисления = НачисленияСотрудников(Запрос);
	Показатели = ПоказателиСотрудников(Запрос);
	
	Возврат Новый Структура("Начисления,Показатели", Начисления,Показатели);
	
КонецФункции

Функция НачисленияСотрудников(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	ПлановыеНачисления.Размер,
		|	ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.ПустаяСсылка) КАК Действие
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК Сотрудники
		|		ПО ПлановыеНачисления.Сотрудник = Сотрудники.Сотрудник
		|			И ПлановыеНачисления.Период = Сотрудники.Период";
	
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "Сотрудники");
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПоказателиСотрудников(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПоПозиции.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ПоказателиНачислений.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
		|	ЕСТЬNULL(ЗначенияПоказателейСотрудников.ДокументОснование, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
		|	ЕСТЬNULL(ЗначенияПоказателейСотрудников.Значение, 0) КАК Значение
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПоПозиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|			ПО ПлановыеНачисленияСотрудников.Начисление = ПоказателиНачислений.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейСотрудников КАК ЗначенияПоказателейСотрудников
		|			ПО (ЗначенияПоказателейСотрудников.Показатель = ПоказателиНачислений.Показатель)
		|				И (ЗначенияПоказателейСотрудников.Сотрудник = ПлановыеНачисленияСотрудников.Сотрудник)
		|				И (ЗначенияПоказателейСотрудников.ДокументОснование = ПлановыеНачисленияСотрудников.ДокументОснование)
		|		ПО СотрудникиПоПозиции.Сотрудник = ПлановыеНачисленияСотрудников.Сотрудник";
	
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "СотрудникиПоПозиции");
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьДанные(Начисления, Показатели)
	
	ТаблицаНачислений = Начисления.Выгрузить();
	ТаблицаПоказателей = Показатели.Выгрузить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, НачисленияСотрудников);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоказателей, ПоказателиСотрудников);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.Ссылка.ДатаИзменения КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.РаспределениеНагрузки.НачисленияСотрудников КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.Ссылка.ДатаОкончания,
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.РаспределениеНагрузки.НачисленияСотрудников КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.Ссылка.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
