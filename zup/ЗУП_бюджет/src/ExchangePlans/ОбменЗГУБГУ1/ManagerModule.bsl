#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Точка входа, позволяющую механизмам подсистемы "Обмен данными" 
// получить доступ ко всем свойствам и методам плана обмена,
// отвечающим за технологическую и прикладную специфику конкретного обмена.
//
// Параметры:
//	Настройки - Структура - см. ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт

	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки = Истина;	
	Настройки.Алгоритмы.ОписаниеОграниченийПередачиДанных                   = Истина;
	Настройки.Алгоритмы.ОписаниеОграниченийПередачиДанныхБазыКорреспондента = Истина;

	Настройки.ИмяКонфигурацииИсточника = Метаданные.Имя;
	Настройки.ПланОбменаИспользуетсяВМоделиСервиса = Ложь;
	
КонецПроцедуры

// Переопределение свойств варианта настройки
//
//	Параметры:
//		ОписаниеВарианта       - Структура - см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию
//		ИдентификаторНастройки - Строка    - идентификатор варианта настройки 
//		ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт
	
	ОписаниеВарианта.ИмяФайлаНастроекДляПриемника = НСтр("ru = 'Настройки обмена БГУ, ред. 1 - ЗГУ, ред. 3'");

	ОписаниеВарианта.КраткаяИнформацияПоОбмену = НСтр("ru = 'Обмен с ""1С: Бухгалтерия государственного учреждения, редакция 1""'");
	ОписаниеВарианта.ПодробнаяИнформацияПоОбмену = "ПланОбмена.ОбменЗГУБГУ1.Форма.ПодробнаяИнформация";
	
	ОписаниеВарианта.Отборы               = НастройкаОтборовНаУзле(); 
 	ОписаниеВарианта.ОтборыКорреспондента = НастройкаОтборовНаУзлеБазыКорреспондента();
	
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	
КонецПроцедуры
	
// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//		НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
//		ВерсияКорреспондента - Строка - Номер версии корреспондента.
//		ИдентификаторНастройки - Строка - Имя предопределенной настройки плана обмена.
// 
// Возвращаемое значение:
//		Строка, Неогранич. - строка описания ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеОтборПоОрганизациям = "";
	
	// дата начала выгрузки документов
	СтрокаДатаНачалаВыгрузки = "Выгружать документы и справочную информацию [ОграничениеПоДатеВыгрузки]";
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		
		// "Выгружать документы, начиная с 1 января 2009г."
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru='начиная с [ДатаНачалаВыгрузкиДокументов]'");
		ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(ОграничениеДатаНачалаВыгрузкиДокументов, "[ДатаНачалаВыгрузкиДокументов]", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
		
	Иначе
		
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru='за весь период ведения учета в программе'");
		
	КонецЕсли;
	
	ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(СтрокаДатаНачалаВыгрузки, "[ОграничениеПоДатеВыгрузки]", ОграничениеДатаНачалаВыгрузкиДокументов);
	
	// отбор по организациям
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		
		СтрокаПредставленияОтбора = СтрСоединить(НастройкаОтборовНаУзле.Организации.Организация, "; ");
		
		ОграничениеОтборПоОрганизациям = НСтр("ru='только по организациям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоОрганизациям = СтрЗаменить(ОграничениеОтборПоОрганизациям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
		
	Иначе
		
		ОграничениеОтборПоОрганизациям = НСтр("ru='по всем организациям'");
		
	КонецЕсли;
	
	Результат = НСтр("ru='[ОграничениеДатаНачалаВыгрузкиДокументов]
						|
						|***** Настройки обмена данными для отражения заработной платы в учете *****
						|Выгружать документы и справочную информацию [ОграничениеОтборПоОрганизациям]'");
						
	//
	
	Результат = СтрЗаменить(Результат, "[ОграничениеДатаНачалаВыгрузкиДокументов]", ОграничениеДатаНачалаВыгрузкиДокументов);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоОрганизациям]",          ОграничениеОтборПоОрганизациям);
	
	Возврат Результат;	
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку
// описания ограничений удобную для восприятия пользователем.
// 
// Параметры:
//		НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
//		ВерсияКорреспондента - Строка - Номер версии корреспондента.
//		ИдентификаторНастройки - Строка - Имя предопределенной настройки плана обмена.
// 
// Возвращаемое значение:
//		Строка, Неогранич. - строка описания ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	ШаблонСтроки = НСтр("ru='***** Настройки обмена данными для отражения заработной платы в учете *****
							|Выгружать данные%1: %2'");
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		СтрокаОрганизации = СтрСоединить(НастройкаОтборовНаУзле.Организации.Организация, "; ");
		СтрокаПредставлениеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НСтр("ru=' только по организациям'"), СтрокаОрганизации);
	Иначе
		СтрокаПредставлениеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, "", НСтр("ru='по всем организациям'"));
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru='Контрагент для учета зарплаты: %1'");
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.Контрагент) Тогда
		СтрокаПредставлениеОтбораКонтрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НастройкаОтборовНаУзле.Контрагент);
	Иначе
		СтрокаПредставлениеОтбораКонтрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НСтр("ru='не установлен'"));
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru='Вид первичного документа: %1'");
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ВидПервичногоДокумента) Тогда
		СтрокаПредставлениеОтбораВидДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НастройкаОтборовНаУзле.ВидПервичногоДокумента);
	Иначе
		СтрокаПредставлениеОтбораВидДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НСтр("ru='не установлен'"));
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru='%1
							|%2
							|%3'");
							
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, 
																	СтрокаПредставлениеОтбораОрганизации,
																	СтрокаПредставлениеОтбораКонтрагент,
																	СтрокаПредставлениеОтбораВидДокумента);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Возвращаемое значение:
//		СтруктураНастроек - Структура - структура отборов на узле плана обмена.
// 
Функция НастройкаОтборовНаУзле()
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	// Обмен данными для отражения зарплаты
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДатаСеанса()));	
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Возвращаемое значение:
//		СтруктураНастроек - Структура - структура отборов на узле плана обмена.
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента()
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация_Ключ", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	// Обмен данными для отражения зарплаты
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("ВидПервичногоДокумента", "");
	СтруктураНастроек.Вставить("ВидПервичногоДокумента_Ключ", "");
	СтруктураНастроек.Вставить("Контрагент", "");
	СтруктураНастроек.Вставить("Контрагент_Ключ", "");
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#КонецЕсли
