#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Организации", "Организации");
	ИменаРеквизитов.Вставить("ИспользоватьОтборПоОрганизациям", "ИспользоватьОтборПоОрганизациям");
	
	ИменаРеквизитовБазыКорреспондента = Новый Структура;
	ИменаРеквизитовБазыКорреспондента.Вставить("Организации", "ОрганизацииБазыКорреспондента");	
	ИменаРеквизитовБазыКорреспондента.Вставить("ИспользоватьОтборПоОрганизациям", "ИспользоватьОтборПоОрганизациямБазыКорреспондента");
	ИменаРеквизитовБазыКорреспондента.Вставить("Контрагент", "Контрагент");
	ИменаРеквизитовБазыКорреспондента.Вставить("ВидПервичногоДокумента", "ВидПервичногоДокумента");
	ИменаРеквизитовБазыКорреспондента.Вставить("Контрагент_Ключ", "Контрагент_Ключ");
	ИменаРеквизитовБазыКорреспондента.Вставить("ВидПервичногоДокумента_Ключ", "ВидПервичногоДокумента_Ключ");
	
	ОбменДаннымиСервер.ФормаНастройкиУзловПриСозданииНаСервере(ЭтаФорма, "ОбменЗГУБГУ1");
	
	РежимСинхронизацииДанных = ?(ИспользоватьОтборПоОрганизациям, "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям", "СинхронизироватьВсеДанные");
	РежимСинхронизацииДанныхБазыКорреспондента = ?(ИспользоватьОтборПоОрганизациямБазыКорреспондента, "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям", "СинхронизироватьВсеДанные");
	
	Параметры.Свойство("ПараметрыПодключения", ПараметрыВнешнегоСоединения);
	
	ПолучитьОписаниеКонтекста();	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РежимСинхронизацииДанныхПриИзмененииЗначения();
	РежимСинхронизацииДанныхБазыКорреспондентаПриИзмененииЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтаФорма, ЗавершениеРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбменДаннымиКлиент.ОбработчикВыбораЭлементовБазыКорреспондентаОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимСинхронизацииДанныхПриИзменении(Элемент)
	РежимСинхронизацииДанныхПриИзмененииЗначения();
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииДанныхБазыКорреспондентаПриИзменении(Элемент)
	РежимСинхронизацииДанныхБазыКорреспондентаПриИзмененииЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ВидПервичногоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбора = Новый Структура("ВыборГруппИЭлементов", ГруппыИЭлементы.Элементы);
	
	ОбменДаннымиКлиент.ОбработчикВыбораЭлементовБазыКорреспондентаНачалоВыбора("ВидПервичногоДокумента", "Справочник.ВидыПервичныхДокументов", 
		ЭтаФорма, СтандартнаяОбработка, ЭтаФорма.ПараметрыВнешнегоСоединения, ПараметрыВыбора);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбора = Новый Структура("ВыборГруппИЭлементов", ГруппыИЭлементы.Элементы);
	
	ОбменДаннымиКлиент.ОбработчикВыбораЭлементовБазыКорреспондентаНачалоВыбора("Контрагент", "Справочник.Контрагенты", 
		ЭтаФорма, СтандартнаяОбработка, ЭтаФорма.ПараметрыВнешнегоСоединения, ПараметрыВыбора);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	ИспользоватьОтборПоОрганизациям = (РежимСинхронизацииДанных = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
	ИспользоватьОтборПоОрганизациямБазыКорреспондента = (РежимСинхронизацииДанныхБазыКорреспондента = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
	
	Если Не ИспользоватьОтборПоОрганизациям Тогда
		Организации.Очистить();
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоОрганизациямБазыКорреспондента Тогда
		ОрганизацииБазыКорреспондента.Очистить();
	КонецЕсли;
	
	ПолучитьОписаниеКонтекста();
	
	ОбменДаннымиКлиент.ФормаНастройкиУзловКомандаЗакрытьФорму(ЭтаФорма);		
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеОрганизации(Команда)
	ИмяТаблицы = "Организации";
	
	ВключитьОтключитьВсеЭлементыВТаблице(Истина, ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеОрганизации(Команда)
	ИмяТаблицы = "Организации";
	
	ВключитьОтключитьВсеЭлементыВТаблице(Ложь, ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеОрганизацииБазыКорреспондента(Команда)
	ИмяТаблицы = "ОрганизацииБазыКорреспондента";
	
	ВключитьОтключитьВсеЭлементыВТаблице(Истина, ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеОрганизацииБазыКорреспондента(Команда)
	ИмяТаблицы = "ОрганизацииБазыКорреспондента";
	
	ВключитьОтключитьВсеЭлементыВТаблице(Ложь, ИмяТаблицы);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВключитьОтключитьВсеЭлементыВТаблице(Включить, ИмяТаблицы)
	Для Каждого ЭлементКоллекции Из ЭтаФорма[ИмяТаблицы] Цикл
		ЭлементКоллекции.Использовать = Включить;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеКонтекста()
	// Эта программа
	Результат = НСтр("ru='Настройки этой программы
						|==================================
						|'");
	
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеОтборПоОрганизациям = "";
	
	// дата начала выгрузки документов
	СтрокаДатаНачалаВыгрузки = "Выгружать документы и справочную информацию [ОграничениеПоДатеВыгрузки]";
	
	Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) Тогда
		
		// "Выгружать документы, начиная с 1 января 2009г."
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru='начиная с [ДатаНачалаВыгрузкиДокументов]'");
		ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(ОграничениеДатаНачалаВыгрузкиДокументов, "[ДатаНачалаВыгрузкиДокументов]", Формат(ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
		
	Иначе
		
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru='за весь период ведения учета в программе'");
		
	КонецЕсли;
	
	ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(СтрокаДатаНачалаВыгрузки, "[ОграничениеПоДатеВыгрузки]", ОграничениеДатаНачалаВыгрузкиДокументов);
	
	// отбор по организациям
	Если ИспользоватьОтборПоОрганизациям Тогда
		
		СтрокиОтбораОрганизаций = Организации.Выгрузить(Новый Структура("Использовать", Истина), "Представление");
		
		СтрокаПредставленияОтбора = СтрСоединить(СтрокиОтбораОрганизаций.ВыгрузитьКолонку("Представление"), "; ");
		
		ОграничениеОтборПоОрганизациям = НСтр("ru='только по организациям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоОрганизациям = СтрЗаменить(ОграничениеОтборПоОрганизациям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
		
	Иначе
		
		ОграничениеОтборПоОрганизациям = НСтр("ru='по всем организациям'");
		
	КонецЕсли;
	
	Результат = Результат + НСтр("ru='[ОграничениеДатаНачалаВыгрузкиДокументов]
								|
								|***** Настройки обмена данными для отражения заработной платы в учете *****
								|Выгружать документы и справочную информацию [ОграничениеОтборПоОрганизациям]'");
						
	//
	
	Результат = СтрЗаменить(Результат, "[ОграничениеДатаНачалаВыгрузкиДокументов]", ОграничениеДатаНачалаВыгрузкиДокументов);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоОрганизациям]",          ОграничениеОтборПоОрганизациям);
	
	// Корреспондент 
	Результат = Результат + НСтр("ru='
									|
									|Настройки второй программы
									|==================================
									|'");
	
	ШаблонСтроки = НСтр("ru='***** Настройки обмена данными для отражения заработной платы в учете *****
							|Выгружать данные%1: %2'");
	Если ИспользоватьОтборПоОрганизациям Тогда
		СтрокиОтбораОрганизаций = ОрганизацииБазыКорреспондента.Выгрузить(Новый Структура("Использовать", Истина), "Представление");						
		
		СтрокаОрганизации = СтрСоединить(СтрокиОтбораОрганизаций.ВыгрузитьКолонку("Представление"), "; ");
		СтрокаПредставлениеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НСтр("ru=' только по организациям'"), СтрокаОрганизации);
	Иначе
		СтрокаПредставлениеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, "", НСтр("ru='по всем организациям'"));
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru='Контрагент для учета зарплаты: %1'");
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтрокаПредставлениеОтбораКонтрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Контрагент);
	Иначе
		СтрокаПредставлениеОтбораКонтрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НСтр("ru='не установлен'"));
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru='Вид первичного документа: %1'");
	Если ЗначениеЗаполнено(ВидПервичногоДокумента) Тогда
		СтрокаПредставлениеОтбораВидДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ВидПервичногоДокумента);
	Иначе
		СтрокаПредставлениеОтбораВидДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НСтр("ru='не установлен'"));
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru='%1
							|%2
							|%3'");
							
	Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, 
																					СтрокаПредставлениеОтбораОрганизации,
																					СтрокаПредставлениеОтбораКонтрагент,
																					СтрокаПредставлениеОтбораВидДокумента);

	ОписаниеКонтекста = Результат;
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииДанныхПриИзмененииЗначения()
	Элементы.Организации.Доступность = (РежимСинхронизацииДанных = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииДанныхБазыКорреспондентаПриИзмененииЗначения()
	Элементы.ОрганизацииБазыКорреспондента.Доступность = (РежимСинхронизацииДанныхБазыКорреспондента = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
КонецПроцедуры

#КонецОбласти
