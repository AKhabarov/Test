#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда	

#Область СлужебныеПроцедурыИФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если МассивОбъектов.Количество() < 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета РасчетСреднегоЗаработка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РасчетСохраняемогоДенежногоСодержания") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ТабличныйДокумент = ТабличныйДокументРасчетаСохраняемогоДенежногоСодержания(МассивОбъектов, ОбъектыПечати, "ПФ_MXL_РасчетСохраняемогоДенежногоСодержания");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_РасчетСохраняемогоДенежногоСодержания", НСтр("ru = 'Расчет сохраняемого денежного содержания'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТабличныйДокументРасчетаСохраняемогоДенежногоСодержания(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ПрочиеНачисления = Новый Соответствие;
	ПрочиеНачисления.Вставить(РасчетЗарплаты.НачислениеРайонныйКоэффициент(),  Истина);
	ПрочиеНачисления.Вставить(РасчетЗарплаты.НачислениеСевернаяНадбавка(),  Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСохраняемогоДенежногоСодержания";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьРасчетаСохраняемогоДенежногоСодержания.ПФ_MXL_РасчетСохраняемогоДенежногоСодержания");
	
	СекцияШапка = 					Макет.ПолучитьОбласть("Шапка");
	СекцияШапкаНазначениеРасчета = 	Макет.ПолучитьОбласть("ЗаголовокНазначениеРасчета");
	СекцияСтрокаНачисления = 		Макет.ПолучитьОбласть("СтрокаНачисления");
	СекцияИтогНачисления = 			Макет.ПолучитьОбласть("ИтогНачисления");
	СекцияСтрокаДопНачисления = 	Макет.ПолучитьОбласть("СтрокаДопНачисления");
	СекцияИтогДопНачисления = 		Макет.ПолучитьОбласть("ИтогДопНачисления");
	СекцияПодвал = 					Макет.ПолучитьОбласть("Подвал");
	СекцияШапкаПлановыеНачисления = Макет.ПолучитьОбласть("ШапкаПлановыеНачисления");
	СекцияШапкаРазовыеНачисления = 	Макет.ПолучитьОбласть("ШапкаРазовыеНачисления");
	СекцияШапкаПрочиеНачисления = 	Макет.ПолучитьОбласть("ШапкаПрочиеНачисления");
	
	СекцияРасшифровкаНачисленияЗаголовок = 	Макет.ПолучитьОбласть("РасшифровкаНачисленияЗаголовок");
	СекцияРасшифровкаНачисленияСтрока = 	Макет.ПолучитьОбласть("РасшифровкаНачисленияСтрока");
	СекцияРасшифровкаНачисленияПодвал =		Макет.ПолучитьОбласть("РасшифровкаНачисленияПодвал");
	
	ОтборСтрокПоказателей = Новый Структура("Ссылка, ИдентификаторСтрокиВидаРасчета");
	
	ДанныеДляПечати = ДанныеДляПечатиРасчетаСохраняемогоДенежногоСодержания(МассивОбъектов);
	
	Для каждого ОписаниеДанных Из ДанныеДляПечати Цикл
		
		Ссылка = ОписаниеДанных.Ключ;
		ДанныеДокумента = ОписаниеДанных.Значение;
		
		Для Каждого ДанныеСотрудникаДокумента Из ДанныеДокумента Цикл
		
			ДанныеСотрудника = ДанныеСотрудникаДокумента.Значение;
			Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли; 
				
			СекцияШапка.Параметры.Заполнить(ДанныеСотрудника);
			ТабличныйДокумент.Вывести(СекцияШапка);
			
			РезультатыРасчета = ДанныеСотрудника.РезультатыРасчета;
		
			Для каждого РезультатРасчетаКлючИЗначение Из РезультатыРасчета Цикл
				
				РезультатРасчета = РезультатРасчетаКлючИЗначение.Значение;
				
				Если РезультатРасчета = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НазначениеРасчета = РезультатРасчетаКлючИЗначение.Ключ;
				Если (НазначениеРасчета = Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие
					И ДанныеСотрудника.НачисленияПоказатели.Начисления.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание,"Категория") = Неопределено)Тогда
					Продолжить;
				КонецЕсли;
				
				СекцияШапкаНазначениеРасчета.Параметры.НазначениеРасчетаСтрока = НазначениеРасчета;
				
				ОписаниеРасчета = "";
				
				ТабличныйДокумент.Вывести(СекцияШапкаНазначениеРасчета);
				
				Если РезультатРасчета.ДенежноеСодержание.Количество() > 0 Тогда
					
					Итог = 0;
					ВыводиласьШапка = Ложь;
					Для каждого ОписаниеДС Из РезультатРасчета.ДенежноеСодержание Цикл
						
						Если ПрочиеНачисления.Получить(ОписаниеДС.Начисление) <> Неопределено Тогда
							РезультатРасчета.ПрочиеВыплаты.Добавить(ОписаниеДС);
							Продолжить;
						КонецЕсли; 
						
						Если Не ВыводиласьШапка Тогда
							
							ВыводиласьШапка = Истина;
							СекцияШапкаПлановыеНачисления.Параметры.Заполнить(ДанныеСотрудника);
							ТабличныйДокумент.Вывести(СекцияШапкаПлановыеНачисления);
							
						КонецЕсли; 
						
						СекцияСтрокаНачисления.Параметры.ВидРасчета = ОписаниеДС.Начисление;
						СекцияСтрокаНачисления.Параметры.Результат = ОписаниеДС.Результат;
						ТабличныйДокумент.Вывести(СекцияСтрокаНачисления);
						
						Итог = Итог + ОписаниеДС.Результат;
						
					КонецЦикла;
					
					Если ВыводиласьШапка Тогда
						
						СекцияИтогНачисления.Параметры.Итог = Итог;
						ТабличныйДокумент.Вывести(СекцияИтогНачисления);
						
						ОписаниеРасчета = Формат(Итог, "ЧДЦ=2");
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				Если РезультатРасчета.ДенежноеСодержаниеФактическиеНачисления.Количество() > 0 Тогда
					
					Итог = 0;
					ИтогУчтено = 0;
					ВыводиласьШапка = Ложь;
					Для каждого ОписаниеДС Из РезультатРасчета.ДенежноеСодержаниеФактическиеНачисления Цикл
						
						Если Не ВыводиласьШапка Тогда
							
							ВыводиласьШапка = Истина;
							СекцияШапкаРазовыеНачисления.Параметры.Заполнить(ДанныеСотрудника);
							ТабличныйДокумент.Вывести(СекцияШапкаРазовыеНачисления);
							
						КонецЕсли; 
						
						СекцияСтрокаДопНачисления.Параметры.Период = Формат(ОписаниеДС.Период, "ДФ='MMMM yyyy'");
						СекцияСтрокаДопНачисления.Параметры.ВидРасчета = ОписаниеДС.Начисление;
						СекцияСтрокаДопНачисления.Параметры.Результат = ОписаниеДС.Сумма;
						СекцияСтрокаДопНачисления.Параметры.РезультатУчтено = ОписаниеДС.СуммаУчтено;
						ТабличныйДокумент.Вывести(СекцияСтрокаДопНачисления);
						
						Итог = Итог + ОписаниеДС.Сумма;
						ИтогУчтено = ИтогУчтено + ОписаниеДС.СуммаУчтено;
						
					КонецЦикла;
					
					СекцияИтогДопНачисления.Параметры.Итог = Итог;
					СекцияИтогДопНачисления.Параметры.ИтогУчтено = ИтогУчтено;
					ТабличныйДокумент.Вывести(СекцияИтогДопНачисления);
					
					ОписаниеРасчета = ?(ПустаяСтрока(ОписаниеРасчета), "", ОписаниеРасчета + " + ") + Формат(ИтогУчтено, "ЧДЦ=2");
					
				КонецЕсли; 
				
				Если РезультатРасчета.ПрочиеВыплаты.Количество() > 0 Тогда
					
					Итог = 0;
					ВыводиласьШапка = Ложь;
					Для каждого ОписаниеДС Из РезультатРасчета.ПрочиеВыплаты Цикл
						
						Если Не ВыводиласьШапка Тогда
							
							ВыводиласьШапка = Истина;
							СекцияШапкаПрочиеНачисления.Параметры.Заполнить(ДанныеСотрудника);
							ТабличныйДокумент.Вывести(СекцияШапкаПрочиеНачисления);
							
						КонецЕсли; 
						
						СекцияСтрокаНачисления.Параметры.ВидРасчета = ОписаниеДС.Начисление;
						СекцияСтрокаНачисления.Параметры.Результат = ОписаниеДС.Результат;
						ТабличныйДокумент.Вывести(СекцияСтрокаНачисления);
						
						Итог = Итог + ОписаниеДС.Результат;
						
					КонецЦикла;
					
					СекцияИтогНачисления.Параметры.Итог = Итог;
					ТабличныйДокумент.Вывести(СекцияИтогНачисления);
					
					ОписаниеРасчета = ?(ПустаяСтрока(ОписаниеРасчета), "", ОписаниеРасчета + " + ") + Формат(Итог, "ЧДЦ=2");
					
				КонецЕсли; 
				
				Если НазначениеРасчета = Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие Тогда
					Сумма = ДанныеСотрудника.МесячноеДенежноеСодержание;
				Иначе
					Сумма = ДанныеСотрудника.СохраняемоеДенежноеСодержание;
				КонецЕсли;
				
				СтрокаРезультат =
				НСтр("ru='Сумма сохраняемого денежного содержания за полный месяц составляет'") + ": " + Символы.ПС
				+ ОписаниеРасчета + ?(ПустаяСтрока(ОписаниеРасчета), "", " = ") + Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + НСтр("ru='руб'") + ".";
				
				СекцияПодвал.Параметры.СтрокаРезультат = СтрокаРезультат;
				
				ТабличныйДокумент.Вывести(СекцияПодвал);
				
			КонецЦикла;
			
			НачисленияПоказатели = ДанныеСотрудника.НачисленияПоказатели;
			
			Если НачисленияПоказатели.Начисления.Количество() > 0 Тогда
				// Отступ от расчета сохраняемого денежного содержания
				СекцияРасшифровкаНачисленияЗаголовок.Параметры.РасшифровкаНачисления = "";
				ТабличныйДокумент.Вывести(СекцияРасшифровкаНачисленияЗаголовок);
				
				Для Каждого СтрокаНачисления Из НачисленияПоказатели.Начисления Цикл
					
					ЗаполнитьЗначенияСвойств(ОтборСтрокПоказателей,СтрокаНачисления);

					ОписаниеПериода = "";
					
					Если СтрокаНачисления.ДатаНачала <> '00010101000000' 
						И СтрокаНачисления.ДатаНачала <> СтрокаНачисления.ДатаОкончания Тогда
					
						ОписаниеПериода = " (" + Формат(СтрокаНачисления.ДатаНачала, "ДФ=dd.MM.yyyy") + " - " + Формат(СтрокаНачисления.ДатаОкончания, "ДФ=dd.MM.yyyy") + ")";
					
					КонецЕсли;
					
					СекцияРасшифровкаНачисленияЗаголовок.Параметры.РасшифровкаНачисления = "Начисление: " + СтрокаНачисления.Начисление + ОписаниеПериода;
					ТабличныйДокумент.Вывести(СекцияРасшифровкаНачисленияЗаголовок);
					
					ПоказателиНачисления = НачисленияПоказатели.Показатели.НайтиСтроки(ОтборСтрокПоказателей);
					
					Для Каждого СтрокаПоказателя Из ПоказателиНачисления Цикл
						СекцияРасшифровкаНачисленияСтрока.Параметры.РасшифровкаНачисления = СтрокаПоказателя.Показатель.Наименование+ " = " + СтрокаПоказателя.Значение;
						ТабличныйДокумент.Вывести(СекцияРасшифровкаНачисленияСтрока);
					КонецЦикла;
					
					СекцияРасшифровкаНачисленияПодвал.Параметры.РасшифровкаНачисления = "Результат: " +ЗаполнитьПоказателивФормуле(СтрокаНачисления.Начисление.ФормулаРасчета, ПоказателиНачисления)+" = " + Формат(СтрокаНачисления.Результат, "ЧДЦ=2");
					ТабличныйДокумент.Вывести(СекцияРасшифровкаНачисленияПодвал);
									
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОписаниеДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("Ссылка");
	Описание.Вставить("ЗаголовокФормы", НСтр("ru='Расчет денежного содержания'"));
	Описание.Вставить("ПредставлениеДокумента", "");
	Описание.Вставить("НаименованиеОрганизации");
	Описание.Вставить("ФИОПолные");
	Описание.Вставить("ТабельныйНомер");
	Описание.Вставить("ДатаНачалаРасчетногоПериода");
	Описание.Вставить("ДатаОкончанияРасчетногоПериода");
	Описание.Вставить("СохраняемоеДенежноеСодержание", 0);
	Описание.Вставить("МесячноеДенежноеСодержание", 0);
	Описание.Вставить("ЗаголовокТаблицыПлановыеНачисления", НСтр("ru='Денежное содержание учитываемое в полном размере'"));
	Описание.Вставить("РезультатыРасчета", ОписаниеРезультатыРасчета());
	Описание.Вставить("НачисленияПоказатели", Новый Структура("Начисления,Показатели"));
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеРезультатыРасчета()
	
	РезультатыРасчета = Новый Соответствие;
	РезультатыРасчета.Вставить(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ЕжегодныйОтпуск, Неопределено);
	РезультатыРасчета.Вставить(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.ВыходноеПособие, Неопределено);
	РезультатыРасчета.Вставить(Перечисления.НазначениеРасчетаСохраняемогоДенежногоСодержания.СохраняемоеДенежноеСодержание, Неопределено);
	
	Возврат РезультатыРасчета;
	
КонецФункции

Функция ОписаниеРезультатРасчета()
	
	Описание = Новый Структура;
	Описание.Вставить("ДенежноеСодержание", Новый Массив);
	Описание.Вставить("ДенежноеСодержаниеФактическиеНачисления", Новый Массив);
	Описание.Вставить("ПрочиеВыплаты", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеСтрокиДенежногоСодержания()
	
	Описание = Новый Структура;
	
	Описание.Вставить("Начисление");
	Описание.Вставить("НазначениеРасчета");
	Описание.Вставить("ИдентификаторСтрокиВидаРасчета");
	Описание.Вставить("Результат");
	Описание.Вставить("ФиксРасчет");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеСтрокиДенежногоСодержанияФактическиеНачисления()
	
	Описание = Новый Структура;
	
	Описание.Вставить("Начисление");
	Описание.Вставить("НазначениеРасчета");
	Описание.Вставить("Период");
	Описание.Вставить("Сумма");
	Описание.Вставить("СуммаУчтено");
	Описание.Вставить("Корректировка");
	
	Возврат Описание;
	
КонецФункции

Функция ДанныеДляПечатиРасчетаСохраняемогоДенежногоСодержания(МассивОбъектов)
	
	ДанныеДляПечати = Новый Соответствие;
	
	СоответствиеОбъектовМетаданным = Новый Соответствие;
	
	Для каждого ВыводимыйДокумент Из МассивОбъектов Цикл
		
		МДДокумента = ВыводимыйДокумент.Метаданные();
		
		КоллекцияОбъектов = СоответствиеОбъектовМетаданным.Получить(МДДокумента);
		Если КоллекцияОбъектов = Неопределено Тогда
			КоллекцияОбъектов = Новый Массив;
		КонецЕсли; 
		КоллекцияОбъектов.Добавить(ВыводимыйДокумент);
		
		СоответствиеОбъектовМетаданным.Вставить(МДДокумента, КоллекцияОбъектов);
		
	КонецЦикла;
	
	НеобязательныеПоля = Новый Соответствие;
	НеобязательныеПоля.Вставить("МесячноеДенежноеСодержание", "0");
	
	Для каждого ЭлементКоллекции Из СоответствиеОбъектовМетаданным Цикл
		
		МДДокумента  = ЭлементКоллекции.Ключ;
		ИмяДокумента = МДДокумента.Имя;
		СписокДокументов = ЭлементКоллекции.Значение;
		
		НачисленияПоказатели = ПодготовитьРасшифровкуНачисленийИПоказателей(Документы[ИмяДокумента],СписокДокументов);
		ОтборСтрокПоДокументуПоСотруднику = Новый Структура("ССылка, Сотрудник");
		ОтборСтрокПоДокументуПоНачислениям = Новый Структура("ССылка, ИдентификаторСтрокиВидаРасчета");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка,
		|	ТаблицаДокументов.Ссылка.Номер КАК Номер,
		|	ТаблицаДокументов.Ссылка.Дата КАК Дата,
		|	ТаблицаДокументов.Ссылка.Дата КАК Период,
		|	ВЫРАЗИТЬ(ТаблицаДокументов.Ссылка.Организация КАК Справочник.Организации).НаименованиеПолное КАК НаименованиеОрганизации,
		|	ТаблицаДокументов.Сотрудник,
		|	ТаблицаДокументов.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ТаблицаДокументов.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ТаблицаДокументов.СохраняемоеДенежноеСодержание,
		|	ТаблицаДокументов.МесячноеДенежноеСодержание КАК МесячноеДенежноеСодержание
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&СписокДокументов)";
			
		// Проверяем необязательные поля.
		Для Каждого КлючИЗначение Из НеобязательныеПоля Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ЗначениеПоУмолчанию = КлючИЗначение.Значение;
			РеквизитПрисутствует = Истина;			
			Если МДДокумента.Реквизиты.Найти(ИмяПоля) = Неопределено Тогда
				РеквизитПрисутствует = Ложь;
			КонецЕсли;
			Если (Не РеквизитПрисутствует) И ИмяДокумента = "УвольнениеСписком" Тогда
				РеквизитПрисутствует =  НЕ (МДДокумента.ТабличныеЧасти.Сотрудники.Реквизиты.Найти(ИмяПоля) = Неопределено);
			КонецЕсли;
			Если Не РеквизитПрисутствует Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокументов." + ИмяПоля + " КАК", ЗначениеПоУмолчанию + " КАК");
			КонецЕсли;
		КонецЦикла;	
		
		Если ИмяДокумента = "УвольнениеСписком" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокументов", "Документ." + ИмяДокумента + ".Сотрудники");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокументов", "Документ." + ИмяДокумента);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
				Запрос.МенеджерВременныхТаблиц,
				"ВТДанныеДокументов");
				
			КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "ФИОПолные,ТабельныйНомер");
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеДокументов.Ссылка,
			|	ДанныеДокументов.Номер,
			|	ДанныеДокументов.Дата,
			|	ДанныеДокументов.Период,
			|	ДанныеДокументов.НаименованиеОрганизации,
			|	ДанныеДокументов.Сотрудник,
			|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаНачало,
			|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаОкончание,
			|	ДанныеДокументов.СохраняемоеДенежноеСодержание,
			|	ДанныеДокументов.МесячноеДенежноеСодержание,
			|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
			|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер
			|ИЗ
			|	ВТДанныеДокументов КАК ДанныеДокументов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
			|		ПО ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
			|			И ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
				
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Описание = ОписаниеДокумента();
				ЗаполнитьЗначенияСвойств(Описание, Выборка);
				
				Описание.ПредставлениеДокумента = МДДокумента.Синоним + " №"
				+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина)
				+ " " + НСтр("ru='от'") + " " + Формат(Выборка.Дата, "ДЛФ=DD");
				
				Описание.ДатаНачалаРасчетногоПериода = Формат(Выборка.ПериодРасчетаСреднегоЗаработкаНачало, "ДЛФ=DD");
				Описание.ДатаОкончанияРасчетногоПериода = Формат(Выборка.ПериодРасчетаСреднегоЗаработкаОкончание, "ДЛФ=DD");
				
				Описание.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.ТабельныйНомер, Истина, Истина);
				
				ЗаполнитьЗначенияСвойств(ОтборСтрокПоДокументуПоСотруднику,Выборка);
				ЗаполнитьЗначенияСвойств(ОтборСтрокПоДокументуПоНачислениям,Выборка);
		
				Описание.НачисленияПоказатели.Начисления = НачисленияПоказатели.Начисления.Скопировать(НачисленияПоказатели.Начисления.НайтиСтроки(ОтборСтрокПоДокументуПоСотруднику));
				ТаблицаПоказателей = НачисленияПоказатели.Показатели.СкопироватьКолонки();
				
				Для Каждого СтрокаНачисления Из Описание.НачисленияПоказатели.Начисления Цикл
					ОтборСтрокПоДокументуПоНачислениям.ИдентификаторСтрокиВидаРасчета = СтрокаНачисления.ИдентификаторСтрокиВидаРасчета;
					СтрокиПоказателей = НачисленияПоказатели.Показатели.НайтиСтроки(ОтборСтрокПоДокументуПоНачислениям);
					Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
						ЗаполнитьЗначенияСвойств(ТаблицаПоказателей.Добавить(),СтрокаПоказателя);	
					КонецЦикла;
					
				КонецЦикла;
				Описание.НачисленияПоказатели.Показатели = ТаблицаПоказателей;
								
				СоответствиеОписаний = ДанныеДляПечати.Получить(Выборка.Ссылка);
				Если СоответствиеОписаний = Неопределено Тогда
					СоответствиеОписаний = Новый Соответствие;
				КонецЕсли;
				СоответствиеОписаний.Вставить(Выборка.Сотрудник, Описание);
				ДанныеДляПечати.Вставить(Выборка.Ссылка, СоответствиеОписаний);
				
			КонецЦикла;
						
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокументовДенежноеСодержание.Ссылка КАК Ссылка,
			|	ТаблицаДокументовДенежноеСодержание.НомерСтроки КАК НомерСтроки,
			|	ТаблицаДокументовДенежноеСодержание.Сотрудник,
			|	ТаблицаДокументовДенежноеСодержание.Начисление,
			|	ТаблицаДокументовДенежноеСодержание.НазначениеРасчета КАК НазначениеРасчета,
			|	ТаблицаДокументовДенежноеСодержание.ИдентификаторСтрокиВидаРасчета,
			|	ТаблицаДокументовДенежноеСодержание.Результат,
			|	ТаблицаДокументовДенежноеСодержание.ФиксРасчет
			|ИЗ
			|	&ТаблицаДокументовДенежноеСодержание КАК ТаблицаДокументовДенежноеСодержание
			|ГДЕ
			|	ТаблицаДокументовДенежноеСодержание.Ссылка В(&СписокДокументов)
			|	И ТаблицаДокументовДенежноеСодержание.Результат <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	Сотрудник,
			|	НазначениеРасчета,
			|	НомерСтроки";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокументовДенежноеСодержание", "Документ." + ИмяДокумента + ".ДенежноеСодержание");
				
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
					
					СоответствиеОписаний = ДанныеДляПечати.Получить(Выборка.Ссылка);
					Если СоответствиеОписаний <> Неопределено Тогда
						
						Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
						
							Описание = СоответствиеОписаний.Получить(Выборка.Сотрудник);
							Если Описание <> Неопределено Тогда
								
								РезультатыРасчета = Описание.РезультатыРасчета;
								
								Пока Выборка.СледующийПоЗначениюПоля("НазначениеРасчета") Цикл
									
									СписокДенежноеСодержание = Новый Массив;
									Пока Выборка.Следующий() Цикл
										
										ОписаниеСтроки = ОписаниеСтрокиДенежногоСодержания();
										ЗаполнитьЗначенияСвойств(ОписаниеСтроки, Выборка);
										
										СписокДенежноеСодержание.Добавить(ОписаниеСтроки);
										
									КонецЦикла; 
									
									РезультатРасчета = РезультатыРасчета[Выборка.НазначениеРасчета];
									Если РезультатРасчета = Неопределено Тогда
										РезультатРасчета = ОписаниеРезультатРасчета();
										РезультатыРасчета.Вставить(Выборка.НазначениеРасчета, РезультатРасчета);
									КонецЕсли;	
									РезультатРасчета.Вставить("ДенежноеСодержание", СписокДенежноеСодержание);
									
								КонецЦикла;
								
								СоответствиеОписаний.Вставить(Выборка.Сотрудник, Описание);
								
							КонецЕсли; 
							
						КонецЦикла;	
						
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.Ссылка КАК Ссылка,
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.НомерСтроки КАК НомерСтроки,
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.Сотрудник,
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.Начисление,
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.НазначениеРасчета КАК НазначениеРасчета,
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.Период,
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.Сумма,
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.Корректировка
			|ИЗ
			|	&ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления КАК ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления
			|ГДЕ
			|	ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.Ссылка В(&СписокДокументов)
			|	И ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления.Сумма <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	Сотрудник,
			|	НазначениеРасчета,
			|	НомерСтроки";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокументовДенежноеСодержаниеФактическиеНачисления", "Документ." + ИмяДокумента + ".ДенежноеСодержаниеФактическиеНачисления");
				
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
					
					СоответствиеОписаний = ДанныеДляПечати.Получить(Выборка.Ссылка);
					Если СоответствиеОписаний <> Неопределено Тогда
					
						Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
							Описание = СоответствиеОписаний.Получить(Выборка.Сотрудник);
							Если Описание <> Неопределено Тогда
								
								РезультатыРасчета = Описание.РезультатыРасчета;
								
								Пока Выборка.СледующийПоЗначениюПоля("НазначениеРасчета") Цикл
									
									
									СписокДенежноеСодержание = Новый Массив;
									Пока Выборка.Следующий() Цикл
										
										ОписаниеСтроки = ОписаниеСтрокиДенежногоСодержанияФактическиеНачисления();
										ЗаполнитьЗначенияСвойств(ОписаниеСтроки, Выборка);
										ОписаниеСтроки.СуммаУчтено = Окр(ОписаниеСтроки.Сумма/12,2);
										
										СписокДенежноеСодержание.Добавить(ОписаниеСтроки);
										
									КонецЦикла; 
									
									РезультатРасчета = РезультатыРасчета[Выборка.НазначениеРасчета];
									Если РезультатРасчета = Неопределено Тогда
										РезультатРасчета = ОписаниеРезультатРасчета();
										РезультатыРасчета.Вставить(Выборка.НазначениеРасчета, РезультатРасчета);
									КонецЕсли;
									РезультатРасчета.Вставить("ДенежноеСодержаниеФактическиеНачисления", СписокДенежноеСодержание);
									
								КонецЦикла; 
								
								СоответствиеОписаний.Вставить(Выборка.Сотрудник, Описание);
								
							КонецЕсли;
							
						КонецЦикла
						
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПодготовитьРасшифровкуНачисленийИПоказателей(МенеджерОбъекта, МассивСсылок)
	
	НачисленияПоказатели = МенеджерОбъекта.НачисленияПоказателиДокументов(МассивСсылок);
		
	КатегорииНачислений = Новый Массив();
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни);
	
	СтруктураОтбораПоказателей = Новый Структура("Ссылка,ИдентификаторСтрокиВидаРасчета");
	СтруктураОтбораПоказателейНачисления = Новый Структура("Ссылка,ИдентификаторСтрокиВидаРасчета,Показатель");
		
	КоличествоСтрок = НачисленияПоказатели.Начисления.Количество();
	
	Для Сч = 1 По  КоличествоСтрок Цикл
		
		СтрокаНачисления = НачисленияПоказатели.Начисления[КоличествоСтрок-Сч];
				
		Если КатегорииНачислений.Найти(СтрокаНачисления.Категория) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбораПоказателей,СтрокаНачисления);
			ПоказателиНачисления = НачисленияПоказатели.Показатели.НайтиСтроки(СтруктураОтбораПоказателей);
			Для Каждого УдаляемаяСтрока Из ПоказателиНачисления Цикл
				НачисленияПоказатели.Показатели.Удалить(НачисленияПоказатели.Показатели.Индекс(УдаляемаяСтрока));
			КонецЦикла;
			
			НачисленияПоказатели.Начисления.Удалить(СтрокаНачисления);
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураОтбораПоказателейНачисления,СтрокаНачисления);
			// Нужно дополнить показателями из Начисления
			Для Каждого ПоказательНачисления Из СтрокаНачисления.Начисление.Показатели Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбораПоказателейНачисления,ПоказательНачисления);
				Если НачисленияПоказатели.Показатели.НайтиСтроки(СтруктураОтбораПоказателейНачисления).Количество() = 0 Тогда
					ДобавляемыйПоказатель = НачисленияПоказатели.Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(ДобавляемыйПоказатель,СтруктураОтбораПоказателейНачисления);
					Если ДобавляемыйПоказатель.Показатель = Справочники.ПоказателиРасчетаЗарплаты.ВремяВДнях Тогда
						ДобавляемыйПоказатель.Значение = СтрокаНачисления.ОплаченоДней; 	
					КонецЕсли;
					Если НачисленияПоказатели.Начисления.Колонки.Найти(ДобавляемыйПоказатель.Показатель.Идентификатор) <> Неопределено Тогда
						ДобавляемыйПоказатель.Значение = СтрокаНачисления[ДобавляемыйПоказатель.Показатель.Идентификатор]; 	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат НачисленияПоказатели;
		
КонецФункции

Функция ПостроитьТаблицуПоказателей(Показатели)
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателей.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		СтрТаблицыПоказателей = ТаблицаПоказателей.Добавить();
		СтрТаблицыПоказателей.Идентификатор = СтрокаПоказателя.Показатель.Идентификатор; 
		СтрТаблицыПоказателей.Значение 		= СтрокаПоказателя.Значение; 
		СтрТаблицыПоказателей.Порядок 		= СтрДлина(СтрокаПоказателя.Показатель.Идентификатор); 
	КонецЦикла;
	ТаблицаПоказателей.Сортировать("Порядок Убыв");
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ЗаполнитьПоказателиВФормуле(Формула, Показатели)
	
	ТаблицаПоказателей = ПостроитьТаблицуПоказателей(Показатели);
	СтрРезультат = Формула;
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		СтрРезультат = СтрЗаменить(СтрРезультат, СтрокаПоказателя.Идентификатор, СтрокаПоказателя.Значение);
	КонецЦикла;
	
	Возврат СтрРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли