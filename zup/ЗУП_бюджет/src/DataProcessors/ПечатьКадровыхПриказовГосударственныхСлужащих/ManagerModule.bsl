#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ПодходящиеОбъекты = Новый Массив;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СлужебныйКонтрактГосударственногоСлужащего") Тогда
		ТабличныйДокумент = СлужебныйКонтрактГосударственногоСлужащего(МассивОбъектов, ОбъектыПечати);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,	"ПФ_MXL_СлужебныйКонтрактГосударственногоСлужащего", "Служебный контракт государственного служащего", ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныйКонтрактГосударственногоСлужащего

Функция СлужебныйКонтрактГосударственногоСлужащего(МассивСсылок, ОбъектыПечати)
	
	МакетКонтракта 					= УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовГосударственныхСлужащих.ПФ_MXL_СлужебныйКонтрактГосударственногоСлужащего");
	ШаблонШапкиКонтракта 			= МакетКонтракта.ПолучитьОбласть("СлужебныйКонтрактШапка");
	ШаблонРазделаСрочныйДоговор 	= МакетКонтракта.ПолучитьОбласть("ОбластьСрочныйКонтракт");
	ШаблонРазделаНеСрочныйДоговор 	= МакетКонтракта.ПолучитьОбласть("ОбластьБессрочныйКонтракт");
	ШаблонПодвалаКонтракта 			= МакетКонтракта.ПолучитьОбласть("СлужебныйКонтрактПодвал");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДанныеКонтрактов = ДанныеКонтрактов(МассивСсылок);

	Пока ДанныеКонтрактов.Следующий() Цикл
		
		Если НЕ ЭтоКонтрактГосслужащего(ДанныеКонтрактов) Тогда
			СообщитьОНевозможностиПечатиКонтракта(ДанныеКонтрактов);
			Продолжить;	
		КонецЕсли;
		
		ВывестиРазделительСтраниц(ДокументРезультат);
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ВывестиШапкуКонтракта(ДокументРезультат, ШаблонШапкиКонтракта, ДанныеКонтрактов);
		
		Если ДанныеКонтрактов.СрочныйДоговор Тогда
			ВывестиРазделСрочныйДоговор(ДокументРезультат, ШаблонРазделаСрочныйДоговор, ДанныеКонтрактов);
		Иначе			
			ВывестиРазделНеСрочныйДоговор(ДокументРезультат, ШаблонРазделаНеСрочныйДоговор);
		КонецЕсли;
		
		ВывестиПодвалКонтракта(ДокументРезультат, ШаблонПодвалаКонтракта, ДанныеКонтрактов);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеКонтрактов.Регистратор);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеКонтрактов(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	СоздатьВТКадровыхДанныхКонтракта(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеДанныеКонтракта.Сотрудник,
	|	ОсновныеДанныеКонтракта.ДатаНачала КАК ДатаПриема,
	|	СведенияКонтракта.Регистратор,
	|	СведенияКонтракта.Организация,
	|	СведенияКонтракта.СрочныйДоговор,
	|	СведенияКонтракта.ОснованиеСрочногоДоговора,
	|	СведенияКонтракта.ДатаОкончания,
	|	ДолжностиПредставителя.Наименование КАК ДолжностьПредставителя,
	|	КадровыеДанныеПредставителейНанимателя.ФИОПолные КАК ФИОПредставителя,
	|	КадровыеДанныеПредставителейНанимателя.Пол КАК ПолПредставителя,
	|	ВЫРАЗИТЬ(СведенияКонтракта.ОснованиеПредставителяНанимателя КАК СТРОКА(1000)) КАК ОснованиеПредставителя,
	|	СведенияКонтракта.ВидАктаГосоргана,
	|	ВЫРАЗИТЬ(СведенияКонтракта.ИныеУсловияДоговора КАК СТРОКА(1000)) КАК ИныеУсловияДоговора,
	|	ВЫРАЗИТЬ(СведенияКонтракта.ОборудованиеРабочегоМеста КАК СТРОКА(1000)) КАК ОборудованиеРабочегоМеста,
	|	СведенияКонтракта.СрокЗаключенияДоговора,
	|	ЕСТЬNULL(ОснованияЗаключенияСрочныхКонтрактовГосслужащих.ТекстОснования, """") КАК ОснованиеЗаключенияДоговора,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОРаботника,
	|	КадровыеДанныеСотрудников.Фамилия,
	|	КадровыеДанныеСотрудников.Имя,
	|	КадровыеДанныеСотрудников.Отчество,
	|	КадровыеДанныеСотрудников.ДокументВид,
	|	КадровыеДанныеСотрудников.ДокументСерия,
	|	КадровыеДанныеСотрудников.ДокументНомер,
	|	КадровыеДанныеСотрудников.ДокументДатаВыдачи,
	|	КадровыеДанныеСотрудников.ДокументКемВыдан,
	|	КадровыеДанныеСотрудников.АдресПоПропискеПредставление КАК АдресРегистрации,
	|	КадровыеДанныеСотрудников.ТелефонДомашнийПредставление КАК ТелефонДомашний,
	|	КадровыеДанныеСотрудников.ТелефонРабочийПредставление КАК ТелефонРабочий,
	|	КадровыеДанныеСотрудников.ТелефонМобильныйПредставление КАК ТелефонМобильный,
	|	КадровыеДанныеСотрудников.ВидДоговора,
	|	Должности.Наименование КАК Должность,
	|	СвойстваДолжностейГосударственнойСлужбы.КатегорияДолжностиГосударственнойСлужбы КАК КатегорияДолжности,
	|	СвойстваДолжностейГосударственнойСлужбы.ГруппаДолжностиГосударственнойСлужбы КАК ГруппаДолжности,
	|	ПодразделенияОрганизаций.Наименование КАК Подразделение
	|ИЗ
	|	РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтракта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваДолжностейГосударственнойСлужбы КАК СвойстваДолжностейГосударственнойСлужбы
	|				ПО Должности.Ссылка = СвойстваДолжностейГосударственнойСлужбы.Должность
	|			ПО КадровыеДанныеСотрудников.Должность = Должности.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|			ПО КадровыеДанныеСотрудников.Подразделение = ПодразделенияОрганизаций.Ссылка
	|		ПО ОсновныеДанныеКонтракта.ДатаНачала = КадровыеДанныеСотрудников.Период
	|			И ОсновныеДанныеКонтракта.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтракта
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеПредставителейНанимателя
	|			ПО СведенияКонтракта.ПредставительНанимателя = КадровыеДанныеПредставителейНанимателя.ФизическоеЛицо
	|				И СведенияКонтракта.Период = КадровыеДанныеПредставителейНанимателя.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК ДолжностиПредставителя
	|			ПО СведенияКонтракта.ДолжностьПредставителяНанимателя = ДолжностиПредставителя.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияЗаключенияСрочныхКонтрактовГосслужащих КАК ОснованияЗаключенияСрочныхКонтрактовГосслужащих
	|			ПО СведенияКонтракта.ОснованиеСрочногоДоговора = ОснованияЗаключенияСрочныхКонтрактовГосслужащих.Ссылка
	|		ПО ОсновныеДанныеКонтракта.Регистратор = СведенияКонтракта.Регистратор
	|			И ОсновныеДанныеКонтракта.Сотрудник = СведенияКонтракта.Сотрудник
	|ГДЕ
	|	СведенияКонтракта.Регистратор В(&МассивСсылок)";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ЭтоКонтрактГосслужащего(ДанныеКонтрактов)
	Возврат ДанныеКонтрактов.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего;
КонецФункции

Процедура СообщитьОНевозможностиПечатиКонтракта(ДанныеКонтрактов)
	ТекстСообщения = НСтр("ru = 'Документом %1 не оформляется контракт государственного служащего.'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеКонтрактов.Регистратор);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

#Область ВывестиШапкуКонтракта

Процедура ВывестиШапкуКонтракта(Документ, Область, Выборка)
	
	ЗаполнитьФИОДолжностьПредставителя(Область.Параметры, Выборка);
	
	ЗаполнитьОснованиеПредставителя(Область.Параметры, Выборка);
	
	ЗаполнитьФИОРаботника(Область.Параметры, Выборка);
	
	ЗаполнитьВидАктаГосударственногоОргана(Область.Параметры, Выборка);
	
	ЗаполнитьОбщиеПоложения(Область.Параметры, Выборка);
	
	ЗаполнитьНачисления(Область.Параметры, Выборка);
	
	Документ.Вывести(Область);
	
КонецПроцедуры

Процедура ЗаполнитьФИОДолжностьПредставителя(Приемник, Источник)
	
	ДолжностьВПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Источник.ДолжностьПредставителя), 2);
	ФИОПредставителяВПадеже = Источник.ФИОПредставителя;
	ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Источник.ФИОПредставителя), 2, ФИОПредставителяВПадеже, Источник.ПолПредставителя);	
	
	ДанныеПредставителя = "%1 %2";
	ДанныеПредставителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДанныеПредставителя, ДолжностьВПадеже, ФИОПредставителяВПадеже);
	
	// Представитель нанимателя
	СтруктураЗаполнения = Новый Структура("ДанныеПредставителя1,ДанныеПредставителя2,ДанныеПредставителя3");
	Если СтрДлина(ДанныеПредставителя) <= 55 Тогда
		СтруктураЗаполнения.ДанныеПредставителя1 = ДанныеПредставителя;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(55);
		МассивДлин.Добавить(90);
		МассивДлин.Добавить(90);
		МассивСтрок = ПолучитьСтрокиПоДлинам(ДанныеПредставителя, МассивДлин);
		СтруктураЗаполнения.ДанныеПредставителя1 = МассивСтрок[0];
		СтруктураЗаполнения.ДанныеПредставителя2 = МассивСтрок[1];
		СтруктураЗаполнения.ДанныеПредставителя3 = МассивСтрок[2];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьОснованиеПредставителя(Приемник, Источник)
	
	СтруктураЗаполнения = Новый Структура("ОснованиеПредставителя1,ОснованиеПредставителя2,ОснованиеПредставителя3");
	Если СтрДлина(Источник.ОснованиеПредставителя) <= 55 Тогда
		СтруктураЗаполнения.ОснованиеПредставителя1 = Источник.ОснованиеПредставителя;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(55);
		МассивДлин.Добавить(90);
		МассивДлин.Добавить(90);
		МассивСтрок = ПолучитьСтрокиПоДлинам(Источник.ОснованиеПредставителя, МассивДлин);
		СтруктураЗаполнения.ОснованиеПредставителя1 = МассивСтрок[0];
		СтруктураЗаполнения.ОснованиеПредставителя2 = МассивСтрок[1];
		СтруктураЗаполнения.ОснованиеПредставителя3 = МассивСтрок[2];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьФИОРаботника(Приемник, Источник)
	
	СтруктураЗаполнения = Новый Структура("ФИОРаботника");
	СтруктураЗаполнения.ФИОРаботника = Источник.ФИОРаботника;
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьВидАктаГосударственногоОргана(Приемник, Источник)
	
	СтруктураЗаполнения = Новый Структура("ВидАктаГосударственногоОргана1,ВидАктаГосударственногоОргана2");
	Если СтрДлина(Источник.ВидАктаГосоргана) <= 90 Тогда
		СтруктураЗаполнения.ВидАктаГосударственногоОргана1 = Источник.ВидАктаГосоргана;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(90);
		МассивДлин.Добавить(90);
		МассивСтрок = ПолучитьСтрокиПоДлинам(Источник.ВидАктаГосоргана, МассивДлин);
		СтруктураЗаполнения.ВидАктаГосударственногоОргана1 = МассивСтрок[0];
		СтруктураЗаполнения.ВидАктаГосударственногоОргана2 = МассивСтрок[1];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеПоложения(Приемник, Источник)
	
	// Общие положения
	СтруктураЗаполнения = Новый Структура("Должность,Подразделение,КатегорияДолжности,ГруппаДолжности,ДатаПриема,НазваниеОрганизации");
	СтруктураЗаполнения.Должность 			= Источник.Должность;
	СтруктураЗаполнения.Подразделение	 	= Источник.Подразделение;
	СтруктураЗаполнения.КатегорияДолжности 	= Источник.КатегорияДолжности;
	СтруктураЗаполнения.ГруппаДолжности 	= Источник.ГруппаДолжности;
	СтруктураЗаполнения.ДатаПриема 			= Формат(Источник.ДатаПриема, "ДЛФ=DD");
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "НаимЮЛПол");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Источник.Организация, Источник.ДатаПриема, Сведения);
	НаименованиеОрганизации = Неопределено;;
	Если ОргСведения.Свойство("НаимЮЛПол", НаименованиеОрганизации) Тогда
		СтруктураЗаполнения.НазваниеОрганизации = НаименованиеОрганизации;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьНачисления(Приемник, Источник)
	
	ДанныеОНачислениях = КадровыйУчетРасширенный.ДанныеОТекущихНачисленияхСотрудника(
		Источник.Сотрудник, Источник.ДатаПриема);
		
	Приемник.ДолжностнойОклад				= "___________________";
	Приемник.ОкладЗаКлассныйЧин 			= "___________________";
	Приемник.НадбавкаЗаВыслугуЛет 			= "___________________";
	Приемник.НадбавкаЗаОсобыеУсловияСлужбы 	= "___________________";
	Приемник.НадбавкаЗаСекретность 			= "___________________";
	Приемник.ЕжемесячноеДенежноеПоощрение 	= "___________________";
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		СвойстваНачисленийГосслужбы = Модуль.СвойстваНачисленийГосслужбы();
		
		Для каждого СтрокаДанных Из ДанныеОНачислениях Цикл
			Для Каждого СтрокаНачислений Из СтрокаДанных.ДанныеОНачислениях Цикл
				Если СвойстваНачисленийГосслужбы[СтрокаНачислений.Начисление].ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ДолжностнойОклад Тогда
			    	Приемник.ДолжностнойОклад = Формат(СтрокаНачислений.Значение,"ЧДЦ=2; ЧГ=");
				ИначеЕсли СвойстваНачисленийГосслужбы[СтрокаНачислений.Начисление].ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ОкладЗаКлассныйЧин Тогда
			    	Приемник.ОкладЗаКлассныйЧин = Формат(СтрокаНачислений.Значение,"ЧДЦ=2; ЧГ=");
				ИначеЕсли СвойстваНачисленийГосслужбы[СтрокаНачислений.Начисление].ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаВыслугуЛет Тогда
			    	Приемник.НадбавкаЗаВыслугуЛет = Формат(СтрокаНачислений.Значение,"ЧДЦ=2; ЧГ=");
				ИначеЕсли СвойстваНачисленийГосслужбы[СтрокаНачислений.Начисление].ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаОсобыеУсловияСлужбы Тогда
			    	Приемник.НадбавкаЗаОсобыеУсловияСлужбы = Формат(СтрокаНачислений.Значение,"ЧДЦ=2; ЧГ=");
				ИначеЕсли СвойстваНачисленийГосслужбы[СтрокаНачислений.Начисление].ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.НадбавкаЗаСекретность Тогда
			    	Приемник.НадбавкаЗаСекретность = Формат(СтрокаНачислений.Значение,"ЧДЦ=2; ЧГ=");
				ИначеЕсли СвойстваНачисленийГосслужбы[СтрокаНачислений.Начисление].ОтношениеКДенежномуСодержанию = Перечисления.ОтношениеНачисленийКДенежномуСодержанию.ЕжемесячноеДенежноеПоощрение Тогда
			    	Приемник.ЕжемесячноеДенежноеПоощрение = Формат(СтрокаНачислений.Значение,"ЧДЦ=2; ЧГ=");
				КонецЕсли;
			КонецЦикла
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВывестиОбластьСрочныйДоговор 

Процедура ВывестиРазделСрочныйДоговор(Документ, Область, Выборка)
	
	ЗаполнитьСрокИОснованиеЗаключенияДоговора(Область.Параметры, Выборка);
	
	Документ.Вывести(Область);
	
КонецПроцедуры

Процедура ЗаполнитьСрокИОснованиеЗаключенияДоговора(Приемник, Источник);
	
	СрокОснованиеЗаключенияДоговора = "%1 %2";
	СрокОснованиеЗаключенияДоговора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СрокОснованиеЗаключенияДоговора, Источник.СрокЗаключенияДоговора, Источник.ОснованиеЗаключенияДоговора);
	
	СтруктураЗаполнения = Новый Структура("СрокОснованиеЗаключенияДоговора1,СрокОснованиеЗаключенияДоговора2");
	Если СтрДлина(СрокОснованиеЗаключенияДоговора) <= 30 Тогда
		СтруктураЗаполнения.СрокОснованиеЗаключенияДоговора1 = СрокОснованиеЗаключенияДоговора;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(30);
		МассивДлин.Добавить(90);
		МассивСтрок = ПолучитьСтрокиПоДлинам(СрокОснованиеЗаключенияДоговора, МассивДлин);
		СтруктураЗаполнения.СрокОснованиеЗаключенияДоговора1 = МассивСтрок[0];
		СтруктураЗаполнения.СрокОснованиеЗаключенияДоговора2 = МассивСтрок[1];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);

КонецПроцедуры
	
#КонецОбласти

Процедура ВывестиРазделНеСрочныйДоговор(Документ, Область)
	Документ.Вывести(Область);
КонецПроцедуры

#Область ВывестиПодвалКонтракта

Процедура ВывестиПодвалКонтракта(Документ, Область, Выборка)
	
	ЗаполнитьОборудованиеРабочегоМеста(Область.Параметры, Выборка);
	
	ЗаполнитьИныеУсловияКонтракта(Область.Параметры, Выборка);
	
	ЗаполнитьАдресОрганизации(Область.Параметры, Выборка);
	
	ЗаполнитьПредставителяНанимателя(Область.Параметры, Выборка);
	
	ЗаполнитьДанныеГражданскогоСлужащего(Область.Параметры, Выборка);
	
	Документ.Вывести(Область);
	
КонецПроцедуры

Процедура ЗаполнитьОборудованиеРабочегоМеста(Приемник, Источник)
	
	СтруктураЗаполнения = Новый Структура("ОборудованиеСлужебногоМеста1,ОборудованиеСлужебногоМеста2");
	Если СтрДлина(Источник.ОборудованиеРабочегоМеста) <= 90 Тогда
		СтруктураЗаполнения.ОборудованиеСлужебногоМеста1 = Источник.ОборудованиеРабочегоМеста;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(90);
		МассивДлин.Добавить(90);
		МассивСтрок = ПолучитьСтрокиПоДлинам(Источник.ОборудованиеРабочегоМеста, МассивДлин);
		СтруктураЗаполнения.ОборудованиеСлужебногоМеста1 = МассивСтрок[0];
		СтруктураЗаполнения.ОборудованиеСлужебногоМеста2 = МассивСтрок[1];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьИныеУсловияКонтракта(Приемник, Источник)
	
	СтруктураЗаполнения = Новый Структура("ИныеУсловияКонтракта1,ИныеУсловияКонтракта2,ИныеУсловияКонтракта3");
	Если СтрДлина(Источник.ИныеУсловияДоговора) <= 55 Тогда
		СтруктураЗаполнения.ИныеУсловияКонтракта1 = Источник.ИныеУсловияДоговора;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(55);
		МассивДлин.Добавить(90);
		МассивДлин.Добавить(90);
		МассивСтрок = ПолучитьСтрокиПоДлинам(Источник.ИныеУсловияДоговора, МассивДлин);
		СтруктураЗаполнения.ИныеУсловияКонтракта1 = МассивСтрок[0];
		СтруктураЗаполнения.ИныеУсловияКонтракта2 = МассивСтрок[1];
		СтруктураЗаполнения.ИныеУсловияКонтракта3 = МассивСтрок[2];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьАдресОрганизации(Приемник, Источник)
	
	СтруктураЗаполнения = Новый Структура("АдресОрганизации1,АдресОрганизации2,АдресОрганизации3,АдресОрганизации4,АдресОрганизации5");
	
	АдресаОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Организация),
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Источник.ДатаПриема);
	
	Если АдресаОрганизации.Количество() > 0 Тогда
		АдресОрганизации = АдресаОрганизации[0].Представление;	
		
		Если СтрДлина(АдресОрганизации) <= 30 Тогда
			СтруктураЗаполнения.АдресОрганизации1 = АдресОрганизации;
		Иначе
			МассивДлин = Новый Массив;
			МассивДлин.Добавить(30);
			МассивДлин.Добавить(40);
			МассивДлин.Добавить(40);
			МассивДлин.Добавить(40);
			МассивДлин.Добавить(40);
			МассивСтрок = ПолучитьСтрокиПоДлинам(АдресОрганизации, МассивДлин);
			СтруктураЗаполнения.АдресОрганизации1 = МассивСтрок[0];
			СтруктураЗаполнения.АдресОрганизации2 = МассивСтрок[1];
			СтруктураЗаполнения.АдресОрганизации3 = МассивСтрок[2];
			СтруктураЗаполнения.АдресОрганизации4 = МассивСтрок[3];
			СтруктураЗаполнения.АдресОрганизации5 = МассивСтрок[4];
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПредставителяНанимателя(Приемник, Источник)
	
	ДанныеПредставителя = "%1 %2";
	ДанныеПредставителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДанныеПредставителя, Источник.ДолжностьПредставителя, Источник.ФИОПредставителя);
		
	// Представитель организации
	СтруктураЗаполнения = Новый Структура("Представитель1,Представитель2,Представитель3,Представитель4,Представитель5");
	Если СтрДлина(ДанныеПредставителя) <= 40 Тогда
		СтруктураЗаполнения.Представитель1 = ДанныеПредставителя;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(40);
		МассивДлин.Добавить(40);
		МассивДлин.Добавить(40);
		МассивДлин.Добавить(40);
		МассивДлин.Добавить(40);
		МассивСтрок = ПолучитьСтрокиПоДлинам(ДанныеПредставителя, МассивДлин);
		СтруктураЗаполнения.Представитель1 = МассивСтрок[0];
		СтруктураЗаполнения.Представитель2 = МассивСтрок[1];
		СтруктураЗаполнения.Представитель3 = МассивСтрок[2];
		СтруктураЗаполнения.Представитель4 = МассивСтрок[3];
		СтруктураЗаполнения.Представитель5 = МассивСтрок[4];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеГражданскогоСлужащего(Приемник, Источник)
	
	СтруктураЗаполнения = Новый Структура("Фамилия,Имя,Отчество,ВидДокумента,ДокументДатаВыдачи,ДокументКемВыдан1,ДокументКемВыдан2,ДокументНомер,ДокументСерия,АдресРегистрации1,АдресРегистрации2,АдресРегистрации3,Телефоны");
	СтруктураЗаполнения.Фамилия = Источник.Фамилия;
	СтруктураЗаполнения.Имя = Источник.Имя;
	СтруктураЗаполнения.Отчество = Источник.Отчество;
	СтруктураЗаполнения.ВидДокумента = Источник.ДокументВид;
	СтруктураЗаполнения.ДокументДатаВыдачи = Формат(Источник.ДокументДатаВыдачи, "ДЛФ=D");
	
	Если СтрДлина(Источник.ДокументКемВыдан) <= 40 Тогда
		СтруктураЗаполнения.ДокументКемВыдан1 = Источник.ДокументКемВыдан;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(40);
		МассивДлин.Добавить(40);
		МассивСтрок = ПолучитьСтрокиПоДлинам(Источник.ДокументКемВыдан, МассивДлин);
		СтруктураЗаполнения.ДокументКемВыдан1 = МассивСтрок[0];
		СтруктураЗаполнения.ДокументКемВыдан2 = МассивСтрок[1];
	КонецЕсли;
	
	СтруктураЗаполнения.ДокументНомер = Источник.ДокументНомер;
	СтруктураЗаполнения.ДокументСерия = Источник.ДокументСерия;
	
	Если СтрДлина(Источник.АдресРегистрации) <= 20 Тогда
		СтруктураЗаполнения.АдресРегистрации1 = Источник.АдресРегистрации;
	Иначе
		МассивДлин = Новый Массив;
		МассивДлин.Добавить(30);
		МассивДлин.Добавить(40);
		МассивДлин.Добавить(40);
		МассивСтрок = ПолучитьСтрокиПоДлинам(Источник.АдресРегистрации, МассивДлин);
		СтруктураЗаполнения.АдресРегистрации1 = МассивСтрок[0];
		СтруктураЗаполнения.АдресРегистрации2 = МассивСтрок[1];
		СтруктураЗаполнения.АдресРегистрации3 = МассивСтрок[2];
	КонецЕсли;
	
	Телефоны = "%1, %2, %3";
	Телефоны = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Телефоны, СокрЛП(Источник.ТелефонДомашний), СокрЛП(Источник.ТелефонРабочий), СокрЛП(Источник.ТелефонМобильный));
	СтруктураЗаполнения.Телефоны = Телефоны;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураЗаполнения);
	
КонецПроцедуры

#КонецОбласти

Процедура СоздатьВТКадровыхДанныхКонтракта(Запрос)
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеДанныеКонтрактаДоговораСотрудника.Сотрудник,
	|	ОсновныеДанныеКонтрактаДоговораСотрудника.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтрактаДоговораСотрудника
	|ГДЕ
	|	ОсновныеДанныеКонтрактаДоговораСотрудника.Регистратор В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияКонтрактаДоговораСотрудника.ПредставительНанимателя КАК ФизическоеЛицо,
	|	СведенияКонтрактаДоговораСотрудника.Период КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
	|ГДЕ
	|	СведенияКонтрактаДоговораСотрудника.Регистратор В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФИОПолные,Фамилия,Имя,Отчество,ДокументВид,ДокументСерия,ДокументНомер,ДокументДатаВыдачи,ДокументКемВыдан,АдресПоПропискеПредставление,ТелефонДомашнийПредставление,ТелефонРабочийПредставление,ТелефонМобильныйПредставление,ВидДоговора,Должность,Подразделение");
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(Описатель, Истина, "ФИОПолные,Пол");
	
КонецПроцедуры

#КонецОбласти

#Область АттестационныеЛистыГосударственныхСлужащих

Функция АттестационныеЛистыГосударственныхСлужащих(ПриказыОбАттестации, ОбъектыПечати) Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб 			= Истина;
	ДокументРезультат.КлючПараметровПечати 	= "ПараметрыПечати_АттестационныйЛистГосударственногоСлужащего";

	ДанныеДляПечати = ДанныеДляПечатиАттестационногоЛиста(ПриказыОбАттестации);
	
	СоставыКомиссий = АттестацииСотрудников.СоставыАттестационныхКомиссийПриказовОбАттестации(ПриказыОбАттестации);
	
	Пока ДанныеДляПечати.Следующий() Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 1 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		НомерПоПорядку 	= 1;
		
		СоставКомиссии = СоставыКомиссий.Получить(ДанныеДляПечати.Ссылка);
		
		ВывестиАттестационныйЛистСотрудника(ДокументРезультат, ДанныеДляПечати, СоставКомиссии);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;	
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиАттестационныйЛистСотрудника(ДокументРезультат, ДанныеДляПечати, СоставКомиссии)
	 		  
	ОбластиМакета = ОбластиМакетаАттестационныйЛистСотрудника();

	ВывестиШапкуАттестационногоЛиста(ДокументРезультат, ОбластиМакета.ОбластьШапка, ДанныеДляПечати, СоставКомиссии);
	
	ВывестиЧленовКомиссииАттестационногоЛиста(ДокументРезультат, ОбластиМакета.ОбластьПервыйЧленКомиссии, ОбластиМакета.ОбластьЧленКомиссии, ДанныеДляПечати, СоставКомиссии);
	
	ВывестиПодвалАттестационногоЛиста(ДокументРезультат, ОбластиМакета.ОбластьПодвал, ДанныеДляПечати);
	
КонецПроцедуры

Процедура ВывестиШапкуАттестационногоЛиста(ДокументРезультат, ОбластьШапка, ДанныеДляПечати, СоставКомиссии)
	
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ДанныеДляПечати);
	
	ДанныеШапки = Новый Структура;
	ДанныеШапки.Вставить("НаименованиеОрганизации", 	НаименованиеОрганизации(ДанныеДляПечати));
	ДанныеШапки.Вставить("Образование", 				АттестацииСотрудников.ПредставлениеОбразованияСотрудникаДляАттестационногоЛиста(ДанныеДляПечати));
	ДанныеШапки.Вставить("ДолжностьИДатаНазначения", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 с %2", ДанныеДляПечати.Должность, Формат(ДанныеДляПечати.ДатаНачалаРаботыВДолжности, "ДЛФ=DD")));
	ДанныеШапки.Вставить("СтажРаботыВДолжности", 		"");
	ДанныеШапки.Вставить("ОбщийТрудовойСтаж", 			АттестацииСотрудников.ПредставлениеСтажаСотрудникаДляАттестационногоЛиста(ДанныеДляПечати.ОбщийСтажЛет, ДанныеДляПечати.ОбщийСтажМесяцев));
	ДанныеШапки.Вставить("ФИОПредседателя", 			АттестацииСотрудников.ФИОЧленаКомиссииПоРоли(СоставКомиссии, Перечисления.РолиЧленовАттестационнойКомиссии.Председатель, Истина));
	ДанныеШапки.Вставить("ФИОЗаместителяПредседателя", 	АттестацииСотрудников.ФИОЧленаКомиссииПоРоли(СоставКомиссии, Перечисления.РолиЧленовАттестационнойКомиссии.ЗаместительПредседателя, Истина));
	ДанныеШапки.Вставить("ФИОСекретаря", 				АттестацииСотрудников.ФИОЧленаКомиссииПоРоли(СоставКомиссии, Перечисления.РолиЧленовАттестационнойКомиссии.Секретарь, Истина));
	ДанныеШапки.Вставить("СтажГосударственнойСлужбы", 	АттестацииСотрудников.ПредставлениеСтажаСотрудникаДляАттестационногоЛиста(ДанныеДляПечати.ВыслугаЛетНаГосударственнойСлужбеЛет, ДанныеДляПечати.ВыслугаЛетНаГосударственнойСлужбеМесяцев));
	
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ДанныеШапки);
	
	ДокументРезультат.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ВывестиЧленовКомиссииАттестационногоЛиста(ДокументРезультат, ОбластьПервыйЧленКомиссии, ОбластьЧленКомиссии, ДанныеДляПечатиПриказаОбАттестации, СоставКомиссии)
	
	ДанныеЧленаКомиссии = Новый Структура;
	
	ПервыйЧленКомиссии = Истина;
	
	Для каждого ЧленКомиссии Из СоставКомиссии Цикл
		
		Если ЧленКомиссии.РольВКомиссии <> Перечисления.РолиЧленовАттестационнойКомиссии.ЧленКомиссии Тогда
		     Продолжить;
		КонецЕсли;
		
		ДанныеЧленаКомиссии.Вставить("ФИОЧленаКомиссии", ЧленКомиссии.ФИОПолные);
		
		Если ПервыйЧленКомиссии Тогда
			ЗаполнитьЗначенияСвойств(ОбластьПервыйЧленКомиссии.Параметры, ДанныеЧленаКомиссии);
			ДокументРезультат.Вывести(ОбластьПервыйЧленКомиссии);
			ПервыйЧленКомиссии = Ложь;
		Иначе
			ЗаполнитьЗначенияСвойств(ОбластьЧленКомиссии.Параметры, ДанныеЧленаКомиссии);
			ДокументРезультат.Вывести(ОбластьЧленКомиссии);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиПодвалАттестационногоЛиста(ДокументРезультат, ОбластьПодвал, ДанныеДляПечати)
	
	ДанныеПодвала = Новый Структура;
	ДанныеПодвала.Вставить("ДатаПроведенияАттестации", Формат(ДанныеДляПечати.ДатаЗаседания, "ДЛФ=DD"));
	
	ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ДанныеПодвала);
	
	ДокументРезультат.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Функция ОбластиМакетаАттестационныйЛистСотрудника()
	
	ОбластиМакета = Новый Структура;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовГосударственныхСлужащих.ПФ_MXL_АттестационныйЛистГосударственногоСлужащего");
	
	ОбластиМакета.Вставить("ОбластьШапка", 				Макет.ПолучитьОбласть("Шапка"));
	ОбластиМакета.Вставить("ОбластьПервыйЧленКомиссии", Макет.ПолучитьОбласть("ПервыйЧленКомиссии"));
	ОбластиМакета.Вставить("ОбластьЧленКомиссии", 		Макет.ПолучитьОбласть("ЧленКомиссии"));
	ОбластиМакета.Вставить("ОбластьПодвал", 			Макет.ПолучитьОбласть("Подвал"));
	
	Возврат ОбластиМакета;
	
КонецФункции

Функция ДанныеДляПечатиАттестационногоЛиста(ПриказыОбАттестации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПриказыОбАттестации", ПриказыОбАттестации);
	
	НеобходимыеКадровыеДанные = ИменаКадровыхДанныхНеобходимыхДляПечатиАттестационногоЛиста();
	
	СоздатьВТКадровыеДанныеСотрудниковПриказовОбАттестации(Запрос.МенеджерВременныхТаблиц, ПриказыОбАттестации, НеобходимыеКадровыеДанные);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриказОбАттестацииСотрудники.Ссылка КАК Ссылка,
	|	ПриказОбАттестацииСотрудники.Сотрудник КАК Сотрудник,
	|	ПриказОбАттестацииСотрудники.ВремяАттестации,
	|	ПриказОбАттестацииСотрудники.Подразделение,
	|	ПриказОбАттестацииСотрудники.Должность,
	|	ПриказОбАттестацииСотрудники.Специальность,
	|	ПриказОбАттестацииСотрудники.Категория,
	|	ПриказОбАттестацииЗаседанияКомиссии.ДатаЗаседания,
	|	Организации.НаименованиеПолное,
	|	Организации.НаименованиеСокращенное,
	|	ПриказОбАттестации.ВидАттестации,
	|	ВидыАттестацийСотрудников.ТипАттестации,
	|	ВТКадровыеДанныеСотрудников.*
	|ПОМЕСТИТЬ ВТАттестуемые
	|ИЗ
	|	Документ.ПриказОбАттестацииСотрудников КАК ПриказОбАттестации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриказОбАттестацииСотрудников.Сотрудники КАК ПриказОбАттестацииСотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриказОбАттестацииСотрудников.ЗаседанияКомиссии КАК ПриказОбАттестацииЗаседанияКомиссии
	|			ПО ПриказОбАттестацииСотрудники.Ссылка = ПриказОбАттестацииЗаседанияКомиссии.Ссылка
	|				И ПриказОбАттестацииСотрудники.ИдентификаторСтрокиЗаседаниеКомиссии = ПриказОбАттестацииЗаседанияКомиссии.ИдентификаторСтрокиЗаседаниеКомиссии
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|			ПО ПриказОбАттестацииСотрудники.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|				И (ПриказОбАттестацииЗаседанияКомиссии.ДатаЗаседания = ВТКадровыеДанныеСотрудников.Период)
	|		ПО (ПриказОбАттестацииСотрудники.Ссылка = ПриказОбАттестации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ПриказОбАттестации.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАттестацийСотрудников КАК ВидыАттестацийСотрудников
	|		ПО ПриказОбАттестации.ВидАттестации = ВидыАттестацийСотрудников.Ссылка
	|ГДЕ
	|	ПриказОбАттестации.Ссылка В(&ПриказыОбАттестации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК Период,
	|	ВТАттестуемые.Сотрудник
	|ПОМЕСТИТЬ КадроваяИсторияДО
	|ИЗ
	|	ВТАттестуемые КАК ВТАттестуемые
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|		ПО (КадроваяИсторияСотрудников.Сотрудник = ВТАттестуемые.Сотрудник)
	|			И (КадроваяИсторияСотрудников.Должность <> ВТАттестуемые.Должность)
	|			И (КадроваяИсторияСотрудников.Период < ВТАттестуемые.ДатаЗаседания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТАттестуемые.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК ДатаНачалаРаботыВДолжности,
	|	КадроваяИсторияДО.Сотрудник
	|ПОМЕСТИТЬ ВТДатыНачалаРаботыВДолжности
	|ИЗ
	|	КадроваяИсторияДО КАК КадроваяИсторияДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|		ПО (КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияДО.Сотрудник)
	|			И (КадроваяИсторияСотрудников.Период > КадроваяИсторияДО.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	КадроваяИсторияДО.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТАттестуемые.*,
	|	ЕСТЬNULL(ВТДатыНачалаРаботыВДолжности.ДатаНачалаРаботыВДолжности, ВТАттестуемые.ДатаПриема) КАК ДатаНачалаРаботыВДолжности
	|ИЗ
	|	ВТАттестуемые КАК ВТАттестуемые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыНачалаРаботыВДолжности КАК ВТДатыНачалаРаботыВДолжности
	|		ПО ВТАттестуемые.Сотрудник = ВТДатыНачалаРаботыВДолжности.Сотрудник";
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Выбрать();
	
КонецФункции

Функция ИменаКадровыхДанныхНеобходимыхДляПечатиАттестационногоЛиста()
	
	КадровыеДанные = "ФИОПолные,ДатаРождения,ВысшееОбразованиеУчебноеЗаведение,ВысшееОбразованиеОкончание,ВысшееОбразованиеСпециальность,ВысшееОбразованиеКвалификация,УченаяСтепень,УченоеЗвание,ОбщийСтажЛет,ОбщийСтажМесяцев,ДатаПриема,КлассныйЧинРанг,ВыслугаЛетНаГосударственнойСлужбеЛет,ВыслугаЛетНаГосударственнойСлужбеМесяцев";
	
	Возврат КадровыеДанные;

КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковПриказовОбАттестации(МенеджерВременныхТаблиц, ПриказыОбАттестации, КадровыеДанные = "ФИОПолные")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриказОбАттестацииСотрудниковСотрудники.Сотрудник,
	|	ПриказОбАттестацииСотрудниковЗаседанияКомиссии.ДатаЗаседания КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиОбщийСписок
	|ИЗ
	|	Документ.ПриказОбАттестацииСотрудников.Сотрудники КАК ПриказОбАттестацииСотрудниковСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриказОбАттестацииСотрудников.ЗаседанияКомиссии КАК ПриказОбАттестацииСотрудниковЗаседанияКомиссии
	|		ПО ПриказОбАттестацииСотрудниковСотрудники.Ссылка = ПриказОбАттестацииСотрудниковЗаседанияКомиссии.Ссылка
	|			И ПриказОбАттестацииСотрудниковСотрудники.ИдентификаторСтрокиЗаседаниеКомиссии = ПриказОбАттестацииСотрудниковЗаседанияКомиссии.ИдентификаторСтрокиЗаседаниеКомиссии
	|ГДЕ
	|	ПриказОбАттестацииСотрудниковСотрудники.Ссылка В(&ПриказыОбАттестации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриказОбАттестацииГрафикПредоставленияДокументов.Ответственный,
	|	ПриказОбАттестацииГрафикПредоставленияДокументов.ДатаПредставленияДокументов
	|ИЗ
	|	Документ.ПриказОбАттестацииСотрудников.ГрафикПредоставленияДокументов КАК ПриказОбАттестацииГрафикПредоставленияДокументов
	|ГДЕ
	|	ПриказОбАттестацииГрафикПредоставленияДокументов.Ссылка В(&ПриказыОбАттестации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСотрудникиОбщийСписок.Сотрудник,
	|	ВТСотрудникиОбщийСписок.Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТСотрудникиОбщийСписок КАК ВТСотрудникиОбщийСписок";
	Запрос.УстановитьПараметр("ПриказыОбАттестации", ПриказыОбАттестации);
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, КадровыеДанные);
	
КонецПроцедуры

#КонецОбласти

Процедура ВывестиРазделительСтраниц(Документ)
	
	Если Документ.ВысотаТаблицы > 0 Тогда
		Документ.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокиПоДлинам(ИсходнаяСтрока, МассивДлин)
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИсходнаяСтрока, " ");
	
	МассивСтрок = Новый Массив(МассивДлин.Количество());
	
	СчетчикСтрок = 0;
	Для каждого Длина Из МассивДлин Цикл
		
		МаксимальныйИндекс = МассивСлов.ВГраница();
		Если МаксимальныйИндекс < 0 Тогда
			Прервать;
		КонецЕсли;
		
		Строка = "";
		Пока МаксимальныйИндекс >= 0 Цикл
			Если СтрДлина(Строка + МассивСлов[0] + 1) > Длина
				И НЕ МассивДлин.ВГраница() = СчетчикСтрок Тогда
				Прервать;
			КонецЕсли;
			Строка = Строка + " " + МассивСлов[0];
			МассивСлов.Удалить(0);
			МаксимальныйИндекс = МаксимальныйИндекс - 1;
		КонецЦикла;
		
		МассивСтрок[СчетчикСтрок] = Строка;
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

Функция НаименованиеОрганизации(Выборка)
	Возврат ?(ЗначениеЗаполнено(Выборка.НаименованиеПолное), Выборка.НаименованиеПолное, Выборка.НаименованиеСокращенное);
КонецФункции 

#КонецОбласти

#КонецЕсли