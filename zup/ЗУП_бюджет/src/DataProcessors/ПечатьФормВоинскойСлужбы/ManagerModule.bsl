
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьГруппировкиВарианта13ФО15ФО(Структура, ЕстьГруппировкаПоПодразделению)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "Подразделение" Тогда
			
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Истина;
			Иначе
				ЭлементСтруктуры.Использование = Ложь;
			КонецЕсли;
			
		ИначеЕсли ЭлементСтруктуры.Имя = "Сотрудник" Тогда
			
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Ложь;
			Иначе
				ЭлементСтруктуры.Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьГруппировкиВарианта13ФО15ФО(ЭлементСтруктуры.Структура, ЕстьГруппировкаПоПодразделению);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДополнительныеНачисления(ДополнительныеНачисления, ПорядокКолонки)
	
	МассивВсехКатегорий = Новый Массив;
	Для каждого СтрокаНачисления Из ДополнительныеНачисления Цикл
		Для каждого КатегорияКолонки Из СтрокаНачисления.КатегорииКолонки Цикл
			МассивВсехКатегорий.Добавить(КатегорияКолонки);
		КонецЦикла;
	КонецЦикла;
	
	ДействующиеКатегории = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДействующиеКатегории();
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
		Если МассивВсехКатегорий.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДействующиеКатегории.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = МетаданныеЗначения;
		Если МассивВсехКатегорий.Найти(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДополнительныеУдержания(ДополнительныеУдержания, ПорядокКолонки)
	
	ДействующиеКатегории = Перечисления.КатегорииУдержаний.ДействующиеКатегории();
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДействующиеКатегории.Найти(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = МетаданныеЗначения;
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяСтруктураДанныхДляПечатиСреднегоДенежногоДовольствия() Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("РеквизитыДокумента", ПустаяСтруктураРеквизитовДокументаДляПечатиСреднегоДенежногоДовольствия());
	СтруктураДанных.Вставить("КадровыеДанныеСотрудника", ПустаяСтруктураКадровыхДанныхСотрудникаДляПечатиСреднегоДенежногоДовольствия());
	СтруктураДанных.Вставить("ПараметрыРасчета", Новый Структура);
	СтруктураДанных.Вставить("ДанныеРасчетаСреднего", Новый Структура);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПустаяСтруктураРеквизитовДокументаДляПечатиСреднегоДенежногоДовольствия()
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Ссылка");
	СтруктураДанных.Вставить("Сотрудник");
	СтруктураДанных.Вставить("НомерДокумента");
	СтруктураДанных.Вставить("ДатаДокумента");
	СтруктураДанных.Вставить("ДатаНачалаОтсутствия");
	СтруктураДанных.Вставить("ДатаОкончанияОтсутствия");
	СтруктураДанных.Вставить("ПолноеНаименованиеОрганизации");
	СтруктураДанных.Вставить("НаименованиеОрганизации");
	
	Возврат СтруктураДанных;

КонецФункции

Функция ПустаяСтруктураКадровыхДанныхСотрудникаДляПечатиСреднегоДенежногоДовольствия()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ФизическоеЛицо");
	СтруктураДанных.Вставить("ФИОПолные");
	СтруктураДанных.Вставить("ТабельныйНомер");
	СтруктураДанных.Вставить("Подразделение");
	СтруктураДанных.Вставить("Должность");
	СтруктураДанных.Вставить("ВидЗанятости");
	
	Возврат СтруктураДанных;

КонецФункции

#Область Ведомость6002501

Процедура ПриКомпоновкеРезультата6002501(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Попытка
		
		КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = ОбъектОтчета.СхемаКомпоновкиДанных;
		
		КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФорма6002501";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		
		Если Не ЕстьГруппировкаПоПодразделению Тогда
			
			Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
				
				Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
					ЭлементСортировки.Использование = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИзменитьГруппировкиВарианта13ФО15ФО(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
		
		ДополнительныеНачисления = ДополнительныеНачисленияОтчетаАнализНачисленийИУдержаний13ФО();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисления, НастройкиОтчета, 15);
		ДополнительныеУдержания = ДополнительныеУдержанияОтчетаАнализНачисленийИУдержаний13ФО();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеУдержания, НастройкиОтчета, 5, "Удержания");			
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеДокумента") Тогда
			НаборыВнешнихДанных = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеДокумента;
		Иначе
			НаборыВнешнихДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
		КонецЕсли;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
				
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ПорядокДопНачислений = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачислений(ДополнительныеНачисления, ДанныеОтчета, СоответствиеПользовательскихПолей, 9);
		ПорядокДопУдержаний = УчетНачисленнойЗарплаты.ПорядокДополнительныхУдержаний(ДополнительныеУдержания, ДанныеОтчета, СоответствиеПользовательскихПолей, 24);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьФормВоинскойСлужбы.ПФ_MXL_6002501");
		
		Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
		
		Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.Строка = Макет.ПолучитьОбласть("Строка");
		Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
		Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
		Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
		
		ДанныеОтчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(18,0));
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				ВывестиОрганизацию6002501(ОбъектОтчета, 
					СтрокаОрганизации, 
					ДокументРезультат, 
					Макеты, 
					ЕстьГруппировкаПоПодразделению, 
					СоответствиеПользовательскихПолей, 
					ПорядокДопНачислений, 
					ПорядокДопУдержаний);				
			КонецЦикла;
			
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета формы 6002501 внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВывестиОрганизацию6002501(ОбъектОтчета,СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	КВыплатеПоВедомости = 0;
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
	Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
	
	Документ = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
	Если Документ <> Неопределено Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира, Бухгалтер, Проверил, ДолжностьПроверившего, Составил, ДолжностьСоставившего, Раздатчик, ДолжностьРаздатчика");
		
	Иначе
		ДанныеДокумента = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер,Кассир,ДолжностьКассира", СтрокаОрганизации.Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ДанныеДокумента, КонецМесяца(СтрокаОрганизации.МесяцНачисления));
		ДанныеДокумента.Удалить("Организация");
		ДанныеДокумента.Вставить("Номер", "");
		ДанныеДокумента.Вставить("Дата", "");
		ДанныеДокумента.Вставить("Бухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеДокумента.Вставить("Проверил", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеДокумента.Вставить("ДолжностьПроверившего", Справочники.Должности.ПустаяСсылка());
		ДанныеДокумента.Вставить("Составил", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеДокумента.Вставить("ДолжностьСоставившего", Справочники.Должности.ПустаяСсылка());
		ДанныеДокумента.Вставить("Раздатчик", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеДокумента.Вставить("ДолжностьРаздатчика", Справочники.Должности.ПустаяСсылка());
	КонецЕсли;
		
	СписокОтветственных = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеДокумента.Руководитель) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Руководитель);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.ГлавныйБухгалтер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Кассир) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Кассир);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Бухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Бухгалтер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Проверил) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Проверил);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Составил) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Составил);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Раздатчик) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Раздатчик);
	КонецЕсли; 
	
	РасшифровкиОтветственных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокОтветственных,"ИОФамилия,ВоинскоеСпециальноеЗвание", КонецМесяца(СтрокаОрганизации.МесяцНачисления));
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	
	ДанныеРуководителя = РасшифровкиОтветственных.Найти(ДанныеДокумента.Руководитель, "ФизическоеЛицо");
	Если ДанныеРуководителя <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.РуководительРасшифровкаПодписи = ДанныеРуководителя.ИОФамилия;
		Макеты.ШапкаДокумента.Параметры.ЗваниеРуководителя = ДанныеРуководителя.ВоинскоеСпециальноеЗвание;
	КонецЕсли; 
	
	ДанныеГлавногоБухгалтера = РасшифровкиОтветственных.Найти(ДанныеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
	Если ДанныеГлавногоБухгалтера <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ДанныеГлавногоБухгалтера.ИОФамилия;
		Макеты.ШапкаДокумента.Параметры.ЗваниеГлавногоБухгалтера = ДанныеГлавногоБухгалтера.ВоинскоеСпециальноеЗвание;
	КонецЕсли; 
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	
	ДанныеВедомости = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
	Если ДанныеВедомости = Неопределено Тогда
		КВыплате = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")];
	Иначе
		КВыплате = ДанныеВедомости.Итог("КВыплате");
		СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")] = КВыплате;
		// Упорядочим строки как в документе
		Для Каждого СтрокаГоловногоСотрудника Из СтрокаОрганизации.Строки Цикл
			Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
				СтрокаДанныхВедомости = ДанныеВедомости.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
				Если СтрокаДанныхВедомости <> Неопределено Тогда
					СтрокаСотрудника.НомерСтроки = СтрокаДанныхВедомости.НомерСтроки;
					Если СтрокаГоловногоСотрудника.НомерСтроки < СтрокаСотрудника.НомерСтроки Тогда
						СтрокаГоловногоСотрудника.НомерСтроки = СтрокаСотрудника.НомерСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		СтрокаОрганизации.Строки.Сортировать("НомерСтроки", Истина);
	КонецЕсли;
	Если КВыплате > 0 Тогда
		ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
		Макеты.ШапкаДокумента.Параметры.СуммаВсегоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(КВыплате, ВалютаУчета);
	КонецЕсли;
	ПодразделениеВШапке = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ПодразделениеВШапке", ПодразделениеВШапке);
	Если ПодразделениеВШапке <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = ПодразделениеВШапке;
	КонецЕсли;
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.Шапка);
	
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтранице13ФО(ПорядокДопНачислений, ПорядокДопУдержаний);
	
	МассивСотрудников = СтрокаОрганизации.Строки.ВыгрузитьКолонку("ГоловнойСотрудник");
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивСотрудников, "ВоинскоеСпециальноеЗвание,ВыслугаЛетНаВоеннойСлужбеЛет,ВыслугаЛетНаВоеннойСлужбеМесяцев,ВыслугаЛетНаВоеннойСлужбеДней ", СтрокаОрганизации.МесяцНачисления, , Ложь);  
	
	Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
		ВывестиСотрудника13ФО(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний, КадровыеДанныеСотрудников);
	КонецЦикла;
	ДополнитьСтраницу13ФО(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	
	Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
	Если Документ <> Неопределено Тогда
		
		Макеты.Подвал.Параметры.Заполнить(Документ);		
		
		ДанныеКассира = РасшифровкиОтветственных.Найти(ДанныеДокумента.Кассир, "ФизическоеЛицо");
		Если ДанныеКассира <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОКассира 		= ДанныеКассира.ИОФамилия;
			Макеты.Подвал.Параметры.ЗваниеКассира 	= ДанныеКассира.ВоинскоеСпециальноеЗвание;
		КонецЕсли; 
		
		ДанныеРаздатчик = РасшифровкиОтветственных.Найти(ДанныеДокумента.Раздатчик, "ФизическоеЛицо");
		Если ДанныеРаздатчик <> Неопределено Тогда
			Макеты.Подвал.Параметры.РаздатчикРасшифровкаПодписи = ДанныеРаздатчик.ИОФамилия;
			Макеты.Подвал.Параметры.ЗваниеРаздатчика 			= ДанныеРаздатчик.ВоинскоеСпециальноеЗвание;
		КонецЕсли; 
						
		ДанныеСоставил = РасшифровкиОтветственных.Найти(ДанныеДокумента.Составил, "ФизическоеЛицо");
		Если ДанныеСоставил <> Неопределено Тогда
			Макеты.Подвал.Параметры.СоставилРасшифровкаПодписи	= ДанныеСоставил.ИОФамилия;
			Макеты.Подвал.Параметры.ЗваниеСоставившего 			= ДанныеСоставил.ВоинскоеСпециальноеЗвание;
		КонецЕсли; 
		
		ДанныеПроверил = РасшифровкиОтветственных.Найти(ДанныеДокумента.Проверил, "ФизическоеЛицо");
		Если ДанныеПроверил <> Неопределено Тогда
			Макеты.Подвал.Параметры.ПроверилРасшифровкаПодписи	= ДанныеПроверил.ИОФамилия;
			Макеты.Подвал.Параметры.ЗваниеПроверившего 			= ДанныеПроверил.ВоинскоеСпециальноеЗвание;
		КонецЕсли; 

	КонецЕсли;
	
	Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
		
	
КонецПроцедуры

#КонецОбласти

#Область Ведомость6002502

Процедура ПриКомпоновкеРезультата6002502(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Попытка
		
		КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = ОбъектОтчета.СхемаКомпоновкиДанных;
		
		КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФорма6002502";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		
		Если Не ЕстьГруппировкаПоПодразделению Тогда
			
			Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
				
				Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
					ЭлементСортировки.Использование = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИзменитьГруппировкиВарианта13ФО15ФО(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
		
		ДополнительныеНачисления = ДополнительныеНачисленияОтчетаАнализНачисленийИУдержаний6002502();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисления, НастройкиОтчета, 5);
		ДополнительныеУдержания = ДополнительныеУдержанияОтчетаАнализНачисленийИУдержаний6002502();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеУдержания, НастройкиОтчета, 2, "Удержания");
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеДокумента") Тогда
			НаборыВнешнихДанных = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеДокумента;
		Иначе
			НаборыВнешнихДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
		КонецЕсли;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
				
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ПорядокДопНачислений = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачислений(ДополнительныеНачисления, ДанныеОтчета, СоответствиеПользовательскихПолей, 5);
		ПорядокДопУдержаний = УчетНачисленнойЗарплаты.ПорядокДополнительныхУдержаний(ДополнительныеУдержания, ДанныеОтчета, СоответствиеПользовательскихПолей, 11);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьФормВоинскойСлужбы.ПФ_MXL_6002502");
		
		Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
		
		Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.Строка = Макет.ПолучитьОбласть("Строка");
		Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
		Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
		Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
		
		ДанныеОтчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(18,0));
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				ВывестиОрганизацию6002501(ОбъектОтчета, 
					СтрокаОрганизации, 
					ДокументРезультат, 
					Макеты, 
					ЕстьГруппировкаПоПодразделению, 
					СоответствиеПользовательскихПолей, 
					ПорядокДопНачислений, 
					ПорядокДопУдержаний);				
			КонецЦикла;
			
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета формы 6002502 внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержаний6002502()
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НачисленоПовременно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоПовременно";
	НоваяСтрока.Заголовок = НСтр("ru = 'Основные начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
		
		
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 4);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержаний6002502()
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
		
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// Межрасчет (Выплачено / выплаты в межрасчетный период)
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ВыплаченоВМежрасчет";
	НоваяСтрока.Заголовок = НСтр("ru = 'в межрасчет-
		|ный период'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 4);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

#КонецОбласти

#Область Ведомость13ФО

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету 13-ФО.

Функция Печать13ФО(МассивОбъектов, ОбъектыПечати, ИдентификаторВариантаОтчета = "13ФО") Экспорт
	
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ДокументРезультат.Вывести(Печать13ФООтчет(ДокументСсылка,ИдентификаторВариантаОтчета));
	
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
		
КонецФункции

Функция Печать13ФООтчет(Документ, КлючВарианта="13ФО")
	
	ОтчетОбъект = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетОбъект.ИнициализироватьОтчет();
	
	ВариантОтчета = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти("13ФО");
	Если ВариантОтчета= Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	НастройкиОтчета = ВариантОтчета.Настройки;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ПериодРегистрации,Организация,Подразделение");
	
	Период = РеквизитыДокумента.ПериодРегистрации;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период", Новый СтандартныйПериод(НачалоМесяца(Период), КонецМесяца(Период)));
	СтруктураПараметров.Вставить("НачалоПериода",	НачалоМесяца(Период));
	СтруктураПараметров.Вставить("КонецПериода",	КонецМесяца(Период));
	СтруктураПараметров.Вставить("КлючВарианта",	КлючВарианта);
	
	Для каждого ПараметрЗаполнения Из СтруктураПараметров Цикл
		
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ПараметрЗаполнения.Ключ);
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Значение = ПараметрЗаполнения.Значение;
			ЗначениеПараметра.Использование = Истина;
		Иначе
			НовыйПараметр = НастройкиОтчета.ПараметрыДанных.Элементы.Добавить();
			НовыйПараметр.Параметр = ПараметрКомпоновкиДанных;
			НовыйПараметр.Значение = ПараметрЗаполнения.Значение;
			НовыйПараметр.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеВедомости = Документы[Документ.Метаданные().Имя].ДанныеВедомостиДляПечати(Документ);
	СписокСотрудников = ДанныеВедомости.ВыгрузитьКолонку("Сотрудник");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиОтчета.Отбор, "Сотрудник.ГоловнойСотрудник", СписокСотрудников, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		НастройкиОтчета.Отбор, "Организация", РеквизитыДокумента.Организация, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиОтчета.Отбор, "Подразделение", РеквизитыДокумента.Подразделение, ВидСравненияКомпоновкиДанных.ВИерархии, , Истина);
	КонецЕсли;
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Документ", Документ);
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеВедомости", ДанныеВедомости);
	Если ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
		ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПодразделениеВШапке", РеквизитыДокумента.Подразделение);
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ОтчетОбъект.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиОрганизацию13ФО(ОбъектОтчета,СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	КВыплатеПоВедомости = 0;
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
	Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
	
	Документ = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
	Если Документ <> Неопределено Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира, Бухгалтер, Проверил, ДолжностьПроверившего, Составил, ДолжностьСоставившего, Раздатчик, ДолжностьРаздатчика");
		
	Иначе
		ДанныеДокумента = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер,Кассир,ДолжностьКассира", СтрокаОрганизации.Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ДанныеДокумента, КонецМесяца(СтрокаОрганизации.МесяцНачисления));
		ДанныеДокумента.Удалить("Организация");
		ДанныеДокумента.Вставить("Номер", "");
		ДанныеДокумента.Вставить("Дата", "");
		ДанныеДокумента.Вставить("Бухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеДокумента.Вставить("Проверил", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеДокумента.Вставить("ДолжностьПроверившего", Справочники.Должности.ПустаяСсылка());
		ДанныеДокумента.Вставить("Составил", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеДокумента.Вставить("ДолжностьСоставившего", Справочники.Должности.ПустаяСсылка());
		ДанныеДокумента.Вставить("Раздатчик", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеДокумента.Вставить("ДолжностьРаздатчика", Справочники.Должности.ПустаяСсылка());
	КонецЕсли;
	
	СписокОтветственных = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеДокумента.Руководитель) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Руководитель);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.ГлавныйБухгалтер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Кассир) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Кассир);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Бухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Бухгалтер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Проверил) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Проверил);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Составил) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Составил);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Раздатчик) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Раздатчик);
	КонецЕсли; 
	
	РасшифровкиПодписей = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокОтветственных,"ИОФамилия", КонецМесяца(СтрокаОрганизации.МесяцНачисления));
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	
	ДанныеРуководителя = РасшифровкиПодписей.Найти(ДанныеДокумента.Руководитель, "ФизическоеЛицо");
	Если ДанныеРуководителя <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.РуководительРасшифровкаПодписи = ДанныеРуководителя.ИОФамилия;
	КонецЕсли; 
	
	ДанныеГлавногоБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
	Если ДанныеГлавногоБухгалтера <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ДанныеГлавногоБухгалтера.ИОФамилия;
	КонецЕсли; 
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	
	ДанныеВедомости = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
	Если ДанныеВедомости = Неопределено Тогда
		КВыплате = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")];
	Иначе
		КВыплате = ДанныеВедомости.Итог("КВыплате");
		СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")] = КВыплате;
		// Упорядочим строки как в документе
		Для Каждого СтрокаГоловногоСотрудника Из СтрокаОрганизации.Строки Цикл
			Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
				СтрокаДанныхВедомости = ДанныеВедомости.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
				Если СтрокаДанныхВедомости <> Неопределено Тогда
					СтрокаСотрудника.НомерСтроки = СтрокаДанныхВедомости.НомерСтроки;
					Если СтрокаГоловногоСотрудника.НомерСтроки < СтрокаСотрудника.НомерСтроки Тогда
						СтрокаГоловногоСотрудника.НомерСтроки = СтрокаСотрудника.НомерСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		СтрокаОрганизации.Строки.Сортировать("НомерСтроки", Истина);
	КонецЕсли;
	Если КВыплате > 0 Тогда
		ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
		Макеты.ШапкаДокумента.Параметры.СуммаВсегоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(КВыплате, ВалютаУчета);
	КонецЕсли;
	ПодразделениеВШапке = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ПодразделениеВШапке", ПодразделениеВШапке);
	Если ПодразделениеВШапке <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = ПодразделениеВШапке;
	КонецЕсли;
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.Шапка);
	
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтранице13ФО(ПорядокДопНачислений, ПорядокДопУдержаний);
	
	Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
		ВывестиСотрудника13ФО(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний);
	КонецЦикла;
	ДополнитьСтраницу13ФО(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	
	Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
	Если Документ <> Неопределено Тогда
		
		Макеты.Подвал.Параметры.Заполнить(Документ);
		
		ДанныеКассира = РасшифровкиПодписей.Найти(ДанныеДокумента.Кассир, "ФизическоеЛицо");
		Если ДанныеКассира <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОКассира = ДанныеКассира.ИОФамилия;
		КонецЕсли; 
		
		ДанныеРаздатчик = РасшифровкиПодписей.Найти(ДанныеДокумента.Раздатчик, "ФизическоеЛицо");
		Если ДанныеРаздатчик <> Неопределено Тогда
			Макеты.Подвал.Параметры.РаздатчикРасшифровкаПодписи = ДанныеРаздатчик.ИОФамилия;
		КонецЕсли; 
		
		ДанныеСоставил = РасшифровкиПодписей.Найти(ДанныеДокумента.Составил, "ФизическоеЛицо");
		Если ДанныеСоставил <> Неопределено Тогда
			Макеты.Подвал.Параметры.СоставилРасшифровкаПодписи = ДанныеСоставил.ИОФамилия;
		КонецЕсли; 
		
		ДанныеПроверил = РасшифровкиПодписей.Найти(ДанныеДокумента.Проверил, "ФизическоеЛицо");
		Если ДанныеПроверил <> Неопределено Тогда
			Макеты.Подвал.Параметры.ПроверилРасшифровкаПодписи = ДанныеПроверил.ИОФамилия;
		КонецЕсли; 
		
		
	КонецЕсли;
	
	Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
		
	
КонецПроцедуры

Процедура ВывестиСотрудника13ФО(НомерСтроки, СтрокаГоловногоСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний, КадровыеДанныеСотрудников = Неопределено)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	НомерСтроки = НомерСтроки + 1;
	
	МакетСотрудника = Новый ТабличныйДокумент;
	ПромежуточныеИтогиПоГоловномуСотруднику = ПромежуточныеИтогиПоСтранице13ФО(ПорядокДопНачислений, ПорядокДопУдержаний);
	НесколькоРабочихМест = СтрокаГоловногоСотрудника.Строки.Количество() > 1;
	
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		Если ДанныеВедомости <> Неопределено Тогда
			СтрокаДанныхВедомости = ДанныеВедомости.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
			Если СтрокаДанныхВедомости <> Неопределено Тогда
				СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("КВыплате")] = СтрокаДанныхВедомости.КВыплате;
			КонецЕсли;
		КонецЕсли;
		
		Макеты.Строка.Параметры.Заполнить(СтрокаСотрудника);
		
		Если КадровыеДанныеСотрудников <> Неопределено Тогда
			СтрокаЗвания = КадровыеДанныеСотрудников.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
			Если СтрокаЗвания <> Неопределено Тогда
				Макеты.Строка.Параметры.ВоинскоеСпециальноеЗвание = СтрокаЗвания.ВоинскоеСпециальноеЗвание;
				Макеты.Строка.Параметры.СтажПНВЛ = ?(ЗначениеЗаполнено(СтрокаЗвания.ВыслугаЛетНаВоеннойСлужбеЛет),Строка(СтрокаЗвания.ВыслугаЛетНаВоеннойСлужбеЛет)+" л. ","")
				                                 + ?(ЗначениеЗаполнено(СтрокаЗвания.ВыслугаЛетНаВоеннойСлужбеМесяцев),Строка(СтрокаЗвания.ВыслугаЛетНаВоеннойСлужбеМесяцев)+" мес. ","")
				                                 + ?(ЗначениеЗаполнено(СтрокаЗвания.ВыслугаЛетНаВоеннойСлужбеДней),Строка(СтрокаЗвания.ВыслугаЛетНаВоеннойСлужбеДней)+" дн.","");
												 
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
			ФИО = Новый Структура("Фамилия, Имя, Отчество");
			ФИО.Фамилия = СтрокаСотрудника.Фамилия;
			ФИО.Имя = СтрокаСотрудника.Имя;
			ФИО.Отчество = СтрокаСотрудника.Отчество;
			Макеты.Строка.Параметры.СотрудникФизическоеЛицоФИО = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИО);
		КонецЕсли;
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
			СуммаЯчейки = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
			СуммаЯчейки = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
		КонецЦикла;
				
		Макеты.Строка.Параметры.НомерПП = НомерСтроки;
		
		Если Макеты.Строка.Параметры.КВыплате < 0 Тогда
			Макеты.Строка.Параметры.КВыплате = 0;
		КонецЕсли;
		
		ЗарплатаКадрыОтчеты.ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, Макеты.Строка.Параметры);
		
		КВыплатеПоВедомости = КВыплатеПоВедомости + Макеты.Строка.Параметры.КВыплате;
		
		Если НесколькоРабочихМест Тогда
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
				Макеты.Строка, СтрокаГоловногоСотрудника, СоответствиеПользовательскихПолей,
				"ВсегоНачислено,ДолгЗаОрганизацией,ДолгЗаСотрудником,КВыплате");
				
			Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
				
				СуммаЯчейки = СтрокаГоловногоСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
				Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
				
			КонецЦикла;
			
		КонецЕсли; 
			
		Если  СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
			Макеты.Строка.Параметры.ДолжностьНаКонецПериодаНаименованиеКраткое = СтрокаСотрудника.СотрудникУточнениеНаименования;
		КонецЕсли; 
		
		МакетСотрудника.Вывести(Макеты.Строка);
		
	КонецЦикла;
	
	Если МакетСотрудника.ВысотаТаблицы > 1 Тогда
		
		// Номер по порядку
		МакетСотрудника.Область(1, 1, МакетСотрудника.ВысотаТаблицы, 1).Объединить();
		// Табельный номер
		МакетСотрудника.Область(1, 2, МакетСотрудника.ВысотаТаблицы, 2).Объединить();
		// Всего начислено
		МакетСотрудника.Область(1, 19, МакетСотрудника.ВысотаТаблицы, 19).Объединить();
		// Удержания
		МакетСотрудника.Область(1, 20, МакетСотрудника.ВысотаТаблицы, 20).Объединить();
		МакетСотрудника.Область(1, 21, МакетСотрудника.ВысотаТаблицы, 21).Объединить();
		МакетСотрудника.Область(1, 22, МакетСотрудника.ВысотаТаблицы, 22).Объединить();
		МакетСотрудника.Область(1, 23, МакетСотрудника.ВысотаТаблицы, 23).Объединить();
		// Задолженность за организацией.
		МакетСотрудника.Область(1, 24, МакетСотрудника.ВысотаТаблицы, 24).Объединить();
		// Задолженность за работником.
		МакетСотрудника.Область(1, 25, МакетСотрудника.ВысотаТаблицы, 26).Объединить();
		// К выплате
		МакетСотрудника.Область(1, 27, МакетСотрудника.ВысотаТаблицы, 28).Объединить();
		// ФИО
		МакетСотрудника.Область(1, 29, МакетСотрудника.ВысотаТаблицы, 29).Объединить();
		// Подпись
		МакетСотрудника.Область(1, 30, МакетСотрудника.ВысотаТаблицы, 30).Объединить();
		
	КонецЕсли; 
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(МакетСотрудника);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) 
		И (НомерСтроки > 1) Тогда
		
		ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтранице13ФО(ПорядокДопНачислений, ПорядокДопУдержаний);
		
	КонецЕсли;
		
	ЗарплатаКадрыОтчеты.ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ПромежуточныеИтогиПоГоловномуСотруднику);
	
	ДокументРезультат.Вывести(МакетСотрудника);
	
КонецПроцедуры

Процедура ДополнитьСтраницу13ФО(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги)
	
	ОбластиКонцаСтраницы = Новый Массив();
	ОбластиКонцаСтраницы.Добавить(Макеты.ИтогоПоСтранице);
	ОбластиКонцаСтраницы.Добавить(Макеты.ИтогоПоВедомости);
	ОбластиКонцаСтраницы.Добавить(Макеты.Подвал);
	ОбщегоНазначенияБЗК.ДополнитьСтраницуТабличногоДокумента(ДокументРезультат, Макеты.ПустаяСтрока, ОбластиКонцаСтраницы);  
	
	ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		
	ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтранице13ФО(ПорядокДопНачислений, ПорядокДопУдержаний)
	
	ПромежуточныеИтоги = Новый Структура;
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		ПромежуточныеИтоги.Вставить("Колонка" + СтрокаТаблицы.НомерКолонки, 0);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		ПромежуточныеИтоги.Вставить("Колонка" + СтрокаТаблицы.НомерКолонки, 0);
	КонецЦикла;
	
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("ВсегоУдержано", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

Процедура ПриКомпоновкеРезультата13ФО(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Попытка
		
		КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = ОбъектОтчета.СхемаКомпоновкиДанных;
		
		КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФорма13ФО";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		
		Если Не ЕстьГруппировкаПоПодразделению Тогда
			
			Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
				
				Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
					ЭлементСортировки.Использование = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИзменитьГруппировкиВарианта13ФО15ФО(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
		
		ДополнительныеНачисления = ДополнительныеНачисленияОтчетаАнализНачисленийИУдержаний13ФО();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисления, НастройкиОтчета, 15);
		ДополнительныеУдержания = ДополнительныеУдержанияОтчетаАнализНачисленийИУдержаний13ФО();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеУдержания, НастройкиОтчета, 5, "Удержания");			
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеДокумента") Тогда
			НаборыВнешнихДанных = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеДокумента;
		Иначе
			НаборыВнешнихДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
		КонецЕсли;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ПорядокДопНачислений = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачислений(ДополнительныеНачисления, ДанныеОтчета, СоответствиеПользовательскихПолей, 7);
		ПорядокДопУдержаний = УчетНачисленнойЗарплаты.ПорядокДополнительныхУдержаний(ДополнительныеУдержания, ДанныеОтчета, СоответствиеПользовательскихПолей, 24);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьФормВоинскойСлужбы.ПФ_MXL_13ФО");
		
		Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
		
		Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.Строка = Макет.ПолучитьОбласть("Строка");
		Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
		Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
		Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
		
		ДанныеОтчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(18,0));
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				ВывестиОрганизацию13ФО(ОбъектОтчета, 
					СтрокаОрганизации, 
					ДокументРезультат, 
					Макеты, 
					ЕстьГруппировкаПоПодразделению, 
					СоответствиеПользовательскихПолей, 
					ПорядокДопНачислений, 
					ПорядокДопУдержаний);				
			КонецЦикла;
			
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета 13-ФО внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержаний13ФО()
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
		
	// Оклад по званию
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОкладПоЗванию";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оклад по званию'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскомуЗванию) ИЛИ ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоСпециальномуЗванию))";	
	//НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ ((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)))";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Оклад по должности
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОкладПоДолжности";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оклад по должности'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ОкладПоВоинскойДолжности) ИЛИ ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ДолжностнойОклад))";	
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// процентная надбавка за выслугу лет
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СуммаПНВЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Процентная надбавка за выслугу лет'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаВыслугуЛет) ИЛИ ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаСтажСлужбы))";	
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// надбавка за гостайну
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НадбавкаСекретность";
	НоваяСтрока.Заголовок = НСтр("ru = 'Надбавка за работу со сведениями, составляющими гостайну'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаСекретность))";	
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// Ежемесячная надбавка за особые условия службы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НадбавкаОсобыеУсловияСлужбы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Ежемесячная надбавка за особые условия службы'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаОсобыеУсловияСлужбы))";	
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// Премия за добросовестное выполнение служебных обязанностей
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПремияДВСО";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия за добросовестное выполнение служебных обязанностей'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей))";	
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// Надбавка за квалификацию
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НадбавкаКвалификация";
	НоваяСтрока.Заголовок = НСтр("ru = 'Надбавка за квалификацию'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаКласснуюКвалификацию) ИЛИ ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.НадбавкаЗаКвалификационноеЗвание))";	
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 9;
		
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.[Отношение к денежному довольствию] =  ЗНАЧЕНИЕ(Перечисление.ОтношениеНачисленийКДенежномуДовольствию.ПрочиеВыплаты))";	
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 11);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержаний13ФО()
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы физических лиц'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
		
	// Аванс
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано в аванс'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ИсполнительныйЛист
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ИсполнительныйЛист";
	НоваяСтрока.Заголовок = НСтр("ru = 'Удержания по исполнитель-
		|ному листу'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// Межрасчет (Выплачено / выплаты в межрасчетный период)
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ВыплаченоВМежрасчет";
	НоваяСтрока.Заголовок = НСтр("ru = 'в межрасчет-
		|ный период'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 7);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

#КонецОбласти

#Область Ведомость15ФО

Процедура ПриКомпоновкеРезультата15ФО(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Попытка
		
		КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = ОбъектОтчета.СхемаКомпоновкиДанных;
		
		КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФорма15ФО";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		
		Если Не ЕстьГруппировкаПоПодразделению Тогда
			
			Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
				
				Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
					ЭлементСортировки.Использование = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИзменитьГруппировкиВарианта13ФО15ФО(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
		
		ДополнительныеНачисления = ДополнительныеНачисленияОтчетаАнализНачисленийИУдержаний15ФО();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисления, НастройкиОтчета, 2);
		ДополнительныеУдержания = ДополнительныеУдержанияОтчетаАнализНачисленийИУдержаний15ФО();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеУдержания, НастройкиОтчета, 2, "Удержания");
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеДокумента") Тогда
			НаборыВнешнихДанных = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеДокумента;
		Иначе
			НаборыВнешнихДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
		КонецЕсли;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ПорядокДопНачислений = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачислений(ДополнительныеНачисления, ДанныеОтчета, СоответствиеПользовательскихПолей, 4);
		ПорядокДопУдержаний = УчетНачисленнойЗарплаты.ПорядокДополнительныхУдержаний(ДополнительныеУдержания, ДанныеОтчета, СоответствиеПользовательскихПолей, 8);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьФормВоинскойСлужбы.ПФ_MXL_15ФО");
		
		Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
		
		Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.Строка = Макет.ПолучитьОбласть("Строка");
		Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
		Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
		Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
		
		ДанныеОтчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(18,0));
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				ВывестиОрганизацию13ФО(ОбъектОтчета, 
					СтрокаОрганизации, 
					ДокументРезультат, 
					Макеты, 
					ЕстьГруппировкаПоПодразделению, 
					СоответствиеПользовательскихПолей, 
					ПорядокДопНачислений, 
					ПорядокДопУдержаний);				
			КонецЦикла;
			
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета 15-ФО внесены критичные изменения. Отчет не будет сформирован.'") + " " + КраткоеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержаний15ФО()
	
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НачисленоПовременно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоПовременно";
	НоваяСтрока.Заголовок = НСтр("ru = 'Основные начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
		
		
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 4);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержаний15ФО()
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
		
	// ИсполнительныйЛист
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ИсполнительныйЛист";
	НоваяСтрока.Заголовок = НСтр("ru = 'Удержания по исполнитель-
		|ному листу'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 4);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

#КонецОбласти

#Область РасчетСреднегоДенежногоДовольствия

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета Среднему Денежному Довольствию Пособий.

Функция ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, ВыводитьЗаголовок = Истина) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоДенежногоДовольствия";
	
	Для каждого ДанныеДокумента Из ДанныеДокументов Цикл
				
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВывестиТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокумента, ОбъектыПечати, ТабличныйДокумент, ВыводитьЗаголовок);
		
		Обработки.ПечатьРасчетаСреднегоЗаработка.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.РеквизитыДокумента.Ссылка, ДанныеДокумента.РеквизитыДокумента.Сотрудник);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции 

Процедура ВывестиТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокумента, ОбъектыПечати, ТабличныйДокумент, ВыводитьЗаголовок)
	
	ОбластиМакета = ОбластиМакетаСреднегоЗаработка();
	
	ДанныеОЗаработке = ПреобразоватьДанныеОЗаработкеВТаблицыЗначений(ДанныеДокумента.ДанныеРасчетаСреднего.Заработок);	
	ОтработанноеВремя = ПреобразоватьДанныеОВремениВТаблицуЗначений(ДанныеДокумента.ДанныеРасчетаСреднего.ОтработанноеВремя);

	Если ВыводитьЗаголовок Тогда
		ВывестиШапку(ТабличныйДокумент, ОбластиМакета.Шапка, ДанныеДокумента.РеквизитыДокумента, ДанныеДокумента.КадровыеДанныеСотрудника, ДанныеДокумента.ПараметрыРасчета);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.ЗаголовокНачислений);
	
	ВывестиРабочееМесто(ТабличныйДокумент, ОбластиМакета.ОбластьРабочееМесто, ДанныеДокумента.КадровыеДанныеСотрудника);
	
	ВывестиЗаработокЗаРасчетныйПериод(ТабличныйДокумент, ОбластиМакета.ОбластьШапкаЗаработка, ОбластиМакета.ОбластьСтрокаЗаработка, ОбластиМакета.ОбластьПодвалЗаработка, ДанныеОЗаработке);
	
	ВывестиОтработанноеВремя(ТабличныйДокумент, ОбластиМакета.ОбластьШапкаОтработанногоВремени, ОбластиМакета.ОбластьСтрокаОтработанногоВремени, ОбластиМакета.ОбластьПодвалОтработанногоВремени, ОтработанноеВремя);
	
	ВывестиРасчетСреднегоЗаработка(ТабличныйДокумент, ОбластиМакета.ОбластьРасчетСреднегоЗаработка, ДанныеДокумента.ДанныеРасчетаСреднего);

	
КонецПроцедуры

Процедура ВывестиШапку(ТабличныйДокумент, ОбластьШапка, РеквизитыДокумента, КадровыеДанныеСотрудника, ПараметрыРасчета)
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("СинонимДокумента", 			РеквизитыДокумента.Ссылка.Метаданные().Синоним);
	ЗначенияПараметров.Вставить("НомерДокумента", 				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.НомерДокумента, Истина, Истина));
	ЗначенияПараметров.Вставить("ДатаДокумента", 				Формат(РеквизитыДокумента.ДатаДокумента, "ДЛФ=DD"));
	ЗначенияПараметров.Вставить("ДатаНачалаОтсутствия", 		Формат(РеквизитыДокумента.ДатаНачалаОтсутствия, "ДЛФ=D"));
	ЗначенияПараметров.Вставить("ДатаОкончанияОтсутствия", 		Формат(РеквизитыДокумента.ДатаОкончанияОтсутствия,"ДЛФ=D"));
	ЗначенияПараметров.Вставить("НаименованиеОрганизации", 		?(ЗначениеЗаполнено(РеквизитыДокумента.ПолноеНаименованиеОрганизации), РеквизитыДокумента.ПолноеНаименованиеОрганизации, РеквизитыДокумента.НаименованиеОрганизации)); 		
	ЗначенияПараметров.Вставить("ФИОРаботника", 				КадровыеДанныеСотрудника.ФИОПолные);
	ЗначенияПараметров.Вставить("ТабельныйНомер", 				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(КадровыеДанныеСотрудника.ТабельныйНомер, Истина, Истина));
	
	ЗначенияПараметров.Вставить("ДатаНачалаРасчетногоПериода", 		Формат(ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало,"ДЛФ=D"));
	ЗначенияПараметров.Вставить("ДатаОкончанияРасчетногоПериода", 	Формат(ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание,"ДЛФ=D"));
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьШапка);
КонецПроцедуры

Процедура ВывестиРабочееМесто(ТабличныйДокумент, ОбластьРабочееМесто, КадровыеДанныеСотрудника)
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ВидЗанятости", 	КадровыеДанныеСотрудника.ВидЗанятости);
	ЗначенияПараметров.Вставить("Подразделение", 	КадровыеДанныеСотрудника.Подразделение);
	ЗначенияПараметров.Вставить("Должность", 		КадровыеДанныеСотрудника.Должность);
	
	ЗаполнитьЗначенияСвойств(ОбластьРабочееМесто.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьРабочееМесто);
КонецПроцедуры

Процедура ВывестиЗаработокЗаРасчетныйПериод(ТабличныйДокумент, ОбластьШапкаЗаработка, ОбластьСтрокаЗаработка, ОбластьПодвалЗаработка, ДанныеОЗаработке)
	
	ЗначенияПараметров = Новый Структура;	
	Для каждого СтрокаЗаработка Из ДанныеОЗаработке Цикл
				
		ОбластьШапкаЗаработка.Параметры.ВидЗаработка = Метаданные.Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ЗначенияПеречисления[СтрокаЗаработка.Ключ].Синоним;		
		ТабличныйДокумент.Вывести(ОбластьШапкаЗаработка);
	
		Для Каждого СтрокаМесяцаЗаработка Из СтрокаЗаработка.Значение Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаработка.Параметры, СтрокаМесяцаЗаработка);			
			ЗначенияПараметров.Очистить();
			ЗначенияПараметров.Вставить("Месяц", Формат(СтрокаМесяцаЗаработка.Месяц, "ДФ='MMMM yyyy'"));
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаработка.Параметры, ЗначенияПараметров);
			ТабличныйДокумент.Вывести(ОбластьСтрокаЗаработка);
		КонецЦикла;
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Учтено", УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(СтрокаЗаработка.Значение, "Учтено"));
		ЗаполнитьЗначенияСвойств(ОбластьПодвалЗаработка.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьПодвалЗаработка);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВывестиОтработанноеВремя(ТабличныйДокумент, ОбластьШапкаОтработанногоВремени, ОбластьСтрокаОтработанногоВремени, ОбластьПодвалОтработанногоВремени, ОтработанноеВремя)
	ЗначенияПараметров = Новый Структура;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаОтработанногоВремени);
	
	Для каждого СтрокаОтработанноеВремя Из ОтработанноеВремя Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаОтработанногоВремени.Параметры, СтрокаОтработанноеВремя);
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Месяц", Формат(СтрокаОтработанноеВремя.Месяц, "ДФ='MMMM yyyy'"));
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаОтработанногоВремени.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьСтрокаОтработанногоВремени);
	КонецЦикла;
	
	ЗначенияПараметров.Очистить();
	ЗначенияПараметров.Вставить("ОтработаноДнейКалендарных",	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "ОтработаноДнейКалендарных"));
	ЗначенияПараметров.Вставить("Учтено", 						УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "Учтено"));
	ЗаполнитьЗначенияСвойств(ОбластьПодвалОтработанногоВремени.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьПодвалОтработанногоВремени);
	
КонецПроцедуры

Процедура ВывестиРасчетСреднегоЗаработка(ТабличныйДокумент, ОбластьРасчетСреднегоЗаработка, ДанныеРасчетаСреднего)
		
	ЗначенияПараметров = Новый Структура;
	
	ЗначенияПараметров.Вставить("УчтеноВремени", 	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.ОтработанноеВремя, "Учтено")); 
	ЗначенияПараметров.Вставить("УчтеноЗаработок", 	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.Заработок, "Учтено"));
	ЗначенияПараметров.Вставить("СреднедневнойЗаработок", УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ЗначенияПараметров.УчтеноЗаработок, ЗначенияПараметров.УчтеноВремени)); 
	
	ЗаполнитьЗначенияСвойств(ОбластьРасчетСреднегоЗаработка.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьРасчетСреднегоЗаработка);
	
КонецПроцедуры

Функция ОбластиМакетаСреднегоЗаработка()
	
	ОбластиМакета = Новый Структура;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьФормВоинскойСлужбы.ПФ_MXL_РасчетСреднегоДенежногоДовольствияПособий");
	
	ОбластиМакета.Вставить("Шапка", 							Макет.ПолучитьОбласть("Заголовок")); 
	ОбластиМакета.Вставить("ЗаголовокНачислений", 				Макет.ПолучитьОбласть("ЗаголовокНачислений")); 
	ОбластиМакета.Вставить("ОбластьРасчетСреднегоЗаработка", 	Макет.ПолучитьОбласть("РасчетСреднегоЗаработка"));
	ОбластиМакета.Вставить("ОбластьШапкаЗаработка",  			Макет.ПолучитьОбласть("ЗаработокШапка"));
	ОбластиМакета.Вставить("ОбластьСтрокаЗаработка",  			Макет.ПолучитьОбласть("ЗаработокСтрока"));
	ОбластиМакета.Вставить("ОбластьПодвалЗаработка",  			Макет.ПолучитьОбласть("ЗаработокПодвал"));
	ОбластиМакета.Вставить("ОбластьРабочееМесто",  				Макет.ПолучитьОбласть("РабочееМесто"));
	
	ОбластиМакета.Вставить("ОбластьШапкаОтработанногоВремени",  Макет.ПолучитьОбласть("ОтработанноеВремяШапка"));
	ОбластиМакета.Вставить("ОбластьСтрокаОтработанногоВремени", Макет.ПолучитьОбласть("ОтработанноеВремяСтрока"));
	ОбластиМакета.Вставить("ОбластьПодвалОтработанногоВремени", Макет.ПолучитьОбласть("ОтработанноеВремяПодвал"));
	
	Возврат ОбластиМакета;
	
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Если МассивСтруктур.Количество() = 0 Тогда
		Возврат ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого Свойство Из МассивСтруктур[0] Цикл
		ТаблицаЗначений.Колонки.Добавить(Свойство.Ключ);
	КонецЦикла;
	
	Для каждого Элемент Из МассивСтруктур Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), Элемент);
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ПреобразоватьДанныеОЗаработкеВТаблицыЗначений(ДанныеОЗаработке)
	
	ЗаработокСРазбивкой = Новый Соответствие();
	Для Каждого ПорядокВхожденияВРасчетСреднегоДенежногоДовольствия Из Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим Цикл
		ЗаработокСРазбивкой.Вставить(ПорядокВхожденияВРасчетСреднегоДенежногоДовольствия, Новый Массив);	
	КонецЦикла;
	
	Для каждого СтрокаЗаработка Из ДанныеОЗаработке Цикл
		ЗаработокСРазбивкой[СтрокаЗаработка.СоставнаяЧасть].Добавить(СтрокаЗаработка);
	КонецЦикла;		
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого ЭлементЗаработка ИЗ ЗаработокСРазбивкой Цикл
		ТаблицаЗаработка = МассивСтруктурВТаблицуЗначений(ЭлементЗаработка.Значение);		
		Если ТаблицаЗаработка.Количество() > 0 Тогда
			ТаблицаЗаработка.Сортировать("Месяц");	
			СтруктураРезультат.Вставить(ОбщегоНазначения.ИмяЗначенияПеречисления(ЭлементЗаработка.Ключ),ТаблицаЗаработка);	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ПреобразоватьДанныеОВремениВТаблицуЗначений(ОтработанноеВремя)
	
	ОтработанноеВремя = МассивСтруктурВТаблицуЗначений(ОтработанноеВремя);  	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		ОтработанноеВремя.Сортировать("Месяц");		
	КонецЕсли;
	
	Возврат ОтработанноеВремя;	
	
КонецФункции


#КонецОбласти

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если МассивОбъектов.Количество() < 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета РасчетСреднегоЗаработка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РасчетСохраняемогоДенежногоДовольствия") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ТабличныйДокумент = ТабличныйДокументРасчетаСохраняемогоДенежногоДовольствия(МассивОбъектов, ОбъектыПечати, "ПФ_MXL_РасчетСохраняемогоДенежногоДовольствия");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_РасчетСохраняемогоДенежногоДовольствия", НСтр("ru = 'Расчет сохраняемого денежного довольствия'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#Область РасчетСохраняемогоДенежногоДовольствия

Функция ОписаниеДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("Ссылка");
	Описание.Вставить("ЗаголовокФормы", НСтр("ru='Расчет денежного довольствия'"));
	Описание.Вставить("ПредставлениеДокумента", "");
	Описание.Вставить("НаименованиеОрганизации");
	Описание.Вставить("ФИОПолные");
	Описание.Вставить("ТабельныйНомер");
	Описание.Вставить("ДатаНачалаРасчетногоПериода");
	Описание.Вставить("ДатаОкончанияРасчетногоПериода");
	Описание.Вставить("СохраняемоеДенежноеДовольствие", 0);
	Описание.Вставить("ЗаголовокТаблицыПлановыеНачисления", НСтр("ru='Денежное довольствие учитываемое в полном размере'"));
	Описание.Вставить("РезультатыРасчета",  ОписаниеРезультатРасчета());
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеРезультатРасчета()
	
	Описание = Новый Структура;
	Описание.Вставить("ДенежноеСодержание", Новый Массив);
	Описание.Вставить("ПрочиеВыплаты", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеСтрокиДенежногоДовольствия()
	
	Описание = Новый Структура;
	
	Описание.Вставить("Начисление");
	Описание.Вставить("ИдентификаторСтрокиВидаРасчета");
	Описание.Вставить("Результат");
	Описание.Вставить("ФиксРасчет");
	
	Возврат Описание;
	
КонецФункции

Функция ДанныеДляПечатиРасчетаСохраняемогоДенежногоДовольствия(МассивОбъектов)
	
	ДанныеДляПечати = Новый Соответствие;
	
	СоответствиеОбъектовМетаданным = Новый Соответствие;
	
	Для каждого ВыводимыйДокумент Из МассивОбъектов Цикл
		
		МДДокумента = ВыводимыйДокумент.Метаданные();
		
		КоллекцияОбъектов = СоответствиеОбъектовМетаданным.Получить(МДДокумента);
		Если КоллекцияОбъектов = Неопределено Тогда
			КоллекцияОбъектов = Новый Массив;
		КонецЕсли; 
		КоллекцияОбъектов.Добавить(ВыводимыйДокумент);
		
		СоответствиеОбъектовМетаданным.Вставить(МДДокумента, КоллекцияОбъектов);
		
	КонецЦикла;
		
	Для каждого ЭлементКоллекции Из СоответствиеОбъектовМетаданным Цикл
		
		МДДокумента  = ЭлементКоллекции.Ключ;
		ИмяДокумента = МДДокумента.Имя;
		СписокДокументов = ЭлементКоллекции.Значение;
		
		ОтборСтрокПоДокументу = Новый Структура("ССылка");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка,
		|	ТаблицаДокументов.Ссылка.Номер КАК Номер,
		|	ТаблицаДокументов.Ссылка.Дата КАК Дата,
		|	ТаблицаДокументов.Ссылка.Дата КАК Период,
		|	ВЫРАЗИТЬ(ТаблицаДокументов.Ссылка.Организация КАК Справочник.Организации).НаименованиеПолное КАК НаименованиеОрганизации,
		|	ТаблицаДокументов.Сотрудник,
		|	ТаблицаДокументов.ДатаНачала КАК ПериодРасчетаСреднегоЗаработкаНачало,
		|	ТаблицаДокументов.ДатаОкончания КАК ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ТаблицаДокументов.СохраняемоеДенежноеДовольствие
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&СписокДокументов)";
					
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокументов", "Документ." + ИмяДокумента);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
				Запрос.МенеджерВременныхТаблиц,
				"ВТДанныеДокументов");
				
			КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "ФИОПолные,ТабельныйНомер");
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеДокументов.Ссылка,
			|	ДанныеДокументов.Номер,
			|	ДанныеДокументов.Дата,
			|	ДанныеДокументов.Период,
			|	ДанныеДокументов.НаименованиеОрганизации,
			|	ДанныеДокументов.Сотрудник,
			|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаНачало,
			|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаОкончание,
			|	ДанныеДокументов.СохраняемоеДенежноеДовольствие,
			|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
			|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер
			|ИЗ
			|	ВТДанныеДокументов КАК ДанныеДокументов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
			|		ПО ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
			|			И ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
				
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Описание = ОписаниеДокумента();
				ЗаполнитьЗначенияСвойств(Описание, Выборка);
				
				Описание.ПредставлениеДокумента = МДДокумента.Синоним + " №"
				+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина)
				+ " " + НСтр("ru='от'") + " " + Формат(Выборка.Дата, "ДЛФ=DD");
				
				Описание.ДатаНачалаРасчетногоПериода = Формат(Выборка.ПериодРасчетаСреднегоЗаработкаНачало, "ДЛФ=DD");
				Описание.ДатаОкончанияРасчетногоПериода = Формат(Выборка.ПериодРасчетаСреднегоЗаработкаОкончание, "ДЛФ=DD");
				
				Описание.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.ТабельныйНомер, Истина, Истина);
				
				ЗаполнитьЗначенияСвойств(ОтборСтрокПоДокументу,Выборка);
				
				ДанныеДляПечати.Вставить(Выборка.Ссылка, Описание);
				
			КонецЦикла;
						
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокументовДенежноеДовольствие.Ссылка КАК Ссылка,
			|	ТаблицаДокументовДенежноеДовольствие.НомерСтроки КАК НомерСтроки,
			|	ТаблицаДокументовДенежноеДовольствие.Сотрудник,
			|	ТаблицаДокументовДенежноеДовольствие.Начисление,
			|	ТаблицаДокументовДенежноеДовольствие.ИдентификаторСтрокиВидаРасчета,
			|	ТаблицаДокументовДенежноеДовольствие.Результат,
			|	ТаблицаДокументовДенежноеДовольствие.ФиксРасчет
			|ИЗ
			|	&ТаблицаДокументовДенежноеДовольствие КАК ТаблицаДокументовДенежноеДовольствие
			|ГДЕ
			|	ТаблицаДокументовДенежноеДовольствие.Ссылка В(&СписокДокументов)
			|	И ТаблицаДокументовДенежноеДовольствие.Результат <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокументовДенежноеДовольствие", "Документ." + ИмяДокумента + ".ДенежноеДовольствие");
				
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
					
					Описание = ДанныеДляПечати.Получить(Выборка.Ссылка);
					Если Описание <> Неопределено Тогда
						
						РезультатыРасчета = Описание.РезультатыРасчета;
						
						СписокДенежноеДовольствие = Новый Массив;
						Пока Выборка.Следующий() Цикл
							
							ОписаниеСтроки = ОписаниеСтрокиДенежногоДовольствия();
							ЗаполнитьЗначенияСвойств(ОписаниеСтроки, Выборка);
							
							РезультатыРасчета.ДенежноеСодержание.Добавить(ОписаниеСтроки);
							
						КонецЦикла; 
													
						ДанныеДляПечати.Вставить(Выборка.Ссылка, Описание);
						
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТабличныйДокументРасчетаСохраняемогоДенежногоДовольствия(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ПрочиеНачисления = Новый Соответствие;
	ПрочиеНачисления.Вставить(РасчетЗарплаты.НачислениеРайонныйКоэффициент(),  Истина);
	ПрочиеНачисления.Вставить(РасчетЗарплаты.НачислениеСевернаяНадбавка(),  Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСохраняемогоДенежногоДовольствия";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьФормВоинскойСлужбы.ПФ_MXL_РасчетСохраняемогоДенежногоДовольствия");
	
	СекцияШапка = 					Макет.ПолучитьОбласть("Шапка");
	СекцияШапкаНазначениеРасчета = 	Макет.ПолучитьОбласть("ЗаголовокНазначениеРасчета");
	СекцияСтрокаНачисления = 		Макет.ПолучитьОбласть("СтрокаНачисления");
	СекцияИтогНачисления = 			Макет.ПолучитьОбласть("ИтогНачисления");
	СекцияПодвал = 					Макет.ПолучитьОбласть("Подвал");
	СекцияШапкаПлановыеНачисления = Макет.ПолучитьОбласть("ШапкаПлановыеНачисления");
	СекцияШапкаПрочиеНачисления = 	Макет.ПолучитьОбласть("ШапкаПрочиеНачисления");
		
	ОтборСтрокПоказателей = Новый Структура("Ссылка, ИдентификаторСтрокиВидаРасчета");
	
	ДанныеДляПечати = ДанныеДляПечатиРасчетаСохраняемогоДенежногоДовольствия(МассивОбъектов);
	
	Для каждого ОписаниеДанных Из ДанныеДляПечати Цикл
		
		Ссылка = ОписаниеДанных.Ключ;
		ДанныеДокумента = ОписаниеДанных.Значение;
				
		РезультатыРасчета = ДанныеДокумента.РезультатыРасчета;
		
		//Для каждого РезультатРасчетаКлючИЗначение Из РезультатыРасчета Цикл
		//					
		//	РезультатРасчета = РезультатРасчетаКлючИЗначение.Значение;
		//	
		//	Если РезультатРасчета = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
			ОписаниеРасчета = "";
			
			Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли; 
			
			СекцияШапка.Параметры.Заполнить(ДанныеДокумента);
			ТабличныйДокумент.Вывести(СекцияШапка);
			ТабличныйДокумент.Вывести(СекцияШапкаНазначениеРасчета);
							
			Если РезультатыРасчета.ДенежноеСодержание.Количество() > 0 Тогда
				
				Итог = 0;
				ВыводиласьШапка = Ложь;
				Для каждого ОписаниеДС Из РезультатыРасчета.ДенежноеСодержание Цикл
					
					Если ПрочиеНачисления.Получить(ОписаниеДС.Начисление) <> Неопределено Тогда
						РезультатыРасчета.ПрочиеВыплаты.Добавить(ОписаниеДС);
						Продолжить;
					КонецЕсли; 
					
					Если Не ВыводиласьШапка Тогда
						
						ВыводиласьШапка = Истина;
						СекцияШапкаПлановыеНачисления.Параметры.Заполнить(ДанныеДокумента);
						ТабличныйДокумент.Вывести(СекцияШапкаПлановыеНачисления);
						
					КонецЕсли; 
					
					СекцияСтрокаНачисления.Параметры.ВидРасчета = ОписаниеДС.Начисление;
					СекцияСтрокаНачисления.Параметры.Результат = ОписаниеДС.Результат;
					ТабличныйДокумент.Вывести(СекцияСтрокаНачисления);
					
					Итог = Итог + ОписаниеДС.Результат;
					
				КонецЦикла;
				
				Если ВыводиласьШапка Тогда
					
					СекцияИтогНачисления.Параметры.Итог = Итог;
					ТабличныйДокумент.Вывести(СекцияИтогНачисления);
					
					ОписаниеРасчета = Формат(Итог, "ЧДЦ=2");
					
				КонецЕсли; 
				
				Если РезультатыРасчета.ПрочиеВыплаты.Количество() > 0 Тогда
					
					Итог = 0;
					ВыводиласьШапка = Ложь;
					Для каждого ОписаниеДС Из РезультатыРасчета.ПрочиеВыплаты Цикл
						
						Если Не ВыводиласьШапка Тогда
							
							ВыводиласьШапка = Истина;
							СекцияШапкаПрочиеНачисления.Параметры.Заполнить(ДанныеДокумента);
							ТабличныйДокумент.Вывести(СекцияШапкаПрочиеНачисления);
							
						КонецЕсли; 
						
						СекцияСтрокаНачисления.Параметры.ВидРасчета = ОписаниеДС.Начисление;
						СекцияСтрокаНачисления.Параметры.Результат = ОписаниеДС.Результат;
						ТабличныйДокумент.Вывести(СекцияСтрокаНачисления);
						
						Итог = Итог + ОписаниеДС.Результат;
						
					КонецЦикла;
					
					СекцияИтогНачисления.Параметры.Итог = Итог;
					ТабличныйДокумент.Вывести(СекцияИтогНачисления);
					
					ОписаниеРасчета = ?(ПустаяСтрока(ОписаниеРасчета), "", ОписаниеРасчета + " + ") + Формат(Итог, "ЧДЦ=2");
					
				КонецЕсли; 

				
				Сумма = ДанныеДокумента.СохраняемоеДенежноеДовольствие;
				
				СтрокаРезультат =
				НСтр("ru='Сумма сохраняемого денежного довольствия за полный месяц составляет'") + ": " + Символы.ПС
				+ ОписаниеРасчета + ?(ПустаяСтрока(ОписаниеРасчета), "", " = ") + Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + НСтр("ru='руб'") + ".";
				
				СекцияПодвал.Параметры.СтрокаРезультат = СтрокаРезультат;
				
				ТабличныйДокумент.Вывести(СекцияПодвал);
				
			КонецЕсли;
		//КонецЦикла;				
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли