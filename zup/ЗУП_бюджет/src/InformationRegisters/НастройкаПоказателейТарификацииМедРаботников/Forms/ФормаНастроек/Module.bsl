
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА") Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОбновитьДеревоНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаПорядка

&НаКлиенте
Процедура НастройкаПоказателейИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаПоказателей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Уровень > 0 Тогда
		
		СнятьПометку();
		
		СтрокаРодителя = ТекущиеДанные.ПолучитьРодителя();
		СформироватьПредставлениеСтрокиДерева(СтрокаРодителя, СтрокаРодителя.ПолучитьЭлементы());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьНаСервере();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого СтрокаКоэффициента Из НастройкаПоказателей.ПолучитьЭлементы() Цикл
		Элементы.НастройкаПоказателей.Развернуть(СтрокаКоэффициента.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого СтрокаКоэффициента Из НастройкаПоказателей.ПолучитьЭлементы() Цикл
		Элементы.НастройкаПоказателей.Свернуть(СтрокаКоэффициента.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранные(Команда)
	
	ЗадаватьВопрос = Модифицированность;
	
	Если ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Сохранить текущие изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ПоказатьТолькоВыбранныеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе 
		
		ПоказатьТолькоВыбранныеЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ЗаписатьИОбновитьДеревоНастроек();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	Иначе
		ТолькоВыбранныеПоказатели();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаписатьНаСервере()
		
	НаборЗаписей = РегистрыСведений.НастройкаПоказателейТарификацииМедРаботников.СоздатьНаборЗаписей();
	
	Для каждого СтрокаКоэффициента Из НастройкаПоказателей.ПолучитьЭлементы() Цикл
		
		СтрокиПоказателей = СтрокаКоэффициента.ПолучитьЭлементы();
		КоэффициентСсылка = Перечисления.ПоказателиТарификацииМедРаботников[СтрокаКоэффициента.Имя];
		
		Для каждого СтрокаПоказателя Из СтрокиПоказателей Цикл 
			
			ПрежнийКоэффициент = ТекущееСоответствиеПоказателей.Получить(СтрокаПоказателя.Имя); 
			
			Если Не СтрокаПоказателя.Используется И КоэффициентСсылка <> ПрежнийКоэффициент Тогда
				Продолжить;
			ИначеЕсли СтрокаПоказателя.Используется <> (КоэффициентСсылка = ПрежнийКоэффициент) Тогда
				
				ПоказательСсылка = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору(СтрокаПоказателя.Имя);

				НаборЗаписей.Отбор.Показатель.Установить(ПоказательСсылка);
				НаборЗаписей.Прочитать();
						
				Если НаборЗаписей.Количество() = 0 Тогда
					Запись = НаборЗаписей.Добавить();
				Иначе
					Запись = НаборЗаписей[0];
				КонецЕсли;
				
				Если Не СтрокаПоказателя.Используется И Запись.ПоказательТарификации = КоэффициентСсылка Тогда
					
					НаборЗаписей.Удалить(Запись);
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
				Если СтрокаПоказателя.Используется Тогда
					
					Запись.Показатель = ПоказательСсылка;
					Запись.ПоказательТарификации = КоэффициентСсылка;
					
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоНастроек()
	
	ПоказатьТолькоВыбранные = Элементы.ПоказатьТолькоВыбранные.Пометка;
	
	ДеревоНастроек = ДанныеФормыВЗначение(НастройкаПоказателей, Тип("ДеревоЗначений"));
	
	СтрокиДерева = ДеревоНастроек.Строки;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиТарификацииМедРаботников.Ссылка
	|ИЗ
	|	Перечисление.ПоказателиТарификацииМедРаботников КАК ПоказателиТарификацииМедРаботников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкаПоказателейТарификацииМедРаботников.ПоказательТарификации,
	|	НастройкаПоказателейТарификацииМедРаботников.Показатель.Идентификатор КАК ПоказательИдентификатор
	|ИЗ
	|	РегистрСведений.НастройкаПоказателейТарификацииМедРаботников КАК НастройкаПоказателейТарификацииМедРаботников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка,
	|	ПоказателиРасчетаЗарплаты.ТипПоказателя,
	|	ПоказателиРасчетаЗарплаты.Идентификатор,
	|	ПоказателиРасчетаЗарплаты.Наименование
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Числовой)
	|	И ПоказателиРасчетаЗарплаты.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	|	И НЕ ПоказателиРасчетаЗарплаты.НеИспользуется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка,
	|	ПоказателиРасчетаЗарплаты.ТипПоказателя,
	|	ПоказателиРасчетаЗарплаты.Идентификатор,
	|	ПоказателиРасчетаЗарплаты.Наименование
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|	И НЕ ПоказателиРасчетаЗарплаты.НеИспользуется";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоказателейТарификации 	= Результаты[Результаты.Количество() - 4].Выбрать();
	ВыборкаСоответствияПоказателей 	= Результаты[Результаты.Количество() - 3].Выбрать();
	ВыборкаПроцентныхПоказателей 	= Результаты[Результаты.Количество() - 2].Выбрать();
	ВыборкаПоказателейСтажа 		= Результаты[Результаты.Количество() - 1].Выбрать();
	
	СоответствиеПоказателей = Новый Соответствие;
	
	Пока ВыборкаСоответствияПоказателей.Следующий() Цикл
		СоответствиеПоказателей.Вставить(ВыборкаСоответствияПоказателей.ПоказательИдентификатор, ВыборкаСоответствияПоказателей.ПоказательТарификации);
	КонецЦикла;
	
	ТекущееСоответствиеПоказателей = Новый ФиксированноеСоответствие(СоответствиеПоказателей);
	
	ОбъектМетаданных = Метаданные.Перечисления.ПоказателиТарификацииМедРаботников;

	Пока ВыборкаПоказателейТарификации.Следующий() Цикл
		
		ЗначениеПеречисления = ОбъектМетаданных.ЗначенияПеречисления[Перечисления.ПоказателиТарификацииМедРаботников.Индекс(ВыборкаПоказателейТарификации.Ссылка)];
		
		ИмяЗначения   = ЗначениеПеречисления.Имя;
		Представление = ЗначениеПеречисления.Синоним;
		
		Если ВыборкаПоказателейТарификации.Ссылка = ПредопределенноеЗначение("Перечисление.ПоказателиТарификацииМедРаботников.ПроцентНадбавкиЗаВыслугуЛет") Тогда
			СтрокаКоэффициента = ДобавитьСтрокиПоказателей(СтрокиДерева, ИмяЗначения, Представление, ВыборкаПоказателейСтажа);
		Иначе
			ВыборкаПроцентныхПоказателей.Сбросить();
			СтрокаКоэффициента = ДобавитьСтрокиПоказателей(СтрокиДерева, ИмяЗначения, Представление, ВыборкаПроцентныхПоказателей);
		КонецЕсли;
				
		СтруктураПоиска = Новый Структура("ПоказательТарификации", ВыборкаПоказателейТарификации.Ссылка);
		
		ВыборкаСоответствияПоказателей.Сбросить();
		Пока ВыборкаСоответствияПоказателей.НайтиСледующий(СтруктураПоиска) Цикл
			
			СтрокаПоказателя = НайтиПоИмени(СтрокаКоэффициента.Строки, ВыборкаСоответствияПоказателей.ПоказательИдентификатор);
			
			Если СтрокаПоказателя <> Неопределено Тогда
				СтрокаПоказателя.Используется = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		СформироватьПредставлениеСтрокиДерева(СтрокаКоэффициента, СтрокаКоэффициента.Строки);
		
	КонецЦикла;

	ПодготовитьДеревоНастроек(СтрокиДерева, ПоказатьТолькоВыбранные);
	
	СтрокиДерева.Сортировать("Уровень, Представление", Истина);
	
	ЗначениеВДанныеФормы(ДеревоНастроек, НастройкаПоказателей);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДеревоНастроек(Коллекция, ПоказатьТолькоВыбранные)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		
		ТекущаяСтрока = Коллекция[Индекс];
		
		ПодготовитьДеревоНастроек(ТекущаяСтрока.Строки, ПоказатьТолькоВыбранные);
		
		Если ТекущаяСтрока.Уровень = 0 Тогда
			Если ПоказатьТолькоВыбранные И ТекущаяСтрока.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			Если ПоказатьТолькоВыбранные И Не ТекущаяСтрока.Используется Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИОбновитьДеревоНастроек()
	
	ЗаписатьНаСервере();
	ТолькоВыбранныеПоказатели();
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокиПоказателей(Коллекция, ИмяЗначения, Представление, ВыборкаПоказателей)
	
	СтрокаКоэффициента = НайтиПоИмени(Коллекция, ИмяЗначения);
	
	Если СтрокаКоэффициента = Неопределено Тогда
		
		СтрокаКоэффициента = Коллекция.Добавить();
		СтрокаКоэффициента.Представление = Представление;
		СтрокаКоэффициента.Имя = ИмяЗначения;
		СтрокаКоэффициента.Уровень = 0;
		
	КонецЕсли;
	
	Пока ВыборкаПоказателей.Следующий() Цикл
		
		СтрокаПоказателя = НайтиПоИмени(СтрокаКоэффициента.Строки, ВыборкаПоказателей.Идентификатор);
		Если СтрокаПоказателя = Неопределено Тогда
			СтрокаПоказателя = СтрокаКоэффициента.Строки.Добавить();
			СтрокаПоказателя.Представление = ВыборкаПоказателей.Наименование;
			СтрокаПоказателя.Имя = ВыборкаПоказателей.Идентификатор;
			СтрокаПоказателя.Уровень = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаКоэффициента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИмени(Коллекция, Имя)
	
	НайденнаяСтрока = Неопределено;
	Для каждого СтрокаКоллекции Из Коллекция Цикл
		
		Если СтрокаКоллекции.Имя = Имя Тогда
			НайденнаяСтрока = СтрокаКоллекции;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура СнятьПометку()
	
	ТекущиеДанные = НастройкаПоказателей.НайтиПоИдентификатору(Элементы.НастройкаПоказателей.ТекущаяСтрока);
	Используется = ТекущиеДанные.Используется;
	
	Если Используется Тогда
		
		СтрокиКоэффициентов = НастройкаПоказателей.ПолучитьЭлементы();
		
		Для каждого СтрокаКоэффициента Из СтрокиКоэффициентов Цикл
			
			СтрокаПоказателя = НайтиПоИмени(СтрокаКоэффициента.ПолучитьЭлементы(), ТекущиеДанные.Имя);
			
			Если СтрокаПоказателя <> Неопределено И СтрокаПоказателя <> ТекущиеДанные Тогда
				СтрокаПоказателя.Используется = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСтрокиДерева(Строка, ПодчиненныеСтроки)
	
	СтрокаПредставления = "";
	Для каждого ТекущаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ТекущаяСтрока.Используется Тогда
			СтрокаПредставления = ?(ПустаяСтрока(СтрокаПредставления), "", СтрокаПредставления + ", ") + ТекущаяСтрока.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	ПозицияСкобки = СтрНайти(Строка.Представление, "(");
	Если ПозицияСкобки > 0 Тогда
		Строка.Представление = СокрЛП(Лев(Строка.Представление, ПозицияСкобки - 1));
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаПредставления) Тогда
		Строка.Представление = Строка.Представление + " (" + СтрокаПредставления + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТолькоВыбранныеПоказатели()
	
	Элементы.ПоказатьТолькоВыбранные.Пометка =
		Не Элементы.ПоказатьТолькоВыбранные.Пометка;
	
	ОбновитьДеревоНастроек();
	
КонецПроцедуры

#КонецОбласти
