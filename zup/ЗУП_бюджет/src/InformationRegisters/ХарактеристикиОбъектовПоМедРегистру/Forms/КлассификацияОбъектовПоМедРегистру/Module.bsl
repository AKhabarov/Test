
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеСпискаИменОбъектов();
		
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого Тип Из ИменаОбъектов Цикл
		Элементы.ТекущийОбъектМетаданных.СписокВыбора.Добавить(Тип.ПолноеИмя, Тип.ПолныйСиноним);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ПредыдущийОбъектМетаданных = ТекущийОбъектМетаданных;

	СохранениеИзмененийНаСервере();
		
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущийОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийОбъектМетаданных = ТекущийОбъектМетаданных;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийОбъектМетаданныхПриИзменении(Элемент)
		
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");

		Оповещение = Новый ОписаниеОповещения("ТекущийОбъектМетаданныхПриИзмененииЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
	Иначе	
		ТекущийОбъектМетаданныхПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХарактеризуемыеОбъекты

&НаКлиенте
Процедура ХарактеризуемыеОбъектыОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ХарактеризуемыеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Поле.Имя = "ХарактеризуемыеОбъектыОбъект" Тогда
		
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			СтандартнаяОбработка = Не Элемент.ТекущиеДанные.ЭтоГруппа;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеризуемыеОбъектыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
			Отказ = Истина;
			ПоказатьЗначение(, Элемент.ТекущиеДанные.Объект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	Если Модифицированность Тогда
		
		ПредыдущийОбъектМетаданных = ТекущийОбъектМетаданных;
		
		СохранениеИзмененийНаСервере();
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сопоставить(Команда)
	
	ПредыдущийОбъектМетаданных = ТекущийОбъектМетаданных;

	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Сохранить изменения?'");

		Оповещение = Новый ОписаниеОповещения("СопоставитьЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
	Иначе	
		СопоставитьЗначенияИОбновитьТаблицу();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДляФормы

&НаСервере
Процедура ЗаполнениеСпискаИменОбъектов()
	
	ОписаниеХарактеристик = РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.ХарактеристикиОбъектовМетаданныхДляМедРегистра();
	ТипыОбъектов = ОписаниеХарактеристик.Скопировать(, "ТипОбъектаМетаданных");
	ТипыОбъектов.Свернуть("ТипОбъектаМетаданных");
	
	Для Каждого Тип Из ТипыОбъектов Цикл
		
		ОписаниеТипа = Медицина.СвойстваОбъектаМетаданных(Тип.ТипОбъектаМетаданных);
		ЗаполнитьЗначенияСвойств(ИменаОбъектов.Добавить(), ОписаниеТипа);
		
	КонецЦикла;
	
	ИменаОбъектов.Сортировать("ПолноеИмя");

КонецПроцедуры // ЗаполнениеСпискаИменОбъектов()

&НаСервере
Процедура ЗаполнитьТаблицуХарактеризуемыхОбъектов()

	ХарактеризуемыеОбъекты.ПолучитьЭлементы().Очистить();
	
	Если Не ЗначениеЗаполнено(ТекущийОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлениеВозможно = Ложь;
	
	// Описание добавляемых элементов.
	ОписаниеОбъекта      = ИменаОбъектов.НайтиСтроки(Новый Структура("ПолноеИмя", ТекущийОбъектМетаданных))[0];
	СтрокаТипОбъекта	 = ОписаниеОбъекта.ТипОбъекта;
	СинонимОбъекта       = ОписаниеОбъекта.ПредставлениеОбъекта;
	ТаблицаХарактеристик = РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.ХарактеристикиОбъектаМетаданныхДляРегистра(Тип(СтрокаТипОбъекта));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ХарактеризуемыеОбъектыОбъект",
		"Заголовок",
		СинонимОбъекта);
	
	// Подготовим массив удаляемых Реквизитов формы.
	// Заодно и удалим все программно созданные поля формы.
	МассивУдаляемыхРеквизитов = Новый Массив;
	ХарактеризуемыеОбъектыЗначение = РеквизитФормыВЗначение("ХарактеризуемыеОбъекты", Тип("ДеревоЗначений"));
	Для Каждого Колонка Из ХарактеризуемыеОбъектыЗначение.Колонки Цикл
	
		Если Колонка.Имя = "Объект" 
			Или Колонка.Имя = "ЭтоГруппа"
			Или Колонка.Имя = "СтандартнаяКартинка" Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивУдаляемыхРеквизитов.Добавить("ХарактеризуемыеОбъекты." + Колонка.Имя);
		
		// Удалим поле формы
		ЭлементФормыКолонка = Элементы.Найти("ХарактеризуемыеОбъекты" + Колонка.Имя);
		Если ЭлементФормыКолонка <> Неопределено Тогда
			Элементы.Удалить(ЭлементФормыКолонка);
		КонецЕсли;
		
	КонецЦикла; 
	
	// Соберем таблицу Характеристик объектов 
	// + подготовим массив добавляемых реквизитов формы.
	
	МассивДобавляемыхРеквизитов = Новый Массив;	
	
	ТекстЗапроса = "ВЫБРАТЬ
		| СписокОбъектов.Ссылка КАК Объект";
	Если ОписаниеОбъекта.ЕстьВладелец Тогда
	    ТекстЗапроса = ТекстЗапроса +",
		    | СписокОбъектов.Владелец КАК Владелец";
	КонецЕсли;
		
	Если ОписаниеОбъекта.ИерархияГрупп Тогда // Иерархический справочник с иерархией групп.
		ТекстЗапроса = ТекстЗапроса +",
		    |   СписокОбъектов.ЭтоГруппа КАК ЭтоГруппа,
            |	ВЫБОР
            |		КОГДА СписокОбъектов.ЭтоГруппа
            |				И СписокОбъектов.ПометкаУдаления
            |			ТОГДА 1
            |		КОГДА СписокОбъектов.ЭтоГруппа
            |				И СписокОбъектов.Предопределенный
            |			ТОГДА 2
            |		КОГДА СписокОбъектов.ЭтоГруппа
            |			ТОГДА 0
            |		КОГДА СписокОбъектов.ПометкаУдаления
            |			ТОГДА 4
            |		КОГДА СписокОбъектов.Предопределенный
            |			ТОГДА 5
            |		ИНАЧЕ 3
            |	КОНЕЦ КАК СтандартнаяКартинка";
	ИначеЕсли ОписаниеОбъекта.ЭтоСправочник Тогда // Справочник (могут быть помеченные на удаление элементы).
		ТекстЗапроса = ТекстЗапроса +",
		    |   ЛОЖЬ КАК ЭтоГруппа,
            |	ВЫБОР
            |		КОГДА СписокОбъектов.ПометкаУдаления
            |			ТОГДА 4
            |		КОГДА СписокОбъектов.Предопределенный
            |			ТОГДА 5
            |		ИНАЧЕ 3
            |	КОНЕЦ КАК СтандартнаяКартинка";
	Иначе										// перечисление
        ТекстЗапроса = ТекстЗапроса +",
		    |   ЛОЖЬ КАК ЭтоГруппа,
            |	3 КАК СтандартнаяКартинка";
	КонецЕсли;				
			
	ТекстЗапросаИЗ = "
    |ИЗ
    |	" + ТекущийОбъектМетаданных + " КАК СписокОбъектов";		
	
	Для Каждого Характеристика Из ТаблицаХарактеристик Цикл
					
		ТекстЗапроса = ТекстЗапроса + ",
			| ЕСТЬNULL(КлассификацияОбъектовДляМедРегистра_" + Характеристика.КодКлассификатора + ".Характеристика, ЗНАЧЕНИЕ(Справочник.ЭлементыКлассификаторовМедРегистра.ПустаяСсылка)) КАК " + Характеристика.КодКлассификатора;
			
	    ТекстЗапросаИЗ = ТекстЗапросаИЗ + "
            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиОбъектовПоМедРегистру КАК КлассификацияОбъектовДляМедРегистра_" + Характеристика.КодКлассификатора + "
            |		ПО СписокОбъектов.Ссылка = КлассификацияОбъектовДляМедРегистра_" + Характеристика.КодКлассификатора + ".Объект
			|        И КлассификацияОбъектовДляМедРегистра_" + Характеристика.КодКлассификатора + ".Классификатор = Значение(Справочник.КлассификаторыМедРегистра." + Характеристика.КодКлассификатора + ")";
			
			
		НовыйРеквизит = Новый РеквизитФормы(Характеристика.КодКлассификатора, Новый ОписаниеТипов("СправочникСсылка.ЭлементыКлассификаторовМедРегистра"), "ХарактеризуемыеОбъекты");
	    МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		СопоставлениеВозможно = Макс(СопоставлениеВозможно, Характеристика.ЭлементыСопоставимы);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаИЗ;
	
	Если ОписаниеОбъекта.Иерархический Тогда 
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Объект ИЕРАРХИЯ";
					
	ИначеЕсли ОписаниеОбъекта.ЕстьВладелец Тогда
					
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ИТОГИ ПО
			|	Владелец";
					
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеСправочника = Запрос.Выполнить().Выгрузить(?(ОписаниеОбъекта.Иерархический Или ОписаниеОбъекта.ЕстьВладелец, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ОбходРезультатаЗапроса.Прямой));

	// Изменяем состав реквизитов формы.
	Если (МассивДобавляемыхРеквизитов.Количество() + МассивУдаляемыхРеквизитов.Количество()) Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	// Заполняем дерево ХарактеризуемыеОбъекты.
	Если ОписаниеОбъекта.ЕстьВладелец Тогда
		Если ОписаниеОбъекта.ПолноеИмя = "Справочник.ПодразделенияОрганизаций" Тогда
			ВыборкаОрганизаций = Справочники.Организации.Выбрать();
			КоллекцияЭлементовДерева = ХарактеризуемыеОбъекты.ПолучитьЭлементы();
			Пока ВыборкаОрганизаций.Следующий() Цикл
				ДанныеПоОрганизации = ДанныеСправочника.Строки.НайтиСтроки(Новый Структура("Владелец", ВыборкаОрганизаций.Ссылка));
				Если ДанныеПоОрганизации.Количество() Тогда
					ЭлементВладелец = КоллекцияЭлементовДерева.Добавить();
					ЭлементВладелец.Объект = ВыборкаОрганизаций.Ссылка;
					ЭлементВладелец.ЭтоГруппа = Истина;
					ЭлементВладелец.СтандартнаяКартинка = 6;
					
					КоллекцияВладельца = ЭлементВладелец.ПолучитьЭлементы(); 
					Для Каждого СтрокиПоОрганизации Из ДанныеПоОрганизации Цикл
						ЭлементДерева = КоллекцияВладельца.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементДерева, СтрокиПоОрганизации);
						Если СтрокиПоОрганизации.Строки.Количество() Тогда
							ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ЭлементДерева.ПолучитьЭлементы(), СтрокиПоОрганизации);
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;
		Иначе
			КоллекцияЭлементовДерева = ХарактеризуемыеОбъекты.ПолучитьЭлементы();
			Владельцы = ДанныеСправочника.Строки;
			Для Каждого Владелец Из Владельцы Цикл
				ЭлементВладелец = КоллекцияЭлементовДерева.Добавить();
				ЭлементВладелец.Объект = Владелец.Владелец;
				ЭлементВладелец.ЭтоГруппа = Истина;
				ЭлементВладелец.СтандартнаяКартинка = 6;
			    ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ЭлементВладелец.ПолучитьЭлементы(), Владелец);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ОписаниеОбъекта.Иерархический Тогда
		ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ХарактеризуемыеОбъекты.ПолучитьЭлементы(), ДанныеСправочника);
	Иначе
		ЭлементыДереваХарактеризуемыхОбъектов = ХарактеризуемыеОбъекты.ПолучитьЭлементы();
		Для Каждого Строка Из ДанныеСправочника Цикл
			ЭлементДерева = ЭлементыДереваХарактеризуемыхОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементДерева, Строка);
		КонецЦикла;
	КонецЕсли;

	// создаем Элементы Формы
	Для Каждого Реквизит Из МассивДобавляемыхРеквизитов Цикл
		
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить("ХарактеризуемыеОбъекты" + Реквизит.Имя, Тип("ПолеФормы"), 
						ЭтаФорма.Элементы.ХарактеризуемыеОбъекты);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ХарактеризуемыеОбъекты." + Реквизит.Имя;
		
		Если Реквизит.Имя = "Владелец" Тогда 
			Продолжить;
		КонецЕсли;		
		НовыйЭлемент.Заголовок = ТаблицаХарактеристик.Найти(Реквизит.Имя, "КодКлассификатора").ПредставлениеХарактеристики; 
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.КлассификаторыМедРегистра." + Реквизит.Имя));
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		НовыйЭлемент.ФормаВыбора = "Справочник.ЭлементыКлассификаторовМедРегистра.Форма.ФормаВыбора.";
		
		// становим действие
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ХарактеристикаПриИзменении");
		
	КонецЦикла;
	
	Элементы.ФормаСопоставить.Доступность = СопоставлениеВозможно;

КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ХарактеристикаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСохранения

&НаСервере
Процедура СохранениеИзмененийНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0
	|	КлассификацияОбъектовДляМедРегистра.Объект,
	|	КлассификацияОбъектовДляМедРегистра.Классификатор,
	|	КлассификацияОбъектовДляМедРегистра.Характеристика
	|ИЗ
	|	РегистрСведений.ХарактеристикиОбъектовПоМедРегистру КАК КлассификацияОбъектовДляМедРегистра";
	
	КлассификацияОбъектов = Запрос.Выполнить().Выгрузить();
	
	ОписаниеОбъекта      = ИменаОбъектов.НайтиСтроки(Новый Структура("ПолноеИмя", ?(ПустаяСтрока(ПредыдущийОбъектМетаданных), ТекущийОбъектМетаданных, ПредыдущийОбъектМетаданных)))[0];
	ТаблицаХарактеристик = РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.ХарактеристикиОбъектаМетаданныхДляРегистра(Тип(ОписаниеОбъекта.ТипОбъекта));
	
	ДеревоХарактеризуемыеОбъекты = РеквизитФормыВЗначение("ХарактеризуемыеОбъекты", Тип("ДеревоЗначений"));
    КонвертацияХарактеризуемыеОбъектыВТаблицу(ДеревоХарактеризуемыеОбъекты, КлассификацияОбъектов, ТаблицаХарактеристик);
	
	Если КлассификацияОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДанныеФормы", КлассификацияОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеФормы.Объект,
	|	ДанныеФормы.Классификатор,
	|	ДанныеФормы.Характеристика
	|ПОМЕСТИТЬ ВТДанныеФормы
	|ИЗ
	|	&ДанныеФормы КАК ДанныеФормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДанныеФормы.Объект
	|ПОМЕСТИТЬ ВТЗаписываемыеОбъекты
	|ИЗ
	|	ВТДанныеФормы КАК ВТДанныеФормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиОбъектовПоМедРегистру КАК КлассификацияОбъектовДляМедРегистра
	|		ПО ВТДанныеФормы.Объект = КлассификацияОбъектовДляМедРегистра.Объект
	|			И ВТДанныеФормы.Классификатор = КлассификацияОбъектовДляМедРегистра.Классификатор
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТДанныеФормы.Характеристика = ЕСТЬNULL(КлассификацияОбъектовДляМедРегистра.Характеристика, ЗНАЧЕНИЕ(Справочник.ЭлементыКлассификаторовМедРегистра.ПустаяСсылка))
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеФормы.Объект КАК Объект,
	|	ВТДанныеФормы.Классификатор КАК Классификатор,
	|	ВТДанныеФормы.Характеристика
	|ИЗ
	|	ВТДанныеФормы КАК ВТДанныеФормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписываемыеОбъекты КАК ВТЗаписываемыеОбъекты
	|		ПО ВТДанныеФормы.Объект = ВТЗаписываемыеОбъекты.Объект
	|ГДЕ
	|	ВТЗаписываемыеОбъекты.Объект ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект,
	|	Классификатор";
				  
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Объект") Цикл
		
		НаборЗаписей = РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаЗаписей.Объект);
		
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Классификатор") Цикл
			
			НаборЗаписей.Отбор.Классификатор.Установить(ВыборкаЗаписей.Классификатор);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда 
				Если Не ЗначениеЗаполнено(ВыборкаЗаписей.Характеристика) Тогда
					НаборЗаписей.Очистить();
				Иначе
					НаборЗаписей[0].Характеристика = ВыборкаЗаписей.Характеристика;
				КонецЕсли;
			Иначе 
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаЗаписей);
			КонецЕсли;
			
			НаборЗаписей.Записать();
						
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонвертацияХарактеризуемыеОбъектыВТаблицу(ДеревоХарактеризуемыеОбъекты, Таблица, Характеристики)
	
	Для Каждого СтрокаДерева Из ДеревоХарактеризуемыеОбъекты.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			КонвертацияХарактеризуемыеОбъектыВТаблицу(СтрокаДерева, Таблица, Характеристики);
		Иначе
			
			Для Каждого Характеристика Из Характеристики Цикл
				
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.Объект		   = СтрокаДерева.Объект;
				НоваяСтрока.Классификатор  = Характеристика.Классификатор;
				НоваяСтрока.Характеристика = СтрокаДерева[Характеристика.КодКлассификатора];
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ТекущийОбъектМетаданныхПриИзмененииЗавершение(Ответ, Параметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Сохраним изменения
		ТекущийОбъектМетаданныхПриИзмененииНаСервере();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ТекущийОбъектМетаданныхПриИзмененииНаСервере();
	Иначе
		// Вернем предыдущий объект
		ТекущийОбъектМетаданных = ПредыдущийОбъектМетаданных;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТекущийОбъектМетаданныхПриИзмененииНаСервере()
	
	Если Модифицированность Тогда
		СохранениеИзмененийНаСервере();
	КонецЕсли;	
	
	ЗаполнитьТаблицуХарактеризуемыхОбъектов();	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСопоставления

&НаКлиенте
Процедура СопоставитьЗавершение(Ответ, Параметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь
	КонецЕсли;
	
	СопоставитьЗначенияИОбновитьТаблицу();
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьЗначенияИОбновитьТаблицу()
	
	Если Модифицированность Тогда
		СохранениеИзмененийНаСервере();
	КонецЕсли;	
	
	СопоставитьНаСервере();
	
	ЗаполнитьТаблицуХарактеризуемыхОбъектов();	
	
КонецПроцедуры
	
&НаСервере
Процедура СопоставитьНаСервере()
		
	 // Описание добавляемых элементов.
	ОписаниеОбъекта = ИменаОбъектов.НайтиСтроки(Новый Структура("ПолноеИмя", ТекущийОбъектМетаданных))[0];
	
	РегистрыСведений.ХарактеристикиОбъектовПоМедРегистру.УстановитьХарактеристикиЗначенийОбъектаМетаданных(ОписаниеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти