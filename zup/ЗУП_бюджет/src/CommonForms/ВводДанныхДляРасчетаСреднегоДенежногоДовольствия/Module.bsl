#Область ОписаниеПеременных

&НаКлиенте
Перем ТаблицаРедактируется;

&НаКлиенте
Перем ТекущееЗначение;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// "Распаковываем" параметры
	Сотрудник = Параметры.Сотрудник;
	Организация = Параметры.Организация;
	ДатаНачалаСобытия = Параметры.ДатаНачалаСобытия;
	Начисление = Параметры.Начисление;
	
	ДокументСсылка = Параметры.ДокументСсылка;
	
	// Заполним дату приема на работу для ограничения ввода данных о среднем заработке.
	УчетСреднегоЗаработка.ЗаполнитьДатуПриемаНаРаботуСотрудника(ДатаПриемаНаРаботуСотрудника, Сотрудник, ДатаНачалаСобытия, Отказ);
	
	Если Отказ Тогда
		// Проблемы с датой приема на работу.
		Возврат;
	КонецЕсли;
	
	// Заполняем период расчета среднего заработка.
	НачалоПериодаРасчета = Параметры.НачалоПериодаРасчета;
	ОкончаниеПериодаРасчета = Параметры.ОкончаниеПериодаРасчета;
	
	Если Не Параметры.Свойство("ФиксПериодРасчета") Тогда
		// Если признак фикс периода не определен, то и изменение его нельзя оставлять доступным.
		ФиксПериодРасчета = Ложь;
		Элементы.ГруппаВыборПериода.Доступность = Ложь;
	Иначе
		ФиксПериодРасчета = Параметры.ФиксПериодРасчета;
	КонецЕсли;
	ФиксПериодРасчетаЧислом = Число(ФиксПериодРасчета);
	
	СоздатьРеквизитыСреднегоЗаработка();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой");
	
	// Инициализируем соответствие по умолчанию.
	МесяцыРасчета = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	ИсточникиРедактирование = Новый ФиксированныйМассив(Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.РезультатыРедактирования());
	
	ЗаполнитьОписаниеСтрок();
	СоздатьСтроки();
		
	// Заполняем период расчета среднего заработка, если он не заполнен "снаружи".
	Если Не ЗначениеЗаполнено(НачалоПериодаРасчета) Или Не ЗначениеЗаполнено(ОкончаниеПериодаРасчета) Тогда
		ЗаполнитьПериодРасчетаПоУмолчанию();
	Иначе
		// Заполним соответствие месяца и номера его колонки.
		ЗаполнитьМесяцыРасчета(ЭтаФорма);
	КонецЕсли;
	
	СоздатьКолонки();
	
	// Высоту таблицы установим по количеству строк.
	Элементы.СреднийЗаработок.ВысотаВСтрокахТаблицы = СреднийЗаработок.Количество() + 1;
	
	УстановитьЗаголовокФормы();
	УстановитьДоступностьРедактированияПериодаРасчета(ЭтаФорма);
	
	Если Параметры.ДанныеОНачислениях <> Неопределено Тогда
		ТаблицаНачислений = ПолучитьИзВременногоХранилища(Параметры.ДанныеОНачислениях);
	КонецЕсли;
	Если Параметры.ДанныеОВремени <> Неопределено Тогда
		ТаблицаВремени = ПолучитьИзВременногоХранилища(Параметры.ДанныеОВремени);
	КонецЕсли;
	Если Параметры.ДанныеОбИндексации <> Неопределено Тогда
		ТаблицаИндексации = ПолучитьИзВременногоХранилища(Параметры.ДанныеОбИндексации);
	КонецЕсли;
	
	
	ЗаполнитьФорму(ТаблицаНачислений, ТаблицаВремени, ТаблицаИндексации);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура OK(Команда) 
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанныеУчета(Команда)
		
	ПеречитатьДанныеУчетаНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРучныеИзменения(Команда)
	
	ПеречитатьДанныеУчетаНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьСтроку(Команда)
	
	ЧастиИмени = СтрРазделить(Команда.Имя, "_");
	ДобавитьСтрокуНаСервере(ЧастиИмени[1]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДокументамИндексации(Команда)
	
	ПараметрыОткрытия = Новый Структура("Сотрудник", Сотрудник);
	ОткрытьФорму("РегистрСведений.КоэффициентИндексацииЗаработка.Форма.ФормаДокументовИндексацииСотрудника", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФиксПериодРасчетаАвтоматическиПриИзменении(Элемент)
	ФиксПериодРасчетаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ФиксПериодРасчетаВручнуюПриИзменении(Элемент)
	ФиксПериодРасчетаПриИзменении();
КонецПроцедуры

#КонецОбласти

#Область ТаблицаСреднийЗаработок

&НаКлиенте
Процедура ЗаполнитьИсточникПослеРедактирования(ДанныеСтроки, Месяц, ПостфиксКолонки)
	
	Если ИсточникиРедактирование.Найти(ДанныеСтроки["Источник" + ПостфиксКолонки]) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МесяцыКорректировки.Найти(Месяц) <> Неопределено Тогда
		ДанныеСтроки["Источник" + ПостфиксКолонки] = ПредопределенноеЗначение("Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации");
	Иначе
		ДанныеСтроки["Источник" + ПостфиксКолонки] = ПредопределенноеЗначение("Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Исправления");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СреднийЗаработокЗначениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.СреднийЗаработок.ТекущиеДанные;
	
	ПостфиксКолонки = ПостфиксПоИмениЯчейки(Элементы.СреднийЗаработок.ТекущийЭлемент.Имя);
	Месяц = МесяцПоПостфиксу(ПостфиксКолонки);
		
	// Изменяем источник для группы строк: начислений или времени.
	// Определяем необходимость изменения.
	ЗаполнитьИсточникПослеРедактирования(ДанныеСтроки, Месяц, ПостфиксКолонки);
	
	ЗаполнитьИтоги(ЭтаФорма);
	РассчитатьСреднийЗаработок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СреднийЗаработокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Поле.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СреднийЗаработокПриАктивизацииЯчейки(Элемент)
	
	// Устанавливаем доступность команды просмотра расшифровываемых значений.
	ТекущиеДанные = Элементы.СреднийЗаработок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(Элемент.ТекущийЭлемент) <> Тип("ПолеФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеВвода Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущийЭлемент.ФорматРедактирования = ТекущиеДанные.ФорматЗначения;
	Элемент.ТекущийЭлемент.МаксимальноеЗначение = Неопределено;
	
	МаксимальноеЗначение = ТекущиеДанные.МаксимальноеЗначение;
	Если ЗначениеЗаполнено(МаксимальноеЗначение) Тогда
		// Уточняем ограничение значения.
		ПостфиксКолонки = ПостфиксПоИмениЯчейки(Элементы.СреднийЗаработок.ТекущийЭлемент.Имя);
		Если ЗначениеЗаполнено(ПостфиксКолонки) Тогда
			МаксимальноеЗначение = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(МесяцПоПостфиксу(ПостфиксКолонки))
		КонецЕсли;
		Элемент.ТекущийЭлемент.МаксимальноеЗначение = МаксимальноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеПериодаРасчета

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойПриИзменении(Элемент)
	
	ДатаДоИзменения = НачалоПериодаРасчета;
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой", Модифицированность);
	ПриИзмененииПериодаРасчета(ДатаДоИзменения, "НачалоПериодаРасчета");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДополнительныеПараметры = Новый Структура("ДатаДоИзменения", НачалоПериодаРасчета);
	Оповещение = Новый ОписаниеОповещения("НачалоПериодаРасчетаСтрокойНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииПериодаРасчета(ДополнительныеПараметры.ДатаДоИзменения, "НачалоПериодаРасчета");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ДатаДоИзменения = НачалоПериодаРасчета;
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой", Направление, Модифицированность);
	ПриИзмененииПериодаРасчета(ДатаДоИзменения, "НачалоПериодаРасчета");
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойОкончаниеВводаТекста(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойПриИзменении(Элемент)
	ДатаДоИзменения = ОкончаниеПериодаРасчета;
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой", Модифицированность);
	ПриИзмененииПериодаРасчета(ДатаДоИзменения, "ОкончаниеПериодаРасчета");
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ДатаДоИзменения", ОкончаниеПериодаРасчета);
	Оповещение = Новый ОписаниеОповещения("ОкончаниеПериодаРасчетаСтрокойНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииПериодаРасчета(ДополнительныеПараметры.ДатаДоИзменения, "ОкончаниеПериодаРасчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ДатаДоИзменения = ОкончаниеПериодаРасчета;
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой", Направление, Модифицированность);
	ПриИзмененииПериодаРасчета(ДатаДоИзменения, "ОкончаниеПериодаРасчета");
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойОкончаниеВводаТекста(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТолькоПросмотр Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднего();
		
	Модифицированность = Ложь;
	Закрыть(ДанныеДляРасчета);
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеУчетаНаСервере(УчитыватьКорректировки = Истина)
	
	// В том случае, если увольнение происходит в последний день месяца, 
	// оплата труда за последний месяц работы, рассчитанная в документе Увольнение, 
	// должна быть включена в данные среднего заработка.
	// В такой ситуации, прежде чем перечитать данные среднего заработка из учета, 
	// нужно провести документ-владелец.
	
	ПрочитатьДанныеУчетаСреднегоЗаработка(, УчитыватьКорректировки);
	
	// Если форма в режиме непосредственной записи изменений, 
	// то ее исходное состояние соответствует учету.
	Модифицированность = Ложь;
	
КонецПроцедуры

#Область ФормированиеРезультатаРаботыФормы

&НаСервере
Функция ДанныеДляРасчетаСреднего()
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Сотрудник", Сотрудник);
	
	СтруктураДанных.Вставить("НачалоПериодаРасчета", НачалоПериодаРасчета);
	СтруктураДанных.Вставить("ОкончаниеПериодаРасчета", ОкончаниеПериодаРасчета);
	СтруктураДанных.Вставить("ФиксПериодРасчета", ФиксПериодРасчета);
	
	СтруктураДанных.Вставить("ДанныеОНачислениях", ПоместитьВоВременноеХранилище(РезультатРедактированияНачислений(ЭтаФорма)));
	СтруктураДанных.Вставить("ДанныеОВремени", ПоместитьВоВременноеХранилище(РезультатРедактированияВремени(ЭтаФорма)));
	
	СтруктураДанных.Вставить("ДанныеОбИндексации", ПоместитьВоВременноеХранилище(ДанныеОбИндексации(ЭтаФорма)));
	
	СтруктураДанных.Вставить("СреднийЗаработок", СреднийЗаработокИтог);
	
	Возврат СтруктураДанных;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция РезультатРедактированияНачислений(Форма)
	
	Сотрудник						= Форма.Сотрудник;
	СреднийЗаработок				= Форма.СреднийЗаработок;
	МесяцыКорректировки				= Форма.МесяцыКорректировки;
	
	ИдентификаторыСтрок = ИдентификаторыСтрокСоставныхЧастей();
	
	ДанныеНачислений = Новый Массив;
	
	Для Каждого КлючИЗначениеСтрок Из ИдентификаторыСтрок Цикл
		СоставнаяЧасть = КлючИЗначениеСтрок.Ключ;
		Идентификатор = КлючИЗначениеСтрок.Значение;
		// Находим все строки, относящиеся к составной части (в т.ч. не индексируемые)
		// 1. "Основная" строка.
		СтрокаТаблицы = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(СреднийЗаработок, Идентификатор);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// 2. Строка с не индексируемой суммой.
		СтрокаТаблицыВтчНеИндексируется = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(СреднийЗаработок, Идентификатор + "НеИндексируется");
		Для Каждого КлючИЗначениеМесяцев Из Форма.МесяцыРасчета Цикл
			// Обходим по колонкам-периодам.
			Месяц = КлючИЗначениеМесяцев.Ключ;
			ПостфиксКолонки = КлючИЗначениеМесяцев.Значение;
			Если СтрокаТаблицы["Значение" + ПостфиксКолонки] = 0 Тогда
				// Строки с нулевыми суммами пропускаем.
				Продолжить;
			КонецЕсли;
			ОписаниеСтроки = УчетСреднегоЗаработкаКлиентСервер.ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка();
			ОписаниеСтроки.Сотрудник = Сотрудник;
			ОписаниеСтроки.СоставнаяЧасть = СоставнаяЧасть;
			ОписаниеСтроки.Период = Месяц;
			ОписаниеСтроки.Индексируется = Истина;
			ОписаниеСтроки.Источник = СтрокаТаблицы["Источник" + ПостфиксКолонки];
			ОписаниеСтроки.Сумма = СтрокаТаблицы["Значение" + ПостфиксКолонки];
			ДанныеНачислений.Добавить(ОписаниеСтроки);
			Если СтрокаТаблицыВтчНеИндексируется <> Неопределено Тогда
				// Уменьшаем индексируемую сумму на сумму без индексации.
				Если СтрокаТаблицыВтчНеИндексируется["Значение" + ПостфиксКолонки] = 0 Тогда
					// Строки с нулевыми суммами пропускаем.
					Продолжить;
				КонецЕсли;
				ОписаниеСтроки.Сумма = СтрокаТаблицы["Значение" + ПостфиксКолонки] - СтрокаТаблицыВтчНеИндексируется["Значение" + ПостфиксКолонки];
				// Копируем описание строки для добавлении строки без индексации.
				ОписаниеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписаниеСтроки);
				ОписаниеСтроки.Индексируется = Ложь;
				ОписаниеСтроки.Сумма = СтрокаТаблицыВтчНеИндексируется["Значение" + ПостфиксКолонки];
				ДанныеНачислений.Добавить(ОписаниеСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Возврат ДанныеНачислений;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция РезультатРедактированияВремени(Форма)

	ДанныеВремени = Новый Массив;
	
	ИдентификаторыСтрок = ИдентификаторыСтрокДанныхВремени();
	
	Для Каждого КлючИЗначениеМесяцев Из Форма.МесяцыРасчета Цикл
		// Обходим по колонкам-периодам.
		Месяц = КлючИЗначениеМесяцев.Ключ;
		ПостфиксКолонки = КлючИЗначениеМесяцев.Значение;
		ОписаниеСтроки = ОписаниеСтрокиДанныхОВремени();
		ОписаниеСтроки.Сотрудник = Форма.Сотрудник;
		ОписаниеСтроки.Период = Месяц;
		ЗначенияЗаполнены = Ложь;
		Для Каждого КлючИЗначениеСтрок Из ИдентификаторыСтрок Цикл
			Идентификатор = КлючИЗначениеСтрок.Ключ;
			СтрокаТаблицы = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(Форма.СреднийЗаработок, Идентификатор);
			Если СтрокаТаблицы <> Неопределено Тогда
				ОписаниеСтроки[Идентификатор] = СтрокаТаблицы["Значение" + ПостфиксКолонки];
				ОписаниеСтроки.Источник = СтрокаТаблицы["Источник" + ПостфиксКолонки];
				Если СтрокаТаблицы["Значение" + ПостфиксКолонки] > 0 Тогда
					ЗначенияЗаполнены = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияЗаполнены Тогда
			ДанныеВремени.Добавить(ОписаниеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВремени;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеОбИндексации(Форма)

	ДанныеИндексации = Новый Массив;
	
	Для Каждого СтрокаИндексации Из Форма.ДанныеОбИндексации Цикл
		ОписаниеИндексации = Новый Структура("Сотрудник, Период, ВидИндексации, КоэффициентИндексации");
		ЗаполнитьЗначенияСвойств(ОписаниеИндексации, СтрокаИндексации);
		ДанныеИндексации.Добавить(ОписаниеИндексации);
	КонецЦикла;
	
	Возврат ДанныеИндексации;
	
КонецФункции	

#КонецОбласти

#Область ЗаполнениеФормы

&НаСервере
Процедура ЗаполнитьФорму(ДанныеОНачислениях, ДанныеОВремени, ИндексацияСреднегоЗаработка = Неопределено)
	
	// Перед заполнением очищаем ячейки за тот период, который сейчас будет заполняться.
	Месяцы = Новый Массив;
	// Выбираем месяцы.
	Для Каждого СтрокаНачислений Из ДанныеОНачислениях Цикл
		Если Месяцы.Найти(СтрокаНачислений.Период) = Неопределено Тогда
			Месяцы.Добавить(СтрокаНачислений.Период);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Месяцы, ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОВремени, "Период", Истина), Истина);
	
	Для Каждого Месяц Из Месяцы Цикл
		Если Не ЗначениеЗаполнено(Месяц) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из СреднийЗаработок Цикл
			СтрокаТаблицы["Значение" + ПостфиксКолонки(Месяц)] = 0;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьНачисления(ДанныеОНачислениях);
	
	ЗаполнитьВремя(ДанныеОВремени);
	
	Если ИндексацияСреднегоЗаработка <> Неопределено Тогда
		ЗаполнитьИндексацию(ИндексацияСреднегоЗаработка);
	КонецЕсли;
	
	УстановитьДоступностьКорректировок();
	
	ЗаполнитьИтоги(ЭтаФорма);
	РассчитатьСреднийЗаработок(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексацию(ИндексацияСреднегоЗаработка)
	
	ДанныеОбИндексации.Очистить();
	Для Каждого Индексация Из ИндексацияСреднегоЗаработка Цикл
		ЗаполнитьЗначенияСвойств(ДанныеОбИндексации.Добавить(), Индексация);
	КонецЦикла;
	
	ЗаполнитьИнформациюОбИндексации();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНачисления(ДанныеОНачислениях)
	
	ИдентификаторыСтрок = ИдентификаторыСтрокСоставныхЧастей();
	
	Для Каждого СтрокаНачислений Из ДанныеОНачислениях Цикл
		ИдентификаторСтроки = ИдентификаторыСтрок[СтрокаНачислений.СоставнаяЧасть];	
		Если Не ЗначениеЗаполнено(СтрокаНачислений.СоставнаяЧасть) Тогда
			// Не заполнена составная часть.
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, ИдентификаторСтроки);
		Если СтрокаТаблицы = Неопределено Тогда
			// Если строку не нашли, добавляем ее.
			ПоискСтрок = Новый Структура("Идентификатор", ИдентификаторСтроки);
			СтрокаТаблицы = СоздатьСтроку(ОписаниеСтрок.НайтиСтроки(ПоискСтрок)[0]);
		КонецЕсли;
		
		ПостфиксКолонки = МесяцыРасчета.Получить(НачалоМесяца(СтрокаНачислений.Период));
		Если ПостфиксКолонки = Неопределено Тогда
			// Для периода, указанного в данных не оказалось колонки.
			Продолжить;
		КонецЕсли;	
		
		СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаТаблицы["Значение" + ПостфиксКолонки] + СтрокаНачислений.Сумма;
		СтрокаТаблицы["Источник" + ПостфиксКолонки] = СтрокаНачислений.Источник;
				
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВремя(ДанныеВремени)
	
	ИдентификаторыСтрок = ИдентификаторыСтрокДанныхВремени();
	
	Для Каждого СтрокаДанныхВремени Из ДанныеВремени Цикл
		ПостфиксКолонки = МесяцыРасчета.Получить(НачалоМесяца(СтрокаДанныхВремени.Период));
		Если ПостфиксКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Для Каждого КлючЗначение Из ИдентификаторыСтрок Цикл
			СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, КлючЗначение.Ключ);
			Если СтрокаТаблицы = Неопределено Тогда
				Если СтрокаДанныхВремени[КлючЗначение.Значение] = 0 Тогда
					Продолжить;
				КонецЕсли;
				// Если строку не нашли, добавляем ее.
				ПоискСтрок = Новый Структура("Идентификатор", КлючЗначение.Значение);
				СтрокаТаблицы = СоздатьСтроку(ОписаниеСтрок.НайтиСтроки(ПоискСтрок)[0]);
			КонецЕсли;
			СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаДанныхВремени[КлючЗначение.Значение];
			СтрокаТаблицы["Источник" + ПостфиксКолонки] = СтрокаДанныхВремени["Источник"];
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКорректировок()
	
	МесяцыКорректировки = УчетСреднегоЗаработка.МесяцыКорректировкиСреднегоЗаработка(Сотрудник, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДатаПриемаНаРаботуСотрудника, ДатаНачалаСобытия);
	
	// Делаем недоступными месяцы до приема на работу.
	Если НачалоПериодаРасчета < НачалоМесяца(ДатаПриемаНаРаботуСотрудника) Тогда
		МесяцОбхода = НачалоПериодаРасчета;
		Пока МесяцОбхода < НачалоМесяца(ДатаПриемаНаРаботуСотрудника) Цикл			
			Элементы["СреднийЗаработокЗначение" + ПостфиксКолонки(МесяцОбхода)].ТолькоПросмотр = Истина;
			МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСреднийЗаработок(Форма)
	
	ДанныеНачислений = РезультатРедактированияНачислений(Форма);
	ДанныеВремени = РезультатРедактированияВремени(Форма);
		
	ДополнительныеПараметры = РасчетДенежногоДовольствияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаДенежногоДовольствия();	
	ДополнительныеПараметры.ДатаНачалаСобытия = Форма.ДатаНачалаСобытия;
	ДополнительныеПараметры.ПериодРасчетаСреднегоЗаработкаНачало = Форма.НачалоПериодаРасчета;
	ДополнительныеПараметры.ПериодРасчетаСреднегоЗаработкаОкончание = Форма.ОкончаниеПериодаРасчета;
	ДополнительныеПараметры.Индексации = ДанныеОбИндексации(Форма);
		
	Форма.СреднийЗаработокИтог = РасчетДенежногоДовольствияКлиентСервер.СреднееДенежноеДовольствие(ДанныеНачислений, ДанныеВремени, ДополнительныеПараметры);
		
КонецПроцедуры	

#КонецОбласти

#Область ЧтениеДанныхУчетаСреднегоЗаработка

&НаСервере
Процедура ПрочитатьДанныеУчетаСреднегоЗаработка(ОтборМесяцев = Неопределено, УчитыватьКорректировки = Истина)
	
	// Очистим данные за "заказанный" период.
	Для Каждого СтрокаТаблицы Из СреднийЗаработок Цикл
		Для Каждого КлючИЗначение Из МесяцыРасчета Цикл
			Месяц = КлючИЗначение.Ключ;
			ПостфиксКолонки = КлючИЗначение.Значение;
			Если ОтборМесяцев <> Неопределено И ОтборМесяцев.Найти(Месяц) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы["Значение" + ПостфиксКолонки] = 0;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляРасчета = РасчетДенежногоДовольствия.ДанныеДляРасчетаСреднегоДенежногоДовольствияСотрудника(
		Сотрудник, ДатаНачалаСобытия, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ОтборМесяцев, ДокументСсылка, УчитыватьКорректировки);
	
	// Преобразовываем данные для ввода в форме.
	ЗаполнитьФорму(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеДляРасчета.ДанныеОВремени, ДанныеДляРасчета.ДанныеОбИндексации);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияИНастройкаФормыПриСозданииНаСервере

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМесяцыРасчета(Форма)
	
	СоответствиеМесяцев = Новый Соответствие;
	МесяцОбхода = Форма.НачалоПериодаРасчета;
	Пока МесяцОбхода <= Форма.ОкончаниеПериодаРасчета Цикл
		СоответствиеМесяцев.Вставить(МесяцОбхода, ПостфиксКолонки(МесяцОбхода));
		МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
	КонецЦикла;
	Форма.МесяцыРасчета = Новый ФиксированноеСоответствие(СоответствиеМесяцев);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавленныеМесяцы(Форма)
	
	// Выявляет месяцы периода расчета, отсутствующие в соответствии месяцев.
	ДобавленныеМесяцы = Новый Массив;
	
	МесяцОбхода = Форма.НачалоПериодаРасчета;
	Пока МесяцОбхода <= Форма.ОкончаниеПериодаРасчета Цикл
		Если Форма.МесяцыРасчета.Получить(МесяцОбхода) = Неопределено Тогда
			ДобавленныеМесяцы.Добавить(МесяцОбхода);
		КонецЕсли;
		МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
	КонецЦикла;
	
	Возврат ДобавленныеМесяцы;
	
КонецФункции

&НаСервере
Функция СоздатьСтроку(ОписаниеСтроки)
	
	Если ОписаниеСтроки.Создана Тогда
		// Строка с таким идентификатором уже существует.
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВладелец = СреднийЗаработок;
	
	// Находим место для вставки строки.
	МестоВставки = 0;
	ПорядокДобавляемой = ОписаниеСтрок.Индекс(ОписаниеСтроки);
	Для Каждого СтрокаТаблицы Из ТаблицаВладелец Цикл
		// Находим строку в описании.
		ПоискСтрок = Новый Структура("Идентификатор", СтрокаТаблицы.Идентификатор);
		ПорядокОбхода = ОписаниеСтрок.Индекс(ОписаниеСтрок.НайтиСтроки(ПоискСтрок)[0]);
		// Если ее индекс выше, то прерываем поиск.
		Если ПорядокОбхода > ПорядокДобавляемой Тогда
			Прервать;
		КонецЕсли;
		МестоВставки = МестоВставки + 1;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаВладелец.Вставить(МестоВставки);
	НоваяСтрока.Идентификатор	= ОписаниеСтроки.Идентификатор;
	НоваяСтрока.ЗаголовокСтроки	= ОписаниеСтроки.ЗаголовокСтроки;
	НоваяСтрока.СоставнаяЧасть	= ОписаниеСтроки.СоставнаяЧасть;
	НоваяСтрока.ФорматЗначения	= "ЧДЦ=" + ОписаниеСтроки.Точность;
	Если ЗначениеЗаполнено(ОписаниеСтроки.МаксимальноеЗначение) Тогда
		НоваяСтрока.МаксимальноеЗначение = ОписаниеСтроки.МаксимальноеЗначение;
	КонецЕсли;
	
	ОписаниеСтроки.Создана = Истина;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеСтрок()
	
	ОписаниеСтрок.Очистить();
	
	// ИндексируемоеОВД
	НоваяСтрока = ОписаниеСтрок.Добавить();
	НоваяСтрока.Идентификатор = "ИндексируемоеОВД";
	НоваяСтрока.ЗаголовокСтроки = НСтр("ru = 'Индексируемое от ОВД'");
	НоваяСтрока.ЗаголовокКоманды = НСтр("ru = 'Денежное довольствие индексируемое от ОВД'");
	НоваяСтрока.СоставнаяЧасть = Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВД;
	НоваяСтрока.ДобавлятьПоУмолчанию = Истина;
	НоваяСтрока.Точность = 2;
		
	// ИндексируемоеОВЗ
	НоваяСтрока = ОписаниеСтрок.Добавить();
	НоваяСтрока.Идентификатор = "ИндексируемоеОВЗ";
	НоваяСтрока.ЗаголовокСтроки = НСтр("ru = 'Индексируемое от ОВЗ'");
	НоваяСтрока.ЗаголовокКоманды = НСтр("ru = 'Денежное довольствие индексируемое от ОВЗ'");
	НоваяСтрока.СоставнаяЧасть = Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВЗ;
	НоваяСтрока.ДобавлятьПоУмолчанию = Истина;
	НоваяСтрока.Точность = 2;
	
	// ИндексируемоеОДС
	НоваяСтрока = ОписаниеСтрок.Добавить();
	НоваяСтрока.Идентификатор = "ИндексируемоеОДС";
	НоваяСтрока.ЗаголовокСтроки = НСтр("ru = 'Индексируемое от ОДС'");
	НоваяСтрока.ЗаголовокКоманды = НСтр("ru = 'Денежное довольствие индексируемое от ОДС'");
	НоваяСтрока.СоставнаяЧасть = Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОДС;
	НоваяСтрока.ДобавлятьПоУмолчанию = Истина;
	НоваяСтрока.Точность = 2;
	
	// НеИндексируемое
	НоваяСтрока = ОписаниеСтрок.Добавить();
	НоваяСтрока.Идентификатор = "НеИндексируемое";
	НоваяСтрока.ЗаголовокСтроки = НСтр("ru = 'Не индексируемое'");
	НоваяСтрока.ЗаголовокКоманды = НСтр("ru = 'Денежное довольствие не индексируемое'");
	НоваяСтрока.СоставнаяЧасть = Перечисления.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.НеИндексируемое;
	НоваяСтрока.ДобавлятьПоУмолчанию = Истина;
	НоваяСтрока.Точность = 2;
	
	// Отработано дней (календ.)
	НоваяСтрока = ОписаниеСтрок.Добавить();
	НоваяСтрока.Идентификатор = "ОтработаноДнейКалендарных";
	НоваяСтрока.ЗаголовокСтроки = НСтр("ru = 'Отработано дней (календ.)'");
	НоваяСтрока.ДобавлятьПоУмолчанию = Истина;
	НоваяСтрока.Точность = 0;
	НоваяСтрока.МаксимальноеЗначение = 31;
		
КонецПроцедуры

&НаСервере
Процедура СоздатьСтроки()
	
	Для Каждого ОписаниеСтроки Из ОписаниеСтрок Цикл
		Если ОписаниеСтроки.ДобавлятьПоУмолчанию Тогда
			СоздатьСтроку(ОписаниеСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьКолонки(ДобавляемыеМесяцы = Неопределено)
	
	// Составляем массив существующих реквизитов.
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы,  "СреднийЗаработок");
	
	Если ДобавляемыеМесяцы = Неопределено Тогда
		// Выявляем добавленные месяцы.
		ДобавляемыеМесяцы = Новый Массив;
		Для Каждого КлючИЗначение Из МесяцыРасчета Цикл
			Месяц = КлючИЗначение.Ключ;
			ПостфиксКолонки = ПостфиксКолонки(Месяц);
			// Запоминаем месяцы, колонки для которых нужно добавить.
			Если МассивИменРеквизитовФормы.Найти("СреднийЗаработок.Значение" + ПостфиксКолонки) = Неопределено Тогда
				ДобавляемыеМесяцы.Добавить(Месяц);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Создаем реквизиты по количеству месяцев.
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Месяц Из ДобавляемыеМесяцы Цикл
		ПостфиксКолонки = ПостфиксКолонки(Месяц);
		Если МассивИменРеквизитовФормы.Найти("СреднийЗаработок.Значение" + ПостфиксКолонки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы("Значение" + ПостфиксКолонки, Новый ОписаниеТипов("Число"), "СреднийЗаработок"));
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы("Источник" + ПостфиксКолонки, Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"), "СреднийЗаработок"));
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем недостающие элементы формы.
	Для Каждого Месяц Из ДобавляемыеМесяцы Цикл
		// Колонки вставляются рекурсивно для того, чтобы восстановить последовательность.
		ДобавитьКолонку(Месяц);
	КонецЦикла;
	
	// Скрываем колонки, которые не используются, и наоборот показываем, которые теперь используются.
	Колонки = Элементы.СреднийЗаработокЗначения.ПодчиненныеЭлементы;
	Для Каждого ПолеФормы Из Колонки Цикл
		ПостфиксКолонки = ПостфиксПоИмениЯчейки(ПолеФормы.Имя);
		Месяц = МесяцПоПостфиксу(ПостфиксКолонки);
		ПолеФормы.Видимость = МесяцыРасчета.Получить(Месяц) <> Неопределено;
	КонецЦикла;
	
	// Добавляем условное оформление для вновь добавленных колонок.
		
	ЖирныйШрифт = Новый Шрифт(Элементы.СреднийЗаработок.Шрифт, , , Истина);
	
	Для Каждого Месяц Из ДобавляемыеМесяцы Цикл
		ПостфиксКолонки = ПостфиксКолонки(Месяц);
		
		// Исправления жирным
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		// оформляемые поля
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СреднийЗаработокЗначение" + ПостфиксКолонки);
		ОформляемоеПоле.Использование = Истина;
		// условие оформления
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "СреднийЗаработок.Источник" + ПостфиксКолонки, Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Исправления);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
		// Добавляем формат значений в виде условного оформления.
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", Новый ПолеКомпоновкиДанных("ФорматЗначения"));
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СреднийЗаработокЗначение" + ПостфиксКолонки);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Функция ДобавитьКолонку(Месяц)
	
	Если МесяцыРасчета.Получить(Месяц) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПостфиксКолонки = ПостфиксКолонки(Месяц);
	ИмяЭлемента = "СреднийЗаработокЗначение" + ПостфиксКолонки;
	ПолеФормы = Элементы.Найти(ИмяЭлемента);
	Если ПолеФормы <> Неопределено Тогда
		Возврат ПолеФормы;
	КонецЕсли;
	
	СледующийМесяц = ДобавитьМесяц(Месяц, 1);
	ПолеСледующего = Элементы.Найти("СреднийЗаработокЗначение" + ПостфиксКолонки(СледующийМесяц));
	Если ПолеСледующего = Неопределено Тогда
		ПолеСледующего = ДобавитьКолонку(СледующийМесяц);
	КонецЕсли;
	
	ПолеФормы = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Элементы.СреднийЗаработокЗначения, ПолеСледующего);
	ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
	ПолеФормы.Ширина = 10;
	ПолеФормы.РастягиватьПоГоризонтали = Ложь;
	ПолеФормы.Формат = "ЧДЦ=2";
	ПолеФормы.ФорматРедактирования = "ЧДЦ=2";
	ПолеФормы.КнопкаВыбора = Ложь;
	ПолеФормы.ПутьКДанным = "СреднийЗаработок.Значение" + ПостфиксКолонки;
	ПолеФормы.Заголовок = Формат(Месяц, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДФ='ММММ%1гггг'", Символы.ПС));
	ПолеФормы.УстановитьДействие("ПриИзменении", "Подключаемый_СреднийЗаработокЗначениеПриИзменении");
	
	Возврат ПолеФормы;
	
КонецФункции

&НаСервере
Процедура СоздатьРеквизитыСреднегоЗаработка()
	
	// Метод предназначен для создания реквизитов для показателя среднего заработка,
	// и используется в том случае, если указано несколько способов расчета.
	// Тогда для каждого способа расчета создается отдельный реквизит.
	
	Элементы.СреднийЗаработокСтраницы.ТекущаяСтраница = Элементы.СреднийЗаработокЕдинственныйСпособ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ТолькоПросмотр Тогда
		Заголовок = НСтр("ru = 'Данные для расчета среднего денежного довольствия (только просмотр)'");
	Иначе
		Заголовок = НСтр("ru = 'Ввод данных для расчета среднего денежного довольствия'"); 
	КонецЕсли;
							
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОбИндексации()
	
	// Формирует поясняющую надпись об индексации.
	
	ИнфоНадписьКоэффициентыИндексации = "";
	ТЗДанныеОбИндексации = ДанныеОбИндексации.Выгрузить();
	ТЗВидыИндексации = ТЗДанныеОбИндексации.Скопировать(,"ВидИндексации");
	ТЗВидыИндексации.Свернуть("ВидИндексации");
	ОтборСтрок = Новый Структура("ВидИндексации");
	Для Каждого СтрокаВидаИндексации Из ТЗВидыИндексации Цикл
		ПредыдущийКоэффициент = 1;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаВидаИндексации);
		ТЗИндексацииПоВиду = ТЗДанныеОбИндексации.Скопировать(ТЗДанныеОбИндексации.НайтиСтроки(ОтборСтрок));
		ИндексСтроки = ТЗИндексацииПоВиду.Количество() - 1;
		Пока ИндексСтроки >= 0 Цикл
			СтрокаИндексации = ТЗИндексацииПоВиду[ИндексСтроки];
			Если СтрокаИндексации.КоэффициентИндексации <> ПредыдущийКоэффициент Тогда
				ТекстИндексации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '%1: %2 года c коэффициентом %3'"),
									СтрокаИндексации.ВидИндексации,
									Формат(КонецМесяца(СтрокаИндексации.Период) + 1, "ДФ='д ММММ гггг'"), 
									Формат(СтрокаИндексации.КоэффициентИндексации / ПредыдущийКоэффициент, "ЧДЦ=8"));
				ИнфоНадписьКоэффициентыИндексации = ТекстИндексации + Символы.ПС + ИнфоНадписьКоэффициентыИндексации;
				ПредыдущийКоэффициент = СтрокаИндексации.КоэффициентИндексации;
			КонецЕсли;	
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;	
		
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИнфоНадписьКоэффициентыИндексации, 1);
	
	Элементы.СведенияОбИндексацииГруппа.Заголовок = ?(ЗначениеЗаполнено(ИнфоНадписьКоэффициентыИндексации), 
														НСтр("ru = 'Индексация заработка сотрудника выполнялась:'"), 
														НСтр("ru = 'Индексация заработка сотрудника не выполнялась'"));
														
	Элементы.КоэффициентыИндексацииИнформационныйТекст.Заголовок = ИнфоНадписьКоэффициентыИндексации;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерейтиКДокументамИндексации", "Видимость", ЗначениеЗаполнено(ИнфоНадписьКоэффициентыИндексации));
	
КонецПроцедуры	

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыСтрокСоставныхЧастей()
	
	ИдентификаторыСтрок = Новый Соответствие;	
	
	ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВД"), "ИндексируемоеОВД");
	ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОВЗ"), "ИндексируемоеОВЗ");
	ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.ИндексируемоеОДС"), "ИндексируемоеОДС");
	ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.ПорядокВхожденияВРасчетПособияПоУходуЗаРебенкомВоеннослужащим.НеИндексируемое"), "НеИндексируемое");
	
	Возврат ИдентификаторыСтрок;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыСтрокДанныхВремени()
	
	Соответствие = Новый Соответствие;	
	Соответствие.Вставить("ОтработаноДнейКалендарных", "ОтработаноДнейКалендарных");
	
	Возврат Соответствие;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСтрокиДанныхОВремени()
	
	// Функция конструирует структуру, описывающую данные о времени 
	// для расчета среднего заработка за один месяц расчетного периода.
	// Поля структуры заполнены пустыми значениями соответствующих типов.
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПоляОписания.Вставить("Период", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	ПоляОписания.Вставить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксПоИмениЯчейки(ИмяЯчейки)
	
	Если СтрНайти(ИмяЯчейки, "Значение") > 0 Тогда 
		Возврат СтрЗаменить(ИмяЯчейки, "СреднийЗаработокЗначение", "");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МесяцПоПостфиксу(ПостфиксКолонки)
	Возврат Дата(Лев(ПостфиксКолонки, 4), Прав(ПостфиксКолонки, 2), 1);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксКолонки(Месяц)
	Возврат Формат(Месяц, "ДФ=ггггММ")
КонецФункции

&НаКлиенте
Процедура ФиксПериодРасчетаПриИзменении()
	
	ФиксПериодРасчета = ФиксПериодРасчетаЧислом = 1;
	
	УстановитьДоступностьРедактированияПериодаРасчета(ЭтаФорма);
	
	Если Не ФиксПериодРасчета Тогда
		ЗаполнитьПериодРасчетаПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРедактированияПериодаРасчета(Форма)
	
	Форма.Элементы.НачалоПериодаРасчетаСтрокой.Доступность = Форма.ФиксПериодРасчета;
	Форма.Элементы.ОкончаниеПериодаРасчетаСтрокой.Доступность = Форма.ФиксПериодРасчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодРасчетаПоУмолчанию()
	
	ПериодРасчета = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(ДатаНачалаСобытия, Сотрудник, Начисление);
	НачалоПериодаРасчета = ПериодРасчета.ДатаНачала;
	ОкончаниеПериодаРасчета = ПериодРасчета.ДатаОкончания;
	
	ПриИзмененииПериодаРасчетаНаСервере();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодаРасчета(ДатаДоИзменения, ИмяРеквизита)
	
	Отказ = Ложь;
	
	Если НачалоПериодаРасчета > ОкончаниеПериодаРасчета Тогда
		// Ошибка настройки периода
		Отказ = Истина;
	КонецЕсли;
	
	Если НачалоМесяца(ДатаПриемаНаРаботуСотрудника) = НачалоМесяца(ДатаНачалаСобытия) Тогда
		// Если сотрудник принят в месяце начала события, то период может включать месяц начала события.
		Если ОкончаниеПериодаРасчета > КонецМесяца(ДатаНачалаСобытия) Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если ОкончаниеПериодаРасчета > КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ЭтаФорма[ИмяРеквизита] = ДатаДоИзменения;
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, ИмяРеквизита, ИмяРеквизита + "Строкой");
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПериодаРасчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаРасчетаНаСервере()
	
	// Изменить состав колонок
	// - если колонок стало меньше, не удаляем (и не очищаем), а просто скрываем лишние колонки
	// - если стало больше - добавляем.
	ДобавленныеМесяцы = ДобавленныеМесяцы(ЭтаФорма);
	ЗаполнитьМесяцыРасчета(ЭтаФорма);
	
	СоздатьКолонки(ДобавленныеМесяцы);
	ПрочитатьДанныеУчетаСреднегоЗаработка(ДобавленныеМесяцы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИтоги(Форма, ИдентификаторСтроки = Неопределено)
	
	Для Каждого СтрокаТаблицы Из Форма.СреднийЗаработок Цикл
		Если ИдентификаторСтроки <> Неопределено И СтрокаТаблицы.Идентификатор <> ИдентификаторСтроки Тогда
			// Если отбор задан, обрабатываем только конкретную строку.
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.Итого = 0;
		// Обход по динамическому составу колонок по месяцам.
		Для Каждого КлючИЗначение Из Форма.МесяцыРасчета Цикл
			СтрокаТаблицы.Итого = СтрокаТаблицы.Итого + СтрокаТаблицы["Значение" + ПостфиксКолонки(КлючИЗначение.Ключ)];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(ИдентификаторСтроки)
	
	ПоискСтрок = Новый Структура("Идентификатор", ИдентификаторСтроки);
	СоздатьСтроку(ОписаниеСтрок.НайтиСтроки(ПоискСтрок)[0]);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
