
#Область ОписаниеПеременных

// Флаг подтверждения, используется при закрытии.
&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

// Хранилище передаваемых файлов.
&НаКлиенте
Перем ПомещенныеФайлы;

// Параметры загрузки для передачи между клиентскими вызовами.
&НаКлиенте
Перем ПараметрыФоновойЗагрузкиКлассификатора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Источник по умолчанию, может быть переопределен при восстановлении параметров.
	КодИсточникаЗагрузки = КодИсточникаЗагрузкиПоУмолчанию();
	//ПутьКФайламДанныхНаДиске = "";
	
	ПараметрыДлительнойОперации = Новый Структура("ИнтервалОжидания, Завершено, АдресРезультата, Идентификатор, Ошибка", 5);	
	
	ЗаполнитьТаблицуКлассификаторовДляЗагрузки();
	
	ЗагрузитьСохраненныеПараметрыИсточниковЗагрузки();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru='В веб-клиенте загрузка классификаторов не поддерживается.'"));
	Отказ = Истина;
	Возврат;
#КонецЕсли
		
	//ПодтверждениеЗакрытияФормы = Истина;
    УстановитьИзмененияВИнтерфейсе("СтраницаИсточник");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПодтверждениеЗакрытияФормы<>Истина Тогда
		ТекстПредупреждения = НСтр("ru = 'Прервать загрузку классификаторов?'");
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Завершение диалога закрытия формы.
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПараметрыДлительнойОперации.Идентификатор <> Неопределено Тогда
		ОтменитьФоновоеЗадание(ПараметрыДлительнойОперации.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КлассификаторыДляЗагрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.КлассификаторыДляЗагрузкиНаименованиеКлассификатора Тогда
		
		ТекущиеДанные = КлассификаторыДляЗагрузки.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиеДанные.Пометка = Не ТекущиеДанные.Пометка;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодИсточникаЗагрузкиПриИзменении(Элемент)
	
	УстановитьИзмененияВИнтерфейсе("СтраницаИсточник");
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКАрхивуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПутьКФайламНачалоВыбора("ПутьКАрхиву", ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПутьКФайламНачалоВыбора("ПутьККаталогу", ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьЖурналРегистрацииНажатие(Элемент)
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("Пользователь", ИмяПользователя()));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВыделитьВсе(Команда)
	
	УстановитьПометкиКлассификаторов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделитьВсе(Команда)
	
	УстановитьПометкиКлассификаторов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОчиститьСообщения();
	
	КоличествоЗагружаемых = КлассификаторыДляЗагрузки.НайтиСтроки( Новый Структура("Пометка", Истина) ).Количество();
	Если КоличествоЗагружаемых = 0 Тогда
		
		СообщениеПользователю = Нстр("ru = 'Не выбрано ни одного классификатора'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю, , "КлассификаторыДляЗагрузки");
		
		Возврат;
		
	КонецЕсли;
	
	
	Текст = НСтр("ru = 'Для загрузки классификаторов медицинского регистра
		                   |необходимо установить расширение для работы с файлами.'");
	КонтрольРасширенияРаботыСФайлами(Текст, КодИсточникаЗагрузки, АдресЗагрузки);

КонецПроцедуры

&НаКлиенте                                
Процедура Далее(Команда)    
	
	Если Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.СтраницаИсточник Тогда
		
		АдресЗагрузки = "";
		
		Если КодИсточникаЗагрузки = "АРХИВ" Тогда
			
			ИмяРеквизита = "ПутьКАрхиву";
	        АдресЗагрузки = ПутьКАрхиву;
			
		ИначеЕсли КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
			
			ИмяРеквизита = "ПутьККаталогу";
	        АдресЗагрузки = ПутьККаталогу;
			
		Иначе
			СообщениеПользователю = Нстр("ru = 'Не выбрано расположение классификаторов'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю, , "КодИсточникаЗагрузки");
			
			Возврат;
			
		КонецЕсли;
		
		Если ПустаяСтрока(АдресЗагрузки) Тогда
			
			СообщениеПользователю = Нстр("ru = 'Не указан путь'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю, , ИмяРеквизита);
			
			Возврат;
			
		КонецЕсли;
		
		// Проверим на существование файла/папки.
		Файл = Новый Файл(АдресЗагрузки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Файл", Файл);
		ДополнительныеПараметры.Вставить("КодИсточникаЗагрузки", КодИсточникаЗагрузки);
		ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
		ДополнительныеПараметры.Вставить("СообщениеПользователю", "");
		
		Если КодИсточникаЗагрузки = "АРХИВ" Тогда
			
			ДополнительныеПараметры.СообщениеПользователю = Нстр("ru = 'Файл не найден.
				|Проверьте правильность указания пути'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиАдресаЗагрузки", ЭтотОбъект, ДополнительныеПараметры);
			Файл.НачатьПроверкуСуществования(ОписаниеОповещения);	
				
		ИначеЕсли КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
			
			ДополнительныеПараметры.СообщениеПользователю = Нстр("ru = 'Каталог не найден.
				|Проверьте правильность указания пути'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиАдресаЗагрузки", ЭтотОбъект, ДополнительныеПараметры);
			Файл.НачатьПроверкуСуществования(ОписаниеОповещения);	
				
		Иначе 
			
			ПослеПроверкиЭтоФайлКаталог(Истина, ДополнительныеПараметры);
			
		КонецЕсли;

	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиАдресаЗагрузки(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДополнительныеПараметры.СообщениеПользователю, , ДополнительныеПараметры.ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	Файл = ДополнительныеПараметры.Файл;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиЭтоФайлКаталог", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.КодИсточникаЗагрузки = "АРХИВ" Тогда
		Файл.НачатьПроверкуЭтоФайл(ОписаниеОповещения);
	ИначеЕсли ДополнительныеПараметры.КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиЭтоФайлКаталог(ЭтоФайлКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоФайлКаталог Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДополнительныеПараметры.СообщениеПользователю, , ДополнительныеПараметры.ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	УстановитьИзмененияВИнтерфейсе("СтраницаВыбор");
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ТекстОписанияЗагрузки = "";
	
	Если Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.СтраницаВыбор Тогда
		
		УстановитьИзмененияВИнтерфейсе("СтраницаИсточник");
		
	ИначеЕсли Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПрерватьЗагрузкуБезЗакрытияФормыЗавершение", ЭтотОбъект);
		
		Текст = НСтр("ru = 'Прервать загрузку классификаторов?'");
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.АварийноеЗавершение Тогда
		
		УстановитьИзмененияВИнтерфейсе("СтраницаВыбор");
		
	ИначеЕсли Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.УспешноеЗавершение Тогда
		
		УстановитьИзмененияВИнтерфейсе("СтраницаВыбор");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПрерватьЗагрузкуБезЗакрытияФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УстановитьИзмененияВИнтерфейсе("СтраницаВыбор");
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

 // В зависимости от текущей страницы устанавливает доступность тех или иных полей для пользователя.
 //
&НаКлиенте
Процедура УстановитьИзмененияВИнтерфейсе(ИмяТекущейСтраницы)
	
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
	
	ПодтверждениеЗакрытияФормы = Истина;
	
	Если Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.СтраницаИсточник Тогда
		
		Элементы.КоманднаяПанельСтраницы.ТекущаяСтраница = Элементы.КоманднаяПанельНачало;
	    Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
		Если КодИсточникаЗагрузки = "АРХИВ" Тогда
			Элементы.СтраницыПуть.ТекущаяСтраница = Элементы.СтраницаАрхив;
			
		ИначеЕсли КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
			Элементы.СтраницыПуть.ТекущаяСтраница = Элементы.СтраницаКаталог;
			
		Иначе
			Элементы.СтраницыПуть.ТекущаяСтраница = Элементы.СтраницаПутьПусто;
			
		КонецЕсли;		
		
	ИначеЕсли Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.СтраницаВыбор Тогда
		
		Элементы.КоманднаяПанельСтраницы.ТекущаяСтраница = Элементы.КоманднаяПанельЗагрузить;
		Элементы.Загрузить.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки Тогда
		
		ПодтверждениеЗакрытияФормы = Неопределено;
		
		Элементы.КоманднаяПанельСтраницы.ТекущаяСтраница = Элементы.КоманднаяПанельПроцесс;
		Элементы.КнопкаПрерватьПроцесс.КнопкаПоУмолчанию = Истина;		
		
	ИначеЕсли Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.АварийноеЗавершение Тогда
		
		Элементы.КоманднаяПанельСтраницы.ТекущаяСтраница = Элементы.КоманднаяПанельПроцесс;
		Элементы.КнопкаПрерватьПроцесс.КнопкаПоУмолчанию = Истина;		
		
	ИначеЕсли Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.УспешноеЗавершение Тогда
		
		Элементы.КоманднаяПанельСтраницы.ТекущаяСтраница = Элементы.КоманднаяПанельЗавершение;
		Элементы.КнопкаГотово.КнопкаПоУмолчанию = Истина;		
		ТекущийЭлемент = Элементы.КнопкаГотово;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КодИсточникаЗагрузкиПоУмолчанию()
	
	Возврат "КАТАЛОГ";
	
КонецФункции

&НаСервере
Процедура СохранитьПараметрыЗагрузки()
	
	МассивЗагружаемыхКлассификаторов = Новый Массив;
	
	Для Каждого ЭлементКлассификатор Из КлассификаторыДляЗагрузки Цикл
		Если ЭлементКлассификатор.Пометка Тогда
			МассивЗагружаемыхКлассификаторов.Добавить(ЭлементКлассификатор.КодКлассификатора);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПараметрыЗагрузкиКлассификаторовФРМР", "ЗагружаемыеКлассификаторыМедРегистра", МассивЗагружаемыхКлассификаторов);
	
	Источник = Новый Структура("ИсточникДанныхДляЗагрузки, ПутьКФайламДанныхНаДискеАрхив, ПутьКФайламДанныхНаДискеКаталог");
	Источник.ИсточникДанныхДляЗагрузки		 = КодИсточникаЗагрузки;
	Источник.ПутьКФайламДанныхНаДискеАрхив	 = ПутьКАрхиву;
	Источник.ПутьКФайламДанныхНаДискеКаталог = ПутьККаталогу;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПараметрыЗагрузкиКлассификаторовФРМР", "ИсточникКлассификаторовФРМР", Источник);
	
КонецПроцедуры

// Заполняет переданную таблицу значений по значениям таблицы Классификаторов.
// Выбирается код, наименование и сокращение типа объекта.
//
&НаСервере
Процедура ЗаполнитьТаблицуКлассификаторовДляЗагрузки()
	
	ЗагружаемыеКлассификаторы = ЗагрузитьНастройкуЗагрузкиКлассификаторовМедРегистра("ЗагружаемыеКлассификаторыМедРегистра");
	
	КлассификаторыДляЗагрузки.Очистить();
	
	КлассификаторыМедрегистра = КлассификаторовыМедРегистра();
	
	Пока КлассификаторыМедрегистра.Следующий() Цикл 
		
		НоваяСтрока = КлассификаторыДляЗагрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,КлассификаторыМедрегистра);
		
		Если ЗагружаемыеКлассификаторы <> Неопределено Тогда

			Если ЗагружаемыеКлассификаторы.Найти(КлассификаторыМедрегистра.КодКлассификатора) <> Неопределено Тогда
				НоваяСтрока.Пометка = Истина;
			Иначе
				НоваяСтрока.Пометка = Ложь;
			КонецЕсли;
		Иначе
			НоваяСтрока.Пометка = Истина; // Если в первый раз то отмечаем всех.
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выбераем элементы справочника КлассификаторыМедРегистра.
//
&НаСервереБезКонтекста
Функция КлассификаторовыМедРегистра()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторыМедРегистра.Наименование КАК НаименованиеКлассификатора,
	|	КлассификаторыМедРегистра.Код КАК КодКлассификатора
	|ИЗ
	|	Справочник.КлассификаторыМедРегистра КАК КлассификаторыМедРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеКлассификатора";
	
	Возврат Запрос.Выполнить().Выбрать();			 

КонецФункции 

&НаСервере
Процедура ЗагрузитьСохраненныеПараметрыИсточниковЗагрузки()
	
	Источник = ЗагрузитьНастройкуЗагрузкиКлассификаторовМедРегистра("ИсточникКлассификаторовФРМР");
	
	Если Источник <> Неопределено Тогда
		
		КодИсточникаЗагрузки = Источник.ИсточникДанныхДляЗагрузки;
		Источник.Свойство("ПутьКФайламДанныхНаДискеАрхив", ПутьКАрхиву);
		Источник.Свойство("ПутьКФайламДанныхНаДискеКаталог", ПутьККаталогу);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает значение из системного хранилища настроек ИБ.
//
&НаСервереБезКонтекста
Функция ЗагрузитьНастройкуЗагрузкиКлассификаторовМедРегистра(КлючНастроек)
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПараметрыЗагрузкиКлассификаторовФРМР", КлючНастроек);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьФоновоеЗадание(Знач Идентификатор)
	
	Если Идентификатор <> Неопределено Тогда
		Попытка
			ДлительныеОперации.ОтменитьВыполнениеЗадания(Идентификатор);
		Исключение
			// Действие не требуется, запись в журнал регистрации уже произведена.
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиКлассификаторов(Знач Пометка)
	
	Для Каждого Элемент Из КлассификаторыДляЗагрузки Цикл
		Элемент.Пометка = Истина;
	КонецЦикла;
	
	// Устанавливаем пометки только для видимых строк.
	ЭлементТаблицы = Элементы.КлассификаторыДляЗагрузки;
	Для Каждого СтрокаКлассивикатора Из КлассификаторыДляЗагрузки Цикл
		Если ЭлементТаблицы.ДанныеСтроки( СтрокаКлассивикатора.ПолучитьИдентификатор() ) <> Неопределено Тогда
			СтрокаКлассивикатора.Пометка = Пометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПутьКФайламНачалоВыбора(ИмяРеквизита, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		
		Заголовок = НСтр("ru = 'Каталог с файлами классификаторов'");
		РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога;
		
	ИначеЕсли КодИсточникаЗагрузки = "АРХИВ" Тогда
		
		Заголовок = НСтр("ru = 'Архив с файлами классификаторов'");
		РежимДиалога = РежимДиалогаВыбораФайла.Открытие;
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не определен источник данных.'"));
		Возврат;
		
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ПустьКФайламВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Режим",       РежимДиалога);
	Оповещение.ДополнительныеПараметры.Вставить("Заголовок",   Заголовок);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяРеквизита",   ИмяРеквизита);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, , Ложь);   
	
КонецПроцедуры

// Завершение немодального выбора каталога.
//
&НаКлиенте
Процедура ПустьКФайламВыбораЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		// Отказ от установки расширения.
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расширение для работы с файлами не подключено.'"));
		Возврат;
	КонецЕсли;
	
	РежимДиалога = ДополнительныеПараметры.Режим;
	ПутьКДанным  = ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита];
	Заголовок    = ДополнительныеПараметры.Заголовок;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалога);
	Если Заголовок <> Неопределено Тогда
		Диалог.Заголовок = Заголовок;
	КонецЕсли;
	
	Если РежимДиалога = РежимДиалогаВыбораФайла.Открытие Тогда
		Диалог.Фильтр =  НСтр("ru = 'Архив '") + "(*.zip)|*.zip";
	КонецЕсли;
	
	Диалог.Каталог = ПутьКДанным;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлПослеПодключенияРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
	//Если Диалог.Выбрать() Тогда
	//	Если РежимДиалога = РежимДиалогаВыбораФайла.Открытие Тогда
	//		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] = Диалог.ПолноеИмяФайла;
	//	Иначе	
	//		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] = Диалог.Каталог;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлПослеПодключенияРасширенияРаботыСФайламиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Или ВыбранныеФайлы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныеФайлы[0];
	
КонецПроцедуры

#Область Загрузка

&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайлами(Знач ТекстПредложения, Знач КодИсточника, Знач АдресИсточника)
	
	Оповещение = Новый ОписаниеОповещения("КонтрольРасширенияРаботыСФайламиПродолжение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("КодИсточникаЗагрузки", КодИсточника);
	Оповещение.ДополнительныеПараметры.Вставить("АдресЗагрузки",        АдресИсточника);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

// Завершение диалога предложения расширения для работы с файлами.
&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайламиПродолжение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонтрольРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расширение для работы с файлами не подключено.'"));
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКлассификаторы(ДополнительныеПараметры.КодИсточникаЗагрузки, ДополнительныеПараметры.АдресЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторы(Знач КодИсточника,Знач КаталогДанных)
	
	// Подготавливаем массив имен объектов для загрузки.
	КодыКлассификаторов = Новый Массив;
	Для Каждого ЭлементМР Из КлассификаторыДляЗагрузки Цикл
		Если ЭлементМр.Пометка Тогда
			КодыКлассификаторов.Добавить(ЭлементМР.КодКлассификатора);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗагрузки = Новый Структура("КодИсточникаЗагрузки, ПолеОшибки");
	ПараметрыЗагрузки.КодИсточникаЗагрузки = КодИсточника;
	ПараметрыЗагрузки.ПолеОшибки = ?(КодИсточника = "АРХИВ", "ПутьКАрхиву", "ПутьККаталогу");
	
	РезультатАнализа = Новый Структура;
	РезультатАнализа.Вставить("КодыРегионов", КодыКлассификаторов);
	РезультатАнализа.Вставить("ЕстьВсеФайлы", Истина);
	РезультатАнализа.Вставить("Ошибки",       Неопределено);
	РезультатАнализа.Вставить("ФайлыПоРегионам", Новый Соответствие);
	
	ПроверитьДоступностьФайловКлассификаторов(РезультатАнализа, КодыКлассификаторов, КаталогДанных, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторыЗавершение(РезультатАнализа, КодИсточника)
	
	Если РезультатАнализа.Ошибки <> Неопределено Тогда
		// Не хватает файлов для загрузки по указанным режимам.
		ОчиститьСообщения();
		УстановитьИзмененияВИнтерфейсе("СтраницаИсточник");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(РезультатАнализа.Ошибки);
		Возврат;
		
	КонецЕсли;
	
	РезультатАнализа.Вставить("Режим", КодИсточника);
	
	ЗапуститьФоновуюЗагрузку(РезультатАнализа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьФайловКлассификаторов(Результат, Знач КодыКлассификаторов, Знач РабочийКаталог, Знач ПараметрыЗагрузки)
	
	ШаблонОшибки = НСтр("ru = 'Не найден файл ""%1""'");
	
	Если ПараметрыЗагрузки.КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог);
		
		Результат.ФайлыПоРегионам["*"] = Новый Массив;
	
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
		ДополнительныеПараметры.Вставить("ШаблонОшибки", ШаблонОшибки);
		ДополнительныеПараметры.Вставить("КодыКлассификаторов", КодыКлассификаторов);
		ДополнительныеПараметры.Вставить("ИндексКода", 0);
		ДополнительныеПараметры.Вставить("ИмяФайла", "");
		ДополнительныеПараметры.Вставить("РабочийКаталог", РабочийКаталог);
		ДополнительныеПараметры.Вставить("Результат", Результат);
		
		Если КодыКлассификаторов.Количество() > 0 Тогда 
			
			ИмяКлассификатора = КодыКлассификаторов[0];
			ДополнительныеПараметры.ИмяФайла = СтрЗаменить(ИмяКлассификатора,"ArrayOf","")+".XML";
			
			НайтиФайл(РабочийКаталог, ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры);
			
		Иначе 
			
			ЗагрузитьКлассификаторыЗавершение(Результат, ПараметрыЗагрузки.КодИсточникаЗагрузки);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗагрузки.КодИсточникаЗагрузки = "АРХИВ" Тогда
		
		Файл = Новый Файл(РабочийКаталог);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
		ДополнительныеПараметры.Вставить("ШаблонОшибки", ШаблонОшибки);
		ДополнительныеПараметры.Вставить("РабочийКаталог", РабочийКаталог);
		ДополнительныеПараметры.Вставить("Результат", Результат);
		ДополнительныеПараметры.Вставить("Файл", Файл);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаЗагрузки", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Поиск первого файла по маске без учета регистра (особенностей операционной системы).
//
// Параметры:
//     Каталог  - Строка - каталог, в котором ищется файл.
//     ИмяФайла - Строка - имя искомого файла.
//
// Возвращаемое значение:
//     Структура - описание найденного файла. Содержит поля:
//         * Существует       - Булево - флаг того, что указанный файл существует.
//         * Имя              - Строка - характеристика найденного файла, см. описания типа Файл.
//         * ИмяБезРасширения - Строка - характеристика найденного файла, см. описания типа Файл.
//         * ПолноеИмя        - Строка - характеристика найденного файла, см. описания типа Файл.
//         * Путь             - Строка - характеристика найденного файла, см. описания типа Файл.
//         * Расширение       - Строка - характеристика найденного файла, см. описания типа Файл.
//
&НаКлиенте
Процедура НайтиФайл(Знач Каталог, Знач ИмяФайла, ДополнительныеПараметры) 
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	НеУчитыватьРегистр = Платформа = ТипПлатформы.Windows_x86 Или Платформа = ТипПлатформы.Windows_x86_64;
	
	Если НеУчитыватьРегистр Тогда
		
		Маска = ВРег(ИмяФайла);
		
	Иначе
		
		Маска = "";
		Для Позиция = 1 По СтрДлина(ИмяФайла) Цикл
			
			Символ = Сред(ИмяФайла, Позиция, 1);
			ВерхнийРегистр = ВРег(Символ);
			НижнийРегистр  = НРег(Символ);
			Если ВерхнийРегистр = НижнийРегистр Тогда
				
				Маска = Маска + Символ;
				
			Иначе
				
				Маска = Маска + "[" + ВерхнийРегистр + НижнийРегистр + "]";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НайтиФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПоискФайлов(ОписаниеОповещения, Каталог, Маска);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Результат 			= ДополнительныеПараметры.Результат;
	ПараметрыЗагрузки 	= ДополнительныеПараметры.ПараметрыЗагрузки;
	РабочийКаталог 		= ДополнительныеПараметры.РабочийКаталог;
	ШаблонОшибки 		= ДополнительныеПараметры.ШаблонОшибки;
	ИмяФайла 			= ДополнительныеПараметры.ИмяФайла;
	КодыКлассификаторов = ДополнительныеПараметры.КодыКлассификаторов;
	ИндексКода 			= ДополнительныеПараметры.ИндексКода;
	
	Если НайденныеФайлы.Количество() > 0 Тогда
		
		Результат.ФайлыПоРегионам["*"].Добавить(НайденныеФайлы[0].ПолноеИмя);
		
	Иначе
		
		Результат.ЕстьВсеФайлы = Ложь;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Результат.Ошибки, 
			ПараметрыЗагрузки.ПолеОшибки, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяФайла), 
			"");
		
	КонецЕсли;
	
	Если ИндексКода + 1 < КодыКлассификаторов.Количество() Тогда 
		
		ИмяКлассификатора = КодыКлассификаторов[ИндексКода + 1];
		ДополнительныеПараметры.ИмяФайла = СтрЗаменить(ИмяКлассификатора,"ArrayOf","")+".XML";
		ДополнительныеПараметры.ИндексКода = ИндексКода + 1;
		ДополнительныеПараметры.Результат = Результат;
	
		НайтиФайл(РабочийКаталог, ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры);
		
	Иначе 
		
		ЗагрузитьКлассификаторыЗавершение(Результат, ПараметрыЗагрузки.КодИсточникаЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаЗагрузки(Существует, ДополнительныеПараметры) Экспорт
	
	Результат 			= ДополнительныеПараметры.Результат;
	ПараметрыЗагрузки 	= ДополнительныеПараметры.ПараметрыЗагрузки;
	РабочийКаталог 		= ДополнительныеПараметры.РабочийКаталог;
	ШаблонОшибки 		= ДополнительныеПараметры.ШаблонОшибки;
	Файл 				= ДополнительныеПараметры.Файл;
	
	Если Существует Тогда
		
		Результат.ФайлыПоРегионам["*"] = Новый Массив;
		Результат.ФайлыПоРегионам["*"].Добавить(Файл.ПолноеИмя);
		
	Иначе
		
		Результат.ЕстьВсеФайлы = Ложь;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Результат.Ошибки, 
			ПараметрыЗагрузки.ПолеОшибки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, РабочийКаталог),
			"");
		
	КонецЕсли;
	
	ЗагрузитьКлассификаторыЗавершение(Результат, ПараметрыЗагрузки.КодИсточникаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузку(Знач ПараметрыЗагрузки)
	
	УстановитьИзмененияВИнтерфейсе("ОжиданиеЗагрузки");	
	
	ТекстСостоянияЗагрузки = НСтр("ru = 'Передача файлов на сервер приложения...'");
	
	ПараметрыФоновойЗагрузкиКлассификатора = ПараметрыЗагрузки;
	
	ПодключитьОбработчикОжидания("ЗапуститьФоновуюЗагрузкуПродолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуПродолжение()
	
	ПараметрыЗагрузки = ПараметрыФоновойЗагрузкиКлассификатора;
	ПараметрыФоновойЗагрузкиКлассификатора = Неопределено;
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		// Возвращаемся на страницу выбора.
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборРегионовЗагрузки;
		Возврат;
		
	КонецЕсли;
		
	// Очищаем возможно ранее помещенные файлы.
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив") Тогда
		
		Для Каждого Описание Из ПомещенныеФайлы Цикл
			
			Если Не ПустаяСтрока(Описание.Хранение) Тогда
				
				УдалитьИзВременногоХранилища(Описание.Хранение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПомещенныеФайлы.Очистить();
		
	КонецЕсли;
	
	// Список передаваемых на сервер файлов.
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого КлючЗначение Из ПараметрыЗагрузки.ФайлыПоРегионам Цикл
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			
			Для Каждого ИмяФайла Из КлючЗначение.Значение Цикл
				
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла) );
				
			КонецЦикла;
			
		Иначе
			
			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(КлючЗначение.Значение) );
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьФоновуюЗагрузкуПослеПомещенияФайлов", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ПомещенныеФайлы = Неопределено Тогда 
		ПомещенныеФайлы = Новый Массив;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() > 0 Тогда 
		
		ДополнительныеПараметры.Вставить("ПомещенныеФайлы", ПомещенныеФайлы);
		ДополнительныеПараметры.Вставить("Позиция", 0);
		
		ПолучитьУниверсальноеВремяИзмененияПомещенныхФайлов(ДополнительныеПараметры);
		
	Иначе 
		
		ЗапуститьФоновуюЗагрузкуЗавершение(ПомещенныеФайлы, ДополнительныеПараметры.ПараметрыЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУниверсальноеВремяИзмененияПомещенныхФайлов(ДополнительныеПараметры)
	
	ПомещенныеФайлы = ДополнительныеПараметры.ПомещенныеФайлы;
	Позиция 		= ДополнительныеПараметры.Позиция;
	
	Описание = ПомещенныеФайлы[Позиция];
	Файл = Новый Файл(Описание.Имя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьУниверсальноеВремяИзмененияПомещенныхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУниверсальноеВремяИзмененияПомещенныхФайловЗавершение(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ПомещенныеФайлы = ДополнительныеПараметры.ПомещенныеФайлы;
	Позиция 		= ДополнительныеПараметры.Позиция;
	
	Описание = ПомещенныеФайлы[Позиция];
	
	ДанныеФайла = Новый Структура("Имя, Хранение");
	ЗаполнитьЗначенияСвойств(ДанныеФайла, Описание);
	ДанныеФайла.Вставить("ВремяИзменения", ВремяИзменения);
	
	ПомещенныеФайлы[Позиция] = ДанныеФайла;
	
	Если Позиция < ПомещенныеФайлы.ВГраница() Тогда
		
		ДополнительныеПараметры.ПомещенныеФайлы = ПомещенныеФайлы;
	    ДополнительныеПараметры.Позиция = Позиция + 1;
		
		ПолучитьУниверсальноеВремяИзмененияПомещенныхФайлов(ДополнительныеПараметры);
		
	Иначе 
		
		ЗапуститьФоновуюЗагрузкуЗавершение(ПомещенныеФайлы, ДополнительныеПараметры.ПараметрыЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуЗавершение(ПомещенныеФайлы, ПараметрыЗагрузки)
	
	// Запуск фонового по загрузке из переданных файлов.
	Если ЭтоАдресВременногоХранилища(ПараметрыДлительнойОперации.АдресРезультата) Тогда
		
		УдалитьИзВременногоХранилища(ПараметрыДлительнойОперации.АдресРезультата);
		
	КонецЕсли;
	
	ПараметрыДлительнойОперации.АдресРезультата = Неопределено;
	
	ЗапуститьФоновуюЗагрузкуНаСервере(ПараметрыЗагрузки.КодыРегионов, ПомещенныеФайлы, ПараметрыЗагрузки.Режим);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновуюЗагрузкуНаСервере(Знач КодыРегионов, Знач ОписаниеФайловЗагрузки, Знач Режим = Неопределено)
	
	СохранитьПараметрыЗагрузки();
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(КодыРегионов);
	
	// Файлы преобразуем в двоичные данные - хранилище не может быть разделено с сеансом фонового задания.
	ОписаниеФайлов = Новый Массив;
	Для Каждого Описание Из ОписаниеФайловЗагрузки Цикл
		
		ДанныеФайла = Новый Структура("Имя, ВремяИзменения");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Описание);
		ДанныеФайла.Вставить("Хранение", ПолучитьИзВременногоХранилища(Описание.Хранение));
		
		ОписаниеФайлов.Добавить(ДанныеФайла);
		
	КонецЦикла;
	
	ПараметрыМетода.Добавить(ОписаниеФайлов);
	
	ПараметрыМетода.Добавить(Режим);
	
	ПараметрыДлительнойОперации.Идентификатор   = Неопределено;
	ПараметрыДлительнойОперации.Завершено       = Истина;
	ПараметрыДлительнойОперации.АдресРезультата = Неопределено;
	ПараметрыДлительнойОперации.Ошибка          = Неопределено;
	
	Попытка
		
		Если Режим = "АРХИВ" Тогда
			ИмяМетода = "Справочники.КлассификаторыМедРегистра.ЗагрузитьКлассификаторыМедРегистраИзАрхива";
		Иначе
			ИмяМетода = "Справочники.КлассификаторыМедРегистра.ЗагрузитьКлассификаторыМедРегистраИзКаталога";
		КонецЕсли;	
		
		РезультатЗапуска = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
														ИмяМетода, 
														ПараметрыМетода, 
														НСтр("ru = 'Загрузка классификаторов Мед. Регистра'") );
				
	Исключение
		
		ПараметрыДлительнойОперации.Ошибка = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		Возврат;
		
	КонецПопытки;
	
	ПараметрыДлительнойОперации.Идентификатор   = РезультатЗапуска.ИдентификаторЗадания;
	ПараметрыДлительнойОперации.Завершено       = РезультатЗапуска.ЗаданиеВыполнено;
	ПараметрыДлительнойОперации.АдресРезультата = РезультатЗапуска.АдресХранилища;
	
КонецПроцедуры

&НаСервере
Функция СостояниеФоновогоЗадания()
	
	Результат = Новый Структура("Прогресс, Завершено, Ошибка");
	
	Результат.Ошибка = "";
	
	Если ПараметрыДлительнойОперации.Идентификатор = Неопределено Тогда
		
		Результат.Завершено = Истина;
		Результат.Прогресс  = Неопределено;
		Результат.Ошибка    = ПараметрыДлительнойОперации.Ошибка;
		
	Иначе
		
		Попытка
			
			Результат.Завершено = ДлительныеОперации.ЗаданиеВыполнено(ПараметрыДлительнойОперации.Идентификатор);
			Результат.Прогресс  = ДлительныеОперации.ПрочитатьПрогресс(ПараметрыДлительнойОперации.Идентификатор);
			
		Исключение
			
			Результат.Ошибка = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
			
		КонецПопытки
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОжиданиеДлительнойОперации()
	
	// Обновим статус
	Состояние = СостояниеФоновогоЗадания();
	
	Если Не ПустаяСтрока(Состояние.Ошибка) Тогда
		
		УстановитьИзмененияВИнтерфейсе("АварийноеЗавершение");
		Возврат;
		
	ИначеЕсли Состояние.Завершено Тогда
		
		ТекстОписанияЗагрузки = НСтр("ru = 'Классификаторы успешно загружены.'");
		УстановитьИзмененияВИнтерфейсе("УспешноеЗавершение");	
		
		Оповестить("ЗагруженыКлассификаторыМедРегистра", , ЭтотОбъект);
		ПодтверждениеЗакрытияФормы = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	// Процесс продолжается
	Если ТипЗнч(Состояние.Прогресс) = Тип("Структура") Тогда
		
		ТекстСостоянияЗагрузки = Состояние.Прогресс.Текст;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", ПараметрыДлительнойОперации.ИнтервалОжидания, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
